
CV_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d64  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008f18  08008f18  00018f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009158  08009158  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a64  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b80  20000b80  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111fd  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a73  00000000  00000000  00031349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00033dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00034ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025837  00000000  00000000  000356c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fc1  00000000  00000000  0005aeff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5fb8  00000000  00000000  0006bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141e78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003938  00000000  00000000  00141ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008efc 	.word	0x08008efc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008efc 	.word	0x08008efc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <step>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

void step(int x, int y, bool leftBtn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];
	if(leftBtn) {
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <step+0x1a>
		buff[0] = 0x01; // stiskni leve tlacitko 0x00
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	753b      	strb	r3, [r7, #20]
 8000ea8:	e001      	b.n	8000eae <step+0x1e>
	} else {
		buff[0] = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	753b      	strb	r3, [r7, #20]
	}

	buff[1] = (int8_t)(x); // posun v ose X
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	757b      	strb	r3, [r7, #21]
	buff[2] = (int8_t)(y); // posun v ose Y
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	75bb      	strb	r3, [r7, #22]
	buff[3] = 0; // bez scrollu
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75fb      	strb	r3, [r7, #23]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <step+0x54>)
 8000ec8:	f004 ff78 	bl	8005dbc <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <step+0x54>)
 8000ece:	f004 ffa5 	bl	8005e1c <USBD_HID_GetPollingInterval>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fc9b 	bl	8001810 <HAL_Delay>

}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000184 	.word	0x20000184

08000ee8 <circle>:

void circle(uint32_t radius)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 101; i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef4:	e08b      	b.n	800100e <circle+0x126>
		int32_t sx = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
		int32_t sy = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
		float x = radius * cos(M_PI*i/50);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fab8 	bl	8000474 <__aeabi_ui2d>
 8000f04:	4604      	mov	r4, r0
 8000f06:	460d      	mov	r5, r1
 8000f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f0a:	f7ff fac3 	bl	8000494 <__aeabi_i2d>
 8000f0e:	a344      	add	r3, pc, #272	; (adr r3, 8001020 <circle+0x138>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff fb28 	bl	8000568 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b40      	ldr	r3, [pc, #256]	; (8001028 <circle+0x140>)
 8000f26:	f7ff fc49 	bl	80007bc <__aeabi_ddiv>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	ec43 2b17 	vmov	d7, r2, r3
 8000f32:	eeb0 0a47 	vmov.f32	s0, s14
 8000f36:	eef0 0a67 	vmov.f32	s1, s15
 8000f3a:	f006 ff41 	bl	8007dc0 <cos>
 8000f3e:	ec53 2b10 	vmov	r2, r3, d0
 8000f42:	4620      	mov	r0, r4
 8000f44:	4629      	mov	r1, r5
 8000f46:	f7ff fb0f 	bl	8000568 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fdcb 	bl	8000aec <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	61bb      	str	r3, [r7, #24]
		float y = radius * sin(M_PI*i/50);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fa8a 	bl	8000474 <__aeabi_ui2d>
 8000f60:	4604      	mov	r4, r0
 8000f62:	460d      	mov	r5, r1
 8000f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f66:	f7ff fa95 	bl	8000494 <__aeabi_i2d>
 8000f6a:	a32d      	add	r3, pc, #180	; (adr r3, 8001020 <circle+0x138>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fafa 	bl	8000568 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <circle+0x140>)
 8000f82:	f7ff fc1b 	bl	80007bc <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	ec43 2b17 	vmov	d7, r2, r3
 8000f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f92:	eef0 0a67 	vmov.f32	s1, s15
 8000f96:	f006 ff67 	bl	8007e68 <sin>
 8000f9a:	ec53 2b10 	vmov	r2, r3, d0
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff fae1 	bl	8000568 <__aeabi_dmul>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff fd9d 	bl	8000aec <__aeabi_d2f>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	617b      	str	r3, [r7, #20]
		int32_t dx = sx - x;
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fcc:	ee17 3a90 	vmov	r3, s15
 8000fd0:	613b      	str	r3, [r7, #16]
		int32_t dy = sy - y;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe8:	ee17 3a90 	vmov	r3, s15
 8000fec:	60fb      	str	r3, [r7, #12]
		step(dx, dy, true);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	6938      	ldr	r0, [r7, #16]
 8000ff4:	f7ff ff4c 	bl	8000e90 <step>
		sx = sx - dx;
 8000ff8:	6a3a      	ldr	r2, [r7, #32]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	623b      	str	r3, [r7, #32]
		sy = sy - dy;
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 101; i++){
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	3301      	adds	r3, #1
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	f77f af70 	ble.w	8000ef6 <circle+0xe>
	}
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bdb0      	pop	{r4, r5, r7, pc}
 8001020:	54442d18 	.word	0x54442d18
 8001024:	400921fb 	.word	0x400921fb
 8001028:	40490000 	.word	0x40490000
 800102c:	00000000 	.word	0x00000000

08001030 <halfCircle>:

void halfCircle(uint32_t radius){
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 101; i++){
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
 800103c:	e09d      	b.n	800117a <halfCircle+0x14a>
		bool butt = false;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(i < 25 || i > 75){
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	2b18      	cmp	r3, #24
 8001048:	dd02      	ble.n	8001050 <halfCircle+0x20>
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	2b4b      	cmp	r3, #75	; 0x4b
 800104e:	dd03      	ble.n	8001058 <halfCircle+0x28>
			butt = true;
 8001050:	2301      	movs	r3, #1
 8001052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001056:	e002      	b.n	800105e <halfCircle+0x2e>
		}else{
			butt = false;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
		int32_t sx = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
		int32_t sy = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
		float x = radius * cos(M_PI*i/50);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fa04 	bl	8000474 <__aeabi_ui2d>
 800106c:	4604      	mov	r4, r0
 800106e:	460d      	mov	r5, r1
 8001070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001072:	f7ff fa0f 	bl	8000494 <__aeabi_i2d>
 8001076:	a346      	add	r3, pc, #280	; (adr r3, 8001190 <halfCircle+0x160>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa74 	bl	8000568 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b42      	ldr	r3, [pc, #264]	; (8001198 <halfCircle+0x168>)
 800108e:	f7ff fb95 	bl	80007bc <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b17 	vmov	d7, r2, r3
 800109a:	eeb0 0a47 	vmov.f32	s0, s14
 800109e:	eef0 0a67 	vmov.f32	s1, s15
 80010a2:	f006 fe8d 	bl	8007dc0 <cos>
 80010a6:	ec53 2b10 	vmov	r2, r3, d0
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff fa5b 	bl	8000568 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd17 	bl	8000aec <__aeabi_d2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	617b      	str	r3, [r7, #20]
		float y = radius * sin(M_PI*i/50);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff f9d6 	bl	8000474 <__aeabi_ui2d>
 80010c8:	4604      	mov	r4, r0
 80010ca:	460d      	mov	r5, r1
 80010cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ce:	f7ff f9e1 	bl	8000494 <__aeabi_i2d>
 80010d2:	a32f      	add	r3, pc, #188	; (adr r3, 8001190 <halfCircle+0x160>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fa46 	bl	8000568 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <halfCircle+0x168>)
 80010ea:	f7ff fb67 	bl	80007bc <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ec43 2b17 	vmov	d7, r2, r3
 80010f6:	eeb0 0a47 	vmov.f32	s0, s14
 80010fa:	eef0 0a67 	vmov.f32	s1, s15
 80010fe:	f006 feb3 	bl	8007e68 <sin>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff fa2d 	bl	8000568 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fce9 	bl	8000aec <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	613b      	str	r3, [r7, #16]
		int32_t dx = sx - x;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	edd7 7a05 	vldr	s15, [r7, #20]
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001134:	ee17 3a90 	vmov	r3, s15
 8001138:	60fb      	str	r3, [r7, #12]
		int32_t dy = sy - y;
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	edd7 7a04 	vldr	s15, [r7, #16]
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	60bb      	str	r3, [r7, #8]
		step(dx, dy, butt);
 8001156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800115a:	461a      	mov	r2, r3
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fe96 	bl	8000e90 <step>
		sx = sx - dx;
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	61fb      	str	r3, [r7, #28]
		sy = sy - dy;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < 101; i++){
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	3301      	adds	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	f77f af5e 	ble.w	800103e <halfCircle+0xe>
	}
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	54442d18 	.word	0x54442d18
 8001194:	400921fb 	.word	0x400921fb
 8001198:	40490000 	.word	0x40490000

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fac4 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f858 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f8ea 	bl	8001380 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011ac:	f000 f8be 	bl	800132c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80011b0:	f006 f992 	bl	80074d8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 80011b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b8:	4826      	ldr	r0, [pc, #152]	; (8001254 <main+0xb8>)
 80011ba:	f000 fe0b 	bl	8001dd4 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d1f7      	bne.n	80011b4 <main+0x18>

		  circle(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fe8f 	bl	8000ee8 <circle>
		  step(0, 0, false);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fe5e 	bl	8000e90 <step>

		  step(-25, -100, false);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80011da:	f06f 0018 	mvn.w	r0, #24
 80011de:	f7ff fe57 	bl	8000e90 <step>
		  circle(2);
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff fe80 	bl	8000ee8 <circle>
		  step(0, 0, false);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fe4f 	bl	8000e90 <step>

		  step(70, 0, false);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2046      	movs	r0, #70	; 0x46
 80011f8:	f7ff fe4a 	bl	8000e90 <step>
		  circle(2);
 80011fc:	2002      	movs	r0, #2
 80011fe:	f7ff fe73 	bl	8000ee8 <circle>
		  step(0, 0, false);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fe42 	bl	8000e90 <step>

		  step(-35, 0, false);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001214:	f7ff fe3c 	bl	8000e90 <step>
		  step(0, 0, true);
 8001218:	2201      	movs	r2, #1
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fe37 	bl	8000e90 <step>
		  step(0, 25, true);
 8001222:	2201      	movs	r2, #1
 8001224:	2119      	movs	r1, #25
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fe32 	bl	8000e90 <step>
		  step(0, 0, false);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fe2d 	bl	8000e90 <step>

		  step(0, 50, false);
 8001236:	2200      	movs	r2, #0
 8001238:	2132      	movs	r1, #50	; 0x32
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fe28 	bl	8000e90 <step>
		  halfCircle(7);
 8001240:	2007      	movs	r0, #7
 8001242:	f7ff fef5 	bl	8001030 <halfCircle>
		  step(0, 0, false);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fe20 	bl	8000e90 <step>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 8001250:	e7b0      	b.n	80011b4 <main+0x18>
 8001252:	bf00      	nop
 8001254:	40020800 	.word	0x40020800

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	; 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f006 fda0 	bl	8007dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <SystemClock_Config+0xcc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <SystemClock_Config+0xd0>)
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012cc:	23a8      	movs	r3, #168	; 0xa8
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f80f 	bl	8003300 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e8:	f000 f93a 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2105      	movs	r1, #5
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fa70 	bl	80037f0 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001316:	f000 f923 	bl	8001560 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_USART3_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART3_UART_Init+0x4c>)
 8001364:	f002 fc64 	bl	8003c30 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f000 f8f7 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000138 	.word	0x20000138
 800137c:	40004800 	.word	0x40004800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <MX_GPIO_Init+0x1cc>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a6b      	ldr	r2, [pc, #428]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b69      	ldr	r3, [pc, #420]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a64      	ldr	r2, [pc, #400]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b62      	ldr	r3, [pc, #392]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b5e      	ldr	r3, [pc, #376]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a5d      	ldr	r2, [pc, #372]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b5b      	ldr	r3, [pc, #364]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a56      	ldr	r2, [pc, #344]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b54      	ldr	r3, [pc, #336]	; (800154c <MX_GPIO_Init+0x1cc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <MX_GPIO_Init+0x1cc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a4f      	ldr	r2, [pc, #316]	; (800154c <MX_GPIO_Init+0x1cc>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b4d      	ldr	r3, [pc, #308]	; (800154c <MX_GPIO_Init+0x1cc>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <MX_GPIO_Init+0x1cc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a48      	ldr	r2, [pc, #288]	; (800154c <MX_GPIO_Init+0x1cc>)
 800142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <MX_GPIO_Init+0x1cc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f244 0181 	movw	r1, #16513	; 0x4081
 8001444:	4842      	ldr	r0, [pc, #264]	; (8001550 <MX_GPIO_Init+0x1d0>)
 8001446:	f000 fcdd 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	4841      	ldr	r0, [pc, #260]	; (8001554 <MX_GPIO_Init+0x1d4>)
 8001450:	f000 fcd8 	bl	8001e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	483b      	ldr	r0, [pc, #236]	; (8001558 <MX_GPIO_Init+0x1d8>)
 800146a:	f000 fb07 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800146e:	2332      	movs	r3, #50	; 0x32
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147e:	230b      	movs	r3, #11
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4833      	ldr	r0, [pc, #204]	; (8001558 <MX_GPIO_Init+0x1d8>)
 800148a:	f000 faf7 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800148e:	2386      	movs	r3, #134	; 0x86
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149e:	230b      	movs	r3, #11
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	482c      	ldr	r0, [pc, #176]	; (800155c <MX_GPIO_Init+0x1dc>)
 80014aa:	f000 fae7 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014ae:	f244 0381 	movw	r3, #16513	; 0x4081
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4822      	ldr	r0, [pc, #136]	; (8001550 <MX_GPIO_Init+0x1d0>)
 80014c8:	f000 fad8 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014de:	230b      	movs	r3, #11
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4819      	ldr	r0, [pc, #100]	; (8001550 <MX_GPIO_Init+0x1d0>)
 80014ea:	f000 fac7 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_GPIO_Init+0x1d4>)
 8001506:	f000 fab9 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_GPIO_Init+0x1d4>)
 800151e:	f000 faad 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001522:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001534:	230b      	movs	r3, #11
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_GPIO_Init+0x1d4>)
 8001540:	f000 fa9c 	bl	8001a7c <HAL_GPIO_Init>

}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400
 8001554:	40021800 	.word	0x40021800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12c      	bne.n	8001638 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001628:	2307      	movs	r3, #7
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_UART_MspInit+0x8c>)
 8001634:	f000 fa22 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004800 	.word	0x40004800
 8001644:	40023800 	.word	0x40023800
 8001648:	40020c00 	.word	0x40020c00

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f89a 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <OTG_FS_IRQHandler+0x10>)
 80016a6:	f000 fd16 	bl	80020d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000660 	.word	0x20000660

080016b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001702:	f7ff ffd7 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f006 fb2d 	bl	8007d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fd47 	bl	800119c <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001710:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 800171c:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 8001720:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001724:	20000b80 	.word	0x20000b80

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f94f 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff ff04 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f967 	bl	8001a62 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f92f 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000017c 	.word	0x2000017c

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000017c 	.word	0x2000017c

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e177      	b.n	8001d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8166 	bne.w	8001d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80c0 	beq.w	8001d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_GPIO_Init+0x324>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a65      	ldr	r2, [pc, #404]	; (8001da0 <HAL_GPIO_Init+0x324>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_GPIO_Init+0x324>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a61      	ldr	r2, [pc, #388]	; (8001da4 <HAL_GPIO_Init+0x328>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_GPIO_Init+0x32c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d037      	beq.n	8001cba <HAL_GPIO_Init+0x23e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a57      	ldr	r2, [pc, #348]	; (8001dac <HAL_GPIO_Init+0x330>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d031      	beq.n	8001cb6 <HAL_GPIO_Init+0x23a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a56      	ldr	r2, [pc, #344]	; (8001db0 <HAL_GPIO_Init+0x334>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x236>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <HAL_GPIO_Init+0x338>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x232>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a54      	ldr	r2, [pc, #336]	; (8001db8 <HAL_GPIO_Init+0x33c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x22e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <HAL_GPIO_Init+0x340>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x22a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_GPIO_Init+0x344>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a51      	ldr	r2, [pc, #324]	; (8001dc4 <HAL_GPIO_Init+0x348>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x222>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a50      	ldr	r2, [pc, #320]	; (8001dc8 <HAL_GPIO_Init+0x34c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x21e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <HAL_GPIO_Init+0x350>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x21a>
 8001c92:	2309      	movs	r3, #9
 8001c94:	e012      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001c96:	230a      	movs	r3, #10
 8001c98:	e010      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	e00e      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00c      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e00a      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f002 0203 	and.w	r2, r2, #3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ccc:	4935      	ldr	r1, [pc, #212]	; (8001da4 <HAL_GPIO_Init+0x328>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfe:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d28:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d52:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	f67f ae84 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40021800 	.word	0x40021800
 8001dc4:	40021c00 	.word	0x40021c00
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40022400 	.word	0x40022400
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e38:	b08f      	sub	sp, #60	; 0x3c
 8001e3a:	af0a      	add	r7, sp, #40	; 0x28
 8001e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e10f      	b.n	8002068 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f005 fc6e 	bl	8007744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 faa9 	bl	80043de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	687e      	ldr	r6, [r7, #4]
 8001e94:	466d      	mov	r5, sp
 8001e96:	f106 0410 	add.w	r4, r6, #16
 8001e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eaa:	1d33      	adds	r3, r6, #4
 8001eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eae:	6838      	ldr	r0, [r7, #0]
 8001eb0:	f002 f980 	bl	80041b4 <USB_CoreInit>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0d0      	b.n	8002068 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fa97 	bl	8004400 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e04a      	b.n	8001f6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	333d      	adds	r3, #61	; 0x3d
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	333c      	adds	r3, #60	; 0x3c
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	b298      	uxth	r0, r3
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3344      	adds	r3, #68	; 0x44
 8001f14:	4602      	mov	r2, r0
 8001f16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3340      	adds	r3, #64	; 0x40
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3348      	adds	r3, #72	; 0x48
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	334c      	adds	r3, #76	; 0x4c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	3354      	adds	r3, #84	; 0x54
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3af      	bcc.n	8001ed8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e044      	b.n	8002008 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	3301      	adds	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	429a      	cmp	r2, r3
 8002010:	d3b5      	bcc.n	8001f7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	687e      	ldr	r6, [r7, #4]
 800201a:	466d      	mov	r5, sp
 800201c:	f106 0410 	add.w	r4, r6, #16
 8002020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800202c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002030:	1d33      	adds	r3, r6, #4
 8002032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002034:	6838      	ldr	r0, [r7, #0]
 8002036:	f002 fa2f 	bl	8004498 <USB_DevInit>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e00d      	b.n	8002068 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fb7e 	bl	8005762 <USB_DevDisconnect>

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002070 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_PCD_Start+0x1c>
 8002088:	2302      	movs	r3, #2
 800208a:	e020      	b.n	80020ce <HAL_PCD_Start+0x5e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b01      	cmp	r3, #1
 800209a:	d109      	bne.n	80020b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 f981 	bl	80043bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fb2e 	bl	8005720 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b08d      	sub	sp, #52	; 0x34
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fbec 	bl	80058ca <USB_GetMode>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 848a 	bne.w	8002a0e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fb50 	bl	80057a4 <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8480 	beq.w	8002a0c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fb3d 	bl	80057a4 <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d107      	bne.n	8002144 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f002 0202 	and.w	r2, r2, #2
 8002142:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fb2b 	bl	80057a4 <USB_ReadInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d161      	bne.n	800221c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 020f 	and.w	r2, r3, #15
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	0c5b      	lsrs	r3, r3, #17
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2b02      	cmp	r3, #2
 8002192:	d124      	bne.n	80021de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d035      	beq.n	800220c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6a38      	ldr	r0, [r7, #32]
 80021b4:	f003 f962 	bl	800547c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c4:	441a      	add	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d6:	441a      	add	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	621a      	str	r2, [r3, #32]
 80021dc:	e016      	b.n	800220c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	0c5b      	lsrs	r3, r3, #17
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d110      	bne.n	800220c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021f0:	2208      	movs	r2, #8
 80021f2:	4619      	mov	r1, r3
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f003 f941 	bl	800547c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002206:	441a      	add	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fabf 	bl	80057a4 <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002230:	f040 80a7 	bne.w	8002382 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fac4 	bl	80057ca <USB_ReadDevAllOutEpInterrupt>
 8002242:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002244:	e099      	b.n	800237a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 808e 	beq.w	800236e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fae8 	bl	8005832 <USB_ReadDevOutEPInterrupt>
 8002262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	461a      	mov	r2, r3
 800227c:	2301      	movs	r3, #1
 800227e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 feaa 	bl	8002fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	461a      	mov	r2, r3
 80022a0:	2308      	movs	r3, #8
 80022a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 ff80 	bl	80031ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c2:	461a      	mov	r2, r3
 80022c4:	2310      	movs	r3, #16
 80022c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d030      	beq.n	8002334 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	2b80      	cmp	r3, #128	; 0x80
 80022dc:	d109      	bne.n	80022f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	3304      	adds	r3, #4
 8002306:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	78db      	ldrb	r3, [r3, #3]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d108      	bne.n	8002322 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2200      	movs	r2, #0
 8002314:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f005 fb25 	bl	800796c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232e:	461a      	mov	r2, r3
 8002330:	2302      	movs	r3, #2
 8002332:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2320      	movs	r3, #32
 800234e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	461a      	mov	r2, r3
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	f47f af62 	bne.w	8002246 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fa0c 	bl	80057a4 <USB_ReadInterrupts>
 800238c:	4603      	mov	r3, r0
 800238e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002392:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002396:	f040 80db 	bne.w	8002550 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fa2d 	bl	80057fe <USB_ReadDevAllInEpInterrupt>
 80023a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023aa:	e0cd      	b.n	8002548 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80c2 	beq.w	800253c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fa53 	bl	800586e <USB_ReadDevInEPInterrupt>
 80023c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d057      	beq.n	8002484 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	2201      	movs	r2, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69f9      	ldr	r1, [r7, #28]
 80023f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023f4:	4013      	ands	r3, r2
 80023f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002404:	461a      	mov	r2, r3
 8002406:	2301      	movs	r3, #1
 8002408:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d132      	bne.n	8002478 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	334c      	adds	r3, #76	; 0x4c
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4403      	add	r3, r0
 8002432:	3348      	adds	r3, #72	; 0x48
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4419      	add	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4403      	add	r3, r0
 8002446:	334c      	adds	r3, #76	; 0x4c
 8002448:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	2b00      	cmp	r3, #0
 800244e:	d113      	bne.n	8002478 <HAL_PCD_IRQHandler+0x3a2>
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3354      	adds	r3, #84	; 0x54
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002470:	461a      	mov	r2, r3
 8002472:	2101      	movs	r1, #1
 8002474:	f003 fa5a 	bl	800592c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f005 f9ef 	bl	8007862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249a:	461a      	mov	r2, r3
 800249c:	2308      	movs	r3, #8
 800249e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	461a      	mov	r2, r3
 80024b8:	2310      	movs	r3, #16
 80024ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d2:	461a      	mov	r2, r3
 80024d4:	2340      	movs	r3, #64	; 0x40
 80024d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d023      	beq.n	800252a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e4:	6a38      	ldr	r0, [r7, #32]
 80024e6:	f002 f93b 	bl	8004760 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	3338      	adds	r3, #56	; 0x38
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	78db      	ldrb	r3, [r3, #3]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f005 fa3c 	bl	8007990 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002524:	461a      	mov	r2, r3
 8002526:	2302      	movs	r3, #2
 8002528:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fcc3 	bl	8002ec2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f af2e 	bne.w	80023ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 f925 	bl	80057a4 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002564:	d122      	bne.n	80025ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800258c:	2100      	movs	r1, #0
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 feaa 	bl	80032e8 <HAL_PCDEx_LPM_Callback>
 8002594:	e002      	b.n	800259c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f005 f9da 	bl	8007950 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 f8f7 	bl	80057a4 <USB_ReadInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c0:	d112      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f005 f996 	bl	8007904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025e6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 f8d9 	bl	80057a4 <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fc:	f040 80b7 	bne.w	800276e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2110      	movs	r1, #16
 800261a:	4618      	mov	r0, r3
 800261c:	f002 f8a0 	bl	8004760 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002624:	e046      	b.n	80026b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002632:	461a      	mov	r2, r3
 8002634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002638:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	0151      	lsls	r1, r2, #5
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	440a      	add	r2, r1
 8002650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800266c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	440a      	add	r2, r1
 8002684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800268c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	3301      	adds	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d3b3      	bcc.n	8002626 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ea:	f043 030b 	orr.w	r3, r3, #11
 80026ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002700:	f043 030b 	orr.w	r3, r3, #11
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	e015      	b.n	8002734 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800271a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800271e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272e:	f043 030b 	orr.w	r3, r3, #11
 8002732:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002742:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002746:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002758:	461a      	mov	r2, r3
 800275a:	f003 f8e7 	bl	800592c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 f816 	bl	80057a4 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	d124      	bne.n	80027ce <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 f8ac 	bl	80058e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 f861 	bl	800485a <USB_GetDevSpeed>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681c      	ldr	r4, [r3, #0]
 80027a4:	f001 fa10 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 80027a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	4620      	mov	r0, r4
 80027b4:	f001 fd60 	bl	8004278 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f005 f87a 	bl	80078b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 ffe6 	bl	80057a4 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d10a      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f005 f857 	bl	8007896 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f002 0208 	and.w	r2, r2, #8
 80027f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 ffd1 	bl	80057a4 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d122      	bne.n	8002852 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	e014      	b.n	8002848 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb0f 	bl	8002e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	3301      	adds	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	429a      	cmp	r2, r3
 8002850:	d3e5      	bcc.n	800281e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 ffa4 	bl	80057a4 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d13b      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002868:	2301      	movs	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	e02b      	b.n	80028c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3340      	adds	r3, #64	; 0x40
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d115      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002894:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	da12      	bge.n	80028c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	333f      	adds	r3, #63	; 0x3f
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fad0 	bl	8002e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3301      	adds	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3ce      	bcc.n	800286e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 ff5d 	bl	80057a4 <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f4:	d155      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f6:	2301      	movs	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	e045      	b.n	8002988 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d12e      	bne.n	8002982 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002924:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002926:	2b00      	cmp	r3, #0
 8002928:	da2b      	bge.n	8002982 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002936:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800293a:	429a      	cmp	r2, r3
 800293c:	d121      	bne.n	8002982 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6053      	str	r3, [r2, #4]
            break;
 8002980:	e007      	b.n	8002992 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	3301      	adds	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298e:	429a      	cmp	r2, r3
 8002990:	d3b4      	bcc.n	80028fc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fefc 	bl	80057a4 <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d10a      	bne.n	80029ce <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f004 fffb 	bl	80079b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fee6 	bl	80057a4 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d115      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f004 ffeb 	bl	80079d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	e000      	b.n	8002a0e <HAL_PCD_IRQHandler+0x938>
      return;
 8002a0c:	bf00      	nop
    }
  }
}
 8002a0e:	3734      	adds	r7, #52	; 0x34
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd90      	pop	{r4, r7, pc}

08002a14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_PCD_SetAddress+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e013      	b.n	8002a56 <HAL_PCD_SetAddress+0x42>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fe44 	bl	80056d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	70fb      	strb	r3, [r7, #3]
 8002a70:	460b      	mov	r3, r1
 8002a72:	803b      	strh	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da0f      	bge.n	8002aa4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	3338      	adds	r3, #56	; 0x38
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	705a      	strb	r2, [r3, #1]
 8002aa2:	e00f      	b.n	8002ac4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ad0:	883a      	ldrh	r2, [r7, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	78ba      	ldrb	r2, [r7, #2]
 8002ada:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aee:	78bb      	ldrb	r3, [r7, #2]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d102      	bne.n	8002afa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_PCD_EP_Open+0xaa>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e00e      	b.n	8002b26 <HAL_PCD_EP_Open+0xc8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fec4 	bl	80048a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da0f      	bge.n	8002b62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3338      	adds	r3, #56	; 0x38
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	705a      	strb	r2, [r3, #1]
 8002b60:	e00f      	b.n	8002b82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_PCD_EP_Close+0x6e>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e00e      	b.n	8002bba <HAL_PCD_EP_Close+0x8c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 ff02 	bl	80049b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	3304      	adds	r3, #4
 8002bea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	6979      	ldr	r1, [r7, #20]
 8002c36:	f002 f9e1 	bl	8004ffc <USB_EP0StartXfer>
 8002c3a:	e008      	b.n	8002c4e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6979      	ldr	r1, [r7, #20]
 8002c4a:	f001 ff8f 	bl	8004b6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	460b      	mov	r3, r1
 8002c66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3338      	adds	r3, #56	; 0x38
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2201      	movs	r2, #1
 8002c96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c98:	7afb      	ldrb	r3, [r7, #11]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6979      	ldr	r1, [r7, #20]
 8002cca:	f002 f997 	bl	8004ffc <USB_EP0StartXfer>
 8002cce:	e008      	b.n	8002ce2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6979      	ldr	r1, [r7, #20]
 8002cde:	f001 ff45 	bl	8004b6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d901      	bls.n	8002d0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e050      	b.n	8002dac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da0f      	bge.n	8002d32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	3338      	adds	r3, #56	; 0x38
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	705a      	strb	r2, [r3, #1]
 8002d30:	e00d      	b.n	8002d4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_PCD_EP_SetStall+0x82>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e01e      	b.n	8002dac <HAL_PCD_EP_SetStall+0xc0>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fbd5 	bl	800552c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	b2d9      	uxtb	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f002 fdc5 	bl	800592c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e042      	b.n	8002e58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0f      	bge.n	8002dfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3338      	adds	r3, #56	; 0x38
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	e00f      	b.n	8002e1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_PCD_EP_ClrStall+0x86>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e00e      	b.n	8002e58 <HAL_PCD_EP_ClrStall+0xa4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fbdd 	bl	8005608 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da0c      	bge.n	8002e8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 020f 	and.w	r2, r3, #15
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3338      	adds	r3, #56	; 0x38
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e00c      	b.n	8002ea8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 f9fc 	bl	80052ac <USB_EPStopXfer>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b08a      	sub	sp, #40	; 0x28
 8002ec6:	af02      	add	r7, sp, #8
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	3338      	adds	r3, #56	; 0x38
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d901      	bls.n	8002efa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06c      	b.n	8002fd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d902      	bls.n	8002f16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3303      	adds	r3, #3
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f1e:	e02b      	b.n	8002f78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d902      	bls.n	8002f3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3303      	adds	r3, #3
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6919      	ldr	r1, [r3, #16]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f002 fa50 	bl	8005400 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d809      	bhi.n	8002fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d203      	bcs.n	8002fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1be      	bne.n	8002f20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d811      	bhi.n	8002fd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fce:	4013      	ands	r3, r2
 8002fd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d17b      	bne.n	800310a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4a61      	ldr	r2, [pc, #388]	; (80031a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	f240 80b9 	bls.w	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80b3 	beq.w	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003044:	6093      	str	r3, [r2, #8]
 8003046:	e0a7      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	2320      	movs	r3, #32
 8003062:	6093      	str	r3, [r2, #8]
 8003064:	e098      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8093 	bne.w	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d90f      	bls.n	800309a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	6093      	str	r3, [r2, #8]
 8003098:	e07e      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	0159      	lsls	r1, r3, #5
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	1ad2      	subs	r2, r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d114      	bne.n	80030fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030e4:	461a      	mov	r2, r3
 80030e6:	2101      	movs	r1, #1
 80030e8:	f002 fc20 	bl	800592c <USB_EP0_OutStart>
 80030ec:	e006      	b.n	80030fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f004 fb92 	bl	800782c <HAL_PCD_DataOutStageCallback>
 8003108:	e046      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d124      	bne.n	800315c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003128:	461a      	mov	r2, r3
 800312a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312e:	6093      	str	r3, [r2, #8]
 8003130:	e032      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	461a      	mov	r2, r3
 800314a:	2320      	movs	r3, #32
 800314c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f004 fb69 	bl	800782c <HAL_PCD_DataOutStageCallback>
 800315a:	e01d      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d114      	bne.n	800318c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003184:	461a      	mov	r2, r3
 8003186:	2100      	movs	r1, #0
 8003188:	f002 fbd0 	bl	800592c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f004 fb4a 	bl	800782c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	4f54300a 	.word	0x4f54300a
 80031a8:	4f54310a 	.word	0x4f54310a

080031ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	333c      	adds	r3, #60	; 0x3c
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <PCD_EP_OutSetupPacket_int+0x88>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d90e      	bls.n	8003200 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f004 fb01 	bl	8007808 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <PCD_EP_OutSetupPacket_int+0x88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d90c      	bls.n	8003228 <PCD_EP_OutSetupPacket_int+0x7c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d108      	bne.n	8003228 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003220:	461a      	mov	r2, r3
 8003222:	2101      	movs	r1, #1
 8003224:	f002 fb82 	bl	800592c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	4f54300a 	.word	0x4f54300a

08003238 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
 8003244:	4613      	mov	r3, r2
 8003246:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003256:	883b      	ldrh	r3, [r7, #0]
 8003258:	0419      	lsls	r1, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	430a      	orrs	r2, r1
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
 8003264:	e028      	b.n	80032b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4413      	add	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e00d      	b.n	8003296 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	3340      	adds	r3, #64	; 0x40
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	3301      	adds	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	3b01      	subs	r3, #1
 800329c:	429a      	cmp	r2, r3
 800329e:	d3ec      	bcc.n	800327a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032a0:	883b      	ldrh	r3, [r7, #0]
 80032a2:	0418      	lsls	r0, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	4302      	orrs	r2, r0
 80032b0:	3340      	adds	r3, #64	; 0x40
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e267      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d075      	beq.n	800340a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d00c      	beq.n	8003344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003332:	2b08      	cmp	r3, #8
 8003334:	d112      	bne.n	800335c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b82      	ldr	r3, [pc, #520]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003342:	d10b      	bne.n	800335c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	4b7e      	ldr	r3, [pc, #504]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05b      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d157      	bne.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e242      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d106      	bne.n	8003374 <HAL_RCC_OscConfig+0x74>
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e01d      	b.n	80033b0 <HAL_RCC_OscConfig+0xb0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x98>
 800337e:	4b70      	ldr	r3, [pc, #448]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6f      	ldr	r2, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6c      	ldr	r2, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0xb0>
 8003398:	4b69      	ldr	r3, [pc, #420]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a68      	ldr	r2, [pc, #416]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800339e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4b66      	ldr	r3, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a65      	ldr	r2, [pc, #404]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 80033aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fa1e 	bl	80017f8 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe fa1a 	bl	80017f8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e207      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fa0a 	bl	80017f8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fa06 	bl	80017f8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1f3      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	4b51      	ldr	r3, [pc, #324]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x152>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1c7      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4937      	ldr	r1, [pc, #220]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCC_OscConfig+0x244>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe f9bf 	bl	80017f8 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe f9bb 	bl	80017f8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1a8      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b28      	ldr	r3, [pc, #160]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4925      	ldr	r1, [pc, #148]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_OscConfig+0x244>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe f99e 	bl	80017f8 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe f99a 	bl	80017f8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e187      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d036      	beq.n	8003558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_RCC_OscConfig+0x248>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe f97e 	bl	80017f8 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe f97a 	bl	80017f8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e167      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x240>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x200>
 800351e:	e01b      	b.n	8003558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_OscConfig+0x248>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7fe f967 	bl	80017f8 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e00e      	b.n	800354c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe f963 	bl	80017f8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d907      	bls.n	800354c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e150      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
 8003540:	40023800 	.word	0x40023800
 8003544:	42470000 	.word	0x42470000
 8003548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ea      	bne.n	800352e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8097 	beq.w	8003694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	4b7d      	ldr	r3, [pc, #500]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a7c      	ldr	r2, [pc, #496]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b7a      	ldr	r3, [pc, #488]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b77      	ldr	r3, [pc, #476]	; (8003774 <HAL_RCC_OscConfig+0x474>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_RCC_OscConfig+0x474>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a73      	ldr	r2, [pc, #460]	; (8003774 <HAL_RCC_OscConfig+0x474>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe f923 	bl	80017f8 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe f91f 	bl	80017f8 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e10c      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_OscConfig+0x474>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x2ea>
 80035dc:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a63      	ldr	r2, [pc, #396]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x324>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x30c>
 80035f2:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a5e      	ldr	r2, [pc, #376]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a5b      	ldr	r2, [pc, #364]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x324>
 800360c:	4b58      	ldr	r3, [pc, #352]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b55      	ldr	r3, [pc, #340]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a54      	ldr	r2, [pc, #336]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe f8e4 	bl	80017f8 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe f8e0 	bl	80017f8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0cb      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	4b49      	ldr	r3, [pc, #292]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RCC_OscConfig+0x334>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fe f8ce 	bl	80017f8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe f8ca 	bl	80017f8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0b5      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	4a38      	ldr	r2, [pc, #224]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a1 	beq.w	80037e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369e:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d05c      	beq.n	8003764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d141      	bne.n	8003736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <HAL_RCC_OscConfig+0x478>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f89e 	bl	80017f8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe f89a 	bl	80017f8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e087      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	491b      	ldr	r1, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x478>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fe f873 	bl	80017f8 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe f86f 	bl	80017f8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e05c      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x416>
 8003734:	e054      	b.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_RCC_OscConfig+0x478>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe f85c 	bl	80017f8 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe f858 	bl	80017f8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e045      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_OscConfig+0x470>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x444>
 8003762:	e03d      	b.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e038      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
 8003770:	40023800 	.word	0x40023800
 8003774:	40007000 	.word	0x40007000
 8003778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x4ec>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d028      	beq.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d121      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d11a      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d111      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cc      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90c      	bls.n	800382c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a58      	ldr	r2, [pc, #352]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d044      	beq.n	8003910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d119      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e067      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e0:	f7fd ff8a 	bl	80017f8 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fd ff86 	bl	80017f8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04f      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20c      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd feea 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023c00 	.word	0x40023c00
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08008f60 	.word	0x08008f60
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000004 	.word	0x20000004

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b094      	sub	sp, #80	; 0x50
 80039c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	647b      	str	r3, [r7, #68]	; 0x44
 80039c8:	2300      	movs	r3, #0
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	2300      	movs	r3, #0
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d4:	4b79      	ldr	r3, [pc, #484]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d00d      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x40>
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	f200 80e1 	bhi.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ee:	e0db      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039f4:	e0db      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f6:	4b73      	ldr	r3, [pc, #460]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x208>)
 80039f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039fa:	e0d8      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039fc:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a06:	4b6d      	ldr	r3, [pc, #436]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d063      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a12:	4b6a      	ldr	r3, [pc, #424]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	2200      	movs	r2, #0
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
 8003a26:	2300      	movs	r3, #0
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	0159      	lsls	r1, r3, #5
 8003a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a40:	0150      	lsls	r0, r2, #5
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4621      	mov	r1, r4
 8003a48:	1a51      	subs	r1, r2, r1
 8003a4a:	6139      	str	r1, [r7, #16]
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a60:	4659      	mov	r1, fp
 8003a62:	018b      	lsls	r3, r1, #6
 8003a64:	4651      	mov	r1, sl
 8003a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	018a      	lsls	r2, r1, #6
 8003a6e:	4651      	mov	r1, sl
 8003a70:	ebb2 0801 	subs.w	r8, r2, r1
 8003a74:	4659      	mov	r1, fp
 8003a76:	eb63 0901 	sbc.w	r9, r3, r1
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8e:	4690      	mov	r8, r2
 8003a90:	4699      	mov	r9, r3
 8003a92:	4623      	mov	r3, r4
 8003a94:	eb18 0303 	adds.w	r3, r8, r3
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	eb49 0303 	adc.w	r3, r9, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aae:	4629      	mov	r1, r5
 8003ab0:	024b      	lsls	r3, r1, #9
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab8:	4621      	mov	r1, r4
 8003aba:	024a      	lsls	r2, r1, #9
 8003abc:	4610      	mov	r0, r2
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003acc:	f7fd f85e 	bl	8000b8c <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad8:	e058      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	099b      	lsrs	r3, r3, #6
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	f04f 0000 	mov.w	r0, #0
 8003afc:	f04f 0100 	mov.w	r1, #0
 8003b00:	0159      	lsls	r1, r3, #5
 8003b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b06:	0150      	lsls	r0, r2, #5
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b30:	eb63 050b 	sbc.w	r5, r3, fp
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	00eb      	lsls	r3, r5, #3
 8003b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b42:	00e2      	lsls	r2, r4, #3
 8003b44:	4614      	mov	r4, r2
 8003b46:	461d      	mov	r5, r3
 8003b48:	4643      	mov	r3, r8
 8003b4a:	18e3      	adds	r3, r4, r3
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	464b      	mov	r3, r9
 8003b50:	eb45 0303 	adc.w	r3, r5, r3
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b62:	4629      	mov	r1, r5
 8003b64:	028b      	lsls	r3, r1, #10
 8003b66:	4621      	mov	r1, r4
 8003b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	028a      	lsls	r2, r1, #10
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b76:	2200      	movs	r2, #0
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	61fa      	str	r2, [r7, #28]
 8003b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b80:	f7fd f804 	bl	8000b8c <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3750      	adds	r7, #80	; 0x50
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	007a1200 	.word	0x007a1200

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	08008f70 	.word	0x08008f70

08003c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c0c:	f7ff ffdc 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0b5b      	lsrs	r3, r3, #13
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	08008f70 	.word	0x08008f70

08003c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e03f      	b.n	8003cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fcb0 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f829 	bl	8003ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd0:	b0c0      	sub	sp, #256	; 0x100
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	68d9      	ldr	r1, [r3, #12]
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	ea40 0301 	orr.w	r3, r0, r1
 8003cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d24:	f021 010c 	bic.w	r1, r1, #12
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d32:	430b      	orrs	r3, r1
 8003d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	6999      	ldr	r1, [r3, #24]
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	ea40 0301 	orr.w	r3, r0, r1
 8003d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b8f      	ldr	r3, [pc, #572]	; (8003f98 <UART_SetConfig+0x2cc>)
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d005      	beq.n	8003d6c <UART_SetConfig+0xa0>
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b8d      	ldr	r3, [pc, #564]	; (8003f9c <UART_SetConfig+0x2d0>)
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d104      	bne.n	8003d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d6c:	f7ff ff4c 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8003d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d74:	e003      	b.n	8003d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d76:	f7ff ff33 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 8003d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d88:	f040 810c 	bne.w	8003fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d9e:	4622      	mov	r2, r4
 8003da0:	462b      	mov	r3, r5
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003da6:	415b      	adcs	r3, r3
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dae:	4621      	mov	r1, r4
 8003db0:	eb12 0801 	adds.w	r8, r2, r1
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb43 0901 	adc.w	r9, r3, r1
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dce:	4690      	mov	r8, r2
 8003dd0:	4699      	mov	r9, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	eb18 0303 	adds.w	r3, r8, r3
 8003dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ddc:	462b      	mov	r3, r5
 8003dde:	eb49 0303 	adc.w	r3, r9, r3
 8003de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	18db      	adds	r3, r3, r3
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003e00:	4613      	mov	r3, r2
 8003e02:	eb42 0303 	adc.w	r3, r2, r3
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
 8003e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e10:	f7fc febc 	bl	8000b8c <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	011c      	lsls	r4, r3, #4
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e44:	4641      	mov	r1, r8
 8003e46:	eb12 0a01 	adds.w	sl, r2, r1
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e64:	4692      	mov	sl, r2
 8003e66:	469b      	mov	fp, r3
 8003e68:	4643      	mov	r3, r8
 8003e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e72:	464b      	mov	r3, r9
 8003e74:	eb4b 0303 	adc.w	r3, fp, r3
 8003e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e90:	460b      	mov	r3, r1
 8003e92:	18db      	adds	r3, r3, r3
 8003e94:	643b      	str	r3, [r7, #64]	; 0x40
 8003e96:	4613      	mov	r3, r2
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ea6:	f7fc fe71 	bl	8000b8c <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	2264      	movs	r2, #100	; 0x64
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	1acb      	subs	r3, r1, r3
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed4:	441c      	add	r4, r3
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ef8:	4641      	mov	r1, r8
 8003efa:	1851      	adds	r1, r2, r1
 8003efc:	6339      	str	r1, [r7, #48]	; 0x30
 8003efe:	4649      	mov	r1, r9
 8003f00:	414b      	adcs	r3, r1
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f10:	4659      	mov	r1, fp
 8003f12:	00cb      	lsls	r3, r1, #3
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	00ca      	lsls	r2, r1, #3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	4642      	mov	r2, r8
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	460a      	mov	r2, r1
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	18db      	adds	r3, r3, r3
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f52:	4613      	mov	r3, r2
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f62:	f7fc fe13 	bl	8000b8c <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	2164      	movs	r1, #100	; 0x64
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	3332      	adds	r3, #50	; 0x32
 8003f7e:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <UART_SetConfig+0x2d4>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 0207 	and.w	r2, r3, #7
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4422      	add	r2, r4
 8003f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f94:	e105      	b.n	80041a2 <UART_SetConfig+0x4d6>
 8003f96:	bf00      	nop
 8003f98:	40011000 	.word	0x40011000
 8003f9c:	40011400 	.word	0x40011400
 8003fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fb6:	4642      	mov	r2, r8
 8003fb8:	464b      	mov	r3, r9
 8003fba:	1891      	adds	r1, r2, r2
 8003fbc:	6239      	str	r1, [r7, #32]
 8003fbe:	415b      	adcs	r3, r3
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	1854      	adds	r4, r2, r1
 8003fca:	4649      	mov	r1, r9
 8003fcc:	eb43 0501 	adc.w	r5, r3, r1
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	00eb      	lsls	r3, r5, #3
 8003fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fde:	00e2      	lsls	r2, r4, #3
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	18e3      	adds	r3, r4, r3
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fec:	464b      	mov	r3, r9
 8003fee:	eb45 0303 	adc.w	r3, r5, r3
 8003ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004012:	4629      	mov	r1, r5
 8004014:	008b      	lsls	r3, r1, #2
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800401c:	4621      	mov	r1, r4
 800401e:	008a      	lsls	r2, r1, #2
 8004020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004024:	f7fc fdb2 	bl	8000b8c <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4b60      	ldr	r3, [pc, #384]	; (80041b0 <UART_SetConfig+0x4e4>)
 800402e:	fba3 2302 	umull	r2, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	011c      	lsls	r4, r3, #4
 8004036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	1891      	adds	r1, r2, r2
 800404e:	61b9      	str	r1, [r7, #24]
 8004050:	415b      	adcs	r3, r3
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004058:	4641      	mov	r1, r8
 800405a:	1851      	adds	r1, r2, r1
 800405c:	6139      	str	r1, [r7, #16]
 800405e:	4649      	mov	r1, r9
 8004060:	414b      	adcs	r3, r1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004070:	4659      	mov	r1, fp
 8004072:	00cb      	lsls	r3, r1, #3
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407a:	4651      	mov	r1, sl
 800407c:	00ca      	lsls	r2, r1, #3
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	4603      	mov	r3, r0
 8004084:	4642      	mov	r2, r8
 8004086:	189b      	adds	r3, r3, r2
 8004088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408c:	464b      	mov	r3, r9
 800408e:	460a      	mov	r2, r1
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040b0:	4649      	mov	r1, r9
 80040b2:	008b      	lsls	r3, r1, #2
 80040b4:	4641      	mov	r1, r8
 80040b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ba:	4641      	mov	r1, r8
 80040bc:	008a      	lsls	r2, r1, #2
 80040be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040c2:	f7fc fd63 	bl	8000b8c <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <UART_SetConfig+0x4e4>)
 80040cc:	fba3 1302 	umull	r1, r3, r3, r2
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	2164      	movs	r1, #100	; 0x64
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	3332      	adds	r3, #50	; 0x32
 80040de:	4a34      	ldr	r2, [pc, #208]	; (80041b0 <UART_SetConfig+0x4e4>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ea:	441c      	add	r4, r3
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	673b      	str	r3, [r7, #112]	; 0x70
 80040f4:	677a      	str	r2, [r7, #116]	; 0x74
 80040f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040fa:	4642      	mov	r2, r8
 80040fc:	464b      	mov	r3, r9
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	415b      	adcs	r3, r3
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410a:	4641      	mov	r1, r8
 800410c:	1851      	adds	r1, r2, r1
 800410e:	6039      	str	r1, [r7, #0]
 8004110:	4649      	mov	r1, r9
 8004112:	414b      	adcs	r3, r1
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004122:	4659      	mov	r1, fp
 8004124:	00cb      	lsls	r3, r1, #3
 8004126:	4651      	mov	r1, sl
 8004128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412c:	4651      	mov	r1, sl
 800412e:	00ca      	lsls	r2, r1, #3
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	4603      	mov	r3, r0
 8004136:	4642      	mov	r2, r8
 8004138:	189b      	adds	r3, r3, r2
 800413a:	66bb      	str	r3, [r7, #104]	; 0x68
 800413c:	464b      	mov	r3, r9
 800413e:	460a      	mov	r2, r1
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	663b      	str	r3, [r7, #96]	; 0x60
 8004150:	667a      	str	r2, [r7, #100]	; 0x64
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800415e:	4649      	mov	r1, r9
 8004160:	008b      	lsls	r3, r1, #2
 8004162:	4641      	mov	r1, r8
 8004164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004168:	4641      	mov	r1, r8
 800416a:	008a      	lsls	r2, r1, #2
 800416c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004170:	f7fc fd0c 	bl	8000b8c <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <UART_SetConfig+0x4e4>)
 800417a:	fba3 1302 	umull	r1, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2164      	movs	r1, #100	; 0x64
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	3332      	adds	r3, #50	; 0x32
 800418c:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <UART_SetConfig+0x4e4>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4422      	add	r2, r4
 80041a0:	609a      	str	r2, [r3, #8]
}
 80041a2:	bf00      	nop
 80041a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	51eb851f 	.word	0x51eb851f

080041b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b4:	b084      	sub	sp, #16
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	f107 001c 	add.w	r0, r7, #28
 80041c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d122      	bne.n	8004212 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d105      	bne.n	8004206 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 fbee 	bl	80059e8 <USB_CoreReset>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e01a      	b.n	8004248 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 fbe2 	bl	80059e8 <USB_CoreReset>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
 800423a:	e005      	b.n	8004248 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2b01      	cmp	r3, #1
 800424c:	d10b      	bne.n	8004266 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f043 0206 	orr.w	r2, r3, #6
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004272:	b004      	add	sp, #16
 8004274:	4770      	bx	lr
	...

08004278 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d165      	bne.n	8004358 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a41      	ldr	r2, [pc, #260]	; (8004394 <USB_SetTurnaroundTime+0x11c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d906      	bls.n	80042a2 <USB_SetTurnaroundTime+0x2a>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a40      	ldr	r2, [pc, #256]	; (8004398 <USB_SetTurnaroundTime+0x120>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d202      	bcs.n	80042a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800429c:	230f      	movs	r3, #15
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e062      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4a3c      	ldr	r2, [pc, #240]	; (8004398 <USB_SetTurnaroundTime+0x120>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d306      	bcc.n	80042b8 <USB_SetTurnaroundTime+0x40>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a3b      	ldr	r2, [pc, #236]	; (800439c <USB_SetTurnaroundTime+0x124>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d202      	bcs.n	80042b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042b2:	230e      	movs	r3, #14
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e057      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4a38      	ldr	r2, [pc, #224]	; (800439c <USB_SetTurnaroundTime+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d306      	bcc.n	80042ce <USB_SetTurnaroundTime+0x56>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4a37      	ldr	r2, [pc, #220]	; (80043a0 <USB_SetTurnaroundTime+0x128>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d202      	bcs.n	80042ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042c8:	230d      	movs	r3, #13
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e04c      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4a33      	ldr	r2, [pc, #204]	; (80043a0 <USB_SetTurnaroundTime+0x128>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d306      	bcc.n	80042e4 <USB_SetTurnaroundTime+0x6c>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4a32      	ldr	r2, [pc, #200]	; (80043a4 <USB_SetTurnaroundTime+0x12c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d802      	bhi.n	80042e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042de:	230c      	movs	r3, #12
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e041      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <USB_SetTurnaroundTime+0x12c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d906      	bls.n	80042fa <USB_SetTurnaroundTime+0x82>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a2e      	ldr	r2, [pc, #184]	; (80043a8 <USB_SetTurnaroundTime+0x130>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d802      	bhi.n	80042fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042f4:	230b      	movs	r3, #11
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e036      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a2a      	ldr	r2, [pc, #168]	; (80043a8 <USB_SetTurnaroundTime+0x130>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d906      	bls.n	8004310 <USB_SetTurnaroundTime+0x98>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4a29      	ldr	r2, [pc, #164]	; (80043ac <USB_SetTurnaroundTime+0x134>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d802      	bhi.n	8004310 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800430a:	230a      	movs	r3, #10
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e02b      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a26      	ldr	r2, [pc, #152]	; (80043ac <USB_SetTurnaroundTime+0x134>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d906      	bls.n	8004326 <USB_SetTurnaroundTime+0xae>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <USB_SetTurnaroundTime+0x138>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d202      	bcs.n	8004326 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004320:	2309      	movs	r3, #9
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e020      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <USB_SetTurnaroundTime+0x138>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d306      	bcc.n	800433c <USB_SetTurnaroundTime+0xc4>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <USB_SetTurnaroundTime+0x13c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004336:	2308      	movs	r3, #8
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e015      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <USB_SetTurnaroundTime+0x13c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d906      	bls.n	8004352 <USB_SetTurnaroundTime+0xda>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <USB_SetTurnaroundTime+0x140>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d202      	bcs.n	8004352 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800434c:	2307      	movs	r3, #7
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e00a      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004352:	2306      	movs	r3, #6
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e007      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800435e:	2309      	movs	r3, #9
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e001      	b.n	8004368 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004364:	2309      	movs	r3, #9
 8004366:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	029b      	lsls	r3, r3, #10
 800437c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	00d8acbf 	.word	0x00d8acbf
 8004398:	00e4e1c0 	.word	0x00e4e1c0
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	01067380 	.word	0x01067380
 80043a4:	011a499f 	.word	0x011a499f
 80043a8:	01312cff 	.word	0x01312cff
 80043ac:	014ca43f 	.word	0x014ca43f
 80043b0:	016e3600 	.word	0x016e3600
 80043b4:	01a6ab1f 	.word	0x01a6ab1f
 80043b8:	01e84800 	.word	0x01e84800

080043bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d115      	bne.n	800444e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800442e:	2001      	movs	r0, #1
 8004430:	f7fd f9ee 	bl	8001810 <HAL_Delay>
      ms++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f001 fa45 	bl	80058ca <USB_GetMode>
 8004440:	4603      	mov	r3, r0
 8004442:	2b01      	cmp	r3, #1
 8004444:	d01e      	beq.n	8004484 <USB_SetCurrentMode+0x84>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b31      	cmp	r3, #49	; 0x31
 800444a:	d9f0      	bls.n	800442e <USB_SetCurrentMode+0x2e>
 800444c:	e01a      	b.n	8004484 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d115      	bne.n	8004480 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004460:	2001      	movs	r0, #1
 8004462:	f7fd f9d5 	bl	8001810 <HAL_Delay>
      ms++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 fa2c 	bl	80058ca <USB_GetMode>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <USB_SetCurrentMode+0x84>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b31      	cmp	r3, #49	; 0x31
 800447c:	d9f0      	bls.n	8004460 <USB_SetCurrentMode+0x60>
 800447e:	e001      	b.n	8004484 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e005      	b.n	8004490 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b32      	cmp	r3, #50	; 0x32
 8004488:	d101      	bne.n	800448e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004498:	b084      	sub	sp, #16
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	e009      	b.n	80044cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3340      	adds	r3, #64	; 0x40
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3301      	adds	r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b0e      	cmp	r3, #14
 80044d0:	d9f2      	bls.n	80044b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d11c      	bne.n	8004512 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e6:	f043 0302 	orr.w	r3, r3, #2
 80044ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
 8004510:	e00b      	b.n	800452a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004530:	461a      	mov	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453c:	4619      	mov	r1, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	461a      	mov	r2, r3
 8004546:	680b      	ldr	r3, [r1, #0]
 8004548:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10c      	bne.n	800456a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004556:	2100      	movs	r1, #0
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f965 	bl	8004828 <USB_SetDevSpeed>
 800455e:	e008      	b.n	8004572 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004560:	2101      	movs	r1, #1
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f960 	bl	8004828 <USB_SetDevSpeed>
 8004568:	e003      	b.n	8004572 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800456a:	2103      	movs	r1, #3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f95b 	bl	8004828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004572:	2110      	movs	r1, #16
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8f3 	bl	8004760 <USB_FlushTxFifo>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f91f 	bl	80047c8 <USB_FlushRxFifo>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	461a      	mov	r2, r3
 800459c:	2300      	movs	r3, #0
 800459e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	461a      	mov	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e043      	b.n	8004646 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d4:	d118      	bne.n	8004608 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	461a      	mov	r2, r3
 80045ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	e013      	b.n	800461a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	461a      	mov	r2, r3
 8004600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e008      	b.n	800461a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	2300      	movs	r3, #0
 8004618:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	461a      	mov	r2, r3
 800463a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800463e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	3301      	adds	r3, #1
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	d3b7      	bcc.n	80045be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	e043      	b.n	80046dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800466a:	d118      	bne.n	800469e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e013      	b.n	80046b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	461a      	mov	r2, r3
 8004696:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	e008      	b.n	80046b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	461a      	mov	r2, r3
 80046ac:	2300      	movs	r3, #0
 80046ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3301      	adds	r3, #1
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3b7      	bcc.n	8004654 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004704:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f043 0210 	orr.w	r2, r3, #16
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <USB_DevInit+0x2c4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f043 0208 	orr.w	r2, r3, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d107      	bne.n	800474c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800474c:	7dfb      	ldrb	r3, [r7, #23]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004758:	b004      	add	sp, #16
 800475a:	4770      	bx	lr
 800475c:	803c3800 	.word	0x803c3800

08004760 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <USB_FlushTxFifo+0x64>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e01b      	b.n	80047b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	daf2      	bge.n	800476e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	019b      	lsls	r3, r3, #6
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <USB_FlushTxFifo+0x64>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e006      	b.n	80047b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d0f0      	beq.n	8004798 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	00030d40 	.word	0x00030d40

080047c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a11      	ldr	r2, [pc, #68]	; (8004824 <USB_FlushRxFifo+0x5c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e018      	b.n	8004818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	daf2      	bge.n	80047d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2210      	movs	r2, #16
 80047f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <USB_FlushRxFifo+0x5c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e006      	b.n	8004818 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b10      	cmp	r3, #16
 8004814:	d0f0      	beq.n	80047f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	00030d40 	.word	0x00030d40

08004828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800485a:	b480      	push	{r7}
 800485c:	b087      	sub	sp, #28
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0306 	and.w	r3, r3, #6
 8004872:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
 800487e:	e00a      	b.n	8004896 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d002      	beq.n	800488c <USB_GetDevSpeed+0x32>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b06      	cmp	r3, #6
 800488a:	d102      	bne.n	8004892 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800488c:	2302      	movs	r3, #2
 800488e:	75fb      	strb	r3, [r7, #23]
 8004890:	e001      	b.n	8004896 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004892:	230f      	movs	r3, #15
 8004894:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d13a      	bne.n	8004936 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	68f9      	ldr	r1, [r7, #12]
 80048da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048de:	4313      	orrs	r3, r2
 80048e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d155      	bne.n	80049a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	791b      	ldrb	r3, [r3, #4]
 8004912:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004914:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	059b      	lsls	r3, r3, #22
 800491a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800491c:	4313      	orrs	r3, r2
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e036      	b.n	80049a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004954:	4313      	orrs	r3, r2
 8004956:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11a      	bne.n	80049a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	791b      	ldrb	r3, [r3, #4]
 8004988:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800498a:	430b      	orrs	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d161      	bne.n	8004a94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e6:	d11f      	bne.n	8004a28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a48:	4013      	ands	r3, r2
 8004a4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	0159      	lsls	r1, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <USB_DeactivateEndpoint+0x1b0>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
 8004a92:	e060      	b.n	8004b56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aaa:	d11f      	bne.n	8004aec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	0151      	lsls	r1, r2, #5
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	43db      	mvns	r3, r3
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f303 	lsl.w	r3, r1, r3
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b30:	4013      	ands	r3, r2
 8004b32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0159      	lsls	r1, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	440b      	add	r3, r1
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <USB_DeactivateEndpoint+0x1b4>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	ec337800 	.word	0xec337800
 8004b68:	eff37800 	.word	0xeff37800

08004b6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	f040 815c 	bne.w	8004e46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d132      	bne.n	8004bfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf4:	0cdb      	lsrs	r3, r3, #19
 8004bf6:	04db      	lsls	r3, r3, #19
 8004bf8:	6113      	str	r3, [r2, #16]
 8004bfa:	e074      	b.n	8004ce6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	0cdb      	lsrs	r3, r3, #19
 8004c18:	04db      	lsls	r3, r3, #19
 8004c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6999      	ldr	r1, [r3, #24]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	440b      	add	r3, r1
 8004c58:	1e59      	subs	r1, r3, #1
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c64:	4b9d      	ldr	r3, [pc, #628]	; (8004edc <USB_EPStartXfer+0x370>)
 8004c66:	400b      	ands	r3, r1
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	0148      	lsls	r0, r1, #5
 8004c6c:	69f9      	ldr	r1, [r7, #28]
 8004c6e:	4401      	add	r1, r0
 8004c70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c74:	4313      	orrs	r3, r2
 8004c76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8e:	69b9      	ldr	r1, [r7, #24]
 8004c90:	0148      	lsls	r0, r1, #5
 8004c92:	69f9      	ldr	r1, [r7, #28]
 8004c94:	4401      	add	r1, r0
 8004c96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	791b      	ldrb	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d11f      	bne.n	8004ce6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ce4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d14b      	bne.n	8004d84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	791b      	ldrb	r3, [r3, #4]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d128      	bne.n	8004d62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d110      	bne.n	8004d42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	e00f      	b.n	8004d62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	69fa      	ldr	r2, [r7, #28]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e133      	b.n	8004fec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004da2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	791b      	ldrb	r3, [r3, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d015      	beq.n	8004dd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 811b 	beq.w	8004fec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	69f9      	ldr	r1, [r7, #28]
 8004dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	634b      	str	r3, [r1, #52]	; 0x34
 8004dd6:	e109      	b.n	8004fec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	e00f      	b.n	8004e2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6919      	ldr	r1, [r3, #16]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	b298      	uxth	r0, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fade 	bl	8005400 <USB_WritePacket>
 8004e44:	e0d2      	b.n	8004fec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e60:	0cdb      	lsrs	r3, r3, #19
 8004e62:	04db      	lsls	r3, r3, #19
 8004e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d126      	bne.n	8004ee0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	0148      	lsls	r0, r1, #5
 8004eac:	69f9      	ldr	r1, [r7, #28]
 8004eae:	4401      	add	r1, r0
 8004eb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed6:	6113      	str	r3, [r2, #16]
 8004ed8:	e03a      	b.n	8004f50 <USB_EPStartXfer+0x3e4>
 8004eda:	bf00      	nop
 8004edc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	1e5a      	subs	r2, r3, #1
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	8afa      	ldrh	r2, [r7, #22]
 8004efc:	fb03 f202 	mul.w	r2, r3, r2
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	8afb      	ldrh	r3, [r7, #22]
 8004f14:	04d9      	lsls	r1, r3, #19
 8004f16:	4b38      	ldr	r3, [pc, #224]	; (8004ff8 <USB_EPStartXfer+0x48c>)
 8004f18:	400b      	ands	r3, r1
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	0148      	lsls	r0, r1, #5
 8004f1e:	69f9      	ldr	r1, [r7, #28]
 8004f20:	4401      	add	r1, r0
 8004f22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	0148      	lsls	r0, r1, #5
 8004f44:	69f9      	ldr	r1, [r7, #28]
 8004f46:	4401      	add	r1, r0
 8004f48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10d      	bne.n	8004f72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6919      	ldr	r1, [r3, #16]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	460a      	mov	r2, r1
 8004f70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	791b      	ldrb	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d128      	bne.n	8004fcc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d110      	bne.n	8004fac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e00f      	b.n	8004fcc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	1ff80000 	.word	0x1ff80000

08004ffc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 80ce 	bne.w	80051ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d132      	bne.n	800508c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005044:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005068:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005084:	0cdb      	lsrs	r3, r3, #19
 8005086:	04db      	lsls	r3, r3, #19
 8005088:	6113      	str	r3, [r2, #16]
 800508a:	e04e      	b.n	800512a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	0cdb      	lsrs	r3, r3, #19
 80050a8:	04db      	lsls	r3, r3, #19
 80050aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d903      	bls.n	80050e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	0148      	lsls	r0, r1, #5
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	4401      	add	r1, r0
 8005122:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11e      	bne.n	800516e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e097      	b.n	800529e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 8083 	beq.w	800529e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	6979      	ldr	r1, [r7, #20]
 80051b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b4:	4313      	orrs	r3, r2
 80051b6:	634b      	str	r3, [r1, #52]	; 0x34
 80051b8:	e071      	b.n	800529e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d4:	0cdb      	lsrs	r3, r3, #19
 80051d6:	04db      	lsls	r3, r3, #19
 80051d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524c:	6939      	ldr	r1, [r7, #16]
 800524e:	0148      	lsls	r0, r1, #5
 8005250:	6979      	ldr	r1, [r7, #20]
 8005252:	4401      	add	r1, r0
 8005254:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005258:	4313      	orrs	r3, r2
 800525a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10d      	bne.n	800527e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6919      	ldr	r1, [r3, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	460a      	mov	r2, r1
 800527c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d14a      	bne.n	8005360 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e2:	f040 8086 	bne.w	80053f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	0151      	lsls	r1, r2, #5
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	440a      	add	r2, r1
 8005300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005308:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800532c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f242 7210 	movw	r2, #10000	; 0x2710
 800533a:	4293      	cmp	r3, r2
 800533c:	d902      	bls.n	8005344 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
          break;
 8005342:	e056      	b.n	80053f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535c:	d0e7      	beq.n	800532e <USB_EPStopXfer+0x82>
 800535e:	e048      	b.n	80053f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005378:	d13b      	bne.n	80053f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800539c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3301      	adds	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d902      	bls.n	80053d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
          break;
 80053d6:	e00c      	b.n	80053f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f0:	d0e7      	beq.n	80053c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	460b      	mov	r3, r1
 8005410:	71fb      	strb	r3, [r7, #7]
 8005412:	4613      	mov	r3, r2
 8005414:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800541e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d123      	bne.n	800546e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005426:	88bb      	ldrh	r3, [r7, #4]
 8005428:	3303      	adds	r3, #3
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e018      	b.n	8005466 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	031a      	lsls	r2, r3, #12
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005440:	461a      	mov	r2, r3
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3301      	adds	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3301      	adds	r3, #1
 8005452:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	3301      	adds	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d3e2      	bcc.n	8005434 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3724      	adds	r7, #36	; 0x24
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800547c:	b480      	push	{r7}
 800547e:	b08b      	sub	sp, #44	; 0x2c
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	089b      	lsrs	r3, r3, #2
 8005496:	b29b      	uxth	r3, r3
 8005498:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	e014      	b.n	80054d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	3301      	adds	r3, #1
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	3301      	adds	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	3301      	adds	r3, #1
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	3301      	adds	r3, #1
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	3301      	adds	r3, #1
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3e6      	bcc.n	80054a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054da:	8bfb      	ldrh	r3, [r7, #30]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01e      	beq.n	800551e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ea:	461a      	mov	r2, r3
 80054ec:	f107 0310 	add.w	r3, r7, #16
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005500:	b2da      	uxtb	r2, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	701a      	strb	r2, [r3, #0]
      i++;
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	3301      	adds	r3, #1
 800550a:	623b      	str	r3, [r7, #32]
      pDest++;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	3301      	adds	r3, #1
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005512:	8bfb      	ldrh	r3, [r7, #30]
 8005514:	3b01      	subs	r3, #1
 8005516:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005518:	8bfb      	ldrh	r3, [r7, #30]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ea      	bne.n	80054f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005520:	4618      	mov	r0, r3
 8005522:	372c      	adds	r7, #44	; 0x2c
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d12c      	bne.n	80055a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	db12      	blt.n	8005580 <USB_EPSetStall+0x54>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00f      	beq.n	8005580 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	440a      	add	r2, r1
 8005576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800557e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e02b      	b.n	80055fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	db12      	blt.n	80055da <USB_EPSetStall+0xae>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00f      	beq.n	80055da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d128      	bne.n	8005676 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005642:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	791b      	ldrb	r3, [r3, #4]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d003      	beq.n	8005654 <USB_EPClearStall+0x4c>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	791b      	ldrb	r3, [r3, #4]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d138      	bne.n	80056c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e027      	b.n	80056c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005694:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	791b      	ldrb	r3, [r3, #4]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d003      	beq.n	80056a6 <USB_EPClearStall+0x9e>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	791b      	ldrb	r3, [r3, #4]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d10f      	bne.n	80056c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574e:	f023 0302 	bic.w	r3, r3, #2
 8005752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800577c:	f023 0303 	bic.w	r3, r3, #3
 8005780:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057bc:	68fb      	ldr	r3, [r7, #12]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	0c1b      	lsrs	r3, r3, #16
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	b29b      	uxth	r3, r3
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005860:	68bb      	ldr	r3, [r7, #8]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	01db      	lsls	r3, r3, #7
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058bc:	68bb      	ldr	r3, [r7, #8]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0301 	and.w	r3, r3, #1
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005904:	f023 0307 	bic.w	r3, r3, #7
 8005908:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	460b      	mov	r3, r1
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	333c      	adds	r3, #60	; 0x3c
 8005942:	3304      	adds	r3, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <USB_EP0_OutStart+0xb8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d90a      	bls.n	8005966 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800595c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005960:	d101      	bne.n	8005966 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e037      	b.n	80059d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	2300      	movs	r3, #0
 8005970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005994:	f043 0318 	orr.w	r3, r3, #24
 8005998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d10f      	bne.n	80059d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	4f54300a 	.word	0x4f54300a

080059e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <USB_CoreReset+0x64>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e01b      	b.n	8005a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	daf2      	bge.n	80059f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <USB_CoreReset+0x64>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e006      	b.n	8005a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d0f0      	beq.n	8005a1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a5c:	2010      	movs	r0, #16
 8005a5e:	f002 f93d 	bl	8007cdc <USBD_static_malloc>
 8005a62:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	32b0      	adds	r2, #176	; 0xb0
 8005a74:	2100      	movs	r1, #0
 8005a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e048      	b.n	8005b10 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	32b0      	adds	r2, #176	; 0xb0
 8005a88:	68f9      	ldr	r1, [r7, #12]
 8005a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	32b0      	adds	r2, #176	; 0xb0
 8005a98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7c1b      	ldrb	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <USBD_HID_Init+0xc8>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	3326      	adds	r3, #38	; 0x26
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	e00c      	b.n	8005ae0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005ac6:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <USBD_HID_Init+0xc8>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	3326      	adds	r3, #38	; 0x26
 8005adc:	220a      	movs	r2, #10
 8005ade:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <USBD_HID_Init+0xc8>)
 8005ae2:	7819      	ldrb	r1, [r3, #0]
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 ffe6 	bl	8007aba <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005aee:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <USBD_HID_Init+0xc8>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	2201      	movs	r2, #1
 8005b06:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200000ca 	.word	0x200000ca

08005b1c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <USBD_HID_DeInit+0x8c>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 ffe9 	bl	8007b06 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005b34:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <USBD_HID_DeInit+0x8c>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	3324      	adds	r3, #36	; 0x24
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005b4e:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <USBD_HID_DeInit+0x8c>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3326      	adds	r3, #38	; 0x26
 8005b64:	2200      	movs	r2, #0
 8005b66:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	32b0      	adds	r2, #176	; 0xb0
 8005b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d011      	beq.n	8005b9e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	32b0      	adds	r2, #176	; 0xb0
 8005b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f002 f8b5 	bl	8007cf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	32b0      	adds	r2, #176	; 0xb0
 8005b98:	2100      	movs	r1, #0
 8005b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	200000ca 	.word	0x200000ca

08005bac <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	32b0      	adds	r2, #176	; 0xb0
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0e8      	b.n	8005daa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d046      	beq.n	8005c72 <USBD_HID_Setup+0xc6>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	f040 80d8 	bne.w	8005d9a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	3b02      	subs	r3, #2
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d836      	bhi.n	8005c62 <USBD_HID_Setup+0xb6>
 8005bf4:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <USBD_HID_Setup+0x50>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c53 	.word	0x08005c53
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c63 	.word	0x08005c63
 8005c08:	08005c63 	.word	0x08005c63
 8005c0c:	08005c63 	.word	0x08005c63
 8005c10:	08005c63 	.word	0x08005c63
 8005c14:	08005c63 	.word	0x08005c63
 8005c18:	08005c63 	.word	0x08005c63
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c25 	.word	0x08005c25
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	885b      	ldrh	r3, [r3, #2]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]
          break;
 8005c30:	e01e      	b.n	8005c70 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 fbe9 	bl	8007410 <USBD_CtlSendData>
          break;
 8005c3e:	e017      	b.n	8005c70 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	605a      	str	r2, [r3, #4]
          break;
 8005c50:	e00e      	b.n	8005c70 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2201      	movs	r2, #1
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fbd8 	bl	8007410 <USBD_CtlSendData>
          break;
 8005c60:	e006      	b.n	8005c70 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fb62 	bl	800732e <USBD_CtlError>
          ret = USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6e:	bf00      	nop
      }
      break;
 8005c70:	e09a      	b.n	8005da8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b0b      	cmp	r3, #11
 8005c78:	f200 8086 	bhi.w	8005d88 <USBD_HID_Setup+0x1dc>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <USBD_HID_Setup+0xd8>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cb5 	.word	0x08005cb5
 8005c88:	08005d97 	.word	0x08005d97
 8005c8c:	08005d89 	.word	0x08005d89
 8005c90:	08005d89 	.word	0x08005d89
 8005c94:	08005d89 	.word	0x08005d89
 8005c98:	08005d89 	.word	0x08005d89
 8005c9c:	08005cdf 	.word	0x08005cdf
 8005ca0:	08005d89 	.word	0x08005d89
 8005ca4:	08005d89 	.word	0x08005d89
 8005ca8:	08005d89 	.word	0x08005d89
 8005cac:	08005d37 	.word	0x08005d37
 8005cb0:	08005d61 	.word	0x08005d61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d107      	bne.n	8005cd0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cc0:	f107 030a 	add.w	r3, r7, #10
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fba1 	bl	8007410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cce:	e063      	b.n	8005d98 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fb2b 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	75fb      	strb	r3, [r7, #23]
          break;
 8005cdc:	e05c      	b.n	8005d98 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b22      	cmp	r3, #34	; 0x22
 8005ce8:	d108      	bne.n	8005cfc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	88db      	ldrh	r3, [r3, #6]
 8005cee:	2b4a      	cmp	r3, #74	; 0x4a
 8005cf0:	bf28      	it	cs
 8005cf2:	234a      	movcs	r3, #74	; 0x4a
 8005cf4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <USBD_HID_Setup+0x208>)
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e015      	b.n	8005d28 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	885b      	ldrh	r3, [r3, #2]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b21      	cmp	r3, #33	; 0x21
 8005d06:	d108      	bne.n	8005d1a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005d08:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <USBD_HID_Setup+0x20c>)
 8005d0a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	88db      	ldrh	r3, [r3, #6]
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	bf28      	it	cs
 8005d14:	2309      	movcs	r3, #9
 8005d16:	82bb      	strh	r3, [r7, #20]
 8005d18:	e006      	b.n	8005d28 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 fb06 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d22:	2303      	movs	r3, #3
 8005d24:	75fb      	strb	r3, [r7, #23]
            break;
 8005d26:	e037      	b.n	8005d98 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d28:	8abb      	ldrh	r3, [r7, #20]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6939      	ldr	r1, [r7, #16]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fb6e 	bl	8007410 <USBD_CtlSendData>
          break;
 8005d34:	e030      	b.n	8005d98 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d107      	bne.n	8005d52 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3308      	adds	r3, #8
 8005d46:	2201      	movs	r2, #1
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fb60 	bl	8007410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d50:	e022      	b.n	8005d98 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 faea 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d5e:	e01b      	b.n	8005d98 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d106      	bne.n	8005d7a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	885b      	ldrh	r3, [r3, #2]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d78:	e00e      	b.n	8005d98 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fad6 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	75fb      	strb	r3, [r7, #23]
          break;
 8005d86:	e007      	b.n	8005d98 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 facf 	bl	800732e <USBD_CtlError>
          ret = USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	75fb      	strb	r3, [r7, #23]
          break;
 8005d94:	e000      	b.n	8005d98 <USBD_HID_Setup+0x1ec>
          break;
 8005d96:	bf00      	nop
      }
      break;
 8005d98:	e006      	b.n	8005da8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fac6 	bl	800732e <USBD_CtlError>
      ret = USBD_FAIL;
 8005da2:	2303      	movs	r3, #3
 8005da4:	75fb      	strb	r3, [r7, #23]
      break;
 8005da6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000080 	.word	0x20000080
 8005db8:	20000068 	.word	0x20000068

08005dbc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	32b0      	adds	r2, #176	; 0xb0
 8005dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e014      	b.n	8005e0e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d10d      	bne.n	8005e0c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	7b1b      	ldrb	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d109      	bne.n	8005e0c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <USBD_HID_SendReport+0x5c>)
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f001 ff25 	bl	8007c56 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200000ca 	.word	0x200000ca

08005e1c <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	7c1b      	ldrb	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e001      	b.n	8005e36 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005e32:	230a      	movs	r3, #10
 8005e34:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e4c:	2181      	movs	r1, #129	; 0x81
 8005e4e:	4809      	ldr	r0, [pc, #36]	; (8005e74 <USBD_HID_GetFSCfgDesc+0x30>)
 8005e50:	f000 fc35 	bl	80066be <USBD_GetEpDesc>
 8005e54:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	220a      	movs	r2, #10
 8005e60:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2222      	movs	r2, #34	; 0x22
 8005e66:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000044 	.word	0x20000044

08005e78 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e80:	2181      	movs	r1, #129	; 0x81
 8005e82:	4809      	ldr	r0, [pc, #36]	; (8005ea8 <USBD_HID_GetHSCfgDesc+0x30>)
 8005e84:	f000 fc1b 	bl	80066be <USBD_GetEpDesc>
 8005e88:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2207      	movs	r2, #7
 8005e94:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2222      	movs	r2, #34	; 0x22
 8005e9a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e9c:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000044 	.word	0x20000044

08005eac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005eb4:	2181      	movs	r1, #129	; 0x81
 8005eb6:	4809      	ldr	r0, [pc, #36]	; (8005edc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005eb8:	f000 fc01 	bl	80066be <USBD_GetEpDesc>
 8005ebc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2222      	movs	r2, #34	; 0x22
 8005ece:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000044 	.word	0x20000044

08005ee0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	32b0      	adds	r2, #176	; 0xb0
 8005ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efa:	2200      	movs	r2, #0
 8005efc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	220a      	movs	r2, #10
 8005f18:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005f1a:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	20000074 	.word	0x20000074

08005f2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e01f      	b.n	8005f84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	79fa      	ldrb	r2, [r7, #7]
 8005f76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f001 fd37 	bl	80079ec <USBD_LL_Init>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e025      	b.n	8005ff0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	32ae      	adds	r2, #174	; 0xae
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00f      	beq.n	8005fe0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	; 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	f107 020e 	add.w	r2, r7, #14
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fd3f 	bl	8007a84 <USBD_LL_Start>
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006018:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	4611      	mov	r1, r2
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	4611      	mov	r1, r2
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 f908 	bl	80072ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060b8:	461a      	mov	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d01a      	beq.n	8006104 <USBD_LL_SetupStage+0x72>
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d822      	bhi.n	8006118 <USBD_LL_SetupStage+0x86>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <USBD_LL_SetupStage+0x4a>
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d00a      	beq.n	80060f0 <USBD_LL_SetupStage+0x5e>
 80060da:	e01d      	b.n	8006118 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb5f 	bl	80067a8 <USBD_StdDevReq>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
      break;
 80060ee:	e020      	b.n	8006132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fbc7 	bl	800688c <USBD_StdItfReq>
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
      break;
 8006102:	e016      	b.n	8006132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fc29 	bl	8006964 <USBD_StdEPReq>
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
      break;
 8006116:	e00c      	b.n	8006132 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800611e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006122:	b2db      	uxtb	r3, r3
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 fd0c 	bl	8007b44 <USBD_LL_StallEP>
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]
      break;
 8006130:	bf00      	nop
  }

  return ret;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	460b      	mov	r3, r1
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800614e:	7afb      	ldrb	r3, [r7, #11]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d16e      	bne.n	8006232 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800615a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006162:	2b03      	cmp	r3, #3
 8006164:	f040 8098 	bne.w	8006298 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	429a      	cmp	r2, r3
 8006172:	d913      	bls.n	800619c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	1ad2      	subs	r2, r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	4293      	cmp	r3, r2
 800618c:	bf28      	it	cs
 800618e:	4613      	movcs	r3, r2
 8006190:	461a      	mov	r2, r3
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f001 f967 	bl	8007468 <USBD_CtlContinueRx>
 800619a:	e07d      	b.n	8006298 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d014      	beq.n	80061d4 <USBD_LL_DataOutStage+0x98>
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d81d      	bhi.n	80061ea <USBD_LL_DataOutStage+0xae>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <USBD_LL_DataOutStage+0x7c>
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d003      	beq.n	80061be <USBD_LL_DataOutStage+0x82>
 80061b6:	e018      	b.n	80061ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	75bb      	strb	r3, [r7, #22]
            break;
 80061bc:	e018      	b.n	80061f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa5e 	bl	800668a <USBD_CoreFindIF>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75bb      	strb	r3, [r7, #22]
            break;
 80061d2:	e00d      	b.n	80061f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fa60 	bl	80066a4 <USBD_CoreFindEP>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75bb      	strb	r3, [r7, #22]
            break;
 80061e8:	e002      	b.n	80061f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75bb      	strb	r3, [r7, #22]
            break;
 80061ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061f0:	7dbb      	ldrb	r3, [r7, #22]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d119      	bne.n	800622a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d113      	bne.n	800622a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006202:	7dba      	ldrb	r2, [r7, #22]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	32ae      	adds	r2, #174	; 0xae
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006212:	7dba      	ldrb	r2, [r7, #22]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800621a:	7dba      	ldrb	r2, [r7, #22]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	32ae      	adds	r2, #174	; 0xae
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 f92d 	bl	800748a <USBD_CtlSendStatus>
 8006230:	e032      	b.n	8006298 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006238:	b2db      	uxtb	r3, r3
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fa31 	bl	80066a4 <USBD_CoreFindEP>
 8006242:	4603      	mov	r3, r0
 8006244:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006246:	7dbb      	ldrb	r3, [r7, #22]
 8006248:	2bff      	cmp	r3, #255	; 0xff
 800624a:	d025      	beq.n	8006298 <USBD_LL_DataOutStage+0x15c>
 800624c:	7dbb      	ldrb	r3, [r7, #22]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d122      	bne.n	8006298 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d117      	bne.n	800628e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800625e:	7dba      	ldrb	r2, [r7, #22]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	32ae      	adds	r2, #174	; 0xae
 8006264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800626e:	7dba      	ldrb	r2, [r7, #22]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006276:	7dba      	ldrb	r2, [r7, #22]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	32ae      	adds	r2, #174	; 0xae
 800627c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	7afa      	ldrb	r2, [r7, #11]
 8006284:	4611      	mov	r1, r2
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	4798      	blx	r3
 800628a:	4603      	mov	r3, r0
 800628c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	e000      	b.n	800629a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b086      	sub	sp, #24
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	460b      	mov	r3, r1
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d16f      	bne.n	8006396 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3314      	adds	r3, #20
 80062ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d15a      	bne.n	800637c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d914      	bls.n	80062fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	1ad2      	subs	r2, r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f001 f8ac 	bl	8007446 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062ee:	2300      	movs	r3, #0
 80062f0:	2200      	movs	r2, #0
 80062f2:	2100      	movs	r1, #0
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f001 fccf 	bl	8007c98 <USBD_LL_PrepareReceive>
 80062fa:	e03f      	b.n	800637c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d11c      	bne.n	8006342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006310:	429a      	cmp	r2, r3
 8006312:	d316      	bcc.n	8006342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800631e:	429a      	cmp	r2, r3
 8006320:	d20f      	bcs.n	8006342 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006322:	2200      	movs	r2, #0
 8006324:	2100      	movs	r1, #0
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f001 f88d 	bl	8007446 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006334:	2300      	movs	r3, #0
 8006336:	2200      	movs	r2, #0
 8006338:	2100      	movs	r1, #0
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f001 fcac 	bl	8007c98 <USBD_LL_PrepareReceive>
 8006340:	e01c      	b.n	800637c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b03      	cmp	r3, #3
 800634c:	d10f      	bne.n	800636e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f001 fbe7 	bl	8007b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f001 f89a 	bl	80074b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d03a      	beq.n	80063fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff fe42 	bl	8006010 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006394:	e032      	b.n	80063fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800639c:	b2db      	uxtb	r3, r3
 800639e:	4619      	mov	r1, r3
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f97f 	bl	80066a4 <USBD_CoreFindEP>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	2bff      	cmp	r3, #255	; 0xff
 80063ae:	d025      	beq.n	80063fc <USBD_LL_DataInStage+0x15a>
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d122      	bne.n	80063fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d11c      	bne.n	80063fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063c2:	7dfa      	ldrb	r2, [r7, #23]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	32ae      	adds	r2, #174	; 0xae
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d014      	beq.n	80063fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063d2:	7dfa      	ldrb	r2, [r7, #23]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063da:	7dfa      	ldrb	r2, [r7, #23]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	32ae      	adds	r2, #174	; 0xae
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	7afa      	ldrb	r2, [r7, #11]
 80063e8:	4611      	mov	r1, r2
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	4798      	blx	r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063f8:	7dbb      	ldrb	r3, [r7, #22]
 80063fa:	e000      	b.n	80063fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d014      	beq.n	800646c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00e      	beq.n	800646c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6852      	ldr	r2, [r2, #4]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	4611      	mov	r1, r2
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006468:	2303      	movs	r3, #3
 800646a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	2200      	movs	r2, #0
 8006470:	2100      	movs	r1, #0
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fb21 	bl	8007aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2240      	movs	r2, #64	; 0x40
 8006484:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	2200      	movs	r2, #0
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 fb13 	bl	8007aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2240      	movs	r2, #64	; 0x40
 800649e:	621a      	str	r2, [r3, #32]

  return ret;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2204      	movs	r2, #4
 80064e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b04      	cmp	r3, #4
 8006508:	d106      	bne.n	8006518 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006510:	b2da      	uxtb	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d110      	bne.n	800655c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	32ae      	adds	r2, #174	; 0xae
 800657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	e01c      	b.n	80065c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b03      	cmp	r3, #3
 8006592:	d115      	bne.n	80065c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	32ae      	adds	r2, #174	; 0xae
 800659e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	32ae      	adds	r2, #174	; 0xae
 80065b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	4611      	mov	r1, r2
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	32ae      	adds	r2, #174	; 0xae
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e01c      	b.n	8006626 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d115      	bne.n	8006624 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	32ae      	adds	r2, #174	; 0xae
 8006602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	32ae      	adds	r2, #174	; 0xae
 8006616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	4611      	mov	r1, r2
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6852      	ldr	r2, [r2, #4]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	4611      	mov	r1, r2
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800667c:	2303      	movs	r3, #3
 800667e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006696:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	885b      	ldrh	r3, [r3, #2]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d920      	bls.n	8006728 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066ee:	e013      	b.n	8006718 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066f0:	f107 030a 	add.w	r3, r7, #10
 80066f4:	4619      	mov	r1, r3
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f000 f81b 	bl	8006732 <USBD_GetNextDesc>
 80066fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b05      	cmp	r3, #5
 8006704:	d108      	bne.n	8006718 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	789b      	ldrb	r3, [r3, #2]
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	429a      	cmp	r2, r3
 8006712:	d008      	beq.n	8006726 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	885b      	ldrh	r3, [r3, #2]
 800671c:	b29a      	uxth	r2, r3
 800671e:	897b      	ldrh	r3, [r7, #10]
 8006720:	429a      	cmp	r2, r3
 8006722:	d8e5      	bhi.n	80066f0 <USBD_GetEpDesc+0x32>
 8006724:	e000      	b.n	8006728 <USBD_GetEpDesc+0x6a>
          break;
 8006726:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006728:	693b      	ldr	r3, [r7, #16]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	881a      	ldrh	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	4413      	add	r3, r2
 800674c:	b29a      	uxth	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	3301      	adds	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800678a:	8a3b      	ldrh	r3, [r7, #16]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	b21a      	sxth	r2, r3
 8006790:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006794:	4313      	orrs	r3, r2
 8006796:	b21b      	sxth	r3, r3
 8006798:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800679a:	89fb      	ldrh	r3, [r7, #14]
}
 800679c:	4618      	mov	r0, r3
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d005      	beq.n	80067ce <USBD_StdDevReq+0x26>
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d857      	bhi.n	8006876 <USBD_StdDevReq+0xce>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00f      	beq.n	80067ea <USBD_StdDevReq+0x42>
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d153      	bne.n	8006876 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32ae      	adds	r2, #174	; 0xae
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
      break;
 80067e8:	e04a      	b.n	8006880 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	2b09      	cmp	r3, #9
 80067f0:	d83b      	bhi.n	800686a <USBD_StdDevReq+0xc2>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBD_StdDevReq+0x50>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	08006861 	.word	0x08006861
 8006800:	0800686b 	.word	0x0800686b
 8006804:	08006857 	.word	0x08006857
 8006808:	0800686b 	.word	0x0800686b
 800680c:	0800682b 	.word	0x0800682b
 8006810:	08006821 	.word	0x08006821
 8006814:	0800686b 	.word	0x0800686b
 8006818:	08006843 	.word	0x08006843
 800681c:	08006835 	.word	0x08006835
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa3c 	bl	8006ca0 <USBD_GetDescriptor>
          break;
 8006828:	e024      	b.n	8006874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fba1 	bl	8006f74 <USBD_SetAddress>
          break;
 8006832:	e01f      	b.n	8006874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fbe0 	bl	8006ffc <USBD_SetConfig>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
          break;
 8006840:	e018      	b.n	8006874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fc83 	bl	8007150 <USBD_GetConfig>
          break;
 800684a:	e013      	b.n	8006874 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fcb4 	bl	80071bc <USBD_GetStatus>
          break;
 8006854:	e00e      	b.n	8006874 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fce3 	bl	8007224 <USBD_SetFeature>
          break;
 800685e:	e009      	b.n	8006874 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fd07 	bl	8007276 <USBD_ClrFeature>
          break;
 8006868:	e004      	b.n	8006874 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fd5e 	bl	800732e <USBD_CtlError>
          break;
 8006872:	bf00      	nop
      }
      break;
 8006874:	e004      	b.n	8006880 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fd58 	bl	800732e <USBD_CtlError>
      break;
 800687e:	bf00      	nop
  }

  return ret;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d005      	beq.n	80068b2 <USBD_StdItfReq+0x26>
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d852      	bhi.n	8006950 <USBD_StdItfReq+0xc4>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <USBD_StdItfReq+0x26>
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d14e      	bne.n	8006950 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d840      	bhi.n	8006942 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	889b      	ldrh	r3, [r3, #4]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d836      	bhi.n	8006938 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	889b      	ldrh	r3, [r3, #4]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fed9 	bl	800668a <USBD_CoreFindIF>
 80068d8:	4603      	mov	r3, r0
 80068da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2bff      	cmp	r3, #255	; 0xff
 80068e0:	d01d      	beq.n	800691e <USBD_StdItfReq+0x92>
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11a      	bne.n	800691e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068e8:	7bba      	ldrb	r2, [r7, #14]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	32ae      	adds	r2, #174	; 0xae
 80068ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068f8:	7bba      	ldrb	r2, [r7, #14]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006900:	7bba      	ldrb	r2, [r7, #14]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	32ae      	adds	r2, #174	; 0xae
 8006906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006916:	e004      	b.n	8006922 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800691c:	e001      	b.n	8006922 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d110      	bne.n	800694c <USBD_StdItfReq+0xc0>
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10d      	bne.n	800694c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fdaa 	bl	800748a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006936:	e009      	b.n	800694c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fcf7 	bl	800732e <USBD_CtlError>
          break;
 8006940:	e004      	b.n	800694c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fcf2 	bl	800732e <USBD_CtlError>
          break;
 800694a:	e000      	b.n	800694e <USBD_StdItfReq+0xc2>
          break;
 800694c:	bf00      	nop
      }
      break;
 800694e:	e004      	b.n	800695a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fceb 	bl	800732e <USBD_CtlError>
      break;
 8006958:	bf00      	nop
  }

  return ret;
 800695a:	7bfb      	ldrb	r3, [r7, #15]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	889b      	ldrh	r3, [r3, #4]
 8006976:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d007      	beq.n	8006994 <USBD_StdEPReq+0x30>
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	f200 817f 	bhi.w	8006c88 <USBD_StdEPReq+0x324>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d02a      	beq.n	80069e4 <USBD_StdEPReq+0x80>
 800698e:	2b20      	cmp	r3, #32
 8006990:	f040 817a 	bne.w	8006c88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fe83 	bl	80066a4 <USBD_CoreFindEP>
 800699e:	4603      	mov	r3, r0
 80069a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069a2:	7b7b      	ldrb	r3, [r7, #13]
 80069a4:	2bff      	cmp	r3, #255	; 0xff
 80069a6:	f000 8174 	beq.w	8006c92 <USBD_StdEPReq+0x32e>
 80069aa:	7b7b      	ldrb	r3, [r7, #13]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8170 	bne.w	8006c92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069b2:	7b7a      	ldrb	r2, [r7, #13]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069ba:	7b7a      	ldrb	r2, [r7, #13]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	32ae      	adds	r2, #174	; 0xae
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8163 	beq.w	8006c92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069cc:	7b7a      	ldrb	r2, [r7, #13]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	32ae      	adds	r2, #174	; 0xae
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069e2:	e156      	b.n	8006c92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d008      	beq.n	80069fe <USBD_StdEPReq+0x9a>
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	f300 8145 	bgt.w	8006c7c <USBD_StdEPReq+0x318>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 809b 	beq.w	8006b2e <USBD_StdEPReq+0x1ca>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d03c      	beq.n	8006a76 <USBD_StdEPReq+0x112>
 80069fc:	e13e      	b.n	8006c7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d002      	beq.n	8006a10 <USBD_StdEPReq+0xac>
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d016      	beq.n	8006a3c <USBD_StdEPReq+0xd8>
 8006a0e:	e02c      	b.n	8006a6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <USBD_StdEPReq+0xce>
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	2b80      	cmp	r3, #128	; 0x80
 8006a1a:	d00a      	beq.n	8006a32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f88f 	bl	8007b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a26:	2180      	movs	r1, #128	; 0x80
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f88b 	bl	8007b44 <USBD_LL_StallEP>
 8006a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a30:	e020      	b.n	8006a74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc7a 	bl	800732e <USBD_CtlError>
              break;
 8006a3a:	e01b      	b.n	8006a74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	885b      	ldrh	r3, [r3, #2]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10e      	bne.n	8006a62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <USBD_StdEPReq+0xfe>
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d008      	beq.n	8006a62 <USBD_StdEPReq+0xfe>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	88db      	ldrh	r3, [r3, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f871 	bl	8007b44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fd11 	bl	800748a <USBD_CtlSendStatus>

              break;
 8006a68:	e004      	b.n	8006a74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc5e 	bl	800732e <USBD_CtlError>
              break;
 8006a72:	bf00      	nop
          }
          break;
 8006a74:	e107      	b.n	8006c86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d002      	beq.n	8006a88 <USBD_StdEPReq+0x124>
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d016      	beq.n	8006ab4 <USBD_StdEPReq+0x150>
 8006a86:	e04b      	b.n	8006b20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <USBD_StdEPReq+0x146>
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b80      	cmp	r3, #128	; 0x80
 8006a92:	d00a      	beq.n	8006aaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f853 	bl	8007b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f84f 	bl	8007b44 <USBD_LL_StallEP>
 8006aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006aa8:	e040      	b.n	8006b2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc3e 	bl	800732e <USBD_CtlError>
              break;
 8006ab2:	e03b      	b.n	8006b2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	885b      	ldrh	r3, [r3, #2]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d136      	bne.n	8006b2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f859 	bl	8007b82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fcda 	bl	800748a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fde2 	bl	80066a4 <USBD_CoreFindEP>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ae4:	7b7b      	ldrb	r3, [r7, #13]
 8006ae6:	2bff      	cmp	r3, #255	; 0xff
 8006ae8:	d01f      	beq.n	8006b2a <USBD_StdEPReq+0x1c6>
 8006aea:	7b7b      	ldrb	r3, [r7, #13]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11c      	bne.n	8006b2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006af0:	7b7a      	ldrb	r2, [r7, #13]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006af8:	7b7a      	ldrb	r2, [r7, #13]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32ae      	adds	r2, #174	; 0xae
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d010      	beq.n	8006b2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b08:	7b7a      	ldrb	r2, [r7, #13]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	32ae      	adds	r2, #174	; 0xae
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b1e:	e004      	b.n	8006b2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc03 	bl	800732e <USBD_CtlError>
              break;
 8006b28:	e000      	b.n	8006b2c <USBD_StdEPReq+0x1c8>
              break;
 8006b2a:	bf00      	nop
          }
          break;
 8006b2c:	e0ab      	b.n	8006c86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d002      	beq.n	8006b40 <USBD_StdEPReq+0x1dc>
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d032      	beq.n	8006ba4 <USBD_StdEPReq+0x240>
 8006b3e:	e097      	b.n	8006c70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <USBD_StdEPReq+0x1f2>
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d004      	beq.n	8006b56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fbed 	bl	800732e <USBD_CtlError>
                break;
 8006b54:	e091      	b.n	8006c7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da0b      	bge.n	8006b76 <USBD_StdEPReq+0x212>
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	3310      	adds	r3, #16
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	3304      	adds	r3, #4
 8006b74:	e00b      	b.n	8006b8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fc37 	bl	8007410 <USBD_CtlSendData>
              break;
 8006ba2:	e06a      	b.n	8006c7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da11      	bge.n	8006bd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	f003 020f 	and.w	r2, r3, #15
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	440b      	add	r3, r1
 8006bbe:	3324      	adds	r3, #36	; 0x24
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d117      	bne.n	8006bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fbb0 	bl	800732e <USBD_CtlError>
                  break;
 8006bce:	e054      	b.n	8006c7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	f003 020f 	and.w	r2, r3, #15
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	440b      	add	r3, r1
 8006be2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fb9d 	bl	800732e <USBD_CtlError>
                  break;
 8006bf4:	e041      	b.n	8006c7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	da0b      	bge.n	8006c16 <USBD_StdEPReq+0x2b2>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	3310      	adds	r3, #16
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	3304      	adds	r3, #4
 8006c14:	e00b      	b.n	8006c2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <USBD_StdEPReq+0x2d8>
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	2b80      	cmp	r3, #128	; 0x80
 8006c3a:	d103      	bne.n	8006c44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e00e      	b.n	8006c62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 ffb9 	bl	8007bc0 <USBD_LL_IsStallEP>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2202      	movs	r2, #2
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fbd1 	bl	8007410 <USBD_CtlSendData>
              break;
 8006c6e:	e004      	b.n	8006c7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb5b 	bl	800732e <USBD_CtlError>
              break;
 8006c78:	bf00      	nop
          }
          break;
 8006c7a:	e004      	b.n	8006c86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fb55 	bl	800732e <USBD_CtlError>
          break;
 8006c84:	bf00      	nop
      }
      break;
 8006c86:	e005      	b.n	8006c94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fb4f 	bl	800732e <USBD_CtlError>
      break;
 8006c90:	e000      	b.n	8006c94 <USBD_StdEPReq+0x330>
      break;
 8006c92:	bf00      	nop
  }

  return ret;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	f200 8128 	bhi.w	8006f16 <USBD_GetDescriptor+0x276>
 8006cc6:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <USBD_GetDescriptor+0x2c>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006d01 	.word	0x08006d01
 8006cd4:	08006d41 	.word	0x08006d41
 8006cd8:	08006f17 	.word	0x08006f17
 8006cdc:	08006f17 	.word	0x08006f17
 8006ce0:	08006eb7 	.word	0x08006eb7
 8006ce4:	08006ee3 	.word	0x08006ee3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7c12      	ldrb	r2, [r2, #16]
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
      break;
 8006cfe:	e112      	b.n	8006f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7c1b      	ldrb	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	f107 0208 	add.w	r2, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	2202      	movs	r2, #2
 8006d20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d22:	e100      	b.n	8006f26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f107 0208 	add.w	r2, r7, #8
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	701a      	strb	r2, [r3, #0]
      break;
 8006d3e:	e0f2      	b.n	8006f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	885b      	ldrh	r3, [r3, #2]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	f200 80ac 	bhi.w	8006ea4 <USBD_GetDescriptor+0x204>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <USBD_GetDescriptor+0xb4>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d6d 	.word	0x08006d6d
 8006d58:	08006da1 	.word	0x08006da1
 8006d5c:	08006dd5 	.word	0x08006dd5
 8006d60:	08006e09 	.word	0x08006e09
 8006d64:	08006e3d 	.word	0x08006e3d
 8006d68:	08006e71 	.word	0x08006e71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	7c12      	ldrb	r2, [r2, #16]
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
 8006d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8e:	e091      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 facb 	bl	800732e <USBD_CtlError>
            err++;
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9e:	e089      	b.n	8006eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	f107 0108 	add.w	r1, r7, #8
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc2:	e077      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fab1 	bl	800732e <USBD_CtlError>
            err++;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd2:	e06f      	b.n	8006eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df6:	e05d      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa97 	bl	800732e <USBD_CtlError>
            err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
          break;
 8006e06:	e055      	b.n	8006eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2a:	e043      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa7d 	bl	800732e <USBD_CtlError>
            err++;
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	3301      	adds	r3, #1
 8006e38:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3a:	e03b      	b.n	8006eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e029      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa63 	bl	800732e <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e021      	b.n	8006eb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7c12      	ldrb	r2, [r2, #16]
 8006e88:	f107 0108 	add.w	r1, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e92:	e00f      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa49 	bl	800732e <USBD_CtlError>
            err++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea2:	e007      	b.n	8006eb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa41 	bl	800732e <USBD_CtlError>
          err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006eb2:	bf00      	nop
      }
      break;
 8006eb4:	e037      	b.n	8006f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7c1b      	ldrb	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	f107 0208 	add.w	r2, r7, #8
 8006eca:	4610      	mov	r0, r2
 8006ecc:	4798      	blx	r3
 8006ece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed0:	e029      	b.n	8006f26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa2a 	bl	800732e <USBD_CtlError>
        err++;
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	3301      	adds	r3, #1
 8006ede:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee0:	e021      	b.n	8006f26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7c1b      	ldrb	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	f107 0208 	add.w	r2, r7, #8
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4798      	blx	r3
 8006efa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	2207      	movs	r2, #7
 8006f02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f04:	e00f      	b.n	8006f26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fa10 	bl	800732e <USBD_CtlError>
        err++;
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	3301      	adds	r3, #1
 8006f12:	72fb      	strb	r3, [r7, #11]
      break;
 8006f14:	e007      	b.n	8006f26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa08 	bl	800732e <USBD_CtlError>
      err++;
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	3301      	adds	r3, #1
 8006f22:	72fb      	strb	r3, [r7, #11]
      break;
 8006f24:	bf00      	nop
  }

  if (err != 0U)
 8006f26:	7afb      	ldrb	r3, [r7, #11]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d11e      	bne.n	8006f6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	88db      	ldrh	r3, [r3, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d016      	beq.n	8006f62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f34:	893b      	ldrh	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00e      	beq.n	8006f58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	88da      	ldrh	r2, [r3, #6]
 8006f3e:	893b      	ldrh	r3, [r7, #8]
 8006f40:	4293      	cmp	r3, r2
 8006f42:	bf28      	it	cs
 8006f44:	4613      	movcs	r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f4a:	893b      	ldrh	r3, [r7, #8]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa5d 	bl	8007410 <USBD_CtlSendData>
 8006f56:	e009      	b.n	8006f6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9e7 	bl	800732e <USBD_CtlError>
 8006f60:	e004      	b.n	8006f6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa91 	bl	800748a <USBD_CtlSendStatus>
 8006f68:	e000      	b.n	8006f6c <USBD_GetDescriptor+0x2cc>
    return;
 8006f6a:	bf00      	nop
  }
}
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop

08006f74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	889b      	ldrh	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d131      	bne.n	8006fea <USBD_SetAddress+0x76>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88db      	ldrh	r3, [r3, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d12d      	bne.n	8006fea <USBD_SetAddress+0x76>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	885b      	ldrh	r3, [r3, #2]
 8006f92:	2b7f      	cmp	r3, #127	; 0x7f
 8006f94:	d829      	bhi.n	8006fea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	885b      	ldrh	r3, [r3, #2]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d104      	bne.n	8006fb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f9bc 	bl	800732e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	e01d      	b.n	8006ff4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7bfa      	ldrb	r2, [r7, #15]
 8006fbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fe27 	bl	8007c18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa5d 	bl	800748a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fde:	e009      	b.n	8006ff4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	e004      	b.n	8006ff4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f99e 	bl	800732e <USBD_CtlError>
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	b2da      	uxtb	r2, r3
 8007010:	4b4e      	ldr	r3, [pc, #312]	; (800714c <USBD_SetConfig+0x150>)
 8007012:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007014:	4b4d      	ldr	r3, [pc, #308]	; (800714c <USBD_SetConfig+0x150>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d905      	bls.n	8007028 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f985 	bl	800732e <USBD_CtlError>
    return USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	e08c      	b.n	8007142 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d002      	beq.n	800703a <USBD_SetConfig+0x3e>
 8007034:	2b03      	cmp	r3, #3
 8007036:	d029      	beq.n	800708c <USBD_SetConfig+0x90>
 8007038:	e075      	b.n	8007126 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800703a:	4b44      	ldr	r3, [pc, #272]	; (800714c <USBD_SetConfig+0x150>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d020      	beq.n	8007084 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007042:	4b42      	ldr	r3, [pc, #264]	; (800714c <USBD_SetConfig+0x150>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800704c:	4b3f      	ldr	r3, [pc, #252]	; (800714c <USBD_SetConfig+0x150>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fe ffe7 	bl	8006026 <USBD_SetClassConfig>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d008      	beq.n	8007074 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f962 	bl	800732e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007072:	e065      	b.n	8007140 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa08 	bl	800748a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2203      	movs	r2, #3
 800707e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007082:	e05d      	b.n	8007140 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa00 	bl	800748a <USBD_CtlSendStatus>
      break;
 800708a:	e059      	b.n	8007140 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800708c:	4b2f      	ldr	r3, [pc, #188]	; (800714c <USBD_SetConfig+0x150>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d112      	bne.n	80070ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800709c:	4b2b      	ldr	r3, [pc, #172]	; (800714c <USBD_SetConfig+0x150>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <USBD_SetConfig+0x150>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fe ffd6 	bl	800605e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9e9 	bl	800748a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070b8:	e042      	b.n	8007140 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80070ba:	4b24      	ldr	r3, [pc, #144]	; (800714c <USBD_SetConfig+0x150>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d02a      	beq.n	800711e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fe ffc4 	bl	800605e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <USBD_SetConfig+0x150>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070e0:	4b1a      	ldr	r3, [pc, #104]	; (800714c <USBD_SetConfig+0x150>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fe ff9d 	bl	8006026 <USBD_SetClassConfig>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00f      	beq.n	8007116 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f918 	bl	800732e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fe ffa9 	bl	800605e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007114:	e014      	b.n	8007140 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9b7 	bl	800748a <USBD_CtlSendStatus>
      break;
 800711c:	e010      	b.n	8007140 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9b3 	bl	800748a <USBD_CtlSendStatus>
      break;
 8007124:	e00c      	b.n	8007140 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f900 	bl	800732e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <USBD_SetConfig+0x150>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe ff92 	bl	800605e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800713a:	2303      	movs	r3, #3
 800713c:	73fb      	strb	r3, [r7, #15]
      break;
 800713e:	bf00      	nop
  }

  return ret;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000180 	.word	0x20000180

08007150 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	88db      	ldrh	r3, [r3, #6]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d004      	beq.n	800716c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8e2 	bl	800732e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800716a:	e023      	b.n	80071b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	dc02      	bgt.n	800717e <USBD_GetConfig+0x2e>
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc03      	bgt.n	8007184 <USBD_GetConfig+0x34>
 800717c:	e015      	b.n	80071aa <USBD_GetConfig+0x5a>
 800717e:	2b03      	cmp	r3, #3
 8007180:	d00b      	beq.n	800719a <USBD_GetConfig+0x4a>
 8007182:	e012      	b.n	80071aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3308      	adds	r3, #8
 800718e:	2201      	movs	r2, #1
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f93c 	bl	8007410 <USBD_CtlSendData>
        break;
 8007198:	e00c      	b.n	80071b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3304      	adds	r3, #4
 800719e:	2201      	movs	r2, #1
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f934 	bl	8007410 <USBD_CtlSendData>
        break;
 80071a8:	e004      	b.n	80071b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f8be 	bl	800732e <USBD_CtlError>
        break;
 80071b2:	bf00      	nop
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d81e      	bhi.n	8007212 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	88db      	ldrh	r3, [r3, #6]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d004      	beq.n	80071e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8a5 	bl	800732e <USBD_CtlError>
        break;
 80071e4:	e01a      	b.n	800721c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f043 0202 	orr.w	r2, r3, #2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	330c      	adds	r3, #12
 8007206:	2202      	movs	r2, #2
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f900 	bl	8007410 <USBD_CtlSendData>
      break;
 8007210:	e004      	b.n	800721c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f88a 	bl	800732e <USBD_CtlError>
      break;
 800721a:	bf00      	nop
  }
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	885b      	ldrh	r3, [r3, #2]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d107      	bne.n	8007246 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f923 	bl	800748a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007244:	e013      	b.n	800726e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	885b      	ldrh	r3, [r3, #2]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d10b      	bne.n	8007266 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	889b      	ldrh	r3, [r3, #4]
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	b29b      	uxth	r3, r3
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f913 	bl	800748a <USBD_CtlSendStatus>
}
 8007264:	e003      	b.n	800726e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f860 	bl	800732e <USBD_CtlError>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	2b02      	cmp	r3, #2
 800728c:	d80b      	bhi.n	80072a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	885b      	ldrh	r3, [r3, #2]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d10c      	bne.n	80072b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8f3 	bl	800748a <USBD_CtlSendStatus>
      }
      break;
 80072a4:	e004      	b.n	80072b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f840 	bl	800732e <USBD_CtlError>
      break;
 80072ae:	e000      	b.n	80072b2 <USBD_ClrFeature+0x3c>
      break;
 80072b0:	bf00      	nop
  }
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	781a      	ldrb	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3301      	adds	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7ff fa41 	bl	800676c <SWAPBYTE>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fa34 	bl	800676c <SWAPBYTE>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3301      	adds	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fa27 	bl	800676c <SWAPBYTE>
 800731e:	4603      	mov	r3, r0
 8007320:	461a      	mov	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	80da      	strh	r2, [r3, #6]
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007338:	2180      	movs	r1, #128	; 0x80
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fc02 	bl	8007b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007340:	2100      	movs	r1, #0
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fbfe 	bl	8007b44 <USBD_LL_StallEP>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d036      	beq.n	80073d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	f000 f836 	bl	80073dc <USBD_GetLen>
 8007370:	4603      	mov	r3, r0
 8007372:	3301      	adds	r3, #1
 8007374:	b29b      	uxth	r3, r3
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	4413      	add	r3, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	701a      	strb	r2, [r3, #0]
  idx++;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	3301      	adds	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4413      	add	r3, r2
 8007396:	2203      	movs	r2, #3
 8007398:	701a      	strb	r2, [r3, #0]
  idx++;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	3301      	adds	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073a0:	e013      	b.n	80073ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	4413      	add	r3, r2
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	3301      	adds	r3, #1
 80073b2:	613b      	str	r3, [r7, #16]
    idx++;
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	3301      	adds	r3, #1
 80073b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	4413      	add	r3, r2
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	3301      	adds	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e7      	bne.n	80073a2 <USBD_GetString+0x52>
 80073d2:	e000      	b.n	80073d6 <USBD_GetString+0x86>
    return;
 80073d4:	bf00      	nop
  }
}
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073ec:	e005      	b.n	80073fa <USBD_GetLen+0x1e>
  {
    len++;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	3301      	adds	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f5      	bne.n	80073ee <USBD_GetLen+0x12>
  }

  return len;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2202      	movs	r2, #2
 8007420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	2100      	movs	r1, #0
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 fc0d 	bl	8007c56 <USBD_LL_Transmit>

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	2100      	movs	r1, #0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fbfc 	bl	8007c56 <USBD_LL_Transmit>

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	2100      	movs	r1, #0
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fc0c 	bl	8007c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800749a:	2300      	movs	r3, #0
 800749c:	2200      	movs	r2, #0
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fbd8 	bl	8007c56 <USBD_LL_Transmit>

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2205      	movs	r2, #5
 80074bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c0:	2300      	movs	r3, #0
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fbe6 	bl	8007c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074dc:	2200      	movs	r2, #0
 80074de:	490e      	ldr	r1, [pc, #56]	; (8007518 <MX_USB_DEVICE_Init+0x40>)
 80074e0:	480e      	ldr	r0, [pc, #56]	; (800751c <MX_USB_DEVICE_Init+0x44>)
 80074e2:	f7fe fd23 	bl	8005f2c <USBD_Init>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074ec:	f7fa f838 	bl	8001560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074f0:	490b      	ldr	r1, [pc, #44]	; (8007520 <MX_USB_DEVICE_Init+0x48>)
 80074f2:	480a      	ldr	r0, [pc, #40]	; (800751c <MX_USB_DEVICE_Init+0x44>)
 80074f4:	f7fe fd4a 	bl	8005f8c <USBD_RegisterClass>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074fe:	f7fa f82f 	bl	8001560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007502:	4806      	ldr	r0, [pc, #24]	; (800751c <MX_USB_DEVICE_Init+0x44>)
 8007504:	f7fe fd78 	bl	8005ff8 <USBD_Start>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800750e:	f7fa f827 	bl	8001560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	200000cc 	.word	0x200000cc
 800751c:	20000184 	.word	0x20000184
 8007520:	2000000c 	.word	0x2000000c

08007524 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	6039      	str	r1, [r7, #0]
 800752e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2212      	movs	r2, #18
 8007534:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	200000e8 	.word	0x200000e8

08007548 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2204      	movs	r2, #4
 8007558:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800755a:	4b03      	ldr	r3, [pc, #12]	; (8007568 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	200000fc 	.word	0x200000fc

0800756c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4907      	ldr	r1, [pc, #28]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007582:	4808      	ldr	r0, [pc, #32]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007584:	f7ff fee4 	bl	8007350 <USBD_GetString>
 8007588:	e004      	b.n	8007594 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4904      	ldr	r1, [pc, #16]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800758e:	4805      	ldr	r0, [pc, #20]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007590:	f7ff fede 	bl	8007350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000460 	.word	0x20000460
 80075a4:	08008f18 	.word	0x08008f18

080075a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	4904      	ldr	r1, [pc, #16]	; (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b8:	4804      	ldr	r0, [pc, #16]	; (80075cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075ba:	f7ff fec9 	bl	8007350 <USBD_GetString>
  return USBD_StrDesc;
 80075be:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000460 	.word	0x20000460
 80075cc:	08008f30 	.word	0x08008f30

080075d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	221a      	movs	r2, #26
 80075e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075e2:	f000 f843 	bl	800766c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075e6:	4b02      	ldr	r3, [pc, #8]	; (80075f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000100 	.word	0x20000100

080075f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4907      	ldr	r1, [pc, #28]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800760a:	4808      	ldr	r0, [pc, #32]	; (800762c <USBD_FS_ConfigStrDescriptor+0x38>)
 800760c:	f7ff fea0 	bl	8007350 <USBD_GetString>
 8007610:	e004      	b.n	800761c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007618:	f7ff fe9a 	bl	8007350 <USBD_GetString>
  }
  return USBD_StrDesc;
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000460 	.word	0x20000460
 800762c:	08008f44 	.word	0x08008f44

08007630 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4907      	ldr	r1, [pc, #28]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007646:	4808      	ldr	r0, [pc, #32]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007648:	f7ff fe82 	bl	8007350 <USBD_GetString>
 800764c:	e004      	b.n	8007658 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4904      	ldr	r1, [pc, #16]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007652:	4805      	ldr	r0, [pc, #20]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007654:	f7ff fe7c 	bl	8007350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007658:	4b02      	ldr	r3, [pc, #8]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000460 	.word	0x20000460
 8007668:	08008f50 	.word	0x08008f50

0800766c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <Get_SerialNum+0x44>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <Get_SerialNum+0x48>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <Get_SerialNum+0x4c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007692:	2208      	movs	r2, #8
 8007694:	4909      	ldr	r1, [pc, #36]	; (80076bc <Get_SerialNum+0x50>)
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f814 	bl	80076c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800769c:	2204      	movs	r2, #4
 800769e:	4908      	ldr	r1, [pc, #32]	; (80076c0 <Get_SerialNum+0x54>)
 80076a0:	68b8      	ldr	r0, [r7, #8]
 80076a2:	f000 f80f 	bl	80076c4 <IntToUnicode>
  }
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	1fff7a10 	.word	0x1fff7a10
 80076b4:	1fff7a14 	.word	0x1fff7a14
 80076b8:	1fff7a18 	.word	0x1fff7a18
 80076bc:	20000102 	.word	0x20000102
 80076c0:	20000112 	.word	0x20000112

080076c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e027      	b.n	800772c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	d80b      	bhi.n	80076fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0f1b      	lsrs	r3, r3, #28
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4619      	mov	r1, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	440b      	add	r3, r1
 80076f4:	3230      	adds	r2, #48	; 0x30
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e00a      	b.n	8007712 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3237      	adds	r2, #55	; 0x37
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	3301      	adds	r3, #1
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4413      	add	r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	3301      	adds	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
 800772c:	7dfa      	ldrb	r2, [r7, #23]
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	429a      	cmp	r2, r3
 8007732:	d3d3      	bcc.n	80076dc <IntToUnicode+0x18>
  }
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007764:	d147      	bne.n	80077f6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	4b25      	ldr	r3, [pc, #148]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4a24      	ldr	r2, [pc, #144]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6313      	str	r3, [r2, #48]	; 0x30
 8007776:	4b22      	ldr	r3, [pc, #136]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007782:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007788:	2302      	movs	r3, #2
 800778a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778c:	2300      	movs	r3, #0
 800778e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007790:	2303      	movs	r3, #3
 8007792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007794:	230a      	movs	r3, #10
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007798:	f107 0314 	add.w	r3, r7, #20
 800779c:	4619      	mov	r1, r3
 800779e:	4819      	ldr	r0, [pc, #100]	; (8007804 <HAL_PCD_MspInit+0xc0>)
 80077a0:	f7fa f96c 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80077a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077aa:	2300      	movs	r3, #0
 80077ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80077b2:	f107 0314 	add.w	r3, r7, #20
 80077b6:	4619      	mov	r1, r3
 80077b8:	4812      	ldr	r0, [pc, #72]	; (8007804 <HAL_PCD_MspInit+0xc0>)
 80077ba:	f7fa f95f 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077be:	4b10      	ldr	r3, [pc, #64]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	6353      	str	r3, [r2, #52]	; 0x34
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 80077d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d2:	4a0b      	ldr	r2, [pc, #44]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 80077d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077d8:	6453      	str	r3, [r2, #68]	; 0x44
 80077da:	4b09      	ldr	r3, [pc, #36]	; (8007800 <HAL_PCD_MspInit+0xbc>)
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077e6:	2200      	movs	r2, #0
 80077e8:	2100      	movs	r1, #0
 80077ea:	2043      	movs	r0, #67	; 0x43
 80077ec:	f7fa f90f 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077f0:	2043      	movs	r0, #67	; 0x43
 80077f2:	f7fa f928 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077f6:	bf00      	nop
 80077f8:	3728      	adds	r7, #40	; 0x28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	40023800 	.word	0x40023800
 8007804:	40020000 	.word	0x40020000

08007808 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7fe fc37 	bl	8006092 <USBD_LL_SetupStage>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	4619      	mov	r1, r3
 8007856:	f7fe fc71 	bl	800613c <USBD_LL_DataOutStage>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007874:	78fa      	ldrb	r2, [r7, #3]
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	334c      	adds	r3, #76	; 0x4c
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	4619      	mov	r1, r3
 800788a:	f7fe fd0a 	bl	80062a2 <USBD_LL_DataInStage>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fe3e 	bl	8006526 <USBD_LL_SOF>
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078ba:	2301      	movs	r3, #1
 80078bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
 80078ca:	e008      	b.n	80078de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d102      	bne.n	80078da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
 80078d8:	e001      	b.n	80078de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078da:	f7f9 fe41 	bl	8001560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fdde 	bl	80064aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fd86 	bl	8006406 <USBD_LL_Reset>
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fdd9 	bl	80064ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <HAL_PCD_SuspendCallback+0x48>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	4a03      	ldr	r2, [pc, #12]	; (800794c <HAL_PCD_SuspendCallback+0x48>)
 800793e:	f043 0306 	orr.w	r3, r3, #6
 8007942:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	e000ed00 	.word	0xe000ed00

08007950 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fdc9 	bl	80064f6 <USBD_LL_Resume>
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fe21 	bl	80065ca <USBD_LL_IsoOUTIncomplete>
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fddd 	bl	8006566 <USBD_LL_IsoINIncomplete>
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fe33 	bl	800662e <USBD_LL_DevConnected>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fe30 	bl	8006644 <USBD_LL_DevDisconnected>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d13c      	bne.n	8007a76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079fc:	4a20      	ldr	r2, [pc, #128]	; (8007a80 <USBD_LL_Init+0x94>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a1e      	ldr	r2, [pc, #120]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a0c:	4b1c      	ldr	r3, [pc, #112]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a16:	2204      	movs	r2, #4
 8007a18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a1a:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a20:	4b17      	ldr	r3, [pc, #92]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a28:	2202      	movs	r2, #2
 8007a2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007a2c:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a38:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a3e:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a4a:	480d      	ldr	r0, [pc, #52]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a4c:	f7fa f9f3 	bl	8001e36 <HAL_PCD_Init>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a56:	f7f9 fd83 	bl	8001560 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a5a:	2180      	movs	r1, #128	; 0x80
 8007a5c:	4808      	ldr	r0, [pc, #32]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a5e:	f7fb fc32 	bl	80032c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a62:	2240      	movs	r2, #64	; 0x40
 8007a64:	2100      	movs	r1, #0
 8007a66:	4806      	ldr	r0, [pc, #24]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a68:	f7fb fbe6 	bl	8003238 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a6c:	2280      	movs	r2, #128	; 0x80
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4803      	ldr	r0, [pc, #12]	; (8007a80 <USBD_LL_Init+0x94>)
 8007a72:	f7fb fbe1 	bl	8003238 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000660 	.word	0x20000660

08007a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fa fae8 	bl	8002070 <HAL_PCD_Start>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f930 	bl	8007d0c <USBD_Get_USB_Status>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4603      	mov	r3, r0
 8007aca:	70fb      	strb	r3, [r7, #3]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70bb      	strb	r3, [r7, #2]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ae2:	78bb      	ldrb	r3, [r7, #2]
 8007ae4:	883a      	ldrh	r2, [r7, #0]
 8007ae6:	78f9      	ldrb	r1, [r7, #3]
 8007ae8:	f7fa ffb9 	bl	8002a5e <HAL_PCD_EP_Open>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f90a 	bl	8007d0c <USBD_Get_USB_Status>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fb f802 	bl	8002b2e <HAL_PCD_EP_Close>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f8eb 	bl	8007d0c <USBD_Get_USB_Status>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fb f8c2 	bl	8002cec <HAL_PCD_EP_SetStall>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f8cc 	bl	8007d0c <USBD_Get_USB_Status>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fb f907 	bl	8002db4 <HAL_PCD_EP_ClrStall>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f8ad 	bl	8007d0c <USBD_Get_USB_Status>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da0b      	bge.n	8007bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	333e      	adds	r3, #62	; 0x3e
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	e00b      	b.n	8007c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fa feec 	bl	8002a14 <HAL_PCD_SetAddress>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f862 	bl	8007d0c <USBD_Get_USB_Status>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	460b      	mov	r3, r1
 8007c64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c74:	7af9      	ldrb	r1, [r7, #11]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f7fa ffed 	bl	8002c58 <HAL_PCD_EP_Transmit>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f841 	bl	8007d0c <USBD_Get_USB_Status>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007cb6:	7af9      	ldrb	r1, [r7, #11]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	f7fa ff81 	bl	8002bc2 <HAL_PCD_EP_Receive>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 f820 	bl	8007d0c <USBD_Get_USB_Status>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ce4:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <USBD_static_malloc+0x18>)
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000b6c 	.word	0x20000b6c

08007cf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4603      	mov	r3, r0
 8007d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d817      	bhi.n	8007d50 <USBD_Get_USB_Status+0x44>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBD_Get_USB_Status+0x1c>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d3f 	.word	0x08007d3f
 8007d30:	08007d45 	.word	0x08007d45
 8007d34:	08007d4b 	.word	0x08007d4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3c:	e00b      	b.n	8007d56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	73fb      	strb	r3, [r7, #15]
    break;
 8007d42:	e008      	b.n	8007d56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d44:	2301      	movs	r3, #1
 8007d46:	73fb      	strb	r3, [r7, #15]
    break;
 8007d48:	e005      	b.n	8007d56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4e:	e002      	b.n	8007d56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d50:	2303      	movs	r3, #3
 8007d52:	73fb      	strb	r3, [r7, #15]
    break;
 8007d54:	bf00      	nop
  }
  return usb_status;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <__libc_init_array>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4d0d      	ldr	r5, [pc, #52]	; (8007d9c <__libc_init_array+0x38>)
 8007d68:	4c0d      	ldr	r4, [pc, #52]	; (8007da0 <__libc_init_array+0x3c>)
 8007d6a:	1b64      	subs	r4, r4, r5
 8007d6c:	10a4      	asrs	r4, r4, #2
 8007d6e:	2600      	movs	r6, #0
 8007d70:	42a6      	cmp	r6, r4
 8007d72:	d109      	bne.n	8007d88 <__libc_init_array+0x24>
 8007d74:	4d0b      	ldr	r5, [pc, #44]	; (8007da4 <__libc_init_array+0x40>)
 8007d76:	4c0c      	ldr	r4, [pc, #48]	; (8007da8 <__libc_init_array+0x44>)
 8007d78:	f001 f8c0 	bl	8008efc <_init>
 8007d7c:	1b64      	subs	r4, r4, r5
 8007d7e:	10a4      	asrs	r4, r4, #2
 8007d80:	2600      	movs	r6, #0
 8007d82:	42a6      	cmp	r6, r4
 8007d84:	d105      	bne.n	8007d92 <__libc_init_array+0x2e>
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8c:	4798      	blx	r3
 8007d8e:	3601      	adds	r6, #1
 8007d90:	e7ee      	b.n	8007d70 <__libc_init_array+0xc>
 8007d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d96:	4798      	blx	r3
 8007d98:	3601      	adds	r6, #1
 8007d9a:	e7f2      	b.n	8007d82 <__libc_init_array+0x1e>
 8007d9c:	08009158 	.word	0x08009158
 8007da0:	08009158 	.word	0x08009158
 8007da4:	08009158 	.word	0x08009158
 8007da8:	0800915c 	.word	0x0800915c

08007dac <memset>:
 8007dac:	4402      	add	r2, r0
 8007dae:	4603      	mov	r3, r0
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d100      	bne.n	8007db6 <memset+0xa>
 8007db4:	4770      	bx	lr
 8007db6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dba:	e7f9      	b.n	8007db0 <memset+0x4>
 8007dbc:	0000      	movs	r0, r0
	...

08007dc0 <cos>:
 8007dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dc2:	ec53 2b10 	vmov	r2, r3, d0
 8007dc6:	4826      	ldr	r0, [pc, #152]	; (8007e60 <cos+0xa0>)
 8007dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dcc:	4281      	cmp	r1, r0
 8007dce:	dc06      	bgt.n	8007dde <cos+0x1e>
 8007dd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007e58 <cos+0x98>
 8007dd4:	b005      	add	sp, #20
 8007dd6:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dda:	f000 baa9 	b.w	8008330 <__kernel_cos>
 8007dde:	4821      	ldr	r0, [pc, #132]	; (8007e64 <cos+0xa4>)
 8007de0:	4281      	cmp	r1, r0
 8007de2:	dd09      	ble.n	8007df8 <cos+0x38>
 8007de4:	ee10 0a10 	vmov	r0, s0
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 fa05 	bl	80001f8 <__aeabi_dsub>
 8007dee:	ec41 0b10 	vmov	d0, r0, r1
 8007df2:	b005      	add	sp, #20
 8007df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007df8:	4668      	mov	r0, sp
 8007dfa:	f000 f88d 	bl	8007f18 <__ieee754_rem_pio2>
 8007dfe:	f000 0003 	and.w	r0, r0, #3
 8007e02:	2801      	cmp	r0, #1
 8007e04:	d00b      	beq.n	8007e1e <cos+0x5e>
 8007e06:	2802      	cmp	r0, #2
 8007e08:	d016      	beq.n	8007e38 <cos+0x78>
 8007e0a:	b9e0      	cbnz	r0, 8007e46 <cos+0x86>
 8007e0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e10:	ed9d 0b00 	vldr	d0, [sp]
 8007e14:	f000 fa8c 	bl	8008330 <__kernel_cos>
 8007e18:	ec51 0b10 	vmov	r0, r1, d0
 8007e1c:	e7e7      	b.n	8007dee <cos+0x2e>
 8007e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e22:	ed9d 0b00 	vldr	d0, [sp]
 8007e26:	f000 fe9b 	bl	8008b60 <__kernel_sin>
 8007e2a:	ec53 2b10 	vmov	r2, r3, d0
 8007e2e:	ee10 0a10 	vmov	r0, s0
 8007e32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e36:	e7da      	b.n	8007dee <cos+0x2e>
 8007e38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e3c:	ed9d 0b00 	vldr	d0, [sp]
 8007e40:	f000 fa76 	bl	8008330 <__kernel_cos>
 8007e44:	e7f1      	b.n	8007e2a <cos+0x6a>
 8007e46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e4a:	ed9d 0b00 	vldr	d0, [sp]
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f000 fe86 	bl	8008b60 <__kernel_sin>
 8007e54:	e7e0      	b.n	8007e18 <cos+0x58>
 8007e56:	bf00      	nop
	...
 8007e60:	3fe921fb 	.word	0x3fe921fb
 8007e64:	7fefffff 	.word	0x7fefffff

08007e68 <sin>:
 8007e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e6a:	ec53 2b10 	vmov	r2, r3, d0
 8007e6e:	4828      	ldr	r0, [pc, #160]	; (8007f10 <sin+0xa8>)
 8007e70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e74:	4281      	cmp	r1, r0
 8007e76:	dc07      	bgt.n	8007e88 <sin+0x20>
 8007e78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f08 <sin+0xa0>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	b005      	add	sp, #20
 8007e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e84:	f000 be6c 	b.w	8008b60 <__kernel_sin>
 8007e88:	4822      	ldr	r0, [pc, #136]	; (8007f14 <sin+0xac>)
 8007e8a:	4281      	cmp	r1, r0
 8007e8c:	dd09      	ble.n	8007ea2 <sin+0x3a>
 8007e8e:	ee10 0a10 	vmov	r0, s0
 8007e92:	4619      	mov	r1, r3
 8007e94:	f7f8 f9b0 	bl	80001f8 <__aeabi_dsub>
 8007e98:	ec41 0b10 	vmov	d0, r0, r1
 8007e9c:	b005      	add	sp, #20
 8007e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ea2:	4668      	mov	r0, sp
 8007ea4:	f000 f838 	bl	8007f18 <__ieee754_rem_pio2>
 8007ea8:	f000 0003 	and.w	r0, r0, #3
 8007eac:	2801      	cmp	r0, #1
 8007eae:	d00c      	beq.n	8007eca <sin+0x62>
 8007eb0:	2802      	cmp	r0, #2
 8007eb2:	d011      	beq.n	8007ed8 <sin+0x70>
 8007eb4:	b9f0      	cbnz	r0, 8007ef4 <sin+0x8c>
 8007eb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eba:	ed9d 0b00 	vldr	d0, [sp]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f000 fe4e 	bl	8008b60 <__kernel_sin>
 8007ec4:	ec51 0b10 	vmov	r0, r1, d0
 8007ec8:	e7e6      	b.n	8007e98 <sin+0x30>
 8007eca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ece:	ed9d 0b00 	vldr	d0, [sp]
 8007ed2:	f000 fa2d 	bl	8008330 <__kernel_cos>
 8007ed6:	e7f5      	b.n	8007ec4 <sin+0x5c>
 8007ed8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007edc:	ed9d 0b00 	vldr	d0, [sp]
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f000 fe3d 	bl	8008b60 <__kernel_sin>
 8007ee6:	ec53 2b10 	vmov	r2, r3, d0
 8007eea:	ee10 0a10 	vmov	r0, s0
 8007eee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ef2:	e7d1      	b.n	8007e98 <sin+0x30>
 8007ef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ef8:	ed9d 0b00 	vldr	d0, [sp]
 8007efc:	f000 fa18 	bl	8008330 <__kernel_cos>
 8007f00:	e7f1      	b.n	8007ee6 <sin+0x7e>
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
	...
 8007f10:	3fe921fb 	.word	0x3fe921fb
 8007f14:	7fefffff 	.word	0x7fefffff

08007f18 <__ieee754_rem_pio2>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b02 	vpush	{d8}
 8007f20:	ec55 4b10 	vmov	r4, r5, d0
 8007f24:	4bca      	ldr	r3, [pc, #808]	; (8008250 <__ieee754_rem_pio2+0x338>)
 8007f26:	b08b      	sub	sp, #44	; 0x2c
 8007f28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007f2c:	4598      	cmp	r8, r3
 8007f2e:	4682      	mov	sl, r0
 8007f30:	9502      	str	r5, [sp, #8]
 8007f32:	dc08      	bgt.n	8007f46 <__ieee754_rem_pio2+0x2e>
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	ed80 0b00 	vstr	d0, [r0]
 8007f3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007f40:	f04f 0b00 	mov.w	fp, #0
 8007f44:	e028      	b.n	8007f98 <__ieee754_rem_pio2+0x80>
 8007f46:	4bc3      	ldr	r3, [pc, #780]	; (8008254 <__ieee754_rem_pio2+0x33c>)
 8007f48:	4598      	cmp	r8, r3
 8007f4a:	dc78      	bgt.n	800803e <__ieee754_rem_pio2+0x126>
 8007f4c:	9b02      	ldr	r3, [sp, #8]
 8007f4e:	4ec2      	ldr	r6, [pc, #776]	; (8008258 <__ieee754_rem_pio2+0x340>)
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	ee10 0a10 	vmov	r0, s0
 8007f56:	a3b0      	add	r3, pc, #704	; (adr r3, 8008218 <__ieee754_rem_pio2+0x300>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	dd39      	ble.n	8007fd4 <__ieee754_rem_pio2+0xbc>
 8007f60:	f7f8 f94a 	bl	80001f8 <__aeabi_dsub>
 8007f64:	45b0      	cmp	r8, r6
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	d01b      	beq.n	8007fa4 <__ieee754_rem_pio2+0x8c>
 8007f6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f941 	bl	80001f8 <__aeabi_dsub>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	e9ca 2300 	strd	r2, r3, [sl]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 f939 	bl	80001f8 <__aeabi_dsub>
 8007f86:	a3a6      	add	r3, pc, #664	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 f934 	bl	80001f8 <__aeabi_dsub>
 8007f90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f94:	f04f 0b01 	mov.w	fp, #1
 8007f98:	4658      	mov	r0, fp
 8007f9a:	b00b      	add	sp, #44	; 0x2c
 8007f9c:	ecbd 8b02 	vpop	{d8}
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008228 <__ieee754_rem_pio2+0x310>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f925 	bl	80001f8 <__aeabi_dsub>
 8007fae:	a3a0      	add	r3, pc, #640	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	f7f8 f91e 	bl	80001f8 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e9ca 2300 	strd	r2, r3, [sl]
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f916 	bl	80001f8 <__aeabi_dsub>
 8007fcc:	a398      	add	r3, pc, #608	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	e7db      	b.n	8007f8c <__ieee754_rem_pio2+0x74>
 8007fd4:	f7f8 f912 	bl	80001fc <__adddf3>
 8007fd8:	45b0      	cmp	r8, r6
 8007fda:	4604      	mov	r4, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	d016      	beq.n	800800e <__ieee754_rem_pio2+0xf6>
 8007fe0:	a38f      	add	r3, pc, #572	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 f909 	bl	80001fc <__adddf3>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9ca 2300 	strd	r2, r3, [sl]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7f8 f8ff 	bl	80001f8 <__aeabi_dsub>
 8007ffa:	a389      	add	r3, pc, #548	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 f8fc 	bl	80001fc <__adddf3>
 8008004:	f04f 3bff 	mov.w	fp, #4294967295
 8008008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800800c:	e7c4      	b.n	8007f98 <__ieee754_rem_pio2+0x80>
 800800e:	a386      	add	r3, pc, #536	; (adr r3, 8008228 <__ieee754_rem_pio2+0x310>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f8f2 	bl	80001fc <__adddf3>
 8008018:	a385      	add	r3, pc, #532	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	f7f8 f8eb 	bl	80001fc <__adddf3>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	e9ca 2300 	strd	r2, r3, [sl]
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 f8e1 	bl	80001f8 <__aeabi_dsub>
 8008036:	a37e      	add	r3, pc, #504	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	e7e0      	b.n	8008000 <__ieee754_rem_pio2+0xe8>
 800803e:	4b87      	ldr	r3, [pc, #540]	; (800825c <__ieee754_rem_pio2+0x344>)
 8008040:	4598      	cmp	r8, r3
 8008042:	f300 80d9 	bgt.w	80081f8 <__ieee754_rem_pio2+0x2e0>
 8008046:	f000 fe49 	bl	8008cdc <fabs>
 800804a:	ec55 4b10 	vmov	r4, r5, d0
 800804e:	ee10 0a10 	vmov	r0, s0
 8008052:	a379      	add	r3, pc, #484	; (adr r3, 8008238 <__ieee754_rem_pio2+0x320>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fa85 	bl	8000568 <__aeabi_dmul>
 800805e:	4b80      	ldr	r3, [pc, #512]	; (8008260 <__ieee754_rem_pio2+0x348>)
 8008060:	2200      	movs	r2, #0
 8008062:	f7f8 f8cb 	bl	80001fc <__adddf3>
 8008066:	f7f8 fd19 	bl	8000a9c <__aeabi_d2iz>
 800806a:	4683      	mov	fp, r0
 800806c:	f7f8 fa12 	bl	8000494 <__aeabi_i2d>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	ec43 2b18 	vmov	d8, r2, r3
 8008078:	a367      	add	r3, pc, #412	; (adr r3, 8008218 <__ieee754_rem_pio2+0x300>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fa73 	bl	8000568 <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 f8b5 	bl	80001f8 <__aeabi_dsub>
 800808e:	a364      	add	r3, pc, #400	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	ec51 0b18 	vmov	r0, r1, d8
 800809c:	f7f8 fa64 	bl	8000568 <__aeabi_dmul>
 80080a0:	f1bb 0f1f 	cmp.w	fp, #31
 80080a4:	4604      	mov	r4, r0
 80080a6:	460d      	mov	r5, r1
 80080a8:	dc0d      	bgt.n	80080c6 <__ieee754_rem_pio2+0x1ae>
 80080aa:	4b6e      	ldr	r3, [pc, #440]	; (8008264 <__ieee754_rem_pio2+0x34c>)
 80080ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80080b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b4:	4543      	cmp	r3, r8
 80080b6:	d006      	beq.n	80080c6 <__ieee754_rem_pio2+0x1ae>
 80080b8:	4622      	mov	r2, r4
 80080ba:	462b      	mov	r3, r5
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 f89a 	bl	80001f8 <__aeabi_dsub>
 80080c4:	e00f      	b.n	80080e6 <__ieee754_rem_pio2+0x1ce>
 80080c6:	462b      	mov	r3, r5
 80080c8:	4622      	mov	r2, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 f893 	bl	80001f8 <__aeabi_dsub>
 80080d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080d6:	9303      	str	r3, [sp, #12]
 80080d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80080e0:	f1b8 0f10 	cmp.w	r8, #16
 80080e4:	dc02      	bgt.n	80080ec <__ieee754_rem_pio2+0x1d4>
 80080e6:	e9ca 0100 	strd	r0, r1, [sl]
 80080ea:	e039      	b.n	8008160 <__ieee754_rem_pio2+0x248>
 80080ec:	a34e      	add	r3, pc, #312	; (adr r3, 8008228 <__ieee754_rem_pio2+0x310>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	ec51 0b18 	vmov	r0, r1, d8
 80080f6:	f7f8 fa37 	bl	8000568 <__aeabi_dmul>
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7f8 f877 	bl	80001f8 <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4680      	mov	r8, r0
 8008110:	4689      	mov	r9, r1
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 f86f 	bl	80001f8 <__aeabi_dsub>
 800811a:	4622      	mov	r2, r4
 800811c:	462b      	mov	r3, r5
 800811e:	f7f8 f86b 	bl	80001f8 <__aeabi_dsub>
 8008122:	a343      	add	r3, pc, #268	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	ec51 0b18 	vmov	r0, r1, d8
 8008130:	f7f8 fa1a 	bl	8000568 <__aeabi_dmul>
 8008134:	4622      	mov	r2, r4
 8008136:	462b      	mov	r3, r5
 8008138:	f7f8 f85e 	bl	80001f8 <__aeabi_dsub>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	4640      	mov	r0, r8
 8008146:	4649      	mov	r1, r9
 8008148:	f7f8 f856 	bl	80001f8 <__aeabi_dsub>
 800814c:	9a03      	ldr	r2, [sp, #12]
 800814e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b31      	cmp	r3, #49	; 0x31
 8008156:	dc24      	bgt.n	80081a2 <__ieee754_rem_pio2+0x28a>
 8008158:	e9ca 0100 	strd	r0, r1, [sl]
 800815c:	4646      	mov	r6, r8
 800815e:	464f      	mov	r7, r9
 8008160:	e9da 8900 	ldrd	r8, r9, [sl]
 8008164:	4630      	mov	r0, r6
 8008166:	4642      	mov	r2, r8
 8008168:	464b      	mov	r3, r9
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 f844 	bl	80001f8 <__aeabi_dsub>
 8008170:	462b      	mov	r3, r5
 8008172:	4622      	mov	r2, r4
 8008174:	f7f8 f840 	bl	80001f8 <__aeabi_dsub>
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008180:	f6bf af0a 	bge.w	8007f98 <__ieee754_rem_pio2+0x80>
 8008184:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008188:	f8ca 3004 	str.w	r3, [sl, #4]
 800818c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008190:	f8ca 8000 	str.w	r8, [sl]
 8008194:	f8ca 0008 	str.w	r0, [sl, #8]
 8008198:	f8ca 300c 	str.w	r3, [sl, #12]
 800819c:	f1cb 0b00 	rsb	fp, fp, #0
 80081a0:	e6fa      	b.n	8007f98 <__ieee754_rem_pio2+0x80>
 80081a2:	a327      	add	r3, pc, #156	; (adr r3, 8008240 <__ieee754_rem_pio2+0x328>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	ec51 0b18 	vmov	r0, r1, d8
 80081ac:	f7f8 f9dc 	bl	8000568 <__aeabi_dmul>
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4640      	mov	r0, r8
 80081ba:	4649      	mov	r1, r9
 80081bc:	f7f8 f81c 	bl	80001f8 <__aeabi_dsub>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	4640      	mov	r0, r8
 80081ca:	4649      	mov	r1, r9
 80081cc:	f7f8 f814 	bl	80001f8 <__aeabi_dsub>
 80081d0:	4622      	mov	r2, r4
 80081d2:	462b      	mov	r3, r5
 80081d4:	f7f8 f810 	bl	80001f8 <__aeabi_dsub>
 80081d8:	a31b      	add	r3, pc, #108	; (adr r3, 8008248 <__ieee754_rem_pio2+0x330>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	ec51 0b18 	vmov	r0, r1, d8
 80081e6:	f7f8 f9bf 	bl	8000568 <__aeabi_dmul>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	f7f8 f803 	bl	80001f8 <__aeabi_dsub>
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	e75f      	b.n	80080b8 <__ieee754_rem_pio2+0x1a0>
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <__ieee754_rem_pio2+0x350>)
 80081fa:	4598      	cmp	r8, r3
 80081fc:	dd36      	ble.n	800826c <__ieee754_rem_pio2+0x354>
 80081fe:	ee10 2a10 	vmov	r2, s0
 8008202:	462b      	mov	r3, r5
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f7f7 fff6 	bl	80001f8 <__aeabi_dsub>
 800820c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008210:	e9ca 0100 	strd	r0, r1, [sl]
 8008214:	e694      	b.n	8007f40 <__ieee754_rem_pio2+0x28>
 8008216:	bf00      	nop
 8008218:	54400000 	.word	0x54400000
 800821c:	3ff921fb 	.word	0x3ff921fb
 8008220:	1a626331 	.word	0x1a626331
 8008224:	3dd0b461 	.word	0x3dd0b461
 8008228:	1a600000 	.word	0x1a600000
 800822c:	3dd0b461 	.word	0x3dd0b461
 8008230:	2e037073 	.word	0x2e037073
 8008234:	3ba3198a 	.word	0x3ba3198a
 8008238:	6dc9c883 	.word	0x6dc9c883
 800823c:	3fe45f30 	.word	0x3fe45f30
 8008240:	2e000000 	.word	0x2e000000
 8008244:	3ba3198a 	.word	0x3ba3198a
 8008248:	252049c1 	.word	0x252049c1
 800824c:	397b839a 	.word	0x397b839a
 8008250:	3fe921fb 	.word	0x3fe921fb
 8008254:	4002d97b 	.word	0x4002d97b
 8008258:	3ff921fb 	.word	0x3ff921fb
 800825c:	413921fb 	.word	0x413921fb
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	08008f78 	.word	0x08008f78
 8008268:	7fefffff 	.word	0x7fefffff
 800826c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008270:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008274:	ee10 0a10 	vmov	r0, s0
 8008278:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800827c:	ee10 6a10 	vmov	r6, s0
 8008280:	460f      	mov	r7, r1
 8008282:	f7f8 fc0b 	bl	8000a9c <__aeabi_d2iz>
 8008286:	f7f8 f905 	bl	8000494 <__aeabi_i2d>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4630      	mov	r0, r6
 8008290:	4639      	mov	r1, r7
 8008292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008296:	f7f7 ffaf 	bl	80001f8 <__aeabi_dsub>
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <__ieee754_rem_pio2+0x410>)
 800829c:	2200      	movs	r2, #0
 800829e:	f7f8 f963 	bl	8000568 <__aeabi_dmul>
 80082a2:	460f      	mov	r7, r1
 80082a4:	4606      	mov	r6, r0
 80082a6:	f7f8 fbf9 	bl	8000a9c <__aeabi_d2iz>
 80082aa:	f7f8 f8f3 	bl	8000494 <__aeabi_i2d>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4630      	mov	r0, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082ba:	f7f7 ff9d 	bl	80001f8 <__aeabi_dsub>
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <__ieee754_rem_pio2+0x410>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	f7f8 f951 	bl	8000568 <__aeabi_dmul>
 80082c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082ca:	ad04      	add	r5, sp, #16
 80082cc:	f04f 0803 	mov.w	r8, #3
 80082d0:	46a9      	mov	r9, r5
 80082d2:	2600      	movs	r6, #0
 80082d4:	2700      	movs	r7, #0
 80082d6:	4632      	mov	r2, r6
 80082d8:	463b      	mov	r3, r7
 80082da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80082de:	46c3      	mov	fp, r8
 80082e0:	3d08      	subs	r5, #8
 80082e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80082e6:	f7f8 fba7 	bl	8000a38 <__aeabi_dcmpeq>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d1f3      	bne.n	80082d6 <__ieee754_rem_pio2+0x3be>
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <__ieee754_rem_pio2+0x414>)
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	2302      	movs	r3, #2
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	4622      	mov	r2, r4
 80082f8:	465b      	mov	r3, fp
 80082fa:	4651      	mov	r1, sl
 80082fc:	4648      	mov	r0, r9
 80082fe:	f000 f8df 	bl	80084c0 <__kernel_rem_pio2>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	4683      	mov	fp, r0
 8008308:	f6bf ae46 	bge.w	8007f98 <__ieee754_rem_pio2+0x80>
 800830c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008314:	e9ca 2300 	strd	r2, r3, [sl]
 8008318:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800831c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008320:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008324:	e73a      	b.n	800819c <__ieee754_rem_pio2+0x284>
 8008326:	bf00      	nop
 8008328:	41700000 	.word	0x41700000
 800832c:	08008ff8 	.word	0x08008ff8

08008330 <__kernel_cos>:
 8008330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	ec57 6b10 	vmov	r6, r7, d0
 8008338:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800833c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008340:	ed8d 1b00 	vstr	d1, [sp]
 8008344:	da07      	bge.n	8008356 <__kernel_cos+0x26>
 8008346:	ee10 0a10 	vmov	r0, s0
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fba6 	bl	8000a9c <__aeabi_d2iz>
 8008350:	2800      	cmp	r0, #0
 8008352:	f000 8088 	beq.w	8008466 <__kernel_cos+0x136>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f8 f903 	bl	8000568 <__aeabi_dmul>
 8008362:	4b51      	ldr	r3, [pc, #324]	; (80084a8 <__kernel_cos+0x178>)
 8008364:	2200      	movs	r2, #0
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	f7f8 f8fd 	bl	8000568 <__aeabi_dmul>
 800836e:	a340      	add	r3, pc, #256	; (adr r3, 8008470 <__kernel_cos+0x140>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	4682      	mov	sl, r0
 8008376:	468b      	mov	fp, r1
 8008378:	4620      	mov	r0, r4
 800837a:	4629      	mov	r1, r5
 800837c:	f7f8 f8f4 	bl	8000568 <__aeabi_dmul>
 8008380:	a33d      	add	r3, pc, #244	; (adr r3, 8008478 <__kernel_cos+0x148>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f7 ff39 	bl	80001fc <__adddf3>
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	f7f8 f8eb 	bl	8000568 <__aeabi_dmul>
 8008392:	a33b      	add	r3, pc, #236	; (adr r3, 8008480 <__kernel_cos+0x150>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f7 ff2e 	bl	80001f8 <__aeabi_dsub>
 800839c:	4622      	mov	r2, r4
 800839e:	462b      	mov	r3, r5
 80083a0:	f7f8 f8e2 	bl	8000568 <__aeabi_dmul>
 80083a4:	a338      	add	r3, pc, #224	; (adr r3, 8008488 <__kernel_cos+0x158>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f7 ff27 	bl	80001fc <__adddf3>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f7f8 f8d9 	bl	8000568 <__aeabi_dmul>
 80083b6:	a336      	add	r3, pc, #216	; (adr r3, 8008490 <__kernel_cos+0x160>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f7 ff1c 	bl	80001f8 <__aeabi_dsub>
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	f7f8 f8d0 	bl	8000568 <__aeabi_dmul>
 80083c8:	a333      	add	r3, pc, #204	; (adr r3, 8008498 <__kernel_cos+0x168>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff15 	bl	80001fc <__adddf3>
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f7f8 f8c7 	bl	8000568 <__aeabi_dmul>
 80083da:	4622      	mov	r2, r4
 80083dc:	462b      	mov	r3, r5
 80083de:	f7f8 f8c3 	bl	8000568 <__aeabi_dmul>
 80083e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083e6:	4604      	mov	r4, r0
 80083e8:	460d      	mov	r5, r1
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f8 f8bb 	bl	8000568 <__aeabi_dmul>
 80083f2:	460b      	mov	r3, r1
 80083f4:	4602      	mov	r2, r0
 80083f6:	4629      	mov	r1, r5
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7f7 fefd 	bl	80001f8 <__aeabi_dsub>
 80083fe:	4b2b      	ldr	r3, [pc, #172]	; (80084ac <__kernel_cos+0x17c>)
 8008400:	4598      	cmp	r8, r3
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	dc10      	bgt.n	800842a <__kernel_cos+0xfa>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4650      	mov	r0, sl
 800840e:	4659      	mov	r1, fp
 8008410:	f7f7 fef2 	bl	80001f8 <__aeabi_dsub>
 8008414:	460b      	mov	r3, r1
 8008416:	4926      	ldr	r1, [pc, #152]	; (80084b0 <__kernel_cos+0x180>)
 8008418:	4602      	mov	r2, r0
 800841a:	2000      	movs	r0, #0
 800841c:	f7f7 feec 	bl	80001f8 <__aeabi_dsub>
 8008420:	ec41 0b10 	vmov	d0, r0, r1
 8008424:	b003      	add	sp, #12
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <__kernel_cos+0x184>)
 800842c:	4920      	ldr	r1, [pc, #128]	; (80084b0 <__kernel_cos+0x180>)
 800842e:	4598      	cmp	r8, r3
 8008430:	bfcc      	ite	gt
 8008432:	4d21      	ldrgt	r5, [pc, #132]	; (80084b8 <__kernel_cos+0x188>)
 8008434:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008438:	2400      	movs	r4, #0
 800843a:	4622      	mov	r2, r4
 800843c:	462b      	mov	r3, r5
 800843e:	2000      	movs	r0, #0
 8008440:	f7f7 feda 	bl	80001f8 <__aeabi_dsub>
 8008444:	4622      	mov	r2, r4
 8008446:	4680      	mov	r8, r0
 8008448:	4689      	mov	r9, r1
 800844a:	462b      	mov	r3, r5
 800844c:	4650      	mov	r0, sl
 800844e:	4659      	mov	r1, fp
 8008450:	f7f7 fed2 	bl	80001f8 <__aeabi_dsub>
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	f7f7 fece 	bl	80001f8 <__aeabi_dsub>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	e7da      	b.n	800841c <__kernel_cos+0xec>
 8008466:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80084a0 <__kernel_cos+0x170>
 800846a:	e7db      	b.n	8008424 <__kernel_cos+0xf4>
 800846c:	f3af 8000 	nop.w
 8008470:	be8838d4 	.word	0xbe8838d4
 8008474:	bda8fae9 	.word	0xbda8fae9
 8008478:	bdb4b1c4 	.word	0xbdb4b1c4
 800847c:	3e21ee9e 	.word	0x3e21ee9e
 8008480:	809c52ad 	.word	0x809c52ad
 8008484:	3e927e4f 	.word	0x3e927e4f
 8008488:	19cb1590 	.word	0x19cb1590
 800848c:	3efa01a0 	.word	0x3efa01a0
 8008490:	16c15177 	.word	0x16c15177
 8008494:	3f56c16c 	.word	0x3f56c16c
 8008498:	5555554c 	.word	0x5555554c
 800849c:	3fa55555 	.word	0x3fa55555
 80084a0:	00000000 	.word	0x00000000
 80084a4:	3ff00000 	.word	0x3ff00000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	3fd33332 	.word	0x3fd33332
 80084b0:	3ff00000 	.word	0x3ff00000
 80084b4:	3fe90000 	.word	0x3fe90000
 80084b8:	3fd20000 	.word	0x3fd20000
 80084bc:	00000000 	.word	0x00000000

080084c0 <__kernel_rem_pio2>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	ed2d 8b02 	vpush	{d8}
 80084c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80084cc:	f112 0f14 	cmn.w	r2, #20
 80084d0:	9308      	str	r3, [sp, #32]
 80084d2:	9101      	str	r1, [sp, #4]
 80084d4:	4bc4      	ldr	r3, [pc, #784]	; (80087e8 <__kernel_rem_pio2+0x328>)
 80084d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80084d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80084da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084e6:	bfa8      	it	ge
 80084e8:	1ed4      	subge	r4, r2, #3
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	bfb2      	itee	lt
 80084ee:	2400      	movlt	r4, #0
 80084f0:	2318      	movge	r3, #24
 80084f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80084f6:	f06f 0317 	mvn.w	r3, #23
 80084fa:	fb04 3303 	mla	r3, r4, r3, r3
 80084fe:	eb03 0a02 	add.w	sl, r3, r2
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	9a06      	ldr	r2, [sp, #24]
 8008506:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80087d8 <__kernel_rem_pio2+0x318>
 800850a:	eb03 0802 	add.w	r8, r3, r2
 800850e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008510:	1aa7      	subs	r7, r4, r2
 8008512:	ae22      	add	r6, sp, #136	; 0x88
 8008514:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008518:	2500      	movs	r5, #0
 800851a:	4545      	cmp	r5, r8
 800851c:	dd13      	ble.n	8008546 <__kernel_rem_pio2+0x86>
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80087d8 <__kernel_rem_pio2+0x318>
 8008524:	aa22      	add	r2, sp, #136	; 0x88
 8008526:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800852a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	9b02      	ldr	r3, [sp, #8]
 8008534:	4598      	cmp	r8, r3
 8008536:	dc2f      	bgt.n	8008598 <__kernel_rem_pio2+0xd8>
 8008538:	ed8d 8b04 	vstr	d8, [sp, #16]
 800853c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008540:	462f      	mov	r7, r5
 8008542:	2600      	movs	r6, #0
 8008544:	e01b      	b.n	800857e <__kernel_rem_pio2+0xbe>
 8008546:	42ef      	cmn	r7, r5
 8008548:	d407      	bmi.n	800855a <__kernel_rem_pio2+0x9a>
 800854a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800854e:	f7f7 ffa1 	bl	8000494 <__aeabi_i2d>
 8008552:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008556:	3501      	adds	r5, #1
 8008558:	e7df      	b.n	800851a <__kernel_rem_pio2+0x5a>
 800855a:	ec51 0b18 	vmov	r0, r1, d8
 800855e:	e7f8      	b.n	8008552 <__kernel_rem_pio2+0x92>
 8008560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008564:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008568:	f7f7 fffe 	bl	8000568 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008574:	f7f7 fe42 	bl	80001fc <__adddf3>
 8008578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857c:	3601      	adds	r6, #1
 800857e:	9b06      	ldr	r3, [sp, #24]
 8008580:	429e      	cmp	r6, r3
 8008582:	f1a7 0708 	sub.w	r7, r7, #8
 8008586:	ddeb      	ble.n	8008560 <__kernel_rem_pio2+0xa0>
 8008588:	ed9d 7b04 	vldr	d7, [sp, #16]
 800858c:	f108 0801 	add.w	r8, r8, #1
 8008590:	ecab 7b02 	vstmia	fp!, {d7}
 8008594:	3508      	adds	r5, #8
 8008596:	e7cc      	b.n	8008532 <__kernel_rem_pio2+0x72>
 8008598:	9b02      	ldr	r3, [sp, #8]
 800859a:	aa0e      	add	r2, sp, #56	; 0x38
 800859c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085a0:	930d      	str	r3, [sp, #52]	; 0x34
 80085a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80085a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80085a8:	9c02      	ldr	r4, [sp, #8]
 80085aa:	930c      	str	r3, [sp, #48]	; 0x30
 80085ac:	00e3      	lsls	r3, r4, #3
 80085ae:	930a      	str	r3, [sp, #40]	; 0x28
 80085b0:	ab9a      	add	r3, sp, #616	; 0x268
 80085b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80085ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80085be:	ab72      	add	r3, sp, #456	; 0x1c8
 80085c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80085c4:	46c3      	mov	fp, r8
 80085c6:	46a1      	mov	r9, r4
 80085c8:	f1b9 0f00 	cmp.w	r9, #0
 80085cc:	f1a5 0508 	sub.w	r5, r5, #8
 80085d0:	dc77      	bgt.n	80086c2 <__kernel_rem_pio2+0x202>
 80085d2:	ec47 6b10 	vmov	d0, r6, r7
 80085d6:	4650      	mov	r0, sl
 80085d8:	f000 fc0a 	bl	8008df0 <scalbn>
 80085dc:	ec57 6b10 	vmov	r6, r7, d0
 80085e0:	2200      	movs	r2, #0
 80085e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80085e6:	ee10 0a10 	vmov	r0, s0
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f7 ffbc 	bl	8000568 <__aeabi_dmul>
 80085f0:	ec41 0b10 	vmov	d0, r0, r1
 80085f4:	f000 fb7c 	bl	8008cf0 <floor>
 80085f8:	4b7c      	ldr	r3, [pc, #496]	; (80087ec <__kernel_rem_pio2+0x32c>)
 80085fa:	ec51 0b10 	vmov	r0, r1, d0
 80085fe:	2200      	movs	r2, #0
 8008600:	f7f7 ffb2 	bl	8000568 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f7 fdf4 	bl	80001f8 <__aeabi_dsub>
 8008610:	460f      	mov	r7, r1
 8008612:	4606      	mov	r6, r0
 8008614:	f7f8 fa42 	bl	8000a9c <__aeabi_d2iz>
 8008618:	9004      	str	r0, [sp, #16]
 800861a:	f7f7 ff3b 	bl	8000494 <__aeabi_i2d>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f7 fde7 	bl	80001f8 <__aeabi_dsub>
 800862a:	f1ba 0f00 	cmp.w	sl, #0
 800862e:	4606      	mov	r6, r0
 8008630:	460f      	mov	r7, r1
 8008632:	dd6d      	ble.n	8008710 <__kernel_rem_pio2+0x250>
 8008634:	1e62      	subs	r2, r4, #1
 8008636:	ab0e      	add	r3, sp, #56	; 0x38
 8008638:	9d04      	ldr	r5, [sp, #16]
 800863a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800863e:	f1ca 0118 	rsb	r1, sl, #24
 8008642:	fa40 f301 	asr.w	r3, r0, r1
 8008646:	441d      	add	r5, r3
 8008648:	408b      	lsls	r3, r1
 800864a:	1ac0      	subs	r0, r0, r3
 800864c:	ab0e      	add	r3, sp, #56	; 0x38
 800864e:	9504      	str	r5, [sp, #16]
 8008650:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008654:	f1ca 0317 	rsb	r3, sl, #23
 8008658:	fa40 fb03 	asr.w	fp, r0, r3
 800865c:	f1bb 0f00 	cmp.w	fp, #0
 8008660:	dd65      	ble.n	800872e <__kernel_rem_pio2+0x26e>
 8008662:	9b04      	ldr	r3, [sp, #16]
 8008664:	2200      	movs	r2, #0
 8008666:	3301      	adds	r3, #1
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	4615      	mov	r5, r2
 800866c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008670:	4294      	cmp	r4, r2
 8008672:	f300 809c 	bgt.w	80087ae <__kernel_rem_pio2+0x2ee>
 8008676:	f1ba 0f00 	cmp.w	sl, #0
 800867a:	dd07      	ble.n	800868c <__kernel_rem_pio2+0x1cc>
 800867c:	f1ba 0f01 	cmp.w	sl, #1
 8008680:	f000 80c0 	beq.w	8008804 <__kernel_rem_pio2+0x344>
 8008684:	f1ba 0f02 	cmp.w	sl, #2
 8008688:	f000 80c6 	beq.w	8008818 <__kernel_rem_pio2+0x358>
 800868c:	f1bb 0f02 	cmp.w	fp, #2
 8008690:	d14d      	bne.n	800872e <__kernel_rem_pio2+0x26e>
 8008692:	4632      	mov	r2, r6
 8008694:	463b      	mov	r3, r7
 8008696:	4956      	ldr	r1, [pc, #344]	; (80087f0 <__kernel_rem_pio2+0x330>)
 8008698:	2000      	movs	r0, #0
 800869a:	f7f7 fdad 	bl	80001f8 <__aeabi_dsub>
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	2d00      	cmp	r5, #0
 80086a4:	d043      	beq.n	800872e <__kernel_rem_pio2+0x26e>
 80086a6:	4650      	mov	r0, sl
 80086a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80087e0 <__kernel_rem_pio2+0x320>
 80086ac:	f000 fba0 	bl	8008df0 <scalbn>
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	ec53 2b10 	vmov	r2, r3, d0
 80086b8:	f7f7 fd9e 	bl	80001f8 <__aeabi_dsub>
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	e035      	b.n	800872e <__kernel_rem_pio2+0x26e>
 80086c2:	4b4c      	ldr	r3, [pc, #304]	; (80087f4 <__kernel_rem_pio2+0x334>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f7 ff4d 	bl	8000568 <__aeabi_dmul>
 80086ce:	f7f8 f9e5 	bl	8000a9c <__aeabi_d2iz>
 80086d2:	f7f7 fedf 	bl	8000494 <__aeabi_i2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	ec43 2b18 	vmov	d8, r2, r3
 80086de:	4b46      	ldr	r3, [pc, #280]	; (80087f8 <__kernel_rem_pio2+0x338>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 ff41 	bl	8000568 <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4630      	mov	r0, r6
 80086ec:	4639      	mov	r1, r7
 80086ee:	f7f7 fd83 	bl	80001f8 <__aeabi_dsub>
 80086f2:	f7f8 f9d3 	bl	8000a9c <__aeabi_d2iz>
 80086f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086fa:	f84b 0b04 	str.w	r0, [fp], #4
 80086fe:	ec51 0b18 	vmov	r0, r1, d8
 8008702:	f7f7 fd7b 	bl	80001fc <__adddf3>
 8008706:	f109 39ff 	add.w	r9, r9, #4294967295
 800870a:	4606      	mov	r6, r0
 800870c:	460f      	mov	r7, r1
 800870e:	e75b      	b.n	80085c8 <__kernel_rem_pio2+0x108>
 8008710:	d106      	bne.n	8008720 <__kernel_rem_pio2+0x260>
 8008712:	1e63      	subs	r3, r4, #1
 8008714:	aa0e      	add	r2, sp, #56	; 0x38
 8008716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800871a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800871e:	e79d      	b.n	800865c <__kernel_rem_pio2+0x19c>
 8008720:	4b36      	ldr	r3, [pc, #216]	; (80087fc <__kernel_rem_pio2+0x33c>)
 8008722:	2200      	movs	r2, #0
 8008724:	f7f8 f9a6 	bl	8000a74 <__aeabi_dcmpge>
 8008728:	2800      	cmp	r0, #0
 800872a:	d13d      	bne.n	80087a8 <__kernel_rem_pio2+0x2e8>
 800872c:	4683      	mov	fp, r0
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	4630      	mov	r0, r6
 8008734:	4639      	mov	r1, r7
 8008736:	f7f8 f97f 	bl	8000a38 <__aeabi_dcmpeq>
 800873a:	2800      	cmp	r0, #0
 800873c:	f000 80c0 	beq.w	80088c0 <__kernel_rem_pio2+0x400>
 8008740:	1e65      	subs	r5, r4, #1
 8008742:	462b      	mov	r3, r5
 8008744:	2200      	movs	r2, #0
 8008746:	9902      	ldr	r1, [sp, #8]
 8008748:	428b      	cmp	r3, r1
 800874a:	da6c      	bge.n	8008826 <__kernel_rem_pio2+0x366>
 800874c:	2a00      	cmp	r2, #0
 800874e:	f000 8089 	beq.w	8008864 <__kernel_rem_pio2+0x3a4>
 8008752:	ab0e      	add	r3, sp, #56	; 0x38
 8008754:	f1aa 0a18 	sub.w	sl, sl, #24
 8008758:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80ad 	beq.w	80088bc <__kernel_rem_pio2+0x3fc>
 8008762:	4650      	mov	r0, sl
 8008764:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80087e0 <__kernel_rem_pio2+0x320>
 8008768:	f000 fb42 	bl	8008df0 <scalbn>
 800876c:	ab9a      	add	r3, sp, #616	; 0x268
 800876e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008772:	ec57 6b10 	vmov	r6, r7, d0
 8008776:	00ec      	lsls	r4, r5, #3
 8008778:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800877c:	46aa      	mov	sl, r5
 800877e:	f1ba 0f00 	cmp.w	sl, #0
 8008782:	f280 80d6 	bge.w	8008932 <__kernel_rem_pio2+0x472>
 8008786:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80087d8 <__kernel_rem_pio2+0x318>
 800878a:	462e      	mov	r6, r5
 800878c:	2e00      	cmp	r6, #0
 800878e:	f2c0 8104 	blt.w	800899a <__kernel_rem_pio2+0x4da>
 8008792:	ab72      	add	r3, sp, #456	; 0x1c8
 8008794:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008798:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008800 <__kernel_rem_pio2+0x340>
 800879c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80087a0:	f04f 0800 	mov.w	r8, #0
 80087a4:	1baf      	subs	r7, r5, r6
 80087a6:	e0ea      	b.n	800897e <__kernel_rem_pio2+0x4be>
 80087a8:	f04f 0b02 	mov.w	fp, #2
 80087ac:	e759      	b.n	8008662 <__kernel_rem_pio2+0x1a2>
 80087ae:	f8d8 3000 	ldr.w	r3, [r8]
 80087b2:	b955      	cbnz	r5, 80087ca <__kernel_rem_pio2+0x30a>
 80087b4:	b123      	cbz	r3, 80087c0 <__kernel_rem_pio2+0x300>
 80087b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80087ba:	f8c8 3000 	str.w	r3, [r8]
 80087be:	2301      	movs	r3, #1
 80087c0:	3201      	adds	r2, #1
 80087c2:	f108 0804 	add.w	r8, r8, #4
 80087c6:	461d      	mov	r5, r3
 80087c8:	e752      	b.n	8008670 <__kernel_rem_pio2+0x1b0>
 80087ca:	1acb      	subs	r3, r1, r3
 80087cc:	f8c8 3000 	str.w	r3, [r8]
 80087d0:	462b      	mov	r3, r5
 80087d2:	e7f5      	b.n	80087c0 <__kernel_rem_pio2+0x300>
 80087d4:	f3af 8000 	nop.w
	...
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	08009140 	.word	0x08009140
 80087ec:	40200000 	.word	0x40200000
 80087f0:	3ff00000 	.word	0x3ff00000
 80087f4:	3e700000 	.word	0x3e700000
 80087f8:	41700000 	.word	0x41700000
 80087fc:	3fe00000 	.word	0x3fe00000
 8008800:	08009100 	.word	0x08009100
 8008804:	1e62      	subs	r2, r4, #1
 8008806:	ab0e      	add	r3, sp, #56	; 0x38
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008810:	a90e      	add	r1, sp, #56	; 0x38
 8008812:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008816:	e739      	b.n	800868c <__kernel_rem_pio2+0x1cc>
 8008818:	1e62      	subs	r2, r4, #1
 800881a:	ab0e      	add	r3, sp, #56	; 0x38
 800881c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008820:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008824:	e7f4      	b.n	8008810 <__kernel_rem_pio2+0x350>
 8008826:	a90e      	add	r1, sp, #56	; 0x38
 8008828:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800882c:	3b01      	subs	r3, #1
 800882e:	430a      	orrs	r2, r1
 8008830:	e789      	b.n	8008746 <__kernel_rem_pio2+0x286>
 8008832:	3301      	adds	r3, #1
 8008834:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008838:	2900      	cmp	r1, #0
 800883a:	d0fa      	beq.n	8008832 <__kernel_rem_pio2+0x372>
 800883c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800883e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008842:	446a      	add	r2, sp
 8008844:	3a98      	subs	r2, #152	; 0x98
 8008846:	920a      	str	r2, [sp, #40]	; 0x28
 8008848:	9a08      	ldr	r2, [sp, #32]
 800884a:	18e3      	adds	r3, r4, r3
 800884c:	18a5      	adds	r5, r4, r2
 800884e:	aa22      	add	r2, sp, #136	; 0x88
 8008850:	f104 0801 	add.w	r8, r4, #1
 8008854:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	4543      	cmp	r3, r8
 800885e:	da04      	bge.n	800886a <__kernel_rem_pio2+0x3aa>
 8008860:	461c      	mov	r4, r3
 8008862:	e6a3      	b.n	80085ac <__kernel_rem_pio2+0xec>
 8008864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008866:	2301      	movs	r3, #1
 8008868:	e7e4      	b.n	8008834 <__kernel_rem_pio2+0x374>
 800886a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800886c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008870:	f7f7 fe10 	bl	8000494 <__aeabi_i2d>
 8008874:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887a:	46ab      	mov	fp, r5
 800887c:	461c      	mov	r4, r3
 800887e:	f04f 0900 	mov.w	r9, #0
 8008882:	2600      	movs	r6, #0
 8008884:	2700      	movs	r7, #0
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	4599      	cmp	r9, r3
 800888a:	dd06      	ble.n	800889a <__kernel_rem_pio2+0x3da>
 800888c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008892:	f108 0801 	add.w	r8, r8, #1
 8008896:	930a      	str	r3, [sp, #40]	; 0x28
 8008898:	e7df      	b.n	800885a <__kernel_rem_pio2+0x39a>
 800889a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800889e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80088a2:	f7f7 fe61 	bl	8000568 <__aeabi_dmul>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f7 fca5 	bl	80001fc <__adddf3>
 80088b2:	f109 0901 	add.w	r9, r9, #1
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	e7e4      	b.n	8008886 <__kernel_rem_pio2+0x3c6>
 80088bc:	3d01      	subs	r5, #1
 80088be:	e748      	b.n	8008752 <__kernel_rem_pio2+0x292>
 80088c0:	ec47 6b10 	vmov	d0, r6, r7
 80088c4:	f1ca 0000 	rsb	r0, sl, #0
 80088c8:	f000 fa92 	bl	8008df0 <scalbn>
 80088cc:	ec57 6b10 	vmov	r6, r7, d0
 80088d0:	4ba0      	ldr	r3, [pc, #640]	; (8008b54 <__kernel_rem_pio2+0x694>)
 80088d2:	ee10 0a10 	vmov	r0, s0
 80088d6:	2200      	movs	r2, #0
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f8cb 	bl	8000a74 <__aeabi_dcmpge>
 80088de:	b1f8      	cbz	r0, 8008920 <__kernel_rem_pio2+0x460>
 80088e0:	4b9d      	ldr	r3, [pc, #628]	; (8008b58 <__kernel_rem_pio2+0x698>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f7 fe3e 	bl	8000568 <__aeabi_dmul>
 80088ec:	f7f8 f8d6 	bl	8000a9c <__aeabi_d2iz>
 80088f0:	4680      	mov	r8, r0
 80088f2:	f7f7 fdcf 	bl	8000494 <__aeabi_i2d>
 80088f6:	4b97      	ldr	r3, [pc, #604]	; (8008b54 <__kernel_rem_pio2+0x694>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f7f7 fe35 	bl	8000568 <__aeabi_dmul>
 80088fe:	460b      	mov	r3, r1
 8008900:	4602      	mov	r2, r0
 8008902:	4639      	mov	r1, r7
 8008904:	4630      	mov	r0, r6
 8008906:	f7f7 fc77 	bl	80001f8 <__aeabi_dsub>
 800890a:	f7f8 f8c7 	bl	8000a9c <__aeabi_d2iz>
 800890e:	1c65      	adds	r5, r4, #1
 8008910:	ab0e      	add	r3, sp, #56	; 0x38
 8008912:	f10a 0a18 	add.w	sl, sl, #24
 8008916:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800891a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800891e:	e720      	b.n	8008762 <__kernel_rem_pio2+0x2a2>
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f8ba 	bl	8000a9c <__aeabi_d2iz>
 8008928:	ab0e      	add	r3, sp, #56	; 0x38
 800892a:	4625      	mov	r5, r4
 800892c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008930:	e717      	b.n	8008762 <__kernel_rem_pio2+0x2a2>
 8008932:	ab0e      	add	r3, sp, #56	; 0x38
 8008934:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008938:	f7f7 fdac 	bl	8000494 <__aeabi_i2d>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	f7f7 fe12 	bl	8000568 <__aeabi_dmul>
 8008944:	4b84      	ldr	r3, [pc, #528]	; (8008b58 <__kernel_rem_pio2+0x698>)
 8008946:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800894a:	2200      	movs	r2, #0
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f7f7 fe0a 	bl	8000568 <__aeabi_dmul>
 8008954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008958:	4606      	mov	r6, r0
 800895a:	460f      	mov	r7, r1
 800895c:	e70f      	b.n	800877e <__kernel_rem_pio2+0x2be>
 800895e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008962:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008966:	f7f7 fdff 	bl	8000568 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008972:	f7f7 fc43 	bl	80001fc <__adddf3>
 8008976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800897a:	f108 0801 	add.w	r8, r8, #1
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	4598      	cmp	r8, r3
 8008982:	dc01      	bgt.n	8008988 <__kernel_rem_pio2+0x4c8>
 8008984:	45b8      	cmp	r8, r7
 8008986:	ddea      	ble.n	800895e <__kernel_rem_pio2+0x49e>
 8008988:	ed9d 7b06 	vldr	d7, [sp, #24]
 800898c:	ab4a      	add	r3, sp, #296	; 0x128
 800898e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008992:	ed87 7b00 	vstr	d7, [r7]
 8008996:	3e01      	subs	r6, #1
 8008998:	e6f8      	b.n	800878c <__kernel_rem_pio2+0x2cc>
 800899a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800899c:	2b02      	cmp	r3, #2
 800899e:	dc0b      	bgt.n	80089b8 <__kernel_rem_pio2+0x4f8>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc35      	bgt.n	8008a10 <__kernel_rem_pio2+0x550>
 80089a4:	d059      	beq.n	8008a5a <__kernel_rem_pio2+0x59a>
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	f003 0007 	and.w	r0, r3, #7
 80089ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80089b0:	ecbd 8b02 	vpop	{d8}
 80089b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d1f3      	bne.n	80089a6 <__kernel_rem_pio2+0x4e6>
 80089be:	ab4a      	add	r3, sp, #296	; 0x128
 80089c0:	4423      	add	r3, r4
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	461c      	mov	r4, r3
 80089c6:	469a      	mov	sl, r3
 80089c8:	9502      	str	r5, [sp, #8]
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f1aa 0a08 	sub.w	sl, sl, #8
 80089d2:	dc6b      	bgt.n	8008aac <__kernel_rem_pio2+0x5ec>
 80089d4:	46aa      	mov	sl, r5
 80089d6:	f1ba 0f01 	cmp.w	sl, #1
 80089da:	f1a4 0408 	sub.w	r4, r4, #8
 80089de:	f300 8085 	bgt.w	8008aec <__kernel_rem_pio2+0x62c>
 80089e2:	9c06      	ldr	r4, [sp, #24]
 80089e4:	2000      	movs	r0, #0
 80089e6:	3408      	adds	r4, #8
 80089e8:	2100      	movs	r1, #0
 80089ea:	2d01      	cmp	r5, #1
 80089ec:	f300 809d 	bgt.w	8008b2a <__kernel_rem_pio2+0x66a>
 80089f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80089f4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80089f8:	f1bb 0f00 	cmp.w	fp, #0
 80089fc:	f040 809b 	bne.w	8008b36 <__kernel_rem_pio2+0x676>
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	e9c3 5600 	strd	r5, r6, [r3]
 8008a06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008a0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008a0e:	e7ca      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008a10:	3408      	adds	r4, #8
 8008a12:	ab4a      	add	r3, sp, #296	; 0x128
 8008a14:	441c      	add	r4, r3
 8008a16:	462e      	mov	r6, r5
 8008a18:	2000      	movs	r0, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	2e00      	cmp	r6, #0
 8008a1e:	da36      	bge.n	8008a8e <__kernel_rem_pio2+0x5ce>
 8008a20:	f1bb 0f00 	cmp.w	fp, #0
 8008a24:	d039      	beq.n	8008a9a <__kernel_rem_pio2+0x5da>
 8008a26:	4602      	mov	r2, r0
 8008a28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a2c:	9c01      	ldr	r4, [sp, #4]
 8008a2e:	e9c4 2300 	strd	r2, r3, [r4]
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008a3a:	f7f7 fbdd 	bl	80001f8 <__aeabi_dsub>
 8008a3e:	ae4c      	add	r6, sp, #304	; 0x130
 8008a40:	2401      	movs	r4, #1
 8008a42:	42a5      	cmp	r5, r4
 8008a44:	da2c      	bge.n	8008aa0 <__kernel_rem_pio2+0x5e0>
 8008a46:	f1bb 0f00 	cmp.w	fp, #0
 8008a4a:	d002      	beq.n	8008a52 <__kernel_rem_pio2+0x592>
 8008a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a50:	4619      	mov	r1, r3
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008a58:	e7a5      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008a5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008a5e:	eb0d 0403 	add.w	r4, sp, r3
 8008a62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008a66:	2000      	movs	r0, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	da09      	bge.n	8008a82 <__kernel_rem_pio2+0x5c2>
 8008a6e:	f1bb 0f00 	cmp.w	fp, #0
 8008a72:	d002      	beq.n	8008a7a <__kernel_rem_pio2+0x5ba>
 8008a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a78:	4619      	mov	r1, r3
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	e9c3 0100 	strd	r0, r1, [r3]
 8008a80:	e791      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008a82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a86:	f7f7 fbb9 	bl	80001fc <__adddf3>
 8008a8a:	3d01      	subs	r5, #1
 8008a8c:	e7ed      	b.n	8008a6a <__kernel_rem_pio2+0x5aa>
 8008a8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a92:	f7f7 fbb3 	bl	80001fc <__adddf3>
 8008a96:	3e01      	subs	r6, #1
 8008a98:	e7c0      	b.n	8008a1c <__kernel_rem_pio2+0x55c>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	e7c5      	b.n	8008a2c <__kernel_rem_pio2+0x56c>
 8008aa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008aa4:	f7f7 fbaa 	bl	80001fc <__adddf3>
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	e7ca      	b.n	8008a42 <__kernel_rem_pio2+0x582>
 8008aac:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ab0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	9302      	str	r3, [sp, #8]
 8008aba:	4632      	mov	r2, r6
 8008abc:	463b      	mov	r3, r7
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	f7f7 fb9b 	bl	80001fc <__adddf3>
 8008ac6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f7 fb91 	bl	80001f8 <__aeabi_dsub>
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	463b      	mov	r3, r7
 8008ada:	f7f7 fb8f 	bl	80001fc <__adddf3>
 8008ade:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008ae2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ae6:	ed8a 7b00 	vstr	d7, [sl]
 8008aea:	e76e      	b.n	80089ca <__kernel_rem_pio2+0x50a>
 8008aec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008af0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008af4:	4640      	mov	r0, r8
 8008af6:	4632      	mov	r2, r6
 8008af8:	463b      	mov	r3, r7
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fb7e 	bl	80001fc <__adddf3>
 8008b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f7 fb74 	bl	80001f8 <__aeabi_dsub>
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	f7f7 fb72 	bl	80001fc <__adddf3>
 8008b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b20:	ed84 7b00 	vstr	d7, [r4]
 8008b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b28:	e755      	b.n	80089d6 <__kernel_rem_pio2+0x516>
 8008b2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b2e:	f7f7 fb65 	bl	80001fc <__adddf3>
 8008b32:	3d01      	subs	r5, #1
 8008b34:	e759      	b.n	80089ea <__kernel_rem_pio2+0x52a>
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	601d      	str	r5, [r3, #0]
 8008b3c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008b40:	605c      	str	r4, [r3, #4]
 8008b42:	609f      	str	r7, [r3, #8]
 8008b44:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008b48:	60d3      	str	r3, [r2, #12]
 8008b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b4e:	6110      	str	r0, [r2, #16]
 8008b50:	6153      	str	r3, [r2, #20]
 8008b52:	e728      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008b54:	41700000 	.word	0x41700000
 8008b58:	3e700000 	.word	0x3e700000
 8008b5c:	00000000 	.word	0x00000000

08008b60 <__kernel_sin>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b04 	vpush	{d8-d9}
 8008b68:	eeb0 8a41 	vmov.f32	s16, s2
 8008b6c:	eef0 8a61 	vmov.f32	s17, s3
 8008b70:	ec55 4b10 	vmov	r4, r5, d0
 8008b74:	b083      	sub	sp, #12
 8008b76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008b7e:	9001      	str	r0, [sp, #4]
 8008b80:	da06      	bge.n	8008b90 <__kernel_sin+0x30>
 8008b82:	ee10 0a10 	vmov	r0, s0
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 ff88 	bl	8000a9c <__aeabi_d2iz>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d051      	beq.n	8008c34 <__kernel_sin+0xd4>
 8008b90:	4622      	mov	r2, r4
 8008b92:	462b      	mov	r3, r5
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fce6 	bl	8000568 <__aeabi_dmul>
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7f7 fcde 	bl	8000568 <__aeabi_dmul>
 8008bac:	a341      	add	r3, pc, #260	; (adr r3, 8008cb4 <__kernel_sin+0x154>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4680      	mov	r8, r0
 8008bb4:	4689      	mov	r9, r1
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	4659      	mov	r1, fp
 8008bba:	f7f7 fcd5 	bl	8000568 <__aeabi_dmul>
 8008bbe:	a33f      	add	r3, pc, #252	; (adr r3, 8008cbc <__kernel_sin+0x15c>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fb18 	bl	80001f8 <__aeabi_dsub>
 8008bc8:	4652      	mov	r2, sl
 8008bca:	465b      	mov	r3, fp
 8008bcc:	f7f7 fccc 	bl	8000568 <__aeabi_dmul>
 8008bd0:	a33c      	add	r3, pc, #240	; (adr r3, 8008cc4 <__kernel_sin+0x164>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fb11 	bl	80001fc <__adddf3>
 8008bda:	4652      	mov	r2, sl
 8008bdc:	465b      	mov	r3, fp
 8008bde:	f7f7 fcc3 	bl	8000568 <__aeabi_dmul>
 8008be2:	a33a      	add	r3, pc, #232	; (adr r3, 8008ccc <__kernel_sin+0x16c>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fb06 	bl	80001f8 <__aeabi_dsub>
 8008bec:	4652      	mov	r2, sl
 8008bee:	465b      	mov	r3, fp
 8008bf0:	f7f7 fcba 	bl	8000568 <__aeabi_dmul>
 8008bf4:	a337      	add	r3, pc, #220	; (adr r3, 8008cd4 <__kernel_sin+0x174>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	f7f7 faff 	bl	80001fc <__adddf3>
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	4606      	mov	r6, r0
 8008c02:	460f      	mov	r7, r1
 8008c04:	b9eb      	cbnz	r3, 8008c42 <__kernel_sin+0xe2>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	f7f7 fcab 	bl	8000568 <__aeabi_dmul>
 8008c12:	a325      	add	r3, pc, #148	; (adr r3, 8008ca8 <__kernel_sin+0x148>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 faee 	bl	80001f8 <__aeabi_dsub>
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	464b      	mov	r3, r9
 8008c20:	f7f7 fca2 	bl	8000568 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4620      	mov	r0, r4
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fae6 	bl	80001fc <__adddf3>
 8008c30:	4604      	mov	r4, r0
 8008c32:	460d      	mov	r5, r1
 8008c34:	ec45 4b10 	vmov	d0, r4, r5
 8008c38:	b003      	add	sp, #12
 8008c3a:	ecbd 8b04 	vpop	{d8-d9}
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <__kernel_sin+0x150>)
 8008c44:	ec51 0b18 	vmov	r0, r1, d8
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f7f7 fc8d 	bl	8000568 <__aeabi_dmul>
 8008c4e:	4632      	mov	r2, r6
 8008c50:	ec41 0b19 	vmov	d9, r0, r1
 8008c54:	463b      	mov	r3, r7
 8008c56:	4640      	mov	r0, r8
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f7f7 fc85 	bl	8000568 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	ec51 0b19 	vmov	r0, r1, d9
 8008c66:	f7f7 fac7 	bl	80001f8 <__aeabi_dsub>
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	f7f7 fc7b 	bl	8000568 <__aeabi_dmul>
 8008c72:	ec53 2b18 	vmov	r2, r3, d8
 8008c76:	f7f7 fabf 	bl	80001f8 <__aeabi_dsub>
 8008c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8008ca8 <__kernel_sin+0x148>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	4606      	mov	r6, r0
 8008c82:	460f      	mov	r7, r1
 8008c84:	4640      	mov	r0, r8
 8008c86:	4649      	mov	r1, r9
 8008c88:	f7f7 fc6e 	bl	8000568 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fab2 	bl	80001fc <__adddf3>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7f7 faaa 	bl	80001f8 <__aeabi_dsub>
 8008ca4:	e7c4      	b.n	8008c30 <__kernel_sin+0xd0>
 8008ca6:	bf00      	nop
 8008ca8:	55555549 	.word	0x55555549
 8008cac:	3fc55555 	.word	0x3fc55555
 8008cb0:	3fe00000 	.word	0x3fe00000
 8008cb4:	5acfd57c 	.word	0x5acfd57c
 8008cb8:	3de5d93a 	.word	0x3de5d93a
 8008cbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8008cc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8008cc4:	57b1fe7d 	.word	0x57b1fe7d
 8008cc8:	3ec71de3 	.word	0x3ec71de3
 8008ccc:	19c161d5 	.word	0x19c161d5
 8008cd0:	3f2a01a0 	.word	0x3f2a01a0
 8008cd4:	1110f8a6 	.word	0x1110f8a6
 8008cd8:	3f811111 	.word	0x3f811111

08008cdc <fabs>:
 8008cdc:	ec51 0b10 	vmov	r0, r1, d0
 8008ce0:	ee10 2a10 	vmov	r2, s0
 8008ce4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ce8:	ec43 2b10 	vmov	d0, r2, r3
 8008cec:	4770      	bx	lr
	...

08008cf0 <floor>:
 8008cf0:	ec51 0b10 	vmov	r0, r1, d0
 8008cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008cfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008d00:	2e13      	cmp	r6, #19
 8008d02:	ee10 5a10 	vmov	r5, s0
 8008d06:	ee10 8a10 	vmov	r8, s0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	dc32      	bgt.n	8008d74 <floor+0x84>
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	da14      	bge.n	8008d3c <floor+0x4c>
 8008d12:	a333      	add	r3, pc, #204	; (adr r3, 8008de0 <floor+0xf0>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fa70 	bl	80001fc <__adddf3>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f7f7 feb2 	bl	8000a88 <__aeabi_dcmpgt>
 8008d24:	b138      	cbz	r0, 8008d36 <floor+0x46>
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	da57      	bge.n	8008dda <floor+0xea>
 8008d2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008d2e:	431d      	orrs	r5, r3
 8008d30:	d001      	beq.n	8008d36 <floor+0x46>
 8008d32:	4c2d      	ldr	r4, [pc, #180]	; (8008de8 <floor+0xf8>)
 8008d34:	2500      	movs	r5, #0
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e025      	b.n	8008d88 <floor+0x98>
 8008d3c:	4f2b      	ldr	r7, [pc, #172]	; (8008dec <floor+0xfc>)
 8008d3e:	4137      	asrs	r7, r6
 8008d40:	ea01 0307 	and.w	r3, r1, r7
 8008d44:	4303      	orrs	r3, r0
 8008d46:	d01f      	beq.n	8008d88 <floor+0x98>
 8008d48:	a325      	add	r3, pc, #148	; (adr r3, 8008de0 <floor+0xf0>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fa55 	bl	80001fc <__adddf3>
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	f7f7 fe97 	bl	8000a88 <__aeabi_dcmpgt>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d0eb      	beq.n	8008d36 <floor+0x46>
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	bfbe      	ittt	lt
 8008d62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d66:	fa43 f606 	asrlt.w	r6, r3, r6
 8008d6a:	19a4      	addlt	r4, r4, r6
 8008d6c:	ea24 0407 	bic.w	r4, r4, r7
 8008d70:	2500      	movs	r5, #0
 8008d72:	e7e0      	b.n	8008d36 <floor+0x46>
 8008d74:	2e33      	cmp	r6, #51	; 0x33
 8008d76:	dd0b      	ble.n	8008d90 <floor+0xa0>
 8008d78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d7c:	d104      	bne.n	8008d88 <floor+0x98>
 8008d7e:	ee10 2a10 	vmov	r2, s0
 8008d82:	460b      	mov	r3, r1
 8008d84:	f7f7 fa3a 	bl	80001fc <__adddf3>
 8008d88:	ec41 0b10 	vmov	d0, r0, r1
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295
 8008d98:	fa23 f707 	lsr.w	r7, r3, r7
 8008d9c:	4207      	tst	r7, r0
 8008d9e:	d0f3      	beq.n	8008d88 <floor+0x98>
 8008da0:	a30f      	add	r3, pc, #60	; (adr r3, 8008de0 <floor+0xf0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa29 	bl	80001fc <__adddf3>
 8008daa:	2200      	movs	r2, #0
 8008dac:	2300      	movs	r3, #0
 8008dae:	f7f7 fe6b 	bl	8000a88 <__aeabi_dcmpgt>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d0bf      	beq.n	8008d36 <floor+0x46>
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	da02      	bge.n	8008dc0 <floor+0xd0>
 8008dba:	2e14      	cmp	r6, #20
 8008dbc:	d103      	bne.n	8008dc6 <floor+0xd6>
 8008dbe:	3401      	adds	r4, #1
 8008dc0:	ea25 0507 	bic.w	r5, r5, r7
 8008dc4:	e7b7      	b.n	8008d36 <floor+0x46>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008dcc:	fa03 f606 	lsl.w	r6, r3, r6
 8008dd0:	4435      	add	r5, r6
 8008dd2:	4545      	cmp	r5, r8
 8008dd4:	bf38      	it	cc
 8008dd6:	18e4      	addcc	r4, r4, r3
 8008dd8:	e7f2      	b.n	8008dc0 <floor+0xd0>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	462c      	mov	r4, r5
 8008dde:	e7aa      	b.n	8008d36 <floor+0x46>
 8008de0:	8800759c 	.word	0x8800759c
 8008de4:	7e37e43c 	.word	0x7e37e43c
 8008de8:	bff00000 	.word	0xbff00000
 8008dec:	000fffff 	.word	0x000fffff

08008df0 <scalbn>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	ec55 4b10 	vmov	r4, r5, d0
 8008df6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	b99a      	cbnz	r2, 8008e28 <scalbn+0x38>
 8008e00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e04:	4323      	orrs	r3, r4
 8008e06:	d036      	beq.n	8008e76 <scalbn+0x86>
 8008e08:	4b39      	ldr	r3, [pc, #228]	; (8008ef0 <scalbn+0x100>)
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	ee10 0a10 	vmov	r0, s0
 8008e10:	2200      	movs	r2, #0
 8008e12:	f7f7 fba9 	bl	8000568 <__aeabi_dmul>
 8008e16:	4b37      	ldr	r3, [pc, #220]	; (8008ef4 <scalbn+0x104>)
 8008e18:	429e      	cmp	r6, r3
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	da10      	bge.n	8008e42 <scalbn+0x52>
 8008e20:	a32b      	add	r3, pc, #172	; (adr r3, 8008ed0 <scalbn+0xe0>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	e03a      	b.n	8008e9e <scalbn+0xae>
 8008e28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008e2c:	428a      	cmp	r2, r1
 8008e2e:	d10c      	bne.n	8008e4a <scalbn+0x5a>
 8008e30:	ee10 2a10 	vmov	r2, s0
 8008e34:	4620      	mov	r0, r4
 8008e36:	4629      	mov	r1, r5
 8008e38:	f7f7 f9e0 	bl	80001fc <__adddf3>
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	e019      	b.n	8008e76 <scalbn+0x86>
 8008e42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e46:	460b      	mov	r3, r1
 8008e48:	3a36      	subs	r2, #54	; 0x36
 8008e4a:	4432      	add	r2, r6
 8008e4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008e50:	428a      	cmp	r2, r1
 8008e52:	dd08      	ble.n	8008e66 <scalbn+0x76>
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	a120      	add	r1, pc, #128	; (adr r1, 8008ed8 <scalbn+0xe8>)
 8008e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5c:	da1c      	bge.n	8008e98 <scalbn+0xa8>
 8008e5e:	a120      	add	r1, pc, #128	; (adr r1, 8008ee0 <scalbn+0xf0>)
 8008e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e64:	e018      	b.n	8008e98 <scalbn+0xa8>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	dd08      	ble.n	8008e7c <scalbn+0x8c>
 8008e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e76:	ec45 4b10 	vmov	d0, r4, r5
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008e80:	da19      	bge.n	8008eb6 <scalbn+0xc6>
 8008e82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e86:	429e      	cmp	r6, r3
 8008e88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008e8c:	dd0a      	ble.n	8008ea4 <scalbn+0xb4>
 8008e8e:	a112      	add	r1, pc, #72	; (adr r1, 8008ed8 <scalbn+0xe8>)
 8008e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e2      	bne.n	8008e5e <scalbn+0x6e>
 8008e98:	a30f      	add	r3, pc, #60	; (adr r3, 8008ed8 <scalbn+0xe8>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fb63 	bl	8000568 <__aeabi_dmul>
 8008ea2:	e7cb      	b.n	8008e3c <scalbn+0x4c>
 8008ea4:	a10a      	add	r1, pc, #40	; (adr r1, 8008ed0 <scalbn+0xe0>)
 8008ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0b8      	beq.n	8008e20 <scalbn+0x30>
 8008eae:	a10e      	add	r1, pc, #56	; (adr r1, 8008ee8 <scalbn+0xf8>)
 8008eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb4:	e7b4      	b.n	8008e20 <scalbn+0x30>
 8008eb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008eba:	3236      	adds	r2, #54	; 0x36
 8008ebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ec0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <scalbn+0x108>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	e7e8      	b.n	8008e9e <scalbn+0xae>
 8008ecc:	f3af 8000 	nop.w
 8008ed0:	c2f8f359 	.word	0xc2f8f359
 8008ed4:	01a56e1f 	.word	0x01a56e1f
 8008ed8:	8800759c 	.word	0x8800759c
 8008edc:	7e37e43c 	.word	0x7e37e43c
 8008ee0:	8800759c 	.word	0x8800759c
 8008ee4:	fe37e43c 	.word	0xfe37e43c
 8008ee8:	c2f8f359 	.word	0xc2f8f359
 8008eec:	81a56e1f 	.word	0x81a56e1f
 8008ef0:	43500000 	.word	0x43500000
 8008ef4:	ffff3cb0 	.word	0xffff3cb0
 8008ef8:	3c900000 	.word	0x3c900000

08008efc <_init>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr

08008f08 <_fini>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	bf00      	nop
 8008f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0e:	bc08      	pop	{r3}
 8008f10:	469e      	mov	lr, r3
 8008f12:	4770      	bx	lr
