
CV_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031a0  08014f44  08014f44  00024f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080180e4  080180e4  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  080180e4  080180e4  000280e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080180ec  080180ec  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080180ec  080180ec  000280ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080180f0  080180f0  000280f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080180f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          00010a04  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20010a9c  20010a9c  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fa25  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000070f9  00000000  00000000  0005faed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002168  00000000  00000000  00066be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002028  00000000  00000000  00068d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033bff  00000000  00000000  0006ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032faa  00000000  00000000  0009e977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010015f  00000000  00000000  000d1921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d1a80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000930c  00000000  00000000  001d1ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014f2c 	.word	0x08014f2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08014f2c 	.word	0x08014f2c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000b4 	.word	0x200000b4
 80005c4:	20000168 	.word	0x20000168

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fd23 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f81d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8af 	bl	8000738 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005da:	f000 f883 	bl	80006e4 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <main+0x40>)
 80005e0:	1d3c      	adds	r4, r7, #4
 80005e2:	461d      	mov	r5, r3
 80005e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fa6b 	bl	8004ad0 <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <main+0x44>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f004 fa4f 	bl	8004aa2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x3c>
 8000606:	bf00      	nop
 8000608:	08014f50 	.word	0x08014f50
 800060c:	200003ac 	.word	0x200003ac

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f013 fcbb 	bl	8013f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000684:	23a8      	movs	r3, #168	; 0xa8
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa7d 	bl	8002b94 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f934 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fcde 	bl	8003084 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f91d 	bl	800090c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART3_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART3_UART_Init+0x4c>)
 800071c:	f003 f9b2 	bl	8003a84 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8f1 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000368 	.word	0x20000368
 8000734:	40004800 	.word	0x40004800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a5a      	ldr	r2, [pc, #360]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b54      	ldr	r3, [pc, #336]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a53      	ldr	r2, [pc, #332]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4c      	ldr	r2, [pc, #304]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b46      	ldr	r3, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a45      	ldr	r2, [pc, #276]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a3e      	ldr	r2, [pc, #248]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a37      	ldr	r2, [pc, #220]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007fc:	4831      	ldr	r0, [pc, #196]	; (80008c4 <MX_GPIO_Init+0x18c>)
 80007fe:	f002 f9af 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x190>)
 8000808:	f002 f9aa 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	482a      	ldr	r0, [pc, #168]	; (80008cc <MX_GPIO_Init+0x194>)
 8000824:	f001 fff0 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000828:	f244 0381 	movw	r3, #16513	; 0x4081
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4820      	ldr	r0, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x18c>)
 8000842:	f001 ffe1 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x190>)
 800085e:	f001 ffd3 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x190>)
 8000876:	f001 ffc7 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800087a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800088c:	230a      	movs	r3, #10
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_GPIO_Init+0x198>)
 8000898:	f001 ffb6 	bl	8002808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800089c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_GPIO_Init+0x198>)
 80008b2:	f001 ffa9 	bl	8002808 <HAL_GPIO_Init>

}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	; 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40021800 	.word	0x40021800
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020000 	.word	0x40020000

080008d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008dc:	f003 fb94 	bl	8004008 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f004 f941 	bl	8004b68 <osDelay>
 80008e6:	e7fb      	b.n	80008e0 <StartDefaultTask+0xc>

080008e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fa:	f000 fbaf 	bl	800105c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40002000 	.word	0x40002000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <HAL_MspInit+0x54>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_MspInit+0x54>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fc79 	bl	8001254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	; (80009f4 <HAL_UART_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12c      	bne.n	80009ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x88>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_UART_MspInit+0x8c>)
 80009e8:	f001 ff0e 	bl	8002808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004800 	.word	0x40004800
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_InitTick+0xe4>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a32      	ldr	r2, [pc, #200]	; (8000ae4 <HAL_InitTick+0xe4>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_InitTick+0xe4>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a2c:	f107 0210 	add.w	r2, r7, #16
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fd44 	bl	80034c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d103      	bne.n	8000a4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a46:	f002 fd15 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8000a4a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a4c:	e004      	b.n	8000a58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a4e:	f002 fd11 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8000a52:	4603      	mov	r3, r0
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <HAL_InitTick+0xe8>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	0c9b      	lsrs	r3, r3, #18
 8000a62:	3b01      	subs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_InitTick+0xec>)
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <HAL_InitTick+0xf0>)
 8000a6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_InitTick+0xec>)
 8000a6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a72:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a74:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <HAL_InitTick+0xec>)
 8000a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a78:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_InitTick+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_InitTick+0xec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_InitTick+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <HAL_InitTick+0xec>)
 8000a8e:	f002 fd4b 	bl	8003528 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d11b      	bne.n	8000ad8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <HAL_InitTick+0xec>)
 8000aa2:	f002 fd9b 	bl	80035dc <HAL_TIM_Base_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d111      	bne.n	8000ad8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ab4:	202d      	movs	r0, #45	; 0x2d
 8000ab6:	f000 fbe9 	bl	800128c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d808      	bhi.n	8000ad2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	202d      	movs	r0, #45	; 0x2d
 8000ac6:	f000 fbc5 	bl	8001254 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_InitTick+0xf4>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e002      	b.n	8000ad8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3738      	adds	r7, #56	; 0x38
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	200003b0 	.word	0x200003b0
 8000af0:	40002000 	.word	0x40002000
 8000af4:	20000004 	.word	0x20000004

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b2a:	f002 fdc7 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200003b0 	.word	0x200003b0

08000b38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <ETH_IRQHandler+0x10>)
 8000b3e:	f000 ff8d 	bl	8001a5c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20004f18 	.word	0x20004f18

08000b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	return 1;
 8000b50:	2301      	movs	r3, #1
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_kill>:

int _kill(int pid, int sig)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <_kill+0x20>)
 8000b68:	2216      	movs	r2, #22
 8000b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	20010a98 	.word	0x20010a98

08000b80 <_exit>:

void _exit (int status)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffe5 	bl	8000b5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b92:	e7fe      	b.n	8000b92 <_exit+0x12>

08000b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e00a      	b.n	8000bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ba6:	f3af 8000 	nop.w
 8000baa:	4601      	mov	r1, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf0      	blt.n	8000ba6 <_read+0x12>
	}

return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e009      	b.n	8000bf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf1      	blt.n	8000be0 <_write+0x12>
	}
	return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_close>:

int _close(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_isatty>:

int _isatty(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	return 1;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d205      	bcs.n	8000cac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <_sbrk+0x6c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20030000 	.word	0x20030000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	200003f8 	.word	0x200003f8
 8000cd8:	20010aa0 	.word	0x20010aa0
 8000cdc:	20010a98 	.word	0x20010a98

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f013 f8ed 	bl	8013f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc47 	bl	80005c8 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000d48:	080180f4 	.word	0x080180f4
  ldr r2, =_sbss
 8000d4c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000d50:	20010a9c 	.word	0x20010a9c

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>

08000d56 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00b      	beq.n	8000d7e <LAN8742_RegisterBusIO+0x28>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <LAN8742_RegisterBusIO+0x28>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <LAN8742_RegisterBusIO+0x28>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e014      	b.n	8000dae <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d17c      	bne.n	8000ed4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2220      	movs	r2, #32
 8000dec:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e01c      	b.n	8000e2e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f107 0208 	add.w	r2, r7, #8
 8000dfc:	2112      	movs	r1, #18
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	4798      	blx	r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da03      	bge.n	8000e10 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000e08:	f06f 0304 	mvn.w	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000e0e:	e00b      	b.n	8000e28 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d105      	bne.n	8000e28 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
         break;
 8000e26:	e005      	b.n	8000e34 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	d9df      	bls.n	8000df4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	d902      	bls.n	8000e42 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e3c:	f06f 0302 	mvn.w	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d145      	bne.n	8000ed4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6810      	ldr	r0, [r2, #0]
 8000e50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e54:	2100      	movs	r1, #0
 8000e56:	4798      	blx	r3
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db37      	blt.n	8000ece <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6810      	ldr	r0, [r2, #0]
 8000e66:	f107 0208 	add.w	r2, r7, #8
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db28      	blt.n	8000ec6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4798      	blx	r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e7e:	e01c      	b.n	8000eba <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4798      	blx	r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e92:	d80e      	bhi.n	8000eb2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6810      	ldr	r0, [r2, #0]
 8000e9c:	f107 0208 	add.w	r2, r7, #8
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4798      	blx	r3
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	da07      	bge.n	8000eba <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000eaa:	f06f 0304 	mvn.w	r3, #4
 8000eae:	613b      	str	r3, [r7, #16]
                 break;
 8000eb0:	e010      	b.n	8000ed4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000eb2:	f06f 0301 	mvn.w	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
               break;
 8000eb8:	e00c      	b.n	8000ed4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1dd      	bne.n	8000e80 <LAN8742_Init+0xc6>
 8000ec4:	e006      	b.n	8000ed4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000ec6:	f06f 0304 	mvn.w	r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	e002      	b.n	8000ed4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000ece:	f06f 0303 	mvn.w	r3, #3
 8000ed2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d112      	bne.n	8000f00 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4798      	blx	r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ee4:	bf00      	nop
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4798      	blx	r3
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ef8:	d9f5      	bls.n	8000ee6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000f00:	693b      	ldr	r3, [r7, #16]
 }
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6810      	ldr	r0, [r2, #0]
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	2101      	movs	r1, #1
 8000f24:	4798      	blx	r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da02      	bge.n	8000f32 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f2c:	f06f 0304 	mvn.w	r3, #4
 8000f30:	e06e      	b.n	8001010 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6810      	ldr	r0, [r2, #0]
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da02      	bge.n	8000f4e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f48:	f06f 0304 	mvn.w	r3, #4
 8000f4c:	e060      	b.n	8001010 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e059      	b.n	8001010 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6810      	ldr	r0, [r2, #0]
 8000f64:	f107 020c 	add.w	r2, r7, #12
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4798      	blx	r3
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da02      	bge.n	8000f78 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f72:	f06f 0304 	mvn.w	r3, #4
 8000f76:	e04b      	b.n	8001010 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d11b      	bne.n	8000fba <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <LAN8742_GetLinkState+0x90>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f96:	2302      	movs	r3, #2
 8000f98:	e03a      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e033      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e02c      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e02a      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6810      	ldr	r0, [r2, #0]
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	211f      	movs	r1, #31
 8000fc8:	4798      	blx	r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da02      	bge.n	8000fd6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fd0:	f06f 0304 	mvn.w	r3, #4
 8000fd4:	e01c      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	e015      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 031c 	and.w	r3, r3, #28
 8000fea:	2b18      	cmp	r3, #24
 8000fec:	d101      	bne.n	8000ff2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e00e      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f003 031c 	and.w	r3, r3, #28
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d101      	bne.n	8001000 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e007      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 031c 	and.w	r3, r3, #28
 8001006:	2b14      	cmp	r3, #20
 8001008:	d101      	bne.n	800100e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800100a:	2304      	movs	r3, #4
 800100c:	e000      	b.n	8001010 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800100e:	2305      	movs	r3, #5
    }				
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f8fc 	bl	800123e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	200f      	movs	r0, #15
 8001048:	f7ff fcda 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fc64 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	200003fc 	.word	0x200003fc

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200003fc 	.word	0x200003fc

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <__NVIC_EnableIRQ+0x38>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff4c 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001266:	f7ff ff61 	bl	800112c <__NVIC_GetPriorityGrouping>
 800126a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff ffb1 	bl	80011d8 <NVIC_EncodePriority>
 8001276:	4602      	mov	r2, r0
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff80 	bl	8001184 <__NVIC_SetPriority>
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff54 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e06c      	b.n	8001394 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2223      	movs	r2, #35	; 0x23
 80012c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f003 f999 	bl	8004604 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_ETH_Init+0xf4>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a30      	ldr	r2, [pc, #192]	; (800139c <HAL_ETH_Init+0xf4>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <HAL_ETH_Init+0xf4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_ETH_Init+0xf8>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <HAL_ETH_Init+0xf8>)
 80012f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_ETH_Init+0xf8>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <HAL_ETH_Init+0xf8>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_ETH_Init+0xf8>)
 800130a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001322:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff feae 	bl	8001084 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800132a:	e011      	b.n	8001350 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800132c:	f7ff feaa 	bl	8001084 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800133a:	d909      	bls.n	8001350 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2204      	movs	r2, #4
 8001340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	22e0      	movs	r2, #224	; 0xe0
 8001348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e021      	b.n	8001394 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1e4      	bne.n	800132c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 ffaa 	bl	80022bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f001 f851 	bl	8002410 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f001 f8a7 	bl	80024c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f80f 	bl	80023a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2210      	movs	r2, #16
 800138e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800

080013a4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d150      	bne.n	8001458 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2223      	movs	r2, #35	; 0x23
 80013ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2204      	movs	r2, #4
 80013c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fa79 	bl	80018bc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0208 	orr.w	r2, r2, #8
 80013d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fe5a 	bl	800109c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0204 	orr.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fe47 	bl	800109c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fdf1 	bl	8001ffe <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001432:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800144a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2223      	movs	r2, #35	; 0x23
 8001450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	e000      	b.n	800145a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
  }
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001470:	2b10      	cmp	r3, #16
 8001472:	d17f      	bne.n	8001574 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2223      	movs	r2, #35	; 0x23
 8001478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80014ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2204      	movs	r2, #4
 80014c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f9f9 	bl	80018bc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0208 	orr.w	r2, r2, #8
 80014d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fdda 	bl	800109c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0204 	orr.w	r2, r2, #4
 80014fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fdc7 	bl	800109c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fd71 	bl	8001ffe <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800152e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001532:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154a:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800155e:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001566:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2223      	movs	r2, #35	; 0x23
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
  }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800158c:	2b23      	cmp	r3, #35	; 0x23
 800158e:	d170      	bne.n	8001672 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2223      	movs	r2, #35	; 0x23
 8001594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80015aa:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80015ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b2:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ca:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f023 0302 	bic.w	r3, r3, #2
 80015de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0204 	bic.w	r2, r2, #4
 80015f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd4d 	bl	800109c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fcf7 	bl	8001ffe <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0208 	bic.w	r2, r2, #8
 800161e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff fd37 	bl	800109c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00e      	b.n	800165a <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	3212      	adds	r2, #18
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d9ed      	bls.n	800163c <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2210      	movs	r2, #16
 800166a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e045      	b.n	800172c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a6:	2b23      	cmp	r3, #35	; 0x23
 80016a8:	d13f      	bne.n	800172a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80016b2:	2201      	movs	r2, #1
 80016b4:	6839      	ldr	r1, [r7, #0]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 ff70 	bl	800259c <ETH_Prepare_Tx_Descriptors>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c8:	f043 0202 	orr.w	r2, r3, #2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e02a      	b.n	800172c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016d6:	f3bf 8f4f 	dsb	sy
}
 80016da:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d904      	bls.n	80016f8 <HAL_ETH_Transmit_IT+0x7c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	1f1a      	subs	r2, r3, #4
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00d      	beq.n	8001726 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001712:	461a      	mov	r2, r3
 8001714:	2304      	movs	r3, #4
 8001716:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	461a      	mov	r2, r3
 8001722:	2300      	movs	r3, #0
 8001724:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0a8      	b.n	80018b2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001766:	2b23      	cmp	r3, #35	; 0x23
 8001768:	d001      	beq.n	800176e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0a1      	b.n	80018b2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001772:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	3212      	adds	r2, #18
 800177a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001784:	f1c3 0304 	rsb	r3, r3, #4
 8001788:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800178a:	e06a      	b.n	8001862 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <HAL_ETH_ReadData+0x88>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d040      	beq.n	800183e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017f0:	3b04      	subs	r3, #4
 80017f2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001818:	461a      	mov	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	b29b      	uxth	r3, r3
 800181e:	f003 f8cb 	bl	80049b8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	441a      	add	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d902      	bls.n	8001850 <HAL_ETH_ReadData+0x11c>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b04      	subs	r3, #4
 800184e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	3212      	adds	r2, #18
 8001856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db06      	blt.n	8001878 <HAL_ETH_ReadData+0x144>
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	d202      	bcs.n	8001878 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d089      	beq.n	800178c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	441a      	add	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f815 	bl	80018bc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018c8:	2301      	movs	r3, #1
 80018ca:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	3212      	adds	r2, #18
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018e4:	e040      	b.n	8001968 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d112      	bne.n	8001914 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 f830 	bl	8004958 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	74fb      	strb	r3, [r7, #19]
 8001902:	e007      	b.n	8001914 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	461a      	mov	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d026      	beq.n	8001968 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <ETH_UpdateDescriptor+0xe4>)
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e003      	b.n	8001932 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001930:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001932:	f3bf 8f5f 	dmb	sy
}
 8001936:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3301      	adds	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d902      	bls.n	8001956 <ETH_UpdateDescriptor+0x9a>
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3b04      	subs	r3, #4
 8001954:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	3212      	adds	r2, #18
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	617b      	str	r3, [r7, #20]
      desccount--;
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3b01      	subs	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <ETH_UpdateDescriptor+0xb8>
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1b8      	bne.n	80018e6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	429a      	cmp	r2, r3
 800197c:	d00c      	beq.n	8001998 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001986:	461a      	mov	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	800045f8 	.word	0x800045f8

080019a4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3318      	adds	r3, #24
 80019b0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019c2:	e03f      	b.n	8001a44 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	3304      	adds	r3, #4
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3301      	adds	r3, #1
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d028      	beq.n	8001a44 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68d9      	ldr	r1, [r3, #12]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db1b      	blt.n	8001a40 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 f80f 	bl	8004a38 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a3e:	e001      	b.n	8001a44 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_ETH_ReleaseTxPacket+0xac>
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1b9      	bne.n	80019c4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d112      	bne.n	8001a9c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d109      	bne.n	8001a9c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <HAL_ETH_IRQHandler+0x178>)
 8001a94:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f002 fb18 	bl	80040cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d113      	bne.n	8001ad6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10a      	bne.n	8001ad6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ace:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f002 fb0b 	bl	80040ec <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae8:	d14c      	bne.n	8001b84 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afc:	d142      	bne.n	8001b84 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b04:	f043 0208 	orr.w	r2, r3, #8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b20:	d11a      	bne.n	8001b58 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_ETH_IRQHandler+0x17c>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001b48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b4c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	22e0      	movs	r2, #224	; 0xe0
 8001b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b56:	e012      	b.n	8001b7e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b76:	461a      	mov	r2, r3
 8001b78:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b7c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f002 fac4 	bl	800410c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d10e      	bne.n	8001bb0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f81c 	bl	8001be0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_ETH_IRQHandler+0x180>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_ETH_IRQHandler+0x180>)
 8001bbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bc2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f815 	bl	8001bf4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	00010040 	.word	0x00010040
 8001bd8:	007e2000 	.word	0x007e2000
 8001bdc:	40013c00 	.word	0x40013c00

08001be0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 031c 	and.w	r3, r3, #28
 8001c24:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	02db      	lsls	r3, r3, #11
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f023 0302 	bic.w	r3, r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c58:	f7ff fa14 	bl	8001084 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c5e:	e00d      	b.n	8001c7c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c60:	f7ff fa10 	bl	8001084 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d301      	bcc.n	8001c74 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e010      	b.n	8001c96 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ec      	bne.n	8001c60 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 031c 	and.w	r3, r3, #28
 8001cba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	02db      	lsls	r3, r3, #11
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff f9c4 	bl	8001084 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cfe:	e00d      	b.n	8001d1c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d00:	f7ff f9c0 	bl	8001084 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d301      	bcc.n	8001d14 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e009      	b.n	8001d28 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ec      	bne.n	8001d00 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0d9      	b.n	8001ef8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf14      	ite	ne
 8001e36:	2301      	movne	r3, #1
 8001e38:	2300      	moveq	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf14      	ite	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	2300      	moveq	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00b      	b.n	8001f30 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d105      	bne.n	8001f2e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f88f 	bl	8002048 <ETH_SetMACConfig>

    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 031c 	bic.w	r3, r3, #28
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f50:	f001 fa84 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8001f54:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d804      	bhi.n	8001f70 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e027      	b.n	8001fc0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d908      	bls.n	8001f8a <HAL_ETH_SetMDIOClockRange+0x52>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d204      	bcs.n	8001f8a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f043 030c 	orr.w	r3, r3, #12
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e01a      	b.n	8001fc0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d303      	bcc.n	8001f9a <HAL_ETH_SetMDIOClockRange+0x62>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d911      	bls.n	8001fbe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e005      	b.n	8001fc0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fbe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	01312cff 	.word	0x01312cff
 8001fd4:	02160ebf 	.word	0x02160ebf
 8001fd8:	03938700 	.word	0x03938700
 8001fdc:	05f5e0ff 	.word	0x05f5e0ff
 8001fe0:	08f0d17f 	.word	0x08f0d17f

08001fe4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800201c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002020:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff f834 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800203e:	6193      	str	r3, [r2, #24]
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <ETH_SetMACConfig+0x15c>)
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7c1b      	ldrb	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <ETH_SetMACConfig+0x28>
 800206a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800206e:	e000      	b.n	8002072 <ETH_SetMACConfig+0x2a>
 8002070:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	7c5b      	ldrb	r3, [r3, #17]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <ETH_SetMACConfig+0x38>
 800207a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207e:	e000      	b.n	8002082 <ETH_SetMACConfig+0x3a>
 8002080:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002082:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002088:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	7fdb      	ldrb	r3, [r3, #31]
 800208e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002090:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	7f92      	ldrb	r2, [r2, #30]
 800209c:	2a00      	cmp	r2, #0
 800209e:	d102      	bne.n	80020a6 <ETH_SetMACConfig+0x5e>
 80020a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a4:	e000      	b.n	80020a8 <ETH_SetMACConfig+0x60>
 80020a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80020a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	7f1b      	ldrb	r3, [r3, #28]
 80020ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	791b      	ldrb	r3, [r3, #4]
 80020bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d102      	bne.n	80020d0 <ETH_SetMACConfig+0x88>
 80020ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ce:	e000      	b.n	80020d2 <ETH_SetMACConfig+0x8a>
 80020d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7bdb      	ldrb	r3, [r3, #15]
 80020d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ea:	4313      	orrs	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002102:	2001      	movs	r0, #1
 8002104:	f7fe ffca 	bl	800109c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800211e:	4013      	ands	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800212e:	2a00      	cmp	r2, #0
 8002130:	d101      	bne.n	8002136 <ETH_SetMACConfig+0xee>
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	e000      	b.n	8002138 <ETH_SetMACConfig+0xf0>
 8002136:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002138:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800213e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002146:	2a01      	cmp	r2, #1
 8002148:	d101      	bne.n	800214e <ETH_SetMACConfig+0x106>
 800214a:	2208      	movs	r2, #8
 800214c:	e000      	b.n	8002150 <ETH_SetMACConfig+0x108>
 800214e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002150:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002158:	2a01      	cmp	r2, #1
 800215a:	d101      	bne.n	8002160 <ETH_SetMACConfig+0x118>
 800215c:	2204      	movs	r2, #4
 800215e:	e000      	b.n	8002162 <ETH_SetMACConfig+0x11a>
 8002160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002162:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800216a:	2a01      	cmp	r2, #1
 800216c:	d101      	bne.n	8002172 <ETH_SetMACConfig+0x12a>
 800216e:	2202      	movs	r2, #2
 8002170:	e000      	b.n	8002174 <ETH_SetMACConfig+0x12c>
 8002172:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002174:	4313      	orrs	r3, r2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800218c:	2001      	movs	r0, #1
 800218e:	f7fe ff85 	bl	800109c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	ff20810f 	.word	0xff20810f

080021a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <ETH_SetDMAConfig+0x110>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <ETH_SetDMAConfig+0x2c>
 80021ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021d2:	e000      	b.n	80021d6 <ETH_SetDMAConfig+0x2e>
 80021d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7b5b      	ldrb	r3, [r3, #13]
 80021da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	7f52      	ldrb	r2, [r2, #29]
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d102      	bne.n	80021ec <ETH_SetDMAConfig+0x44>
 80021e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021ea:	e000      	b.n	80021ee <ETH_SetDMAConfig+0x46>
 80021ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	7b9b      	ldrb	r3, [r3, #14]
 80021f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
 8002202:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002204:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	7f9b      	ldrb	r3, [r3, #30]
 800220a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800220c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002212:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800221a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800221c:	4313      	orrs	r3, r2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222c:	461a      	mov	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223e:	2001      	movs	r0, #1
 8002240:	f7fe ff2c 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224c:	461a      	mov	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	791b      	ldrb	r3, [r3, #4]
 8002256:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800225c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002262:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002268:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002270:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002272:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800227a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002280:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800228a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800228e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800229c:	2001      	movs	r0, #1
 800229e:	f7fe fefd 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	f8de3f23 	.word	0xf8de3f23

080022bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0a6      	sub	sp, #152	; 0x98
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022da:	2301      	movs	r3, #1
 80022dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022f8:	2300      	movs	r3, #0
 80022fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002302:	2300      	movs	r3, #0
 8002304:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800231e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002322:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fe86 	bl	8002048 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800233c:	2301      	movs	r3, #1
 800233e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002340:	2301      	movs	r3, #1
 8002342:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800234a:	2301      	movs	r3, #1
 800234c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002368:	2301      	movs	r3, #1
 800236a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800236c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002370:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002376:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002384:	2300      	movs	r3, #0
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff08 	bl	80021a8 <ETH_SetDMAConfig>
}
 8002398:	bf00      	nop
 800239a:	3798      	adds	r7, #152	; 0x98
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3305      	adds	r3, #5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	3204      	adds	r2, #4
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <ETH_MACAddressConfig+0x68>)
 80023c2:	4413      	add	r3, r2
 80023c4:	461a      	mov	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3303      	adds	r3, #3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	061a      	lsls	r2, r3, #24
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	4313      	orrs	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <ETH_MACAddressConfig+0x6c>)
 80023f2:	4413      	add	r3, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	6013      	str	r3, [r2, #0]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40028040 	.word	0x40028040
 800240c:	40028044 	.word	0x40028044

08002410 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e03e      	b.n	800249c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	3206      	adds	r2, #6
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d80c      	bhi.n	8002480 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68d9      	ldr	r1, [r3, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	e004      	b.n	800248a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d9bd      	bls.n	800241e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	611a      	str	r2, [r3, #16]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e046      	b.n	800255e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6919      	ldr	r1, [r3, #16]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800250c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002514:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	3212      	adds	r2, #18
 800252a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d80c      	bhi.n	800254e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6919      	ldr	r1, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	e004      	b.n	8002558 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d9b5      	bls.n	80024d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258e:	60da      	str	r2, [r3, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800259c:	b480      	push	{r7}
 800259e:	b08d      	sub	sp, #52	; 0x34
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3318      	adds	r3, #24
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025de:	d007      	beq.n	80025f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	3304      	adds	r3, #4
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e103      	b.n	80027fc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800260c:	f023 031f 	bic.w	r3, r3, #31
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	6852      	ldr	r2, [r2, #4]
 8002614:	431a      	orrs	r2, r3
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	431a      	orrs	r2, r3
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	431a      	orrs	r2, r3
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800267a:	f3bf 8f5f 	dmb	sy
}
 800267e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800268c:	e084      	b.n	8002798 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e005      	b.n	80026ba <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	3301      	adds	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d902      	bls.n	80026cc <ETH_Prepare_Tx_Descriptors+0x130>
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	3b04      	subs	r3, #4
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ee:	d007      	beq.n	8002700 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	3304      	adds	r3, #4
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d029      	beq.n	8002754 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
 8002712:	e019      	b.n	8002748 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002714:	f3bf 8f5f 	dmb	sy
}
 8002718:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	3301      	adds	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	2b03      	cmp	r3, #3
 8002730:	d902      	bls.n	8002738 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	3b04      	subs	r3, #4
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	3301      	adds	r3, #1
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
 8002748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	429a      	cmp	r2, r3
 800274e:	d3e1      	bcc.n	8002714 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002750:	2302      	movs	r3, #2
 8002752:	e053      	b.n	80027fc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	3301      	adds	r3, #1
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002772:	f023 031f 	bic.w	r3, r3, #31
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	6852      	ldr	r2, [r2, #4]
 800277a:	431a      	orrs	r2, r3
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	3301      	adds	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002786:	f3bf 8f5f 	dmb	sy
}
 800278a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	f47f af76 	bne.w	800268e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e005      	b.n	80027c2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d2:	6979      	ldr	r1, [r7, #20]
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	3304      	adds	r3, #4
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80027f6:	b662      	cpsie	i
}
 80027f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3734      	adds	r7, #52	; 0x34
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e177      	b.n	8002b14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8166 	bne.w	8002b0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d005      	beq.n	800285a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	2b02      	cmp	r3, #2
 8002858:	d130      	bne.n	80028bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0201 	and.w	r2, r3, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d017      	beq.n	80028f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d123      	bne.n	800294c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80c0 	beq.w	8002b0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b66      	ldr	r3, [pc, #408]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a65      	ldr	r2, [pc, #404]	; (8002b2c <HAL_GPIO_Init+0x324>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_GPIO_Init+0x324>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029aa:	4a61      	ldr	r2, [pc, #388]	; (8002b30 <HAL_GPIO_Init+0x328>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a58      	ldr	r2, [pc, #352]	; (8002b34 <HAL_GPIO_Init+0x32c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d037      	beq.n	8002a46 <HAL_GPIO_Init+0x23e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a57      	ldr	r2, [pc, #348]	; (8002b38 <HAL_GPIO_Init+0x330>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d031      	beq.n	8002a42 <HAL_GPIO_Init+0x23a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a56      	ldr	r2, [pc, #344]	; (8002b3c <HAL_GPIO_Init+0x334>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02b      	beq.n	8002a3e <HAL_GPIO_Init+0x236>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a55      	ldr	r2, [pc, #340]	; (8002b40 <HAL_GPIO_Init+0x338>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d025      	beq.n	8002a3a <HAL_GPIO_Init+0x232>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a54      	ldr	r2, [pc, #336]	; (8002b44 <HAL_GPIO_Init+0x33c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01f      	beq.n	8002a36 <HAL_GPIO_Init+0x22e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a53      	ldr	r2, [pc, #332]	; (8002b48 <HAL_GPIO_Init+0x340>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_GPIO_Init+0x22a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_GPIO_Init+0x344>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0x226>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a51      	ldr	r2, [pc, #324]	; (8002b50 <HAL_GPIO_Init+0x348>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <HAL_GPIO_Init+0x222>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a50      	ldr	r2, [pc, #320]	; (8002b54 <HAL_GPIO_Init+0x34c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <HAL_GPIO_Init+0x21e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4f      	ldr	r2, [pc, #316]	; (8002b58 <HAL_GPIO_Init+0x350>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_GPIO_Init+0x21a>
 8002a1e:	2309      	movs	r3, #9
 8002a20:	e012      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a22:	230a      	movs	r3, #10
 8002a24:	e010      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00e      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a2e:	2306      	movs	r3, #6
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x240>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x328>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8a:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab4:	4a29      	ldr	r2, [pc, #164]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aba:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_GPIO_Init+0x354>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f ae84 	bls.w	8002824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40021400 	.word	0x40021400
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	40021c00 	.word	0x40021c00
 8002b54:	40022000 	.word	0x40022000
 8002b58:	40022400 	.word	0x40022400
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e267      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d112      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e242      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b69      	ldr	r3, [pc, #420]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a65      	ldr	r2, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fa1a 	bl	8001084 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe fa16 	bl	8001084 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e207      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fa06 	bl	8001084 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fa02 	bl	8001084 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1f3      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1c7      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4937      	ldr	r1, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	e03a      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d04:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f9bb 	bl	8001084 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d12:	f7fe f9b7 	bl	8001084 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e1a8      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4925      	ldr	r1, [pc, #148]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f99a 	bl	8001084 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe f996 	bl	8001084 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e187      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f97a 	bl	8001084 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe f976 	bl	8001084 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e167      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
 8002db2:	e01b      	b.n	8002dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe f963 	bl	8001084 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe f95f 	bl	8001084 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d907      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e150      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ea      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a7c      	ldr	r2, [pc, #496]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b77      	ldr	r3, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b74      	ldr	r3, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a73      	ldr	r2, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe f91f 	bl	8001084 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe f91b 	bl	8001084 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e10c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ea>
 8002e70:	4b64      	ldr	r3, [pc, #400]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a63      	ldr	r2, [pc, #396]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x30c>
 8002e86:	4b5f      	ldr	r3, [pc, #380]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a5e      	ldr	r2, [pc, #376]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002ea0:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a54      	ldr	r2, [pc, #336]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe f8e0 	bl	8001084 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe f8dc 	bl	8001084 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0cb      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe f8ca 	bl	8001084 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe f8c6 	bl	8001084 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0b5      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a38      	ldr	r2, [pc, #224]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a1 	beq.w	8003074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d05c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d141      	bne.n	8002fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f89a 	bl	8001084 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe f896 	bl	8001084 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e087      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	491b      	ldr	r1, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe f86f 	bl	8001084 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe f86b 	bl	8001084 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e05c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x416>
 8002fc8:	e054      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f858 	bl	8001084 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f854 	bl	8001084 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e045      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e038      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d028      	beq.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d121      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fd ff86 	bl	8001084 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fd ff82 	bl	8001084 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fbe8 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	08017e38 	.word	0x08017e38
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b094      	sub	sp, #80	; 0x50
 8003256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
 800325c:	2300      	movs	r3, #0
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003260:	2300      	movs	r3, #0
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003268:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 8003274:	2b08      	cmp	r3, #8
 8003276:	f200 80e1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x1ec>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 800327e:	2b04      	cmp	r3, #4
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x3a>
 8003282:	e0db      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_GetSysClockFreq+0x204>)
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003288:	e0db      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_GetSysClockFreq+0x208>)
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800328e:	e0d8      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ba:	2300      	movs	r3, #0
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	f04f 0000 	mov.w	r0, #0
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d4:	0150      	lsls	r0, r2, #5
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4621      	mov	r1, r4
 80032dc:	1a51      	subs	r1, r2, r1
 80032de:	6139      	str	r1, [r7, #16]
 80032e0:	4629      	mov	r1, r5
 80032e2:	eb63 0301 	sbc.w	r3, r3, r1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f4:	4659      	mov	r1, fp
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	4651      	mov	r1, sl
 80032fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032fe:	4651      	mov	r1, sl
 8003300:	018a      	lsls	r2, r1, #6
 8003302:	4651      	mov	r1, sl
 8003304:	ebb2 0801 	subs.w	r8, r2, r1
 8003308:	4659      	mov	r1, fp
 800330a:	eb63 0901 	sbc.w	r9, r3, r1
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800331a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003322:	4690      	mov	r8, r2
 8003324:	4699      	mov	r9, r3
 8003326:	4623      	mov	r3, r4
 8003328:	eb18 0303 	adds.w	r3, r8, r3
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	462b      	mov	r3, r5
 8003330:	eb49 0303 	adc.w	r3, r9, r3
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003342:	4629      	mov	r1, r5
 8003344:	024b      	lsls	r3, r1, #9
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334c:	4621      	mov	r1, r4
 800334e:	024a      	lsls	r2, r1, #9
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
 800335a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003360:	f7fc ff96 	bl	8000290 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	e058      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b38      	ldr	r3, [pc, #224]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	2200      	movs	r2, #0
 8003376:	4618      	mov	r0, r3
 8003378:	4611      	mov	r1, r2
 800337a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	f04f 0000 	mov.w	r0, #0
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	0159      	lsls	r1, r3, #5
 8003396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339a:	0150      	lsls	r0, r2, #5
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4641      	mov	r1, r8
 80033a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033c0:	ebb2 040a 	subs.w	r4, r2, sl
 80033c4:	eb63 050b 	sbc.w	r5, r3, fp
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	00eb      	lsls	r3, r5, #3
 80033d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d6:	00e2      	lsls	r2, r4, #3
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	4643      	mov	r3, r8
 80033de:	18e3      	adds	r3, r4, r3
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	464b      	mov	r3, r9
 80033e4:	eb45 0303 	adc.w	r3, r5, r3
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f6:	4629      	mov	r1, r5
 80033f8:	028b      	lsls	r3, r1, #10
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003400:	4621      	mov	r1, r4
 8003402:	028a      	lsls	r2, r1, #10
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	61fa      	str	r2, [r7, #28]
 8003410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003414:	f7fc ff3c 	bl	8000290 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetSysClockFreq+0x204>)
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003444:	4618      	mov	r0, r3
 8003446:	3750      	adds	r7, #80	; 0x50
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000000 	.word	0x20000000

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08017e48 	.word	0x08017e48

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08017e48 	.word	0x08017e48

080034c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	220f      	movs	r2, #15
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_RCC_GetClockConfig+0x5c>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_GetClockConfig+0x5c>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_RCC_GetClockConfig+0x5c>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	08db      	lsrs	r3, r3, #3
 80034fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_RCC_GetClockConfig+0x60>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40023c00 	.word	0x40023c00

08003528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e041      	b.n	80035be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f839 	bl	80035c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f000 f9d8 	bl	800391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04e      	b.n	8003692 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d022      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d01d      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_TIM_Base_Start_IT+0xd0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x80>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d111      	bne.n	8003680 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b06      	cmp	r3, #6
 800366c:	d010      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	e007      	b.n	8003690 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40010400 	.word	0x40010400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40001800 	.word	0x40001800

080036bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d122      	bne.n	8003718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d11b      	bne.n	8003718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0202 	mvn.w	r2, #2
 80036e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8ee 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f8e0 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8f1 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d122      	bne.n	800376c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d11b      	bne.n	800376c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0204 	mvn.w	r2, #4
 800373c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8c4 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8b6 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8c7 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d122      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d11b      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0208 	mvn.w	r2, #8
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2204      	movs	r2, #4
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f89a 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f88c 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f89d 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0210 	mvn.w	r2, #16
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2208      	movs	r2, #8
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f870 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f862 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f873 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0201 	mvn.w	r2, #1
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd f854 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f902 	bl	8003a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d107      	bne.n	8003898 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f838 	bl	8003908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d10e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0220 	mvn.w	r2, #32
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8cc 	bl	8003a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <TIM_Base_SetConfig+0x118>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <TIM_Base_SetConfig+0x11c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <TIM_Base_SetConfig+0x120>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3a      	ldr	r2, [pc, #232]	; (8003a40 <TIM_Base_SetConfig+0x124>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <TIM_Base_SetConfig+0x114>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02b      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d027      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <TIM_Base_SetConfig+0x118>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d023      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <TIM_Base_SetConfig+0x11c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01f      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <TIM_Base_SetConfig+0x120>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01b      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <TIM_Base_SetConfig+0x124>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d017      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <TIM_Base_SetConfig+0x128>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <TIM_Base_SetConfig+0x12c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <TIM_Base_SetConfig+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <TIM_Base_SetConfig+0x134>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <TIM_Base_SetConfig+0x138>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <TIM_Base_SetConfig+0x13c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <TIM_Base_SetConfig+0x114>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_Base_SetConfig+0xf8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <TIM_Base_SetConfig+0x124>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d103      	bne.n	8003a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	615a      	str	r2, [r3, #20]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40010400 	.word	0x40010400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800
 8003a50:	40001800 	.word	0x40001800
 8003a54:	40001c00 	.word	0x40001c00
 8003a58:	40002000 	.word	0x40002000

08003a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e03f      	b.n	8003b16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fc ff60 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f829 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b0c0      	sub	sp, #256	; 0x100
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	68d9      	ldr	r1, [r3, #12]
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	ea40 0301 	orr.w	r3, r0, r1
 8003b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b78:	f021 010c 	bic.w	r1, r1, #12
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b86:	430b      	orrs	r3, r1
 8003b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	6999      	ldr	r1, [r3, #24]
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	ea40 0301 	orr.w	r3, r0, r1
 8003ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b8f      	ldr	r3, [pc, #572]	; (8003dec <UART_SetConfig+0x2cc>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <UART_SetConfig+0xa0>
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b8d      	ldr	r3, [pc, #564]	; (8003df0 <UART_SetConfig+0x2d0>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d104      	bne.n	8003bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7ff fc6c 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bc8:	e003      	b.n	8003bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7ff fc53 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8003bce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bdc:	f040 810c 	bne.w	8003df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c02:	4621      	mov	r1, r4
 8003c04:	eb12 0801 	adds.w	r8, r2, r1
 8003c08:	4629      	mov	r1, r5
 8003c0a:	eb43 0901 	adc.w	r9, r3, r1
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c22:	4690      	mov	r8, r2
 8003c24:	4699      	mov	r9, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	eb18 0303 	adds.w	r3, r8, r3
 8003c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c30:	462b      	mov	r3, r5
 8003c32:	eb49 0303 	adc.w	r3, r9, r3
 8003c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c4e:	460b      	mov	r3, r1
 8003c50:	18db      	adds	r3, r3, r3
 8003c52:	653b      	str	r3, [r7, #80]	; 0x50
 8003c54:	4613      	mov	r3, r2
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c64:	f7fc fb14 	bl	8000290 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	011c      	lsls	r4, r3, #4
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c90:	415b      	adcs	r3, r3
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c98:	4641      	mov	r1, r8
 8003c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb8:	4692      	mov	sl, r2
 8003cba:	469b      	mov	fp, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	18db      	adds	r3, r3, r3
 8003ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cea:	4613      	mov	r3, r2
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cfa:	f7fc fac9 	bl	8000290 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2264      	movs	r2, #100	; 0x64
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d28:	441c      	add	r4, r3
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d44:	415b      	adcs	r3, r3
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	1851      	adds	r1, r2, r1
 8003d50:	6339      	str	r1, [r7, #48]	; 0x30
 8003d52:	4649      	mov	r1, r9
 8003d54:	414b      	adcs	r3, r1
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d64:	4659      	mov	r1, fp
 8003d66:	00cb      	lsls	r3, r1, #3
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6e:	4651      	mov	r1, sl
 8003d70:	00ca      	lsls	r2, r1, #3
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d80:	464b      	mov	r3, r9
 8003d82:	460a      	mov	r2, r1
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003da0:	460b      	mov	r3, r1
 8003da2:	18db      	adds	r3, r3, r3
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	4613      	mov	r3, r2
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003db6:	f7fc fa6b 	bl	8000290 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3332      	adds	r3, #50	; 0x32
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 0207 	and.w	r2, r3, #7
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4422      	add	r2, r4
 8003de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de8:	e105      	b.n	8003ff6 <UART_SetConfig+0x4d6>
 8003dea:	bf00      	nop
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	6239      	str	r1, [r7, #32]
 8003e12:	415b      	adcs	r3, r3
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	1854      	adds	r4, r2, r1
 8003e1e:	4649      	mov	r1, r9
 8003e20:	eb43 0501 	adc.w	r5, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	00eb      	lsls	r3, r5, #3
 8003e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e32:	00e2      	lsls	r2, r4, #3
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e40:	464b      	mov	r3, r9
 8003e42:	eb45 0303 	adc.w	r3, r5, r3
 8003e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e66:	4629      	mov	r1, r5
 8003e68:	008b      	lsls	r3, r1, #2
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e70:	4621      	mov	r1, r4
 8003e72:	008a      	lsls	r2, r1, #2
 8003e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e78:	f7fc fa0a 	bl	8000290 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4b60      	ldr	r3, [pc, #384]	; (8004004 <UART_SetConfig+0x4e4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011c      	lsls	r4, r3, #4
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	61b9      	str	r1, [r7, #24]
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6139      	str	r1, [r7, #16]
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f04:	4649      	mov	r1, r9
 8003f06:	008b      	lsls	r3, r1, #2
 8003f08:	4641      	mov	r1, r8
 8003f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f0e:	4641      	mov	r1, r8
 8003f10:	008a      	lsls	r2, r1, #2
 8003f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f16:	f7fc f9bb 	bl	8000290 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4b39      	ldr	r3, [pc, #228]	; (8004004 <UART_SetConfig+0x4e4>)
 8003f20:	fba3 1302 	umull	r1, r3, r3, r2
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	2164      	movs	r1, #100	; 0x64
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	3332      	adds	r3, #50	; 0x32
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <UART_SetConfig+0x4e4>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3e:	441c      	add	r4, r3
 8003f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f44:	2200      	movs	r2, #0
 8003f46:	673b      	str	r3, [r7, #112]	; 0x70
 8003f48:	677a      	str	r2, [r7, #116]	; 0x74
 8003f4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1851      	adds	r1, r2, r1
 8003f62:	6039      	str	r1, [r7, #0]
 8003f64:	4649      	mov	r1, r9
 8003f66:	414b      	adcs	r3, r1
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f76:	4659      	mov	r1, fp
 8003f78:	00cb      	lsls	r3, r1, #3
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f80:	4651      	mov	r1, sl
 8003f82:	00ca      	lsls	r2, r1, #3
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f90:	464b      	mov	r3, r9
 8003f92:	460a      	mov	r2, r1
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa4:	667a      	str	r2, [r7, #100]	; 0x64
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	008b      	lsls	r3, r1, #2
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	008a      	lsls	r2, r1, #2
 8003fc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fc4:	f7fc f964 	bl	8000290 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <UART_SetConfig+0x4e4>)
 8003fce:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2164      	movs	r1, #100	; 0x64
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a08      	ldr	r2, [pc, #32]	; (8004004 <UART_SetConfig+0x4e4>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4422      	add	r2, r4
 8003ff4:	609a      	str	r2, [r3, #8]
}
 8003ff6:	bf00      	nop
 8003ff8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004002:	bf00      	nop
 8004004:	51eb851f 	.word	0x51eb851f

08004008 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004008:	b5b0      	push	{r4, r5, r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800400e:	2100      	movs	r1, #0
 8004010:	2000      	movs	r0, #0
 8004012:	f003 fd73 	bl	8007afc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004016:	4b20      	ldr	r3, [pc, #128]	; (8004098 <MX_LWIP_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <MX_LWIP_Init+0x94>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004022:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <MX_LWIP_Init+0x98>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <MX_LWIP_Init+0x9c>)
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <MX_LWIP_Init+0xa0>)
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <MX_LWIP_Init+0x98>)
 8004036:	4a19      	ldr	r2, [pc, #100]	; (800409c <MX_LWIP_Init+0x94>)
 8004038:	4917      	ldr	r1, [pc, #92]	; (8004098 <MX_LWIP_Init+0x90>)
 800403a:	481c      	ldr	r0, [pc, #112]	; (80040ac <MX_LWIP_Init+0xa4>)
 800403c:	f004 fb28 	bl	8008690 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004040:	481a      	ldr	r0, [pc, #104]	; (80040ac <MX_LWIP_Init+0xa4>)
 8004042:	f004 fcdf 	bl	8008a04 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <MX_LWIP_Init+0xa4>)
 8004048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004058:	4814      	ldr	r0, [pc, #80]	; (80040ac <MX_LWIP_Init+0xa4>)
 800405a:	f004 fce3 	bl	8008a24 <netif_set_up>
 800405e:	e002      	b.n	8004066 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004060:	4812      	ldr	r0, [pc, #72]	; (80040ac <MX_LWIP_Init+0xa4>)
 8004062:	f004 fd4b 	bl	8008afc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004066:	4912      	ldr	r1, [pc, #72]	; (80040b0 <MX_LWIP_Init+0xa8>)
 8004068:	4810      	ldr	r0, [pc, #64]	; (80040ac <MX_LWIP_Init+0xa4>)
 800406a:	f004 fde1 	bl	8008c30 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <MX_LWIP_Init+0xac>)
 8004070:	1d3c      	adds	r4, r7, #4
 8004072:	461d      	mov	r5, r3
 8004074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800407c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	490a      	ldr	r1, [pc, #40]	; (80040ac <MX_LWIP_Init+0xa4>)
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fd23 	bl	8004ad0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <MX_LWIP_Init+0xa4>)
 800408c:	f00b ff36 	bl	800fefc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bdb0      	pop	{r4, r5, r7, pc}
 8004098:	20000438 	.word	0x20000438
 800409c:	2000043c 	.word	0x2000043c
 80040a0:	20000440 	.word	0x20000440
 80040a4:	08007a39 	.word	0x08007a39
 80040a8:	08004559 	.word	0x08004559
 80040ac:	20000400 	.word	0x20000400
 80040b0:	080040b9 	.word	0x080040b9
 80040b4:	08014f74 	.word	0x08014f74

080040b8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fe43 	bl	8004d64 <osSemaphoreRelease>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20004f10 	.word	0x20004f10

080040ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <HAL_ETH_TxCpltCallback+0x1c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fe33 	bl	8004d64 <osSemaphoreRelease>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20004f14 	.word	0x20004f14

0800410c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fd ff65 	bl	8001fe4 <HAL_ETH_GetDMAError>
 800411a:	4603      	mov	r3, r0
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d104      	bne.n	800412e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <HAL_ETH_ErrorCallback+0x2c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fe1b 	bl	8004d64 <osSemaphoreRelease>
  }
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20004f10 	.word	0x20004f10

0800413c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b0a8      	sub	sp, #160	; 0xa0
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800415a:	2264      	movs	r2, #100	; 0x64
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f00f ff1b 	bl	8013f9a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004164:	4b85      	ldr	r3, [pc, #532]	; (800437c <low_level_init+0x240>)
 8004166:	4a86      	ldr	r2, [pc, #536]	; (8004380 <low_level_init+0x244>)
 8004168:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004176:	23e1      	movs	r3, #225	; 0xe1
 8004178:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 800417c:	23fe      	movs	r3, #254	; 0xfe
 800417e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 8004182:	23ec      	movs	r3, #236	; 0xec
 8004184:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x80;
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800418e:	4a7b      	ldr	r2, [pc, #492]	; (800437c <low_level_init+0x240>)
 8004190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004194:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004196:	4b79      	ldr	r3, [pc, #484]	; (800437c <low_level_init+0x240>)
 8004198:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800419c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800419e:	4b77      	ldr	r3, [pc, #476]	; (800437c <low_level_init+0x240>)
 80041a0:	4a78      	ldr	r2, [pc, #480]	; (8004384 <low_level_init+0x248>)
 80041a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80041a4:	4b75      	ldr	r3, [pc, #468]	; (800437c <low_level_init+0x240>)
 80041a6:	4a78      	ldr	r2, [pc, #480]	; (8004388 <low_level_init+0x24c>)
 80041a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80041aa:	4b74      	ldr	r3, [pc, #464]	; (800437c <low_level_init+0x240>)
 80041ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80041b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80041b2:	4872      	ldr	r0, [pc, #456]	; (800437c <low_level_init+0x240>)
 80041b4:	f7fd f878 	bl	80012a8 <HAL_ETH_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80041be:	2238      	movs	r2, #56	; 0x38
 80041c0:	2100      	movs	r1, #0
 80041c2:	4872      	ldr	r0, [pc, #456]	; (800438c <low_level_init+0x250>)
 80041c4:	f00f fee9 	bl	8013f9a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80041c8:	4b70      	ldr	r3, [pc, #448]	; (800438c <low_level_init+0x250>)
 80041ca:	2221      	movs	r2, #33	; 0x21
 80041cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80041ce:	4b6f      	ldr	r3, [pc, #444]	; (800438c <low_level_init+0x250>)
 80041d0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80041d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80041d6:	4b6d      	ldr	r3, [pc, #436]	; (800438c <low_level_init+0x250>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80041dc:	486c      	ldr	r0, [pc, #432]	; (8004390 <low_level_init+0x254>)
 80041de:	f004 f911 	bl	8008404 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2206      	movs	r2, #6
 80041e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80041ea:	4b64      	ldr	r3, [pc, #400]	; (800437c <low_level_init+0x240>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80041f6:	4b61      	ldr	r3, [pc, #388]	; (800437c <low_level_init+0x240>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	785a      	ldrb	r2, [r3, #1]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004202:	4b5e      	ldr	r3, [pc, #376]	; (800437c <low_level_init+0x240>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	789a      	ldrb	r2, [r3, #2]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <low_level_init+0x240>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	78da      	ldrb	r2, [r3, #3]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800421a:	4b58      	ldr	r3, [pc, #352]	; (800437c <low_level_init+0x240>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	791a      	ldrb	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004226:	4b55      	ldr	r3, [pc, #340]	; (800437c <low_level_init+0x240>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	795a      	ldrb	r2, [r3, #5]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004240:	f043 030a 	orr.w	r3, r3, #10
 8004244:	b2da      	uxtb	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800424c:	2203      	movs	r2, #3
 800424e:	2100      	movs	r1, #0
 8004250:	2001      	movs	r0, #1
 8004252:	f001 f82d 	bl	80052b0 <xQueueGenericCreate>
 8004256:	4603      	mov	r3, r0
 8004258:	4a4e      	ldr	r2, [pc, #312]	; (8004394 <low_level_init+0x258>)
 800425a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800425c:	2203      	movs	r2, #3
 800425e:	2100      	movs	r1, #0
 8004260:	2001      	movs	r0, #1
 8004262:	f001 f825 	bl	80052b0 <xQueueGenericCreate>
 8004266:	4603      	mov	r3, r0
 8004268:	4a4b      	ldr	r2, [pc, #300]	; (8004398 <low_level_init+0x25c>)
 800426a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <low_level_init+0x260>)
 800426e:	f107 0408 	add.w	r4, r7, #8
 8004272:	461d      	mov	r5, r3
 8004274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800427c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fc22 	bl	8004ad0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800428c:	4944      	ldr	r1, [pc, #272]	; (80043a0 <low_level_init+0x264>)
 800428e:	4845      	ldr	r0, [pc, #276]	; (80043a4 <low_level_init+0x268>)
 8004290:	f7fc fd61 	bl	8000d56 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004294:	4843      	ldr	r0, [pc, #268]	; (80043a4 <low_level_init+0x268>)
 8004296:	f7fc fd90 	bl	8000dba <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800429a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d165      	bne.n	800436e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80042a2:	4840      	ldr	r0, [pc, #256]	; (80043a4 <low_level_init+0x268>)
 80042a4:	f7fc fe31 	bl	8000f0a <LAN8742_GetLinkState>
 80042a8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80042ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	dc06      	bgt.n	80042c2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f004 fc8b 	bl	8008bd0 <netif_set_link_down>
      netif_set_down(netif);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f004 fc1e 	bl	8008afc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80042c0:	e057      	b.n	8004372 <low_level_init+0x236>
      switch (PHYLinkState)
 80042c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042c6:	3b02      	subs	r3, #2
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d82b      	bhi.n	8004324 <low_level_init+0x1e8>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <low_level_init+0x198>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042f7 	.word	0x080042f7
 80042dc:	08004307 	.word	0x08004307
 80042e0:	08004317 	.word	0x08004317
        duplex = ETH_FULLDUPLEX_MODE;
 80042e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80042ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80042f4:	e01f      	b.n	8004336 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80042fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004304:	e017      	b.n	8004336 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800430a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004314:	e00f      	b.n	8004336 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004322:	e008      	b.n	8004336 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800432c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004334:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800433a:	4619      	mov	r1, r3
 800433c:	480f      	ldr	r0, [pc, #60]	; (800437c <low_level_init+0x240>)
 800433e:	f7fd fcf7 	bl	8001d30 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004346:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800434c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800434e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004352:	4619      	mov	r1, r3
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <low_level_init+0x240>)
 8004356:	f7fd fdd5 	bl	8001f04 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800435a:	4808      	ldr	r0, [pc, #32]	; (800437c <low_level_init+0x240>)
 800435c:	f7fd f881 	bl	8001462 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f004 fb5f 	bl	8008a24 <netif_set_up>
    netif_set_link_up(netif);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f004 fbfa 	bl	8008b60 <netif_set_link_up>
}
 800436c:	e001      	b.n	8004372 <low_level_init+0x236>
    Error_Handler();
 800436e:	f7fc facd 	bl	800090c <Error_Handler>
}
 8004372:	bf00      	nop
 8004374:	37a0      	adds	r7, #160	; 0xa0
 8004376:	46bd      	mov	sp, r7
 8004378:	bdb0      	pop	{r4, r5, r7, pc}
 800437a:	bf00      	nop
 800437c:	20004f18 	.word	0x20004f18
 8004380:	40028000 	.word	0x40028000
 8004384:	20004e70 	.word	0x20004e70
 8004388:	20004dd0 	.word	0x20004dd0
 800438c:	20004fc8 	.word	0x20004fc8
 8004390:	08017e50 	.word	0x08017e50
 8004394:	20004f10 	.word	0x20004f10
 8004398:	20004f14 	.word	0x20004f14
 800439c:	08014f98 	.word	0x08014f98
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	20005000 	.word	0x20005000

080043a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b092      	sub	sp, #72	; 0x48
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	2230      	movs	r2, #48	; 0x30
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f00f fde6 	bl	8013f9a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	2230      	movs	r2, #48	; 0x30
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f00f fddf 	bl	8013f9a <memset>

  for(q = p; q != NULL; q = q->next)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
 80043e0:	e045      	b.n	800446e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80043e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d902      	bls.n	80043ee <low_level_output+0x46>
      return ERR_IF;
 80043e8:	f06f 030b 	mvn.w	r3, #11
 80043ec:	e065      	b.n	80044ba <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80043ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f4:	4613      	mov	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	3348      	adds	r3, #72	; 0x48
 80043fe:	443b      	add	r3, r7
 8004400:	3b3c      	subs	r3, #60	; 0x3c
 8004402:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004406:	895b      	ldrh	r3, [r3, #10]
 8004408:	4619      	mov	r1, r3
 800440a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	3348      	adds	r3, #72	; 0x48
 8004416:	443b      	add	r3, r7
 8004418:	3b38      	subs	r3, #56	; 0x38
 800441a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	2b00      	cmp	r3, #0
 8004420:	d011      	beq.n	8004446 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	f107 000c 	add.w	r0, r7, #12
 800442a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800442c:	460b      	mov	r3, r1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	440b      	add	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	18c1      	adds	r1, r0, r3
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	3348      	adds	r3, #72	; 0x48
 8004440:	443b      	add	r3, r7
 8004442:	3b34      	subs	r3, #52	; 0x34
 8004444:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800444e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	3348      	adds	r3, #72	; 0x48
 800445a:	443b      	add	r3, r7
 800445c:	3b34      	subs	r3, #52	; 0x34
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004464:	3301      	adds	r3, #1
 8004466:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
 800446e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1b6      	bne.n	80043e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	891b      	ldrh	r3, [r3, #8]
 8004478:	461a      	mov	r2, r3
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <low_level_output+0x11c>)
 800447c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800447e:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <low_level_output+0x11c>)
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004486:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <low_level_output+0x11c>)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800448c:	6838      	ldr	r0, [r7, #0]
 800448e:	f005 f823 	bl	80094d8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004492:	490c      	ldr	r1, [pc, #48]	; (80044c4 <low_level_output+0x11c>)
 8004494:	480c      	ldr	r0, [pc, #48]	; (80044c8 <low_level_output+0x120>)
 8004496:	f7fd f8f1 	bl	800167c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800449a:	bf00      	nop
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <low_level_output+0x124>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fc0f 	bl	8004cc8 <osSemaphoreWait>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f5      	bne.n	800449c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80044b0:	4805      	ldr	r0, [pc, #20]	; (80044c8 <low_level_output+0x120>)
 80044b2:	f7fd fa77 	bl	80019a4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80044b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3748      	adds	r7, #72	; 0x48
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20004fc8 	.word	0x20004fc8
 80044c8:	20004f18 	.word	0x20004f18
 80044cc:	20004f14 	.word	0x20004f14

080044d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <low_level_input+0x2c>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	4619      	mov	r1, r3
 80044ea:	4805      	ldr	r0, [pc, #20]	; (8004500 <low_level_input+0x30>)
 80044ec:	f7fd f922 	bl	8001734 <HAL_ETH_ReadData>
  }

  return p;
 80044f0:	68fb      	ldr	r3, [r7, #12]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20004dcc 	.word	0x20004dcc
 8004500:	20004f18 	.word	0x20004f18

08004504 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <ethernetif_input+0x50>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f04f 31ff 	mov.w	r1, #4294967295
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fbd3 	bl	8004cc8 <osSemaphoreWait>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f5      	bne.n	8004514 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004528:	68b8      	ldr	r0, [r7, #8]
 800452a:	f7ff ffd1 	bl	80044d0 <low_level_input>
 800452e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	4798      	blx	r3
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f004 ff20 	bl	800938c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ea      	bne.n	8004528 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004552:	e7df      	b.n	8004514 <ethernetif_input+0x10>
 8004554:	20004f10 	.word	0x20004f10

08004558 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <ethernetif_init+0x1c>
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <ethernetif_init+0x48>)
 8004568:	f240 12df 	movw	r2, #479	; 0x1df
 800456c:	490d      	ldr	r1, [pc, #52]	; (80045a4 <ethernetif_init+0x4c>)
 800456e:	480e      	ldr	r0, [pc, #56]	; (80045a8 <ethernetif_init+0x50>)
 8004570:	f00f fdb0 	bl	80140d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2273      	movs	r2, #115	; 0x73
 8004578:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2274      	movs	r2, #116	; 0x74
 8004580:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <ethernetif_init+0x54>)
 8004588:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <ethernetif_init+0x58>)
 800458e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fdd3 	bl	800413c <low_level_init>

  return ERR_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08014fb4 	.word	0x08014fb4
 80045a4:	08014fd0 	.word	0x08014fd0
 80045a8:	08014fe0 	.word	0x08014fe0
 80045ac:	08011dc9 	.word	0x08011dc9
 80045b0:	080043a9 	.word	0x080043a9

080045b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	4809      	ldr	r0, [pc, #36]	; (80045e8 <pbuf_free_custom+0x34>)
 80045c4:	f004 f80e 	bl	80085e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <pbuf_free_custom+0x38>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <pbuf_free_custom+0x38>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <pbuf_free_custom+0x3c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fbc2 	bl	8004d64 <osSemaphoreRelease>
  }
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	08017e50 	.word	0x08017e50
 80045ec:	20004dcc 	.word	0x20004dcc
 80045f0:	20004f10 	.word	0x20004f10

080045f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045f8:	f7fc fd44 	bl	8001084 <HAL_GetTick>
 80045fc:	4603      	mov	r3, r0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08e      	sub	sp, #56	; 0x38
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a59      	ldr	r2, [pc, #356]	; (8004788 <HAL_ETH_MspInit+0x184>)
 8004622:	4293      	cmp	r3, r2
 8004624:	f040 80ac 	bne.w	8004780 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_ETH_MspInit+0x188>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	4a56      	ldr	r2, [pc, #344]	; (800478c <HAL_ETH_MspInit+0x188>)
 8004632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004636:	6313      	str	r3, [r2, #48]	; 0x30
 8004638:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_ETH_MspInit+0x188>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	623b      	str	r3, [r7, #32]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_ETH_MspInit+0x188>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	4a4f      	ldr	r2, [pc, #316]	; (800478c <HAL_ETH_MspInit+0x188>)
 800464e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004652:	6313      	str	r3, [r2, #48]	; 0x30
 8004654:	4b4d      	ldr	r3, [pc, #308]	; (800478c <HAL_ETH_MspInit+0x188>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <HAL_ETH_MspInit+0x188>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	4a48      	ldr	r2, [pc, #288]	; (800478c <HAL_ETH_MspInit+0x188>)
 800466a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800466e:	6313      	str	r3, [r2, #48]	; 0x30
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_ETH_MspInit+0x188>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_ETH_MspInit+0x188>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	4a41      	ldr	r2, [pc, #260]	; (800478c <HAL_ETH_MspInit+0x188>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	6313      	str	r3, [r2, #48]	; 0x30
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <HAL_ETH_MspInit+0x188>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_ETH_MspInit+0x188>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	4a3a      	ldr	r2, [pc, #232]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6313      	str	r3, [r2, #48]	; 0x30
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	4b34      	ldr	r3, [pc, #208]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4a33      	ldr	r2, [pc, #204]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	6313      	str	r3, [r2, #48]	; 0x30
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046de:	6313      	str	r3, [r2, #48]	; 0x30
 80046e0:	4b2a      	ldr	r3, [pc, #168]	; (800478c <HAL_ETH_MspInit+0x188>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80046ec:	2332      	movs	r3, #50	; 0x32
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f8:	2303      	movs	r3, #3
 80046fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046fc:	230b      	movs	r3, #11
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004704:	4619      	mov	r1, r3
 8004706:	4822      	ldr	r0, [pc, #136]	; (8004790 <HAL_ETH_MspInit+0x18c>)
 8004708:	f7fe f87e 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800470c:	2386      	movs	r3, #134	; 0x86
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800471c:	230b      	movs	r3, #11
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004724:	4619      	mov	r1, r3
 8004726:	481b      	ldr	r0, [pc, #108]	; (8004794 <HAL_ETH_MspInit+0x190>)
 8004728:	f7fe f86e 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800472c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004732:	2302      	movs	r3, #2
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473a:	2303      	movs	r3, #3
 800473c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800473e:	230b      	movs	r3, #11
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004746:	4619      	mov	r1, r3
 8004748:	4813      	ldr	r0, [pc, #76]	; (8004798 <HAL_ETH_MspInit+0x194>)
 800474a:	f7fe f85d 	bl	8002808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800474e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	2302      	movs	r3, #2
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475c:	2303      	movs	r3, #3
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004760:	230b      	movs	r3, #11
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004768:	4619      	mov	r1, r3
 800476a:	480c      	ldr	r0, [pc, #48]	; (800479c <HAL_ETH_MspInit+0x198>)
 800476c:	f7fe f84c 	bl	8002808 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004770:	2200      	movs	r2, #0
 8004772:	2105      	movs	r1, #5
 8004774:	203d      	movs	r0, #61	; 0x3d
 8004776:	f7fc fd6d 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800477a:	203d      	movs	r0, #61	; 0x3d
 800477c:	f7fc fd86 	bl	800128c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004780:	bf00      	nop
 8004782:	3738      	adds	r7, #56	; 0x38
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40028000 	.word	0x40028000
 800478c:	40023800 	.word	0x40023800
 8004790:	40020800 	.word	0x40020800
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400
 800479c:	40021800 	.word	0x40021800

080047a0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <ETH_PHY_IO_Init+0x10>)
 80047a6:	f7fd fbc7 	bl	8001f38 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20004f18 	.word	0x20004f18

080047b4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return 0;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	4807      	ldr	r0, [pc, #28]	; (80047f4 <ETH_PHY_IO_ReadReg+0x30>)
 80047d8:	f7fd fa16 	bl	8001c08 <HAL_ETH_ReadPHYRegister>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	e000      	b.n	80047ea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20004f18 	.word	0x20004f18

080047f8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	4807      	ldr	r0, [pc, #28]	; (8004828 <ETH_PHY_IO_WriteReg+0x30>)
 800480c:	f7fd fa47 	bl	8001c9e <HAL_ETH_WritePHYRegister>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	e000      	b.n	800481e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20004f18 	.word	0x20004f18

0800482c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004830:	f7fc fc28 	bl	8001084 <HAL_GetTick>
 8004834:	4603      	mov	r3, r0
}
 8004836:	4618      	mov	r0, r3
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b0a0      	sub	sp, #128	; 0x80
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004844:	f107 0308 	add.w	r3, r7, #8
 8004848:	2264      	movs	r2, #100	; 0x64
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f00f fba4 	bl	8013f9a <memset>
  int32_t PHYLinkState = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	67fb      	str	r3, [r7, #124]	; 0x7c
 800485a:	2300      	movs	r3, #0
 800485c:	67bb      	str	r3, [r7, #120]	; 0x78
 800485e:	2300      	movs	r3, #0
 8004860:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004866:	483a      	ldr	r0, [pc, #232]	; (8004950 <ethernet_link_thread+0x114>)
 8004868:	f7fc fb4f 	bl	8000f0a <LAN8742_GetLinkState>
 800486c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004874:	089b      	lsrs	r3, r3, #2
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <ethernet_link_thread+0x5e>
 8004880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004882:	2b01      	cmp	r3, #1
 8004884:	dc09      	bgt.n	800489a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004886:	4833      	ldr	r0, [pc, #204]	; (8004954 <ethernet_link_thread+0x118>)
 8004888:	f7fc fe79 	bl	800157e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800488c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800488e:	f004 f935 	bl	8008afc <netif_set_down>
    netif_set_link_down(netif);
 8004892:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004894:	f004 f99c 	bl	8008bd0 <netif_set_link_down>
 8004898:	e055      	b.n	8004946 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d14e      	bne.n	8004946 <ethernet_link_thread+0x10a>
 80048a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	dd4b      	ble.n	8004946 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80048ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b0:	3b02      	subs	r3, #2
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d82a      	bhi.n	800490c <ethernet_link_thread+0xd0>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <ethernet_link_thread+0x80>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048df 	.word	0x080048df
 80048c4:	080048ef 	.word	0x080048ef
 80048c8:	080048ff 	.word	0x080048ff
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80048cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048d8:	2301      	movs	r3, #1
 80048da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048dc:	e017      	b.n	800490e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80048de:	2300      	movs	r3, #0
 80048e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048ec:	e00f      	b.n	800490e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80048ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048f2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80048f4:	2300      	movs	r3, #0
 80048f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048fc:	e007      	b.n	800490e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80048fe:	2300      	movs	r3, #0
 8004900:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004902:	2300      	movs	r3, #0
 8004904:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004906:	2301      	movs	r3, #1
 8004908:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800490a:	e000      	b.n	800490e <ethernet_link_thread+0xd2>
    default:
      break;
 800490c:	bf00      	nop
    }

    if(linkchanged)
 800490e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	4619      	mov	r1, r3
 800491a:	480e      	ldr	r0, [pc, #56]	; (8004954 <ethernet_link_thread+0x118>)
 800491c:	f7fd fa08 	bl	8001d30 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004922:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	4619      	mov	r1, r3
 800492e:	4809      	ldr	r0, [pc, #36]	; (8004954 <ethernet_link_thread+0x118>)
 8004930:	f7fd fae8 	bl	8001f04 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004934:	4807      	ldr	r0, [pc, #28]	; (8004954 <ethernet_link_thread+0x118>)
 8004936:	f7fc fd35 	bl	80013a4 <HAL_ETH_Start>
      netif_set_up(netif);
 800493a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800493c:	f004 f872 	bl	8008a24 <netif_set_up>
      netif_set_link_up(netif);
 8004940:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004942:	f004 f90d 	bl	8008b60 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004946:	2064      	movs	r0, #100	; 0x64
 8004948:	f000 f90e 	bl	8004b68 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800494c:	e78b      	b.n	8004866 <ethernet_link_thread+0x2a>
 800494e:	bf00      	nop
 8004950:	20005000 	.word	0x20005000
 8004954:	20004f18 	.word	0x20004f18

08004958 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004960:	4812      	ldr	r0, [pc, #72]	; (80049ac <HAL_ETH_RxAllocateCallback+0x54>)
 8004962:	f003 fdcb 	bl	80084fc <memp_malloc_pool>
 8004966:	60f8      	str	r0, [r7, #12]
  if (p)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d014      	beq.n	8004998 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f103 0220 	add.w	r2, r3, #32
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <HAL_ETH_RxAllocateCallback+0x58>)
 800497c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004986:	9201      	str	r2, [sp, #4]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2241      	movs	r2, #65	; 0x41
 800498e:	2100      	movs	r1, #0
 8004990:	2000      	movs	r0, #0
 8004992:	f004 fb41 	bl	8009018 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004996:	e005      	b.n	80049a4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	08017e50 	.word	0x08017e50
 80049b0:	080045b5 	.word	0x080045b5
 80049b4:	20004dcc 	.word	0x20004dcc

080049b8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	; 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3b20      	subs	r3, #32
 80049d6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2200      	movs	r2, #0
 80049e2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e003      	b.n	8004a02 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e009      	b.n	8004a24 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	891a      	ldrh	r2, [r3, #8]
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	4413      	add	r3, r2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f2      	bne.n	8004a10 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	3724      	adds	r7, #36	; 0x24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f004 fca3 	bl	800938c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	4603      	mov	r3, r0
 8004a56:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a60:	2b84      	cmp	r3, #132	; 0x84
 8004a62:	d005      	beq.n	8004a70 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3303      	adds	r3, #3
 8004a6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a70:	68fb      	ldr	r3, [r7, #12]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a84:	f3ef 8305 	mrs	r3, IPSR
 8004a88:	607b      	str	r3, [r7, #4]
  return(result);
 8004a8a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004aa6:	f001 fc41 	bl	800632c <vTaskStartScheduler>
  
  return osOK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004ab4:	f7ff ffe3 	bl	8004a7e <inHandlerMode>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004abe:	f001 fd59 	bl	8006574 <xTaskGetTickCountFromISR>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	e002      	b.n	8004acc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004ac6:	f001 fd45 	bl	8006554 <xTaskGetTickCount>
 8004aca:	4603      	mov	r3, r0
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad2:	b089      	sub	sp, #36	; 0x24
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d020      	beq.n	8004b24 <osThreadCreate+0x54>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01c      	beq.n	8004b24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685c      	ldr	r4, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681d      	ldr	r5, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691e      	ldr	r6, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff ffa6 	bl	8004a4e <makeFreeRtosPriority>
 8004b02:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b0c:	9202      	str	r2, [sp, #8]
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	9100      	str	r1, [sp, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	4632      	mov	r2, r6
 8004b16:	4629      	mov	r1, r5
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f001 fa29 	bl	8005f70 <xTaskCreateStatic>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e01c      	b.n	8004b5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685c      	ldr	r4, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b30:	b29e      	uxth	r6, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff88 	bl	8004a4e <makeFreeRtosPriority>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	9200      	str	r2, [sp, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4632      	mov	r2, r6
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f001 fa6b 	bl	800602a <xTaskCreate>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d001      	beq.n	8004b5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <osDelay+0x16>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	e000      	b.n	8004b80 <osDelay+0x18>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fb9f 	bl	80062c4 <vTaskDelay>
  
  return osOK;
 8004b86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	f000 fc0d 	bl	80053c6 <xQueueCreateMutexStatic>
 8004bac:	4603      	mov	r3, r0
 8004bae:	e003      	b.n	8004bb8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f000 fbf0 	bl	8005396 <xQueueCreateMutex>
 8004bb6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <osMutexWait+0x18>
    return osErrorParameter;
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	e03a      	b.n	8004c4e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d103      	bne.n	8004bec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e009      	b.n	8004c00 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d006      	beq.n	8004c00 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <osMutexWait+0x40>
      ticks = 1;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004c00:	f7ff ff3d 	bl	8004a7e <inHandlerMode>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2100      	movs	r1, #0
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f001 f804 	bl	8005c20 <xQueueReceiveFromISR>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <osMutexWait+0x62>
      return osErrorOS;
 8004c1e:	23ff      	movs	r3, #255	; 0xff
 8004c20:	e015      	b.n	8004c4e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d011      	beq.n	8004c4c <osMutexWait+0x8c>
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <osMutexWait+0x98>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	e008      	b.n	8004c4c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fee3 	bl	8005a08 <xQueueSemaphoreTake>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d001      	beq.n	8004c4c <osMutexWait+0x8c>
    return osErrorOS;
 8004c48:	23ff      	movs	r3, #255	; 0xff
 8004c4a:	e000      	b.n	8004c4e <osMutexWait+0x8e>
  }
  
  return osOK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004c6c:	f7ff ff07 	bl	8004a7e <inHandlerMode>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fd56 	bl	800572e <xQueueGiveFromISR>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d001      	beq.n	8004c8c <osMutexRelease+0x30>
      return osErrorOS;
 8004c88:	23ff      	movs	r3, #255	; 0xff
 8004c8a:	e017      	b.n	8004cbc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d013      	beq.n	8004cba <osMutexRelease+0x5e>
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <osMutexRelease+0x68>)
 8004c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	e00a      	b.n	8004cba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fba6 	bl	80053fc <xQueueGenericSend>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d001      	beq.n	8004cba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004cb6:	23ff      	movs	r3, #255	; 0xff
 8004cb8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	e03a      	b.n	8004d56 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d103      	bne.n	8004cf4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e009      	b.n	8004d08 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d006      	beq.n	8004d08 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <osSemaphoreWait+0x40>
      ticks = 1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d08:	f7ff feb9 	bl	8004a7e <inHandlerMode>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	461a      	mov	r2, r3
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 ff80 	bl	8005c20 <xQueueReceiveFromISR>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d001      	beq.n	8004d2a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004d26:	23ff      	movs	r3, #255	; 0xff
 8004d28:	e015      	b.n	8004d56 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <osSemaphoreWait+0x8c>
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <osSemaphoreWait+0x98>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	e008      	b.n	8004d54 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fe5f 	bl	8005a08 <xQueueSemaphoreTake>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004d50:	23ff      	movs	r3, #255	; 0xff
 8004d52:	e000      	b.n	8004d56 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004d74:	f7ff fe83 	bl	8004a7e <inHandlerMode>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d7e:	f107 0308 	add.w	r3, r7, #8
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fcd2 	bl	800572e <xQueueGiveFromISR>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d001      	beq.n	8004d94 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004d90:	23ff      	movs	r3, #255	; 0xff
 8004d92:	e017      	b.n	8004dc4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d013      	beq.n	8004dc2 <osSemaphoreRelease+0x5e>
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <osSemaphoreRelease+0x68>)
 8004d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	e00a      	b.n	8004dc2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004dac:	2300      	movs	r3, #0
 8004dae:	2200      	movs	r2, #0
 8004db0:	2100      	movs	r1, #0
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fb22 	bl	80053fc <xQueueGenericSend>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d001      	beq.n	8004dc2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004dbe:	23ff      	movs	r3, #255	; 0xff
 8004dc0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <osMessageCreate+0x36>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2400      	movs	r4, #0
 8004dfc:	9400      	str	r4, [sp, #0]
 8004dfe:	f000 f9df 	bl	80051c0 <xQueueGenericCreateStatic>
 8004e02:	4603      	mov	r3, r0
 8004e04:	e008      	b.n	8004e18 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4619      	mov	r1, r3
 8004e12:	f000 fa4d 	bl	80052b0 <xQueueGenericCreate>
 8004e16:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}

08004e20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <osMessagePut+0x1e>
    ticks = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004e3e:	f7ff fe1e 	bl	8004a7e <inHandlerMode>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d018      	beq.n	8004e7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004e48:	f107 0210 	add.w	r2, r7, #16
 8004e4c:	f107 0108 	add.w	r1, r7, #8
 8004e50:	2300      	movs	r3, #0
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fbd0 	bl	80055f8 <xQueueGenericSendFromISR>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <osMessagePut+0x42>
      return osErrorOS;
 8004e5e:	23ff      	movs	r3, #255	; 0xff
 8004e60:	e018      	b.n	8004e94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d014      	beq.n	8004e92 <osMessagePut+0x72>
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <osMessagePut+0x7c>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	e00b      	b.n	8004e92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004e7a:	f107 0108 	add.w	r1, r7, #8
 8004e7e:	2300      	movs	r3, #0
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 faba 	bl	80053fc <xQueueGenericSend>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <osMessagePut+0x72>
      return osErrorOS;
 8004e8e:	23ff      	movs	r3, #255	; 0xff
 8004e90:	e000      	b.n	8004e94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b08b      	sub	sp, #44	; 0x2c
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	617b      	str	r3, [r7, #20]
    return event;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	461c      	mov	r4, r3
 8004ec2:	f107 0314 	add.w	r3, r7, #20
 8004ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ece:	e054      	b.n	8004f7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d103      	bne.n	8004ee8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	e009      	b.n	8004efc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <osMessageGet+0x5c>
      ticks = 1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004efc:	f7ff fdbf 	bl	8004a7e <inHandlerMode>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01c      	beq.n	8004f40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004f06:	f107 0220 	add.w	r2, r7, #32
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f000 fe84 	bl	8005c20 <xQueueReceiveFromISR>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d102      	bne.n	8004f24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004f1e:	2310      	movs	r3, #16
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e001      	b.n	8004f28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01d      	beq.n	8004f6a <osMessageGet+0xca>
 8004f2e:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <osMessageGet+0xe4>)
 8004f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	e014      	b.n	8004f6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	3304      	adds	r3, #4
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	4619      	mov	r1, r3
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f000 fc7c 	bl	8005848 <xQueueReceive>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d102      	bne.n	8004f5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004f56:	2310      	movs	r3, #16
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e006      	b.n	8004f6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <osMessageGet+0xc6>
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <osMessageGet+0xc8>
 8004f66:	2340      	movs	r3, #64	; 0x40
 8004f68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	461c      	mov	r4, r3
 8004f6e:	f107 0314 	add.w	r3, r7, #20
 8004f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	372c      	adds	r7, #44	; 0x2c
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd90      	pop	{r4, r7, pc}
 8004f82:	bf00      	nop
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f103 0208 	add.w	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f103 0208 	add.w	r2, r3, #8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f103 0208 	add.w	r2, r3, #8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d103      	bne.n	800504a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e00c      	b.n	8005064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3308      	adds	r3, #8
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e002      	b.n	8005058 <vListInsert+0x2e>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	d2f6      	bcs.n	8005052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6892      	ldr	r2, [r2, #8]
 80050b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6852      	ldr	r2, [r2, #4]
 80050bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d103      	bne.n	80050d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1e5a      	subs	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800511a:	f002 f88b 	bl	8007234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	3b01      	subs	r3, #1
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	441a      	add	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d114      	bne.n	800519a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01a      	beq.n	80051ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3310      	adds	r3, #16
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fb49 	bl	8006814 <xTaskRemoveFromEventList>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <xQueueGenericReset+0xcc>)
 800518a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	e009      	b.n	80051ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3310      	adds	r3, #16
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fef2 	bl	8004f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3324      	adds	r3, #36	; 0x24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff feed 	bl	8004f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ae:	f002 f871 	bl	8007294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b2:	2301      	movs	r3, #1
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	; 0x38
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <xQueueGenericCreateStatic+0x52>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <xQueueGenericCreateStatic+0x56>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <xQueueGenericCreateStatic+0x58>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	623b      	str	r3, [r7, #32]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <xQueueGenericCreateStatic+0x7e>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <xQueueGenericCreateStatic+0x82>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <xQueueGenericCreateStatic+0x84>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61fb      	str	r3, [r7, #28]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800525e:	2348      	movs	r3, #72	; 0x48
 8005260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b48      	cmp	r3, #72	; 0x48
 8005266:	d00a      	beq.n	800527e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800527e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005292:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f83f 	bl	8005324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3730      	adds	r7, #48	; 0x30
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <xQueueGenericCreate+0x2a>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3348      	adds	r3, #72	; 0x48
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 f8c5 	bl	8007478 <pvPortMalloc>
 80052ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	3348      	adds	r3, #72	; 0x48
 80052fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005308:	79fa      	ldrb	r2, [r7, #7]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f805 	bl	8005324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800531a:	69bb      	ldr	r3, [r7, #24]
	}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e002      	b.n	8005346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005352:	2101      	movs	r1, #1
 8005354:	69b8      	ldr	r0, [r7, #24]
 8005356:	f7ff fecb 	bl	80050f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005382:	2300      	movs	r3, #0
 8005384:	2200      	movs	r2, #0
 8005386:	2100      	movs	r1, #0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f837 	bl	80053fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053a0:	2301      	movs	r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6939      	ldr	r1, [r7, #16]
 80053ae:	6978      	ldr	r0, [r7, #20]
 80053b0:	f7ff ff7e 	bl	80052b0 <xQueueGenericCreate>
 80053b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ffd3 	bl	8005362 <prvInitialiseMutex>

		return xNewQueue;
 80053bc:	68fb      	ldr	r3, [r7, #12]
	}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b088      	sub	sp, #32
 80053ca:	af02      	add	r7, sp, #8
 80053cc:	4603      	mov	r3, r0
 80053ce:	6039      	str	r1, [r7, #0]
 80053d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2200      	movs	r2, #0
 80053e2:	6939      	ldr	r1, [r7, #16]
 80053e4:	6978      	ldr	r0, [r7, #20]
 80053e6:	f7ff feeb 	bl	80051c0 <xQueueGenericCreateStatic>
 80053ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ffb8 	bl	8005362 <prvInitialiseMutex>

		return xNewQueue;
 80053f2:	68fb      	ldr	r3, [r7, #12]
	}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	; 0x38
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800540a:	2300      	movs	r3, #0
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericSend+0x32>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <xQueueGenericSend+0x40>
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <xQueueGenericSend+0x44>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <xQueueGenericSend+0x46>
 8005440:	2300      	movs	r3, #0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <xQueueGenericSend+0x60>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d103      	bne.n	800546a <xQueueGenericSend+0x6e>
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <xQueueGenericSend+0x72>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <xQueueGenericSend+0x74>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <xQueueGenericSend+0x8e>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	623b      	str	r3, [r7, #32]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800548a:	f001 fb83 	bl	8006b94 <xTaskGetSchedulerState>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xQueueGenericSend+0x9e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <xQueueGenericSend+0xa2>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueGenericSend+0xa4>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericSend+0xbe>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61fb      	str	r3, [r7, #28]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ba:	f001 febb 	bl	8007234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <xQueueGenericSend+0xd4>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d129      	bne.n	8005524 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d6:	f000 fc3b 	bl	8005d50 <prvCopyDataToQueue>
 80054da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d010      	beq.n	8005506 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	3324      	adds	r3, #36	; 0x24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f993 	bl	8006814 <xTaskRemoveFromEventList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054f4:	4b3f      	ldr	r3, [pc, #252]	; (80055f4 <xQueueGenericSend+0x1f8>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	e00a      	b.n	800551c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800550c:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <xQueueGenericSend+0x1f8>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800551c:	f001 feba 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 8005520:	2301      	movs	r3, #1
 8005522:	e063      	b.n	80055ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800552a:	f001 feb3 	bl	8007294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800552e:	2300      	movs	r3, #0
 8005530:	e05c      	b.n	80055ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f9cb 	bl	80068d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005546:	f001 fea5 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800554a:	f000 ff59 	bl	8006400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800554e:	f001 fe71 	bl	8007234 <vPortEnterCritical>
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005558:	b25b      	sxtb	r3, r3
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d103      	bne.n	8005568 <xQueueGenericSend+0x16c>
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800556e:	b25b      	sxtb	r3, r3
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d103      	bne.n	800557e <xQueueGenericSend+0x182>
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557e:	f001 fe89 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005582:	1d3a      	adds	r2, r7, #4
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f9ba 	bl	8006904 <xTaskCheckForTimeOut>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d124      	bne.n	80055e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005598:	f000 fcd2 	bl	8005f40 <prvIsQueueFull>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	3310      	adds	r3, #16
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f90e 	bl	80067cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b2:	f000 fc5d 	bl	8005e70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055b6:	f000 ff31 	bl	800641c <xTaskResumeAll>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f af7c 	bne.w	80054ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <xQueueGenericSend+0x1f8>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	e772      	b.n	80054ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d6:	f000 fc4b 	bl	8005e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055da:	f000 ff1f 	bl	800641c <xTaskResumeAll>
 80055de:	e76c      	b.n	80054ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e2:	f000 fc45 	bl	8005e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055e6:	f000 ff19 	bl	800641c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3738      	adds	r7, #56	; 0x38
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b090      	sub	sp, #64	; 0x40
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <xQueueGenericSendFromISR+0x3c>
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <xQueueGenericSendFromISR+0x40>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <xQueueGenericSendFromISR+0x42>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <xQueueGenericSendFromISR+0x6a>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <xQueueGenericSendFromISR+0x6e>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericSendFromISR+0x70>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	623b      	str	r3, [r7, #32]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005682:	f001 feb9 	bl	80073f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005686:	f3ef 8211 	mrs	r2, BASEPRI
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	61fa      	str	r2, [r7, #28]
 800569c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800569e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <xQueueGenericSendFromISR+0xbc>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d12f      	bne.n	8005714 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056ca:	f000 fb41 	bl	8005d50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d112      	bne.n	80056fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d016      	beq.n	800570e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	3324      	adds	r3, #36	; 0x24
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f895 	bl	8006814 <xTaskRemoveFromEventList>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00e      	beq.n	800570e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e007      	b.n	800570e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005702:	3301      	adds	r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	b25a      	sxtb	r2, r3
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800570e:	2301      	movs	r3, #1
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005712:	e001      	b.n	8005718 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005722:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005726:	4618      	mov	r0, r3
 8005728:	3740      	adds	r7, #64	; 0x40
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08e      	sub	sp, #56	; 0x38
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	623b      	str	r3, [r7, #32]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61fb      	str	r3, [r7, #28]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <xQueueGiveFromISR+0x58>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <xQueueGiveFromISR+0x5c>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGiveFromISR+0x5e>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	61bb      	str	r3, [r7, #24]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057a6:	f001 fe27 	bl	80073f8 <vPortValidateInterruptPriority>
	__asm volatile
 80057aa:	f3ef 8211 	mrs	r2, BASEPRI
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617a      	str	r2, [r7, #20]
 80057c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80057c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d22b      	bcs.n	800582e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d112      	bne.n	8005818 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f808 	bl	8006814 <xTaskRemoveFromEventList>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00e      	beq.n	8005828 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e007      	b.n	8005828 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800581c:	3301      	adds	r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	b25a      	sxtb	r2, r3
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005828:	2301      	movs	r3, #1
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	e001      	b.n	8005832 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f383 8811 	msr	BASEPRI, r3
}
 800583c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005840:	4618      	mov	r0, r3
 8005842:	3738      	adds	r7, #56	; 0x38
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08c      	sub	sp, #48	; 0x30
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <xQueueReceive+0x30>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	623b      	str	r3, [r7, #32]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <xQueueReceive+0x3e>
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <xQueueReceive+0x42>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueReceive+0x44>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xQueueReceive+0x5e>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fb      	str	r3, [r7, #28]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058a6:	f001 f975 	bl	8006b94 <xTaskGetSchedulerState>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <xQueueReceive+0x6e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <xQueueReceive+0x72>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueReceive+0x74>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueReceive+0x8e>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61bb      	str	r3, [r7, #24]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058d6:	f001 fcad 	bl	8007234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01f      	beq.n	8005926 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ea:	f000 fa9b 	bl	8005e24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00f      	beq.n	800591e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	3310      	adds	r3, #16
 8005902:	4618      	mov	r0, r3
 8005904:	f000 ff86 	bl	8006814 <xTaskRemoveFromEventList>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800590e:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <xQueueReceive+0x1bc>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800591e:	f001 fcb9 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 8005922:	2301      	movs	r3, #1
 8005924:	e069      	b.n	80059fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800592c:	f001 fcb2 	bl	8007294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005930:	2300      	movs	r3, #0
 8005932:	e062      	b.n	80059fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800593a:	f107 0310 	add.w	r3, r7, #16
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ffca 	bl	80068d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005948:	f001 fca4 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800594c:	f000 fd58 	bl	8006400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005950:	f001 fc70 	bl	8007234 <vPortEnterCritical>
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595a:	b25b      	sxtb	r3, r3
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d103      	bne.n	800596a <xQueueReceive+0x122>
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005970:	b25b      	sxtb	r3, r3
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d103      	bne.n	8005980 <xQueueReceive+0x138>
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005980:	f001 fc88 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005984:	1d3a      	adds	r2, r7, #4
 8005986:	f107 0310 	add.w	r3, r7, #16
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f000 ffb9 	bl	8006904 <xTaskCheckForTimeOut>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d123      	bne.n	80059e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599a:	f000 fabb 	bl	8005f14 <prvIsQueueEmpty>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	3324      	adds	r3, #36	; 0x24
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 ff0d 	bl	80067cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b4:	f000 fa5c 	bl	8005e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059b8:	f000 fd30 	bl	800641c <xTaskResumeAll>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d189      	bne.n	80058d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <xQueueReceive+0x1bc>)
 80059c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	e780      	b.n	80058d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d6:	f000 fa4b 	bl	8005e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059da:	f000 fd1f 	bl	800641c <xTaskResumeAll>
 80059de:	e77a      	b.n	80058d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e2:	f000 fa45 	bl	8005e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059e6:	f000 fd19 	bl	800641c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ec:	f000 fa92 	bl	8005f14 <prvIsQueueEmpty>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f43f af6f 	beq.w	80058d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3730      	adds	r7, #48	; 0x30
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08e      	sub	sp, #56	; 0x38
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61fb      	str	r3, [r7, #28]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a58:	f001 f89c 	bl	8006b94 <xTaskGetSchedulerState>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <xQueueSemaphoreTake+0x60>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <xQueueSemaphoreTake+0x64>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <xQueueSemaphoreTake+0x66>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	61bb      	str	r3, [r7, #24]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a88:	f001 fbd4 	bl	8007234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d024      	beq.n	8005ae2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005aa8:	f001 fa1c 	bl	8006ee4 <pvTaskIncrementMutexHeldCount>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00f      	beq.n	8005ada <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	3310      	adds	r3, #16
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fea8 	bl	8006814 <xTaskRemoveFromEventList>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005aca:	4b54      	ldr	r3, [pc, #336]	; (8005c1c <xQueueSemaphoreTake+0x214>)
 8005acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ada:	f001 fbdb 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e097      	b.n	8005c12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d111      	bne.n	8005b0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	617b      	str	r3, [r7, #20]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b04:	f001 fbc6 	bl	8007294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e082      	b.n	8005c12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b12:	f107 030c 	add.w	r3, r7, #12
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fede 	bl	80068d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b20:	f001 fbb8 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b24:	f000 fc6c 	bl	8006400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b28:	f001 fb84 	bl	8007234 <vPortEnterCritical>
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d103      	bne.n	8005b42 <xQueueSemaphoreTake+0x13a>
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d103      	bne.n	8005b58 <xQueueSemaphoreTake+0x150>
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b58:	f001 fb9c 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b5c:	463a      	mov	r2, r7
 8005b5e:	f107 030c 	add.w	r3, r7, #12
 8005b62:	4611      	mov	r1, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fecd 	bl	8006904 <xTaskCheckForTimeOut>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d132      	bne.n	8005bd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b72:	f000 f9cf 	bl	8005f14 <prvIsQueueEmpty>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d026      	beq.n	8005bca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005b84:	f001 fb56 	bl	8007234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 f81f 	bl	8006bd0 <xTaskPriorityInherit>
 8005b92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b94:	f001 fb7e 	bl	8007294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fe13 	bl	80067cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ba8:	f000 f962 	bl	8005e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bac:	f000 fc36 	bl	800641c <xTaskResumeAll>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f af68 	bne.w	8005a88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005bb8:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <xQueueSemaphoreTake+0x214>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	e75e      	b.n	8005a88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bcc:	f000 f950 	bl	8005e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bd0:	f000 fc24 	bl	800641c <xTaskResumeAll>
 8005bd4:	e758      	b.n	8005a88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bd8:	f000 f94a 	bl	8005e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bdc:	f000 fc1e 	bl	800641c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005be2:	f000 f997 	bl	8005f14 <prvIsQueueEmpty>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f43f af4d 	beq.w	8005a88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005bf4:	f001 fb1e 	bl	8007234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bfa:	f000 f891 	bl	8005d20 <prvGetDisinheritPriorityAfterTimeout>
 8005bfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 f8de 	bl	8006dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c0c:	f001 fb42 	bl	8007294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3738      	adds	r7, #56	; 0x38
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	; 0x38
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	623b      	str	r3, [r7, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueReceiveFromISR+0x3a>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueReceiveFromISR+0x3e>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueReceiveFromISR+0x40>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61fb      	str	r3, [r7, #28]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c7a:	f001 fbbd 	bl	80073f8 <vPortValidateInterruptPriority>
	__asm volatile
 8005c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	61ba      	str	r2, [r7, #24]
 8005c94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02f      	beq.n	8005d06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb4:	f000 f8b6 	bl	8005e24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d112      	bne.n	8005cf0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fd9c 	bl	8006814 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00e      	beq.n	8005d00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e007      	b.n	8005d00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	b25a      	sxtb	r2, r3
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d00:	2301      	movs	r3, #1
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
 8005d04:	e001      	b.n	8005d0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f383 8811 	msr	BASEPRI, r3
}
 8005d14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3738      	adds	r7, #56	; 0x38
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d006      	beq.n	8005d3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1c3 0307 	rsb	r3, r3, #7
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e001      	b.n	8005d42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d42:	68fb      	ldr	r3, [r7, #12]
	}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10d      	bne.n	8005d8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d14d      	bne.n	8005e12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 ff9e 	bl	8006cbc <xTaskPriorityDisinherit>
 8005d80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	e043      	b.n	8005e12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d119      	bne.n	8005dc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6858      	ldr	r0, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	f00e f8ef 	bl	8013f7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d32b      	bcc.n	8005e12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	e026      	b.n	8005e12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68d8      	ldr	r0, [r3, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	f00e f8d5 	bl	8013f7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	425b      	negs	r3, r3
 8005dde:	441a      	add	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d207      	bcs.n	8005e00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	425b      	negs	r3, r3
 8005dfa:	441a      	add	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d105      	bne.n	8005e12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e1a:	697b      	ldr	r3, [r7, #20]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d018      	beq.n	8005e68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	441a      	add	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d303      	bcc.n	8005e58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68d9      	ldr	r1, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	461a      	mov	r2, r3
 8005e62:	6838      	ldr	r0, [r7, #0]
 8005e64:	f00e f88b 	bl	8013f7e <memcpy>
	}
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e78:	f001 f9dc 	bl	8007234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e84:	e011      	b.n	8005eaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d012      	beq.n	8005eb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3324      	adds	r3, #36	; 0x24
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fcbe 	bl	8006814 <xTaskRemoveFromEventList>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e9e:	f000 fd93 	bl	80069c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dce9      	bgt.n	8005e86 <prvUnlockQueue+0x16>
 8005eb2:	e000      	b.n	8005eb6 <prvUnlockQueue+0x46>
					break;
 8005eb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	22ff      	movs	r2, #255	; 0xff
 8005eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ebe:	f001 f9e9 	bl	8007294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ec2:	f001 f9b7 	bl	8007234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ecc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ece:	e011      	b.n	8005ef4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d012      	beq.n	8005efe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3310      	adds	r3, #16
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fc99 	bl	8006814 <xTaskRemoveFromEventList>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ee8:	f000 fd6e 	bl	80069c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dce9      	bgt.n	8005ed0 <prvUnlockQueue+0x60>
 8005efc:	e000      	b.n	8005f00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005efe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f08:	f001 f9c4 	bl	8007294 <vPortExitCritical>
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f1c:	f001 f98a 	bl	8007234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e001      	b.n	8005f32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f32:	f001 f9af 	bl	8007294 <vPortExitCritical>

	return xReturn;
 8005f36:	68fb      	ldr	r3, [r7, #12]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f48:	f001 f974 	bl	8007234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d102      	bne.n	8005f5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e001      	b.n	8005f62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f62:	f001 f997 	bl	8007294 <vPortExitCritical>

	return xReturn;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	623b      	str	r3, [r7, #32]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	61fb      	str	r3, [r7, #28]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fb6:	23b4      	movs	r3, #180	; 0xb4
 8005fb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2bb4      	cmp	r3, #180	; 0xb4
 8005fbe:	d00a      	beq.n	8005fd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61bb      	str	r3, [r7, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01e      	beq.n	800601c <xTaskCreateStatic+0xac>
 8005fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9303      	str	r3, [sp, #12]
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	9302      	str	r3, [sp, #8]
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f850 	bl	80060b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006016:	f000 f8eb 	bl	80061f0 <prvAddNewTaskToReadyList>
 800601a:	e001      	b.n	8006020 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006020:	697b      	ldr	r3, [r7, #20]
	}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08c      	sub	sp, #48	; 0x30
 800602e:	af04      	add	r7, sp, #16
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fa1a 	bl	8007478 <pvPortMalloc>
 8006044:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800604c:	20b4      	movs	r0, #180	; 0xb4
 800604e:	f001 fa13 	bl	8007478 <pvPortMalloc>
 8006052:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
 8006060:	e005      	b.n	800606e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f001 fad4 	bl	8007610 <vPortFree>
 8006068:	e001      	b.n	800606e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d017      	beq.n	80060a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	2300      	movs	r3, #0
 8006080:	9303      	str	r3, [sp, #12]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f80e 	bl	80060b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006098:	69f8      	ldr	r0, [r7, #28]
 800609a:	f000 f8a9 	bl	80061f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800609e:	2301      	movs	r3, #1
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	e002      	b.n	80060aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060aa:	69bb      	ldr	r3, [r7, #24]
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060cc:	3b01      	subs	r3, #1
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f023 0307 	bic.w	r3, r3, #7
 80060da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <prvInitialiseNewTask+0x48>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	617b      	str	r3, [r7, #20]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01f      	beq.n	8006142 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	e012      	b.n	800612e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	7819      	ldrb	r1, [r3, #0]
 8006110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	3334      	adds	r3, #52	; 0x34
 8006118:	460a      	mov	r2, r1
 800611a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	2b0f      	cmp	r3, #15
 8006132:	d9e9      	bls.n	8006108 <prvInitialiseNewTask+0x54>
 8006134:	e000      	b.n	8006138 <prvInitialiseNewTask+0x84>
			{
				break;
 8006136:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006140:	e003      	b.n	800614a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b06      	cmp	r3, #6
 800614e:	d901      	bls.n	8006154 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006150:	2306      	movs	r3, #6
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	2200      	movs	r2, #0
 8006164:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe ff2c 	bl	8004fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	3318      	adds	r3, #24
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe ff27 	bl	8004fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	f1c3 0207 	rsb	r2, r3, #7
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	2200      	movs	r2, #0
 800619c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	334c      	adds	r3, #76	; 0x4c
 80061a4:	2260      	movs	r2, #96	; 0x60
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f00d fef6 	bl	8013f9a <memset>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <prvInitialiseNewTask+0x130>)
 80061b2:	651a      	str	r2, [r3, #80]	; 0x50
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <prvInitialiseNewTask+0x134>)
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <prvInitialiseNewTask+0x138>)
 80061be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	68f9      	ldr	r1, [r7, #12]
 80061c4:	69b8      	ldr	r0, [r7, #24]
 80061c6:	f000 ff07 	bl	8006fd8 <pxPortInitialiseStack>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061dc:	bf00      	nop
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	08017fbc 	.word	0x08017fbc
 80061e8:	08017fdc 	.word	0x08017fdc
 80061ec:	08017f9c 	.word	0x08017f9c

080061f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061f8:	f001 f81c 	bl	8007234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061fc:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <prvAddNewTaskToReadyList+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <prvAddNewTaskToReadyList+0xb8>)
 8006204:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006206:	4b29      	ldr	r3, [pc, #164]	; (80062ac <prvAddNewTaskToReadyList+0xbc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800620e:	4a27      	ldr	r2, [pc, #156]	; (80062ac <prvAddNewTaskToReadyList+0xbc>)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <prvAddNewTaskToReadyList+0xb8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d110      	bne.n	800623e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800621c:	f000 fbf8 	bl	8006a10 <prvInitialiseTaskLists>
 8006220:	e00d      	b.n	800623e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006222:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <prvAddNewTaskToReadyList+0xc0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <prvAddNewTaskToReadyList+0xbc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	429a      	cmp	r2, r3
 8006236:	d802      	bhi.n	800623e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006238:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <prvAddNewTaskToReadyList+0xbc>)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <prvAddNewTaskToReadyList+0xc4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a1b      	ldr	r2, [pc, #108]	; (80062b4 <prvAddNewTaskToReadyList+0xc4>)
 8006246:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	2201      	movs	r2, #1
 800624e:	409a      	lsls	r2, r3
 8006250:	4b19      	ldr	r3, [pc, #100]	; (80062b8 <prvAddNewTaskToReadyList+0xc8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4313      	orrs	r3, r2
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <prvAddNewTaskToReadyList+0xc8>)
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4a15      	ldr	r2, [pc, #84]	; (80062bc <prvAddNewTaskToReadyList+0xcc>)
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fe feb6 	bl	8004fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006276:	f001 f80d 	bl	8007294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800627a:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <prvAddNewTaskToReadyList+0xc0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00e      	beq.n	80062a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvAddNewTaskToReadyList+0xbc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	429a      	cmp	r2, r3
 800628e:	d207      	bcs.n	80062a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <prvAddNewTaskToReadyList+0xd0>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20005120 	.word	0x20005120
 80062ac:	20005020 	.word	0x20005020
 80062b0:	2000512c 	.word	0x2000512c
 80062b4:	2000513c 	.word	0x2000513c
 80062b8:	20005128 	.word	0x20005128
 80062bc:	20005024 	.word	0x20005024
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d017      	beq.n	8006306 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062d6:	4b13      	ldr	r3, [pc, #76]	; (8006324 <vTaskDelay+0x60>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <vTaskDelay+0x30>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	60bb      	str	r3, [r7, #8]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062f4:	f000 f884 	bl	8006400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062f8:	2100      	movs	r1, #0
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fe06 	bl	8006f0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006300:	f000 f88c 	bl	800641c <xTaskResumeAll>
 8006304:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d107      	bne.n	800631c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <vTaskDelay+0x64>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20005148 	.word	0x20005148
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800633a:	463a      	mov	r2, r7
 800633c:	1d39      	adds	r1, r7, #4
 800633e:	f107 0308 	add.w	r3, r7, #8
 8006342:	4618      	mov	r0, r3
 8006344:	f7fa f926 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	9202      	str	r2, [sp, #8]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	2300      	movs	r3, #0
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	460a      	mov	r2, r1
 800635a:	4921      	ldr	r1, [pc, #132]	; (80063e0 <vTaskStartScheduler+0xb4>)
 800635c:	4821      	ldr	r0, [pc, #132]	; (80063e4 <vTaskStartScheduler+0xb8>)
 800635e:	f7ff fe07 	bl	8005f70 <xTaskCreateStatic>
 8006362:	4603      	mov	r3, r0
 8006364:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <vTaskStartScheduler+0xbc>)
 8006366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006368:	4b1f      	ldr	r3, [pc, #124]	; (80063e8 <vTaskStartScheduler+0xbc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006370:	2301      	movs	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e001      	b.n	800637a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d11b      	bne.n	80063b8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	613b      	str	r3, [r7, #16]
}
 8006392:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006394:	4b15      	ldr	r3, [pc, #84]	; (80063ec <vTaskStartScheduler+0xc0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	334c      	adds	r3, #76	; 0x4c
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <vTaskStartScheduler+0xc4>)
 800639c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <vTaskStartScheduler+0xc8>)
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <vTaskStartScheduler+0xcc>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063ac:	4b13      	ldr	r3, [pc, #76]	; (80063fc <vTaskStartScheduler+0xd0>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063b2:	f000 fe9d 	bl	80070f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063b6:	e00e      	b.n	80063d6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063be:	d10a      	bne.n	80063d6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <vTaskStartScheduler+0xa8>
}
 80063d6:	bf00      	nop
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	08015008 	.word	0x08015008
 80063e4:	080069e1 	.word	0x080069e1
 80063e8:	20005144 	.word	0x20005144
 80063ec:	20005020 	.word	0x20005020
 80063f0:	20000034 	.word	0x20000034
 80063f4:	20005140 	.word	0x20005140
 80063f8:	2000512c 	.word	0x2000512c
 80063fc:	20005124 	.word	0x20005124

08006400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <vTaskSuspendAll+0x18>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a03      	ldr	r2, [pc, #12]	; (8006418 <vTaskSuspendAll+0x18>)
 800640c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	20005148 	.word	0x20005148

0800641c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800642a:	4b41      	ldr	r3, [pc, #260]	; (8006530 <xTaskResumeAll+0x114>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <xTaskResumeAll+0x2c>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	603b      	str	r3, [r7, #0]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006448:	f000 fef4 	bl	8007234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800644c:	4b38      	ldr	r3, [pc, #224]	; (8006530 <xTaskResumeAll+0x114>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3b01      	subs	r3, #1
 8006452:	4a37      	ldr	r2, [pc, #220]	; (8006530 <xTaskResumeAll+0x114>)
 8006454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006456:	4b36      	ldr	r3, [pc, #216]	; (8006530 <xTaskResumeAll+0x114>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d161      	bne.n	8006522 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800645e:	4b35      	ldr	r3, [pc, #212]	; (8006534 <xTaskResumeAll+0x118>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d05d      	beq.n	8006522 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006466:	e02e      	b.n	80064c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006468:	4b33      	ldr	r3, [pc, #204]	; (8006538 <xTaskResumeAll+0x11c>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3318      	adds	r3, #24
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe fe11 	bl	800509c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fe0c 	bl	800509c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	4b2b      	ldr	r3, [pc, #172]	; (800653c <xTaskResumeAll+0x120>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4313      	orrs	r3, r2
 8006492:	4a2a      	ldr	r2, [pc, #168]	; (800653c <xTaskResumeAll+0x120>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4a27      	ldr	r2, [pc, #156]	; (8006540 <xTaskResumeAll+0x124>)
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f7fe fd98 	bl	8004fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	4b23      	ldr	r3, [pc, #140]	; (8006544 <xTaskResumeAll+0x128>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80064c0:	4b21      	ldr	r3, [pc, #132]	; (8006548 <xTaskResumeAll+0x12c>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064c6:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <xTaskResumeAll+0x11c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1cc      	bne.n	8006468 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064d4:	f000 fb3e 	bl	8006b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064d8:	4b1c      	ldr	r3, [pc, #112]	; (800654c <xTaskResumeAll+0x130>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d010      	beq.n	8006506 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064e4:	f000 f858 	bl	8006598 <xTaskIncrementTick>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <xTaskResumeAll+0x12c>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1f1      	bne.n	80064e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006500:	4b12      	ldr	r3, [pc, #72]	; (800654c <xTaskResumeAll+0x130>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <xTaskResumeAll+0x12c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <xTaskResumeAll+0x134>)
 8006514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006522:	f000 feb7 	bl	8007294 <vPortExitCritical>

	return xAlreadyYielded;
 8006526:	68bb      	ldr	r3, [r7, #8]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20005148 	.word	0x20005148
 8006534:	20005120 	.word	0x20005120
 8006538:	200050e0 	.word	0x200050e0
 800653c:	20005128 	.word	0x20005128
 8006540:	20005024 	.word	0x20005024
 8006544:	20005020 	.word	0x20005020
 8006548:	20005134 	.word	0x20005134
 800654c:	20005130 	.word	0x20005130
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <xTaskGetTickCount+0x1c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006560:	687b      	ldr	r3, [r7, #4]
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20005124 	.word	0x20005124

08006574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800657a:	f000 ff3d 	bl	80073f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800657e:	2300      	movs	r3, #0
 8006580:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006582:	4b04      	ldr	r3, [pc, #16]	; (8006594 <xTaskGetTickCountFromISR+0x20>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006588:	683b      	ldr	r3, [r7, #0]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20005124 	.word	0x20005124

08006598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a2:	4b4e      	ldr	r3, [pc, #312]	; (80066dc <xTaskIncrementTick+0x144>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 808e 	bne.w	80066c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065ac:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <xTaskIncrementTick+0x148>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065b4:	4a4a      	ldr	r2, [pc, #296]	; (80066e0 <xTaskIncrementTick+0x148>)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d120      	bne.n	8006602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065c0:	4b48      	ldr	r3, [pc, #288]	; (80066e4 <xTaskIncrementTick+0x14c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	603b      	str	r3, [r7, #0]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <xTaskIncrementTick+0x46>
 80065e0:	4b40      	ldr	r3, [pc, #256]	; (80066e4 <xTaskIncrementTick+0x14c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	4b40      	ldr	r3, [pc, #256]	; (80066e8 <xTaskIncrementTick+0x150>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a3e      	ldr	r2, [pc, #248]	; (80066e4 <xTaskIncrementTick+0x14c>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4a3e      	ldr	r2, [pc, #248]	; (80066e8 <xTaskIncrementTick+0x150>)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b3d      	ldr	r3, [pc, #244]	; (80066ec <xTaskIncrementTick+0x154>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	4a3c      	ldr	r2, [pc, #240]	; (80066ec <xTaskIncrementTick+0x154>)
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	f000 faa9 	bl	8006b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006602:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <xTaskIncrementTick+0x158>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	429a      	cmp	r2, r3
 800660a:	d348      	bcc.n	800669e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800660c:	4b35      	ldr	r3, [pc, #212]	; (80066e4 <xTaskIncrementTick+0x14c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006616:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <xTaskIncrementTick+0x158>)
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	601a      	str	r2, [r3, #0]
					break;
 800661e:	e03e      	b.n	800669e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006620:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <xTaskIncrementTick+0x14c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d203      	bcs.n	8006640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006638:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <xTaskIncrementTick+0x158>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800663e:	e02e      	b.n	800669e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fd29 	bl	800509c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	2b00      	cmp	r3, #0
 8006650:	d004      	beq.n	800665c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3318      	adds	r3, #24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fd20 	bl	800509c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	2201      	movs	r2, #1
 8006662:	409a      	lsls	r2, r3
 8006664:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <xTaskIncrementTick+0x15c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4313      	orrs	r3, r2
 800666a:	4a22      	ldr	r2, [pc, #136]	; (80066f4 <xTaskIncrementTick+0x15c>)
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <xTaskIncrementTick+0x160>)
 800667c:	441a      	add	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe fcac 	bl	8004fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <xTaskIncrementTick+0x164>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	429a      	cmp	r2, r3
 8006696:	d3b9      	bcc.n	800660c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669c:	e7b6      	b.n	800660c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800669e:	4b17      	ldr	r3, [pc, #92]	; (80066fc <xTaskIncrementTick+0x164>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4914      	ldr	r1, [pc, #80]	; (80066f8 <xTaskIncrementTick+0x160>)
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d901      	bls.n	80066ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <xTaskIncrementTick+0x168>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e004      	b.n	80066d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066c8:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <xTaskIncrementTick+0x16c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <xTaskIncrementTick+0x16c>)
 80066d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066d2:	697b      	ldr	r3, [r7, #20]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20005148 	.word	0x20005148
 80066e0:	20005124 	.word	0x20005124
 80066e4:	200050d8 	.word	0x200050d8
 80066e8:	200050dc 	.word	0x200050dc
 80066ec:	20005138 	.word	0x20005138
 80066f0:	20005140 	.word	0x20005140
 80066f4:	20005128 	.word	0x20005128
 80066f8:	20005024 	.word	0x20005024
 80066fc:	20005020 	.word	0x20005020
 8006700:	20005134 	.word	0x20005134
 8006704:	20005130 	.word	0x20005130

08006708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <vTaskSwitchContext+0xac>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006716:	4b28      	ldr	r3, [pc, #160]	; (80067b8 <vTaskSwitchContext+0xb0>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800671c:	e044      	b.n	80067a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <vTaskSwitchContext+0xb0>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <vTaskSwitchContext+0xb4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	fab3 f383 	clz	r3, r3
 8006730:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	f1c3 031f 	rsb	r3, r3, #31
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	4921      	ldr	r1, [pc, #132]	; (80067c0 <vTaskSwitchContext+0xb8>)
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <vTaskSwitchContext+0x5c>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	607b      	str	r3, [r7, #4]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <vTaskSwitchContext+0x5a>
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4a14      	ldr	r2, [pc, #80]	; (80067c0 <vTaskSwitchContext+0xb8>)
 8006770:	4413      	add	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3308      	adds	r3, #8
 8006786:	429a      	cmp	r2, r3
 8006788:	d104      	bne.n	8006794 <vTaskSwitchContext+0x8c>
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	605a      	str	r2, [r3, #4]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <vTaskSwitchContext+0xbc>)
 800679c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <vTaskSwitchContext+0xbc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	334c      	adds	r3, #76	; 0x4c
 80067a4:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <vTaskSwitchContext+0xc0>)
 80067a6:	6013      	str	r3, [r2, #0]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	20005148 	.word	0x20005148
 80067b8:	20005134 	.word	0x20005134
 80067bc:	20005128 	.word	0x20005128
 80067c0:	20005024 	.word	0x20005024
 80067c4:	20005020 	.word	0x20005020
 80067c8:	20000034 	.word	0x20000034

080067cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60fb      	str	r3, [r7, #12]
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <vTaskPlaceOnEventList+0x44>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3318      	adds	r3, #24
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fe fc15 	bl	800502a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006800:	2101      	movs	r1, #1
 8006802:	6838      	ldr	r0, [r7, #0]
 8006804:	f000 fb82 	bl	8006f0c <prvAddCurrentTaskToDelayedList>
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20005020 	.word	0x20005020

08006814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	60fb      	str	r3, [r7, #12]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fc29 	bl	800509c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684a:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <xTaskRemoveFromEventList+0xac>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d11c      	bne.n	800688c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fc20 	bl	800509c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	2201      	movs	r2, #1
 8006862:	409a      	lsls	r2, r3
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <xTaskRemoveFromEventList+0xb0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4313      	orrs	r3, r2
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <xTaskRemoveFromEventList+0xb0>)
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <xTaskRemoveFromEventList+0xb4>)
 800687c:	441a      	add	r2, r3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7fe fbac 	bl	8004fe2 <vListInsertEnd>
 800688a:	e005      	b.n	8006898 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3318      	adds	r3, #24
 8006890:	4619      	mov	r1, r3
 8006892:	480e      	ldr	r0, [pc, #56]	; (80068cc <xTaskRemoveFromEventList+0xb8>)
 8006894:	f7fe fba5 	bl	8004fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <xTaskRemoveFromEventList+0xbc>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d905      	bls.n	80068b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <xTaskRemoveFromEventList+0xc0>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e001      	b.n	80068b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068b6:	697b      	ldr	r3, [r7, #20]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20005148 	.word	0x20005148
 80068c4:	20005128 	.word	0x20005128
 80068c8:	20005024 	.word	0x20005024
 80068cc:	200050e0 	.word	0x200050e0
 80068d0:	20005020 	.word	0x20005020
 80068d4:	20005134 	.word	0x20005134

080068d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <vTaskInternalSetTimeOutState+0x24>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <vTaskInternalSetTimeOutState+0x28>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	605a      	str	r2, [r3, #4]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20005138 	.word	0x20005138
 8006900:	20005124 	.word	0x20005124

08006904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	613b      	str	r3, [r7, #16]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006946:	f000 fc75 	bl	8007234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <xTaskCheckForTimeOut+0xbc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d102      	bne.n	800696a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	e023      	b.n	80069b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <xTaskCheckForTimeOut+0xc0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d007      	beq.n	8006986 <xTaskCheckForTimeOut+0x82>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	429a      	cmp	r2, r3
 800697e:	d302      	bcc.n	8006986 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	e015      	b.n	80069b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	429a      	cmp	r2, r3
 800698e:	d20b      	bcs.n	80069a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff9b 	bl	80068d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	e004      	b.n	80069b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069b2:	f000 fc6f 	bl	8007294 <vPortExitCritical>

	return xReturn;
 80069b6:	69fb      	ldr	r3, [r7, #28]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20005124 	.word	0x20005124
 80069c4:	20005138 	.word	0x20005138

080069c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069cc:	4b03      	ldr	r3, [pc, #12]	; (80069dc <vTaskMissedYield+0x14>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20005134 	.word	0x20005134

080069e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069e8:	f000 f852 	bl	8006a90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <prvIdleTask+0x28>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d9f9      	bls.n	80069e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <prvIdleTask+0x2c>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a04:	e7f0      	b.n	80069e8 <prvIdleTask+0x8>
 8006a06:	bf00      	nop
 8006a08:	20005024 	.word	0x20005024
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	e00c      	b.n	8006a36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <prvInitialiseTaskLists+0x60>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe faac 	bl	8004f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3301      	adds	r3, #1
 8006a34:	607b      	str	r3, [r7, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b06      	cmp	r3, #6
 8006a3a:	d9ef      	bls.n	8006a1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a3c:	480d      	ldr	r0, [pc, #52]	; (8006a74 <prvInitialiseTaskLists+0x64>)
 8006a3e:	f7fe faa3 	bl	8004f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a42:	480d      	ldr	r0, [pc, #52]	; (8006a78 <prvInitialiseTaskLists+0x68>)
 8006a44:	f7fe faa0 	bl	8004f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a48:	480c      	ldr	r0, [pc, #48]	; (8006a7c <prvInitialiseTaskLists+0x6c>)
 8006a4a:	f7fe fa9d 	bl	8004f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a4e:	480c      	ldr	r0, [pc, #48]	; (8006a80 <prvInitialiseTaskLists+0x70>)
 8006a50:	f7fe fa9a 	bl	8004f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a54:	480b      	ldr	r0, [pc, #44]	; (8006a84 <prvInitialiseTaskLists+0x74>)
 8006a56:	f7fe fa97 	bl	8004f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <prvInitialiseTaskLists+0x78>)
 8006a5c:	4a05      	ldr	r2, [pc, #20]	; (8006a74 <prvInitialiseTaskLists+0x64>)
 8006a5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <prvInitialiseTaskLists+0x7c>)
 8006a62:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <prvInitialiseTaskLists+0x68>)
 8006a64:	601a      	str	r2, [r3, #0]
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20005024 	.word	0x20005024
 8006a74:	200050b0 	.word	0x200050b0
 8006a78:	200050c4 	.word	0x200050c4
 8006a7c:	200050e0 	.word	0x200050e0
 8006a80:	200050f4 	.word	0x200050f4
 8006a84:	2000510c 	.word	0x2000510c
 8006a88:	200050d8 	.word	0x200050d8
 8006a8c:	200050dc 	.word	0x200050dc

08006a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a96:	e019      	b.n	8006acc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a98:	f000 fbcc 	bl	8007234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <prvCheckTasksWaitingTermination+0x50>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe faf7 	bl	800509c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <prvCheckTasksWaitingTermination+0x54>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	4a0b      	ldr	r2, [pc, #44]	; (8006ae4 <prvCheckTasksWaitingTermination+0x54>)
 8006ab6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <prvCheckTasksWaitingTermination+0x58>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <prvCheckTasksWaitingTermination+0x58>)
 8006ac0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ac2:	f000 fbe7 	bl	8007294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f810 	bl	8006aec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <prvCheckTasksWaitingTermination+0x58>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e1      	bne.n	8006a98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	200050f4 	.word	0x200050f4
 8006ae4:	20005120 	.word	0x20005120
 8006ae8:	20005108 	.word	0x20005108

08006aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	334c      	adds	r3, #76	; 0x4c
 8006af8:	4618      	mov	r0, r3
 8006afa:	f00d fb4f 	bl	801419c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d108      	bne.n	8006b1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fd7f 	bl	8007610 <vPortFree>
				vPortFree( pxTCB );
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fd7c 	bl	8007610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b18:	e018      	b.n	8006b4c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d103      	bne.n	8006b2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fd73 	bl	8007610 <vPortFree>
	}
 8006b2a:	e00f      	b.n	8006b4c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d00a      	beq.n	8006b4c <prvDeleteTCB+0x60>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60fb      	str	r3, [r7, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <prvDeleteTCB+0x5e>
	}
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <prvResetNextTaskUnblockTime+0x38>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <prvResetNextTaskUnblockTime+0x3c>)
 8006b66:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b6c:	e008      	b.n	8006b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6e:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <prvResetNextTaskUnblockTime+0x38>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <prvResetNextTaskUnblockTime+0x3c>)
 8006b7e:	6013      	str	r3, [r2, #0]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	200050d8 	.word	0x200050d8
 8006b90:	20005140 	.word	0x20005140

08006b94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <xTaskGetSchedulerState+0x34>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	e008      	b.n	8006bba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <xTaskGetSchedulerState+0x38>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	e001      	b.n	8006bba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bba:	687b      	ldr	r3, [r7, #4]
	}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	2000512c 	.word	0x2000512c
 8006bcc:	20005148 	.word	0x20005148

08006bd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d05e      	beq.n	8006ca4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	4b31      	ldr	r3, [pc, #196]	; (8006cb0 <xTaskPriorityInherit+0xe0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d24e      	bcs.n	8006c92 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	db06      	blt.n	8006c0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfc:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <xTaskPriorityInherit+0xe0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	f1c3 0207 	rsb	r2, r3, #7
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6959      	ldr	r1, [r3, #20]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a26      	ldr	r2, [pc, #152]	; (8006cb4 <xTaskPriorityInherit+0xe4>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	d12f      	bne.n	8006c82 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3304      	adds	r3, #4
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fa38 	bl	800509c <uxListRemove>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	2201      	movs	r2, #1
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	43da      	mvns	r2, r3
 8006c3e:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <xTaskPriorityInherit+0xe8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4013      	ands	r3, r2
 8006c44:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <xTaskPriorityInherit+0xe8>)
 8006c46:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c48:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <xTaskPriorityInherit+0xe0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	2201      	movs	r2, #1
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <xTaskPriorityInherit+0xe8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <xTaskPriorityInherit+0xe8>)
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4a10      	ldr	r2, [pc, #64]	; (8006cb4 <xTaskPriorityInherit+0xe4>)
 8006c72:	441a      	add	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f7fe f9b1 	bl	8004fe2 <vListInsertEnd>
 8006c80:	e004      	b.n	8006c8c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <xTaskPriorityInherit+0xe0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e008      	b.n	8006ca4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c96:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <xTaskPriorityInherit+0xe0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d201      	bcs.n	8006ca4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20005020 	.word	0x20005020
 8006cb4:	20005024 	.word	0x20005024
 8006cb8:	20005128 	.word	0x20005128

08006cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d06e      	beq.n	8006db0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cd2:	4b3a      	ldr	r3, [pc, #232]	; (8006dbc <xTaskPriorityDisinherit+0x100>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d00a      	beq.n	8006cf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60fb      	str	r3, [r7, #12]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	60bb      	str	r3, [r7, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d14:	1e5a      	subs	r2, r3, #1
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d044      	beq.n	8006db0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d140      	bne.n	8006db0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe f9b2 	bl	800509c <uxListRemove>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d115      	bne.n	8006d6a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	491f      	ldr	r1, [pc, #124]	; (8006dc0 <xTaskPriorityDisinherit+0x104>)
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xTaskPriorityDisinherit+0xae>
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	2201      	movs	r2, #1
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	43da      	mvns	r2, r3
 8006d60:	4b18      	ldr	r3, [pc, #96]	; (8006dc4 <xTaskPriorityDisinherit+0x108>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4013      	ands	r3, r2
 8006d66:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <xTaskPriorityDisinherit+0x108>)
 8006d68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	f1c3 0207 	rsb	r2, r3, #7
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	2201      	movs	r2, #1
 8006d84:	409a      	lsls	r2, r3
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <xTaskPriorityDisinherit+0x108>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	4a0d      	ldr	r2, [pc, #52]	; (8006dc4 <xTaskPriorityDisinherit+0x108>)
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <xTaskPriorityDisinherit+0x104>)
 8006d9e:	441a      	add	r2, r3
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7fe f91b 	bl	8004fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006db0:	697b      	ldr	r3, [r7, #20]
	}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20005020 	.word	0x20005020
 8006dc0:	20005024 	.word	0x20005024
 8006dc4:	20005128 	.word	0x20005128

08006dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d077      	beq.n	8006ed0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d902      	bls.n	8006e0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	61fb      	str	r3, [r7, #28]
 8006e0c:	e002      	b.n	8006e14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d058      	beq.n	8006ed0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d153      	bne.n	8006ed0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e28:	4b2b      	ldr	r3, [pc, #172]	; (8006ed8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d10a      	bne.n	8006e48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db04      	blt.n	8006e66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f1c3 0207 	rsb	r2, r3, #7
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	6959      	ldr	r1, [r3, #20]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4a19      	ldr	r2, [pc, #100]	; (8006edc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006e76:	4413      	add	r3, r2
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d129      	bne.n	8006ed0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe f90b 	bl	800509c <uxListRemove>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	2201      	movs	r2, #1
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43da      	mvns	r2, r3
 8006e98:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	4a10      	ldr	r2, [pc, #64]	; (8006ee0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ea0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	; (8006ee0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a06      	ldr	r2, [pc, #24]	; (8006edc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006ec2:	441a      	add	r2, r3
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe f889 	bl	8004fe2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ed0:	bf00      	nop
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20005020 	.word	0x20005020
 8006edc:	20005024 	.word	0x20005024
 8006ee0:	20005128 	.word	0x20005128

08006ee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ee8:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ef6:	3201      	adds	r2, #1
 8006ef8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006efa:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8006efc:	681b      	ldr	r3, [r3, #0]
	}
 8006efe:	4618      	mov	r0, r3
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	20005020 	.word	0x20005020

08006f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f16:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f1c:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f8ba 	bl	800509c <uxListRemove>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10b      	bne.n	8006f46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	2201      	movs	r2, #1
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	43da      	mvns	r2, r3
 8006f3c:	4b21      	ldr	r3, [pc, #132]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4013      	ands	r3, r2
 8006f42:	4a20      	ldr	r2, [pc, #128]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d10a      	bne.n	8006f64 <prvAddCurrentTaskToDelayedList+0x58>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f54:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	481a      	ldr	r0, [pc, #104]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f5e:	f7fe f840 	bl	8004fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f62:	e026      	b.n	8006fb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4413      	add	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d209      	bcs.n	8006f90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7c:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7fe f84e 	bl	800502a <vListInsert>
}
 8006f8e:	e010      	b.n	8006fb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7fe f844 	bl	800502a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d202      	bcs.n	8006fb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fac:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6013      	str	r3, [r2, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20005124 	.word	0x20005124
 8006fc0:	20005020 	.word	0x20005020
 8006fc4:	20005128 	.word	0x20005128
 8006fc8:	2000510c 	.word	0x2000510c
 8006fcc:	200050dc 	.word	0x200050dc
 8006fd0:	200050d8 	.word	0x200050d8
 8006fd4:	20005140 	.word	0x20005140

08006fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3b04      	subs	r3, #4
 8006fe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3b04      	subs	r3, #4
 8007006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007008:	4a0c      	ldr	r2, [pc, #48]	; (800703c <pxPortInitialiseStack+0x64>)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3b14      	subs	r3, #20
 8007012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3b04      	subs	r3, #4
 800701e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f06f 0202 	mvn.w	r2, #2
 8007026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3b20      	subs	r3, #32
 800702c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800702e:	68fb      	ldr	r3, [r7, #12]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	08007041 	.word	0x08007041

08007040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <prvTaskExitError+0x54>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d00a      	beq.n	800706a <prvTaskExitError+0x2a>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	60fb      	str	r3, [r7, #12]
}
 8007066:	bf00      	nop
 8007068:	e7fe      	b.n	8007068 <prvTaskExitError+0x28>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60bb      	str	r3, [r7, #8]
}
 800707c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800707e:	bf00      	nop
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0fc      	beq.n	8007080 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	20000020 	.word	0x20000020
	...

080070a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <pxCurrentTCBConst2>)
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6808      	ldr	r0, [r1, #0]
 80070a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	f380 8809 	msr	PSP, r0
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	4770      	bx	lr
 80070bc:	f3af 8000 	nop.w

080070c0 <pxCurrentTCBConst2>:
 80070c0:	20005020 	.word	0x20005020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070c8:	4808      	ldr	r0, [pc, #32]	; (80070ec <prvPortStartFirstTask+0x24>)
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	6800      	ldr	r0, [r0, #0]
 80070ce:	f380 8808 	msr	MSP, r0
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8814 	msr	CONTROL, r0
 80070da:	b662      	cpsie	i
 80070dc:	b661      	cpsie	f
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	df00      	svc	0
 80070e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ea:	bf00      	nop
 80070ec:	e000ed08 	.word	0xe000ed08

080070f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070f6:	4b46      	ldr	r3, [pc, #280]	; (8007210 <xPortStartScheduler+0x120>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a46      	ldr	r2, [pc, #280]	; (8007214 <xPortStartScheduler+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10a      	bne.n	8007116 <xPortStartScheduler+0x26>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007116:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <xPortStartScheduler+0x120>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <xPortStartScheduler+0x128>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10a      	bne.n	8007136 <xPortStartScheduler+0x46>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007136:	4b39      	ldr	r3, [pc, #228]	; (800721c <xPortStartScheduler+0x12c>)
 8007138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007158:	b2da      	uxtb	r2, r3
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <xPortStartScheduler+0x130>)
 800715c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800715e:	4b31      	ldr	r3, [pc, #196]	; (8007224 <xPortStartScheduler+0x134>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007164:	e009      	b.n	800717a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007166:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <xPortStartScheduler+0x134>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <xPortStartScheduler+0x134>)
 800716e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b80      	cmp	r3, #128	; 0x80
 8007184:	d0ef      	beq.n	8007166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <xPortStartScheduler+0x134>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f1c3 0307 	rsb	r3, r3, #7
 800718e:	2b04      	cmp	r3, #4
 8007190:	d00a      	beq.n	80071a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <xPortStartScheduler+0x134>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <xPortStartScheduler+0x134>)
 80071b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <xPortStartScheduler+0x134>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ba:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <xPortStartScheduler+0x134>)
 80071bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071c6:	4b18      	ldr	r3, [pc, #96]	; (8007228 <xPortStartScheduler+0x138>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <xPortStartScheduler+0x138>)
 80071cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <xPortStartScheduler+0x138>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a14      	ldr	r2, [pc, #80]	; (8007228 <xPortStartScheduler+0x138>)
 80071d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071de:	f000 f8dd 	bl	800739c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <xPortStartScheduler+0x13c>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071e8:	f000 f8fc 	bl	80073e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <xPortStartScheduler+0x140>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <xPortStartScheduler+0x140>)
 80071f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071f8:	f7ff ff66 	bl	80070c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071fc:	f7ff fa84 	bl	8006708 <vTaskSwitchContext>
	prvTaskExitError();
 8007200:	f7ff ff1e 	bl	8007040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	e000ed00 	.word	0xe000ed00
 8007214:	410fc271 	.word	0x410fc271
 8007218:	410fc270 	.word	0x410fc270
 800721c:	e000e400 	.word	0xe000e400
 8007220:	2000514c 	.word	0x2000514c
 8007224:	20005150 	.word	0x20005150
 8007228:	e000ed20 	.word	0xe000ed20
 800722c:	20000020 	.word	0x20000020
 8007230:	e000ef34 	.word	0xe000ef34

08007234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	607b      	str	r3, [r7, #4]
}
 800724c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <vPortEnterCritical+0x58>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3301      	adds	r3, #1
 8007254:	4a0d      	ldr	r2, [pc, #52]	; (800728c <vPortEnterCritical+0x58>)
 8007256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <vPortEnterCritical+0x58>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d10f      	bne.n	8007280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <vPortEnterCritical+0x5c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <vPortEnterCritical+0x4c>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	603b      	str	r3, [r7, #0]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vPortEnterCritical+0x4a>
	}
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	20000020 	.word	0x20000020
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <vPortExitCritical+0x50>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <vPortExitCritical+0x24>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	607b      	str	r3, [r7, #4]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <vPortExitCritical+0x50>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <vPortExitCritical+0x50>)
 80072c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <vPortExitCritical+0x50>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <vPortExitCritical+0x42>
 80072ca:	2300      	movs	r3, #0
 80072cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f383 8811 	msr	BASEPRI, r3
}
 80072d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20000020 	.word	0x20000020
	...

080072f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072f0:	f3ef 8009 	mrs	r0, PSP
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <pxCurrentTCBConst>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	f01e 0f10 	tst.w	lr, #16
 8007300:	bf08      	it	eq
 8007302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	6010      	str	r0, [r2, #0]
 800730c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007314:	f380 8811 	msr	BASEPRI, r0
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f7ff f9f2 	bl	8006708 <vTaskSwitchContext>
 8007324:	f04f 0000 	mov.w	r0, #0
 8007328:	f380 8811 	msr	BASEPRI, r0
 800732c:	bc09      	pop	{r0, r3}
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007336:	f01e 0f10 	tst.w	lr, #16
 800733a:	bf08      	it	eq
 800733c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007340:	f380 8809 	msr	PSP, r0
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	20005020 	.word	0x20005020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	607b      	str	r3, [r7, #4]
}
 8007370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007372:	f7ff f911 	bl	8006598 <xTaskIncrementTick>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <SysTick_Handler+0x40>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8811 	msr	BASEPRI, r3
}
 800738e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <vPortSetupTimerInterrupt+0x38>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <vPortSetupTimerInterrupt+0x3c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <vPortSetupTimerInterrupt+0x40>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <vPortSetupTimerInterrupt+0x44>)
 80073ba:	3b01      	subs	r3, #1
 80073bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073be:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073c0:	2207      	movs	r2, #7
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	20000000 	.word	0x20000000
 80073dc:	10624dd3 	.word	0x10624dd3
 80073e0:	e000e014 	.word	0xe000e014

080073e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073f4 <vPortEnableVFP+0x10>
 80073e8:	6801      	ldr	r1, [r0, #0]
 80073ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ee:	6001      	str	r1, [r0, #0]
 80073f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073f2:	bf00      	nop
 80073f4:	e000ed88 	.word	0xe000ed88

080073f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073fe:	f3ef 8305 	mrs	r3, IPSR
 8007402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d914      	bls.n	8007434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800740a:	4a17      	ldr	r2, [pc, #92]	; (8007468 <vPortValidateInterruptPriority+0x70>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007414:	4b15      	ldr	r3, [pc, #84]	; (800746c <vPortValidateInterruptPriority+0x74>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	7afa      	ldrb	r2, [r7, #11]
 800741a:	429a      	cmp	r2, r3
 800741c:	d20a      	bcs.n	8007434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <vPortValidateInterruptPriority+0x78>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <vPortValidateInterruptPriority+0x7c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d90a      	bls.n	800745a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	603b      	str	r3, [r7, #0]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <vPortValidateInterruptPriority+0x60>
	}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	e000e3f0 	.word	0xe000e3f0
 800746c:	2000514c 	.word	0x2000514c
 8007470:	e000ed0c 	.word	0xe000ed0c
 8007474:	20005150 	.word	0x20005150

08007478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007484:	f7fe ffbc 	bl	8006400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007488:	4b5b      	ldr	r3, [pc, #364]	; (80075f8 <pvPortMalloc+0x180>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007490:	f000 f920 	bl	80076d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007494:	4b59      	ldr	r3, [pc, #356]	; (80075fc <pvPortMalloc+0x184>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 8093 	bne.w	80075c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d01d      	beq.n	80074e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074a8:	2208      	movs	r2, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d014      	beq.n	80074e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	3308      	adds	r3, #8
 80074c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <pvPortMalloc+0x6c>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	617b      	str	r3, [r7, #20]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d06e      	beq.n	80075c8 <pvPortMalloc+0x150>
 80074ea:	4b45      	ldr	r3, [pc, #276]	; (8007600 <pvPortMalloc+0x188>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d869      	bhi.n	80075c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074f4:	4b43      	ldr	r3, [pc, #268]	; (8007604 <pvPortMalloc+0x18c>)
 80074f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074f8:	4b42      	ldr	r3, [pc, #264]	; (8007604 <pvPortMalloc+0x18c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074fe:	e004      	b.n	800750a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d903      	bls.n	800751c <pvPortMalloc+0xa4>
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f1      	bne.n	8007500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800751c:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <pvPortMalloc+0x180>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007522:	429a      	cmp	r2, r3
 8007524:	d050      	beq.n	80075c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2208      	movs	r2, #8
 800752c:	4413      	add	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	2308      	movs	r3, #8
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	429a      	cmp	r2, r3
 8007546:	d91f      	bls.n	8007588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <pvPortMalloc+0xf8>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	613b      	str	r3, [r7, #16]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007582:	69b8      	ldr	r0, [r7, #24]
 8007584:	f000 f908 	bl	8007798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <pvPortMalloc+0x188>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <pvPortMalloc+0x188>)
 8007594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007596:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <pvPortMalloc+0x188>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <pvPortMalloc+0x190>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d203      	bcs.n	80075aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075a2:	4b17      	ldr	r3, [pc, #92]	; (8007600 <pvPortMalloc+0x188>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <pvPortMalloc+0x190>)
 80075a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <pvPortMalloc+0x184>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <pvPortMalloc+0x194>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a11      	ldr	r2, [pc, #68]	; (800760c <pvPortMalloc+0x194>)
 80075c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075c8:	f7fe ff28 	bl	800641c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <pvPortMalloc+0x174>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	e7fe      	b.n	80075ea <pvPortMalloc+0x172>
	return pvReturn;
 80075ec:	69fb      	ldr	r3, [r7, #28]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	2000d15c 	.word	0x2000d15c
 80075fc:	2000d170 	.word	0x2000d170
 8007600:	2000d160 	.word	0x2000d160
 8007604:	2000d154 	.word	0x2000d154
 8007608:	2000d164 	.word	0x2000d164
 800760c:	2000d168 	.word	0x2000d168

08007610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04d      	beq.n	80076be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007622:	2308      	movs	r3, #8
 8007624:	425b      	negs	r3, r3
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <vPortFree+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4013      	ands	r3, r2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <vPortFree+0x44>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <vPortFree+0x62>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60bb      	str	r3, [r7, #8]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <vPortFree+0xb8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01e      	beq.n	80076be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <vPortFree+0xb8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	43db      	mvns	r3, r3
 8007692:	401a      	ands	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007698:	f7fe feb2 	bl	8006400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <vPortFree+0xbc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <vPortFree+0xbc>)
 80076a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076aa:	6938      	ldr	r0, [r7, #16]
 80076ac:	f000 f874 	bl	8007798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <vPortFree+0xc0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	4a06      	ldr	r2, [pc, #24]	; (80076d0 <vPortFree+0xc0>)
 80076b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076ba:	f7fe feaf 	bl	800641c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	2000d170 	.word	0x2000d170
 80076cc:	2000d160 	.word	0x2000d160
 80076d0:	2000d16c 	.word	0x2000d16c

080076d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <prvHeapInit+0xac>)
 80076e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0307 	bic.w	r3, r3, #7
 80076fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <prvHeapInit+0xac>)
 8007704:	4413      	add	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <prvHeapInit+0xb0>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <prvHeapInit+0xb0>)
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007720:	2208      	movs	r2, #8
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <prvHeapInit+0xb4>)
 8007734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <prvHeapInit+0xb4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <prvHeapInit+0xb4>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvHeapInit+0xb4>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a0a      	ldr	r2, [pc, #40]	; (800778c <prvHeapInit+0xb8>)
 8007762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	4a09      	ldr	r2, [pc, #36]	; (8007790 <prvHeapInit+0xbc>)
 800776a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <prvHeapInit+0xc0>)
 800776e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20005154 	.word	0x20005154
 8007784:	2000d154 	.word	0x2000d154
 8007788:	2000d15c 	.word	0x2000d15c
 800778c:	2000d164 	.word	0x2000d164
 8007790:	2000d160 	.word	0x2000d160
 8007794:	2000d170 	.word	0x2000d170

08007798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077a0:	4b28      	ldr	r3, [pc, #160]	; (8007844 <prvInsertBlockIntoFreeList+0xac>)
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e002      	b.n	80077ac <prvInsertBlockIntoFreeList+0x14>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d8f7      	bhi.n	80077a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d108      	bne.n	80077da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	441a      	add	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d118      	bne.n	8007820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <prvInsertBlockIntoFreeList+0xb0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d00d      	beq.n	8007816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e008      	b.n	8007828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007816:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <prvInsertBlockIntoFreeList+0xb0>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e003      	b.n	8007828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d002      	beq.n	8007836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	2000d154 	.word	0x2000d154
 8007848:	2000d15c 	.word	0x2000d15c

0800784c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007856:	f007 fae1 	bl	800ee1c <sys_timeouts_sleeptime>
 800785a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d10b      	bne.n	800787c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007864:	4813      	ldr	r0, [pc, #76]	; (80078b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007866:	f00c fa0c 	bl	8013c82 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800786a:	2200      	movs	r2, #0
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f00c f97e 	bl	8013b70 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007876:	f00c f9f5 	bl	8013c64 <sys_mutex_lock>
    return;
 800787a:	e018      	b.n	80078ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007882:	f007 fa91 	bl	800eda8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007886:	e7e6      	b.n	8007856 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007888:	480a      	ldr	r0, [pc, #40]	; (80078b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800788a:	f00c f9fa 	bl	8013c82 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f00c f96c 	bl	8013b70 <sys_arch_mbox_fetch>
 8007898:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800789a:	4806      	ldr	r0, [pc, #24]	; (80078b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800789c:	f00c f9e2 	bl	8013c64 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d102      	bne.n	80078ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80078a8:	f007 fa7e 	bl	800eda8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80078ac:	e7d3      	b.n	8007856 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	2000d180 	.word	0x2000d180

080078b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80078c0:	4810      	ldr	r0, [pc, #64]	; (8007904 <tcpip_thread+0x4c>)
 80078c2:	f00c f9cf 	bl	8013c64 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <tcpip_thread+0x50>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <tcpip_thread+0x50>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a0e      	ldr	r2, [pc, #56]	; (800790c <tcpip_thread+0x54>)
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	4610      	mov	r0, r2
 80078d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	4619      	mov	r1, r3
 80078e0:	480b      	ldr	r0, [pc, #44]	; (8007910 <tcpip_thread+0x58>)
 80078e2:	f7ff ffb3 	bl	800784c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d106      	bne.n	80078fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80078ec:	4b09      	ldr	r3, [pc, #36]	; (8007914 <tcpip_thread+0x5c>)
 80078ee:	2291      	movs	r2, #145	; 0x91
 80078f0:	4909      	ldr	r1, [pc, #36]	; (8007918 <tcpip_thread+0x60>)
 80078f2:	480a      	ldr	r0, [pc, #40]	; (800791c <tcpip_thread+0x64>)
 80078f4:	f00c fbee 	bl	80140d4 <iprintf>
      continue;
 80078f8:	e003      	b.n	8007902 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f80f 	bl	8007920 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007902:	e7ea      	b.n	80078da <tcpip_thread+0x22>
 8007904:	2000d180 	.word	0x2000d180
 8007908:	2000d174 	.word	0x2000d174
 800790c:	2000d178 	.word	0x2000d178
 8007910:	2000d17c 	.word	0x2000d17c
 8007914:	08015010 	.word	0x08015010
 8007918:	08015040 	.word	0x08015040
 800791c:	08015060 	.word	0x08015060

08007920 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d026      	beq.n	800797e <tcpip_thread_handle_msg+0x5e>
 8007930:	2b02      	cmp	r3, #2
 8007932:	dc2b      	bgt.n	800798c <tcpip_thread_handle_msg+0x6c>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <tcpip_thread_handle_msg+0x1e>
 8007938:	2b01      	cmp	r3, #1
 800793a:	d015      	beq.n	8007968 <tcpip_thread_handle_msg+0x48>
 800793c:	e026      	b.n	800798c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6850      	ldr	r0, [r2, #4]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6892      	ldr	r2, [r2, #8]
 800794a:	4611      	mov	r1, r2
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fd17 	bl	800938c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	2009      	movs	r0, #9
 8007962:	f000 fe63 	bl	800862c <memp_free>
      break;
 8007966:	e018      	b.n	800799a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6892      	ldr	r2, [r2, #8]
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	2008      	movs	r0, #8
 8007978:	f000 fe58 	bl	800862c <memp_free>
      break;
 800797c:	e00d      	b.n	800799a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6892      	ldr	r2, [r2, #8]
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
      break;
 800798a:	e006      	b.n	800799a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <tcpip_thread_handle_msg+0x84>)
 800798e:	22cf      	movs	r2, #207	; 0xcf
 8007990:	4905      	ldr	r1, [pc, #20]	; (80079a8 <tcpip_thread_handle_msg+0x88>)
 8007992:	4806      	ldr	r0, [pc, #24]	; (80079ac <tcpip_thread_handle_msg+0x8c>)
 8007994:	f00c fb9e 	bl	80140d4 <iprintf>
      break;
 8007998:	bf00      	nop
  }
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	08015010 	.word	0x08015010
 80079a8:	08015040 	.word	0x08015040
 80079ac:	08015060 	.word	0x08015060

080079b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80079bc:	481a      	ldr	r0, [pc, #104]	; (8007a28 <tcpip_inpkt+0x78>)
 80079be:	f00c f916 	bl	8013bee <sys_mbox_valid>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <tcpip_inpkt+0x24>
 80079c8:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <tcpip_inpkt+0x7c>)
 80079ca:	22fc      	movs	r2, #252	; 0xfc
 80079cc:	4918      	ldr	r1, [pc, #96]	; (8007a30 <tcpip_inpkt+0x80>)
 80079ce:	4819      	ldr	r0, [pc, #100]	; (8007a34 <tcpip_inpkt+0x84>)
 80079d0:	f00c fb80 	bl	80140d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80079d4:	2009      	movs	r0, #9
 80079d6:	f000 fdb3 	bl	8008540 <memp_malloc>
 80079da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295
 80079e6:	e01a      	b.n	8007a1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007a00:	6979      	ldr	r1, [r7, #20]
 8007a02:	4809      	ldr	r0, [pc, #36]	; (8007a28 <tcpip_inpkt+0x78>)
 8007a04:	f00c f89a 	bl	8013b3c <sys_mbox_trypost>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d006      	beq.n	8007a1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007a0e:	6979      	ldr	r1, [r7, #20]
 8007a10:	2009      	movs	r0, #9
 8007a12:	f000 fe0b 	bl	800862c <memp_free>
    return ERR_MEM;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	e000      	b.n	8007a1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007a1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	2000d17c 	.word	0x2000d17c
 8007a2c:	08015010 	.word	0x08015010
 8007a30:	08015088 	.word	0x08015088
 8007a34:	08015060 	.word	0x08015060

08007a38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a48:	f003 0318 	and.w	r3, r3, #24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007a50:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <tcpip_input+0x3c>)
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ffab 	bl	80079b0 <tcpip_inpkt>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	e005      	b.n	8007a6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007a5e:	4a06      	ldr	r2, [pc, #24]	; (8007a78 <tcpip_input+0x40>)
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff ffa4 	bl	80079b0 <tcpip_inpkt>
 8007a68:	4603      	mov	r3, r0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	0801394d 	.word	0x0801394d
 8007a78:	08012819 	.word	0x08012819

08007a7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007a86:	4819      	ldr	r0, [pc, #100]	; (8007aec <tcpip_try_callback+0x70>)
 8007a88:	f00c f8b1 	bl	8013bee <sys_mbox_valid>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <tcpip_try_callback+0x24>
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <tcpip_try_callback+0x74>)
 8007a94:	f240 125d 	movw	r2, #349	; 0x15d
 8007a98:	4916      	ldr	r1, [pc, #88]	; (8007af4 <tcpip_try_callback+0x78>)
 8007a9a:	4817      	ldr	r0, [pc, #92]	; (8007af8 <tcpip_try_callback+0x7c>)
 8007a9c:	f00c fb1a 	bl	80140d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007aa0:	2008      	movs	r0, #8
 8007aa2:	f000 fd4d 	bl	8008540 <memp_malloc>
 8007aa6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8007aae:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab2:	e017      	b.n	8007ae4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	4808      	ldr	r0, [pc, #32]	; (8007aec <tcpip_try_callback+0x70>)
 8007aca:	f00c f837 	bl	8013b3c <sys_mbox_trypost>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007ad4:	68f9      	ldr	r1, [r7, #12]
 8007ad6:	2008      	movs	r0, #8
 8007ad8:	f000 fda8 	bl	800862c <memp_free>
    return ERR_MEM;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	e000      	b.n	8007ae4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	2000d17c 	.word	0x2000d17c
 8007af0:	08015010 	.word	0x08015010
 8007af4:	08015088 	.word	0x08015088
 8007af8:	08015060 	.word	0x08015060

08007afc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007b06:	f000 f871 	bl	8007bec <lwip_init>

  tcpip_init_done = initfunc;
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <tcpip_init+0x6c>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007b10:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <tcpip_init+0x70>)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007b16:	2106      	movs	r1, #6
 8007b18:	4815      	ldr	r0, [pc, #84]	; (8007b70 <tcpip_init+0x74>)
 8007b1a:	f00b ffed 	bl	8013af8 <sys_mbox_new>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <tcpip_init+0x78>)
 8007b26:	f240 2261 	movw	r2, #609	; 0x261
 8007b2a:	4913      	ldr	r1, [pc, #76]	; (8007b78 <tcpip_init+0x7c>)
 8007b2c:	4813      	ldr	r0, [pc, #76]	; (8007b7c <tcpip_init+0x80>)
 8007b2e:	f00c fad1 	bl	80140d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007b32:	4813      	ldr	r0, [pc, #76]	; (8007b80 <tcpip_init+0x84>)
 8007b34:	f00c f87a 	bl	8013c2c <sys_mutex_new>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d006      	beq.n	8007b4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <tcpip_init+0x78>)
 8007b40:	f240 2265 	movw	r2, #613	; 0x265
 8007b44:	490f      	ldr	r1, [pc, #60]	; (8007b84 <tcpip_init+0x88>)
 8007b46:	480d      	ldr	r0, [pc, #52]	; (8007b7c <tcpip_init+0x80>)
 8007b48:	f00c fac4 	bl	80140d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b54:	2200      	movs	r2, #0
 8007b56:	490c      	ldr	r1, [pc, #48]	; (8007b88 <tcpip_init+0x8c>)
 8007b58:	480c      	ldr	r0, [pc, #48]	; (8007b8c <tcpip_init+0x90>)
 8007b5a:	f00c f89f 	bl	8013c9c <sys_thread_new>
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	2000d174 	.word	0x2000d174
 8007b6c:	2000d178 	.word	0x2000d178
 8007b70:	2000d17c 	.word	0x2000d17c
 8007b74:	08015010 	.word	0x08015010
 8007b78:	08015098 	.word	0x08015098
 8007b7c:	08015060 	.word	0x08015060
 8007b80:	2000d180 	.word	0x2000d180
 8007b84:	080150bc 	.word	0x080150bc
 8007b88:	080078b9 	.word	0x080078b9
 8007b8c:	080150e0 	.word	0x080150e0

08007b90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	b21a      	sxth	r2, r3
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	b21b      	sxth	r3, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b21b      	sxth	r3, r3
 8007bac:	b29b      	uxth	r3, r3
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	061a      	lsls	r2, r3, #24
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0e1b      	lsrs	r3, r3, #24
 8007bde:	4313      	orrs	r3, r2
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007bf6:	f00c f80b 	bl	8013c10 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007bfa:	f000 f8d5 	bl	8007da8 <mem_init>
  memp_init();
 8007bfe:	f000 fc31 	bl	8008464 <memp_init>
  pbuf_init();
  netif_init();
 8007c02:	f000 fd3d 	bl	8008680 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007c06:	f007 f941 	bl	800ee8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007c0a:	f001 fe69 	bl	80098e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007c0e:	f007 f883 	bl	800ed18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007c26:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <ptr_to_mem+0x20>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	4413      	add	r3, r2
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	2000d7f0 	.word	0x2000d7f0

08007c40 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <mem_to_ptr+0x20>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	b29b      	uxth	r3, r3
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	2000d7f0 	.word	0x2000d7f0

08007c64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007c6c:	4b45      	ldr	r3, [pc, #276]	; (8007d84 <plug_holes+0x120>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d206      	bcs.n	8007c84 <plug_holes+0x20>
 8007c76:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <plug_holes+0x124>)
 8007c78:	f240 12df 	movw	r2, #479	; 0x1df
 8007c7c:	4943      	ldr	r1, [pc, #268]	; (8007d8c <plug_holes+0x128>)
 8007c7e:	4844      	ldr	r0, [pc, #272]	; (8007d90 <plug_holes+0x12c>)
 8007c80:	f00c fa28 	bl	80140d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007c84:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <plug_holes+0x130>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d306      	bcc.n	8007c9c <plug_holes+0x38>
 8007c8e:	4b3e      	ldr	r3, [pc, #248]	; (8007d88 <plug_holes+0x124>)
 8007c90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c94:	4940      	ldr	r1, [pc, #256]	; (8007d98 <plug_holes+0x134>)
 8007c96:	483e      	ldr	r0, [pc, #248]	; (8007d90 <plug_holes+0x12c>)
 8007c98:	f00c fa1c 	bl	80140d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d006      	beq.n	8007cb2 <plug_holes+0x4e>
 8007ca4:	4b38      	ldr	r3, [pc, #224]	; (8007d88 <plug_holes+0x124>)
 8007ca6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007caa:	493c      	ldr	r1, [pc, #240]	; (8007d9c <plug_holes+0x138>)
 8007cac:	4838      	ldr	r0, [pc, #224]	; (8007d90 <plug_holes+0x12c>)
 8007cae:	f00c fa11 	bl	80140d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007cba:	d906      	bls.n	8007cca <plug_holes+0x66>
 8007cbc:	4b32      	ldr	r3, [pc, #200]	; (8007d88 <plug_holes+0x124>)
 8007cbe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007cc2:	4937      	ldr	r1, [pc, #220]	; (8007da0 <plug_holes+0x13c>)
 8007cc4:	4832      	ldr	r0, [pc, #200]	; (8007d90 <plug_holes+0x12c>)
 8007cc6:	f00c fa05 	bl	80140d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff ffa4 	bl	8007c1c <ptr_to_mem>
 8007cd4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d024      	beq.n	8007d28 <plug_holes+0xc4>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	791b      	ldrb	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d120      	bne.n	8007d28 <plug_holes+0xc4>
 8007ce6:	4b2b      	ldr	r3, [pc, #172]	; (8007d94 <plug_holes+0x130>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d01b      	beq.n	8007d28 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007cf0:	4b2c      	ldr	r3, [pc, #176]	; (8007da4 <plug_holes+0x140>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d102      	bne.n	8007d00 <plug_holes+0x9c>
      lfree = mem;
 8007cfa:	4a2a      	ldr	r2, [pc, #168]	; (8007da4 <plug_holes+0x140>)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	881a      	ldrh	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d10:	d00a      	beq.n	8007d28 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff ff80 	bl	8007c1c <ptr_to_mem>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff8e 	bl	8007c40 <mem_to_ptr>
 8007d24:	4603      	mov	r3, r0
 8007d26:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	885b      	ldrh	r3, [r3, #2]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff ff75 	bl	8007c1c <ptr_to_mem>
 8007d32:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d01f      	beq.n	8007d7c <plug_holes+0x118>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	791b      	ldrb	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d11b      	bne.n	8007d7c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007d44:	4b17      	ldr	r3, [pc, #92]	; (8007da4 <plug_holes+0x140>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d102      	bne.n	8007d54 <plug_holes+0xf0>
      lfree = pmem;
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <plug_holes+0x140>)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d64:	d00a      	beq.n	8007d7c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff ff56 	bl	8007c1c <ptr_to_mem>
 8007d70:	4604      	mov	r4, r0
 8007d72:	68b8      	ldr	r0, [r7, #8]
 8007d74:	f7ff ff64 	bl	8007c40 <mem_to_ptr>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd90      	pop	{r4, r7, pc}
 8007d84:	2000d7f0 	.word	0x2000d7f0
 8007d88:	080150f0 	.word	0x080150f0
 8007d8c:	08015120 	.word	0x08015120
 8007d90:	08015138 	.word	0x08015138
 8007d94:	2000d7f4 	.word	0x2000d7f4
 8007d98:	08015160 	.word	0x08015160
 8007d9c:	0801517c 	.word	0x0801517c
 8007da0:	08015198 	.word	0x08015198
 8007da4:	2000d7fc 	.word	0x2000d7fc

08007da8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007dae:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <mem_init+0x84>)
 8007db0:	3303      	adds	r3, #3
 8007db2:	f023 0303 	bic.w	r3, r3, #3
 8007db6:	461a      	mov	r2, r3
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <mem_init+0x88>)
 8007dba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007dbc:	4b1c      	ldr	r3, [pc, #112]	; (8007e30 <mem_init+0x88>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007dc8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007dd6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007dda:	f7ff ff1f 	bl	8007c1c <ptr_to_mem>
 8007dde:	4603      	mov	r3, r0
 8007de0:	4a14      	ldr	r2, [pc, #80]	; (8007e34 <mem_init+0x8c>)
 8007de2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007de4:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <mem_init+0x8c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2201      	movs	r2, #1
 8007dea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <mem_init+0x8c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007df4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <mem_init+0x8c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007dfe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <mem_init+0x88>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a0c      	ldr	r2, [pc, #48]	; (8007e38 <mem_init+0x90>)
 8007e06:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007e08:	480c      	ldr	r0, [pc, #48]	; (8007e3c <mem_init+0x94>)
 8007e0a:	f00b ff0f 	bl	8013c2c <sys_mutex_new>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007e14:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <mem_init+0x98>)
 8007e16:	f240 221f 	movw	r2, #543	; 0x21f
 8007e1a:	490a      	ldr	r1, [pc, #40]	; (8007e44 <mem_init+0x9c>)
 8007e1c:	480a      	ldr	r0, [pc, #40]	; (8007e48 <mem_init+0xa0>)
 8007e1e:	f00c f959 	bl	80140d4 <iprintf>
  }
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2000d19c 	.word	0x2000d19c
 8007e30:	2000d7f0 	.word	0x2000d7f0
 8007e34:	2000d7f4 	.word	0x2000d7f4
 8007e38:	2000d7fc 	.word	0x2000d7fc
 8007e3c:	2000d7f8 	.word	0x2000d7f8
 8007e40:	080150f0 	.word	0x080150f0
 8007e44:	080151c4 	.word	0x080151c4
 8007e48:	08015138 	.word	0x08015138

08007e4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff fef3 	bl	8007c40 <mem_to_ptr>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff feda 	bl	8007c1c <ptr_to_mem>
 8007e68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fed4 	bl	8007c1c <ptr_to_mem>
 8007e74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e7e:	d818      	bhi.n	8007eb2 <mem_link_valid+0x66>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	885b      	ldrh	r3, [r3, #2]
 8007e84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e88:	d813      	bhi.n	8007eb2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007e8e:	8afa      	ldrh	r2, [r7, #22]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d004      	beq.n	8007e9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	8afa      	ldrh	r2, [r7, #22]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d109      	bne.n	8007eb2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007e9e:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <mem_link_valid+0x74>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d006      	beq.n	8007eb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	885b      	ldrh	r3, [r3, #2]
 8007eac:	8afa      	ldrh	r2, [r7, #22]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d001      	beq.n	8007eb6 <mem_link_valid+0x6a>
    return 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e000      	b.n	8007eb8 <mem_link_valid+0x6c>
  }
  return 1;
 8007eb6:	2301      	movs	r3, #1
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	2000d7f4 	.word	0x2000d7f4

08007ec4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d070      	beq.n	8007fb4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00d      	beq.n	8007ef8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007edc:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <mem_free+0xf8>)
 8007ede:	f240 2273 	movw	r2, #627	; 0x273
 8007ee2:	4937      	ldr	r1, [pc, #220]	; (8007fc0 <mem_free+0xfc>)
 8007ee4:	4837      	ldr	r0, [pc, #220]	; (8007fc4 <mem_free+0x100>)
 8007ee6:	f00c f8f5 	bl	80140d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007eea:	f00b fefd 	bl	8013ce8 <sys_arch_protect>
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f00b ff07 	bl	8013d04 <sys_arch_unprotect>
    return;
 8007ef6:	e05e      	b.n	8007fb6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3b08      	subs	r3, #8
 8007efc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007efe:	4b32      	ldr	r3, [pc, #200]	; (8007fc8 <mem_free+0x104>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d306      	bcc.n	8007f16 <mem_free+0x52>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f103 020c 	add.w	r2, r3, #12
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <mem_free+0x108>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d90d      	bls.n	8007f32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007f16:	4b29      	ldr	r3, [pc, #164]	; (8007fbc <mem_free+0xf8>)
 8007f18:	f240 227f 	movw	r2, #639	; 0x27f
 8007f1c:	492c      	ldr	r1, [pc, #176]	; (8007fd0 <mem_free+0x10c>)
 8007f1e:	4829      	ldr	r0, [pc, #164]	; (8007fc4 <mem_free+0x100>)
 8007f20:	f00c f8d8 	bl	80140d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007f24:	f00b fee0 	bl	8013ce8 <sys_arch_protect>
 8007f28:	6138      	str	r0, [r7, #16]
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f00b feea 	bl	8013d04 <sys_arch_unprotect>
    return;
 8007f30:	e041      	b.n	8007fb6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007f32:	4828      	ldr	r0, [pc, #160]	; (8007fd4 <mem_free+0x110>)
 8007f34:	f00b fe96 	bl	8013c64 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	791b      	ldrb	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d110      	bne.n	8007f62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007f40:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <mem_free+0xf8>)
 8007f42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007f46:	4924      	ldr	r1, [pc, #144]	; (8007fd8 <mem_free+0x114>)
 8007f48:	481e      	ldr	r0, [pc, #120]	; (8007fc4 <mem_free+0x100>)
 8007f4a:	f00c f8c3 	bl	80140d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007f4e:	4821      	ldr	r0, [pc, #132]	; (8007fd4 <mem_free+0x110>)
 8007f50:	f00b fe97 	bl	8013c82 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007f54:	f00b fec8 	bl	8013ce8 <sys_arch_protect>
 8007f58:	6178      	str	r0, [r7, #20]
 8007f5a:	6978      	ldr	r0, [r7, #20]
 8007f5c:	f00b fed2 	bl	8013d04 <sys_arch_unprotect>
    return;
 8007f60:	e029      	b.n	8007fb6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007f62:	69f8      	ldr	r0, [r7, #28]
 8007f64:	f7ff ff72 	bl	8007e4c <mem_link_valid>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <mem_free+0xf8>)
 8007f70:	f240 2295 	movw	r2, #661	; 0x295
 8007f74:	4919      	ldr	r1, [pc, #100]	; (8007fdc <mem_free+0x118>)
 8007f76:	4813      	ldr	r0, [pc, #76]	; (8007fc4 <mem_free+0x100>)
 8007f78:	f00c f8ac 	bl	80140d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007f7c:	4815      	ldr	r0, [pc, #84]	; (8007fd4 <mem_free+0x110>)
 8007f7e:	f00b fe80 	bl	8013c82 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007f82:	f00b feb1 	bl	8013ce8 <sys_arch_protect>
 8007f86:	61b8      	str	r0, [r7, #24]
 8007f88:	69b8      	ldr	r0, [r7, #24]
 8007f8a:	f00b febb 	bl	8013d04 <sys_arch_unprotect>
    return;
 8007f8e:	e012      	b.n	8007fb6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2200      	movs	r2, #0
 8007f94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <mem_free+0x11c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d202      	bcs.n	8007fa6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007fa0:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <mem_free+0x11c>)
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007fa6:	69f8      	ldr	r0, [r7, #28]
 8007fa8:	f7ff fe5c 	bl	8007c64 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007fac:	4809      	ldr	r0, [pc, #36]	; (8007fd4 <mem_free+0x110>)
 8007fae:	f00b fe68 	bl	8013c82 <sys_mutex_unlock>
 8007fb2:	e000      	b.n	8007fb6 <mem_free+0xf2>
    return;
 8007fb4:	bf00      	nop
}
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	080150f0 	.word	0x080150f0
 8007fc0:	080151e0 	.word	0x080151e0
 8007fc4:	08015138 	.word	0x08015138
 8007fc8:	2000d7f0 	.word	0x2000d7f0
 8007fcc:	2000d7f4 	.word	0x2000d7f4
 8007fd0:	08015204 	.word	0x08015204
 8007fd4:	2000d7f8 	.word	0x2000d7f8
 8007fd8:	08015220 	.word	0x08015220
 8007fdc:	08015248 	.word	0x08015248
 8007fe0:	2000d7fc 	.word	0x2000d7fc

08007fe4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007ff0:	887b      	ldrh	r3, [r7, #2]
 8007ff2:	3303      	adds	r3, #3
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007ffc:	8bfb      	ldrh	r3, [r7, #30]
 8007ffe:	2b0b      	cmp	r3, #11
 8008000:	d801      	bhi.n	8008006 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008002:	230c      	movs	r3, #12
 8008004:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008006:	8bfb      	ldrh	r3, [r7, #30]
 8008008:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800800c:	d803      	bhi.n	8008016 <mem_trim+0x32>
 800800e:	8bfa      	ldrh	r2, [r7, #30]
 8008010:	887b      	ldrh	r3, [r7, #2]
 8008012:	429a      	cmp	r2, r3
 8008014:	d201      	bcs.n	800801a <mem_trim+0x36>
    return NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	e0d8      	b.n	80081cc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800801a:	4b6e      	ldr	r3, [pc, #440]	; (80081d4 <mem_trim+0x1f0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d304      	bcc.n	800802e <mem_trim+0x4a>
 8008024:	4b6c      	ldr	r3, [pc, #432]	; (80081d8 <mem_trim+0x1f4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d306      	bcc.n	800803c <mem_trim+0x58>
 800802e:	4b6b      	ldr	r3, [pc, #428]	; (80081dc <mem_trim+0x1f8>)
 8008030:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008034:	496a      	ldr	r1, [pc, #424]	; (80081e0 <mem_trim+0x1fc>)
 8008036:	486b      	ldr	r0, [pc, #428]	; (80081e4 <mem_trim+0x200>)
 8008038:	f00c f84c 	bl	80140d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800803c:	4b65      	ldr	r3, [pc, #404]	; (80081d4 <mem_trim+0x1f0>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d304      	bcc.n	8008050 <mem_trim+0x6c>
 8008046:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <mem_trim+0x1f4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d307      	bcc.n	8008060 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008050:	f00b fe4a 	bl	8013ce8 <sys_arch_protect>
 8008054:	60b8      	str	r0, [r7, #8]
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	f00b fe54 	bl	8013d04 <sys_arch_unprotect>
    return rmem;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	e0b5      	b.n	80081cc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3b08      	subs	r3, #8
 8008064:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008066:	69b8      	ldr	r0, [r7, #24]
 8008068:	f7ff fdea 	bl	8007c40 <mem_to_ptr>
 800806c:	4603      	mov	r3, r0
 800806e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	881a      	ldrh	r2, [r3, #0]
 8008074:	8afb      	ldrh	r3, [r7, #22]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b08      	subs	r3, #8
 800807c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800807e:	8bfa      	ldrh	r2, [r7, #30]
 8008080:	8abb      	ldrh	r3, [r7, #20]
 8008082:	429a      	cmp	r2, r3
 8008084:	d906      	bls.n	8008094 <mem_trim+0xb0>
 8008086:	4b55      	ldr	r3, [pc, #340]	; (80081dc <mem_trim+0x1f8>)
 8008088:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800808c:	4956      	ldr	r1, [pc, #344]	; (80081e8 <mem_trim+0x204>)
 800808e:	4855      	ldr	r0, [pc, #340]	; (80081e4 <mem_trim+0x200>)
 8008090:	f00c f820 	bl	80140d4 <iprintf>
  if (newsize > size) {
 8008094:	8bfa      	ldrh	r2, [r7, #30]
 8008096:	8abb      	ldrh	r3, [r7, #20]
 8008098:	429a      	cmp	r2, r3
 800809a:	d901      	bls.n	80080a0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	e095      	b.n	80081cc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80080a0:	8bfa      	ldrh	r2, [r7, #30]
 80080a2:	8abb      	ldrh	r3, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d101      	bne.n	80080ac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	e08f      	b.n	80081cc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80080ac:	484f      	ldr	r0, [pc, #316]	; (80081ec <mem_trim+0x208>)
 80080ae:	f00b fdd9 	bl	8013c64 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fdb0 	bl	8007c1c <ptr_to_mem>
 80080bc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d13f      	bne.n	8008146 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080ce:	d106      	bne.n	80080de <mem_trim+0xfa>
 80080d0:	4b42      	ldr	r3, [pc, #264]	; (80081dc <mem_trim+0x1f8>)
 80080d2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80080d6:	4946      	ldr	r1, [pc, #280]	; (80081f0 <mem_trim+0x20c>)
 80080d8:	4842      	ldr	r0, [pc, #264]	; (80081e4 <mem_trim+0x200>)
 80080da:	f00b fffb 	bl	80140d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80080e4:	8afa      	ldrh	r2, [r7, #22]
 80080e6:	8bfb      	ldrh	r3, [r7, #30]
 80080e8:	4413      	add	r3, r2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3308      	adds	r3, #8
 80080ee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80080f0:	4b40      	ldr	r3, [pc, #256]	; (80081f4 <mem_trim+0x210>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d106      	bne.n	8008108 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80080fa:	89fb      	ldrh	r3, [r7, #14]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fd8d 	bl	8007c1c <ptr_to_mem>
 8008102:	4603      	mov	r3, r0
 8008104:	4a3b      	ldr	r2, [pc, #236]	; (80081f4 <mem_trim+0x210>)
 8008106:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008108:	89fb      	ldrh	r3, [r7, #14]
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff fd86 	bl	8007c1c <ptr_to_mem>
 8008110:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2200      	movs	r2, #0
 8008116:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	89ba      	ldrh	r2, [r7, #12]
 800811c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	8afa      	ldrh	r2, [r7, #22]
 8008122:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	89fa      	ldrh	r2, [r7, #14]
 8008128:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008132:	d047      	beq.n	80081c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fd6f 	bl	8007c1c <ptr_to_mem>
 800813e:	4602      	mov	r2, r0
 8008140:	89fb      	ldrh	r3, [r7, #14]
 8008142:	8053      	strh	r3, [r2, #2]
 8008144:	e03e      	b.n	80081c4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008146:	8bfb      	ldrh	r3, [r7, #30]
 8008148:	f103 0214 	add.w	r2, r3, #20
 800814c:	8abb      	ldrh	r3, [r7, #20]
 800814e:	429a      	cmp	r2, r3
 8008150:	d838      	bhi.n	80081c4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008152:	8afa      	ldrh	r2, [r7, #22]
 8008154:	8bfb      	ldrh	r3, [r7, #30]
 8008156:	4413      	add	r3, r2
 8008158:	b29b      	uxth	r3, r3
 800815a:	3308      	adds	r3, #8
 800815c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008166:	d106      	bne.n	8008176 <mem_trim+0x192>
 8008168:	4b1c      	ldr	r3, [pc, #112]	; (80081dc <mem_trim+0x1f8>)
 800816a:	f240 3216 	movw	r2, #790	; 0x316
 800816e:	4920      	ldr	r1, [pc, #128]	; (80081f0 <mem_trim+0x20c>)
 8008170:	481c      	ldr	r0, [pc, #112]	; (80081e4 <mem_trim+0x200>)
 8008172:	f00b ffaf 	bl	80140d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008176:	89fb      	ldrh	r3, [r7, #14]
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fd4f 	bl	8007c1c <ptr_to_mem>
 800817e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008180:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <mem_trim+0x210>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	d202      	bcs.n	8008190 <mem_trim+0x1ac>
      lfree = mem2;
 800818a:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <mem_trim+0x210>)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	881a      	ldrh	r2, [r3, #0]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	8afa      	ldrh	r2, [r7, #22]
 80081a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	89fa      	ldrh	r2, [r7, #14]
 80081a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081b2:	d007      	beq.n	80081c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fd2f 	bl	8007c1c <ptr_to_mem>
 80081be:	4602      	mov	r2, r0
 80081c0:	89fb      	ldrh	r3, [r7, #14]
 80081c2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80081c4:	4809      	ldr	r0, [pc, #36]	; (80081ec <mem_trim+0x208>)
 80081c6:	f00b fd5c 	bl	8013c82 <sys_mutex_unlock>
  return rmem;
 80081ca:	687b      	ldr	r3, [r7, #4]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	2000d7f0 	.word	0x2000d7f0
 80081d8:	2000d7f4 	.word	0x2000d7f4
 80081dc:	080150f0 	.word	0x080150f0
 80081e0:	0801527c 	.word	0x0801527c
 80081e4:	08015138 	.word	0x08015138
 80081e8:	08015294 	.word	0x08015294
 80081ec:	2000d7f8 	.word	0x2000d7f8
 80081f0:	080152b4 	.word	0x080152b4
 80081f4:	2000d7fc 	.word	0x2000d7fc

080081f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <mem_malloc+0x14>
    return NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	e0e2      	b.n	80083d2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	3303      	adds	r3, #3
 8008210:	b29b      	uxth	r3, r3
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008218:	8bbb      	ldrh	r3, [r7, #28]
 800821a:	2b0b      	cmp	r3, #11
 800821c:	d801      	bhi.n	8008222 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800821e:	230c      	movs	r3, #12
 8008220:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008222:	8bbb      	ldrh	r3, [r7, #28]
 8008224:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008228:	d803      	bhi.n	8008232 <mem_malloc+0x3a>
 800822a:	8bba      	ldrh	r2, [r7, #28]
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	429a      	cmp	r2, r3
 8008230:	d201      	bcs.n	8008236 <mem_malloc+0x3e>
    return NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	e0cd      	b.n	80083d2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008236:	4869      	ldr	r0, [pc, #420]	; (80083dc <mem_malloc+0x1e4>)
 8008238:	f00b fd14 	bl	8013c64 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800823c:	4b68      	ldr	r3, [pc, #416]	; (80083e0 <mem_malloc+0x1e8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff fcfd 	bl	8007c40 <mem_to_ptr>
 8008246:	4603      	mov	r3, r0
 8008248:	83fb      	strh	r3, [r7, #30]
 800824a:	e0b7      	b.n	80083bc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800824c:	8bfb      	ldrh	r3, [r7, #30]
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff fce4 	bl	8007c1c <ptr_to_mem>
 8008254:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	791b      	ldrb	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f040 80a7 	bne.w	80083ae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	8bfb      	ldrh	r3, [r7, #30]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	f1a3 0208 	sub.w	r2, r3, #8
 800826e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008270:	429a      	cmp	r2, r3
 8008272:	f0c0 809c 	bcc.w	80083ae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	8bfb      	ldrh	r3, [r7, #30]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f1a3 0208 	sub.w	r2, r3, #8
 8008284:	8bbb      	ldrh	r3, [r7, #28]
 8008286:	3314      	adds	r3, #20
 8008288:	429a      	cmp	r2, r3
 800828a:	d333      	bcc.n	80082f4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800828c:	8bfa      	ldrh	r2, [r7, #30]
 800828e:	8bbb      	ldrh	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	b29b      	uxth	r3, r3
 8008294:	3308      	adds	r3, #8
 8008296:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008298:	8a7b      	ldrh	r3, [r7, #18]
 800829a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800829e:	d106      	bne.n	80082ae <mem_malloc+0xb6>
 80082a0:	4b50      	ldr	r3, [pc, #320]	; (80083e4 <mem_malloc+0x1ec>)
 80082a2:	f240 3287 	movw	r2, #903	; 0x387
 80082a6:	4950      	ldr	r1, [pc, #320]	; (80083e8 <mem_malloc+0x1f0>)
 80082a8:	4850      	ldr	r0, [pc, #320]	; (80083ec <mem_malloc+0x1f4>)
 80082aa:	f00b ff13 	bl	80140d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80082ae:	8a7b      	ldrh	r3, [r7, #18]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fcb3 	bl	8007c1c <ptr_to_mem>
 80082b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	881a      	ldrh	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8bfa      	ldrh	r2, [r7, #30]
 80082ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	8a7a      	ldrh	r2, [r7, #18]
 80082d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2201      	movs	r2, #1
 80082d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082e0:	d00b      	beq.n	80082fa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fc98 	bl	8007c1c <ptr_to_mem>
 80082ec:	4602      	mov	r2, r0
 80082ee:	8a7b      	ldrh	r3, [r7, #18]
 80082f0:	8053      	strh	r3, [r2, #2]
 80082f2:	e002      	b.n	80082fa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2201      	movs	r2, #1
 80082f8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80082fa:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <mem_malloc+0x1e8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	429a      	cmp	r2, r3
 8008302:	d127      	bne.n	8008354 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008304:	4b36      	ldr	r3, [pc, #216]	; (80083e0 <mem_malloc+0x1e8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800830a:	e005      	b.n	8008318 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fc83 	bl	8007c1c <ptr_to_mem>
 8008316:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <mem_malloc+0x132>
 8008320:	4b33      	ldr	r3, [pc, #204]	; (80083f0 <mem_malloc+0x1f8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	429a      	cmp	r2, r3
 8008328:	d1f0      	bne.n	800830c <mem_malloc+0x114>
          }
          lfree = cur;
 800832a:	4a2d      	ldr	r2, [pc, #180]	; (80083e0 <mem_malloc+0x1e8>)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008330:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <mem_malloc+0x1e8>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b2e      	ldr	r3, [pc, #184]	; (80083f0 <mem_malloc+0x1f8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d00b      	beq.n	8008354 <mem_malloc+0x15c>
 800833c:	4b28      	ldr	r3, [pc, #160]	; (80083e0 <mem_malloc+0x1e8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	791b      	ldrb	r3, [r3, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d006      	beq.n	8008354 <mem_malloc+0x15c>
 8008346:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <mem_malloc+0x1ec>)
 8008348:	f240 32b5 	movw	r2, #949	; 0x3b5
 800834c:	4929      	ldr	r1, [pc, #164]	; (80083f4 <mem_malloc+0x1fc>)
 800834e:	4827      	ldr	r0, [pc, #156]	; (80083ec <mem_malloc+0x1f4>)
 8008350:	f00b fec0 	bl	80140d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008354:	4821      	ldr	r0, [pc, #132]	; (80083dc <mem_malloc+0x1e4>)
 8008356:	f00b fc94 	bl	8013c82 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800835a:	8bba      	ldrh	r2, [r7, #28]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	4413      	add	r3, r2
 8008360:	3308      	adds	r3, #8
 8008362:	4a23      	ldr	r2, [pc, #140]	; (80083f0 <mem_malloc+0x1f8>)
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	4293      	cmp	r3, r2
 8008368:	d906      	bls.n	8008378 <mem_malloc+0x180>
 800836a:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <mem_malloc+0x1ec>)
 800836c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008370:	4921      	ldr	r1, [pc, #132]	; (80083f8 <mem_malloc+0x200>)
 8008372:	481e      	ldr	r0, [pc, #120]	; (80083ec <mem_malloc+0x1f4>)
 8008374:	f00b feae 	bl	80140d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d006      	beq.n	8008390 <mem_malloc+0x198>
 8008382:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <mem_malloc+0x1ec>)
 8008384:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008388:	491c      	ldr	r1, [pc, #112]	; (80083fc <mem_malloc+0x204>)
 800838a:	4818      	ldr	r0, [pc, #96]	; (80083ec <mem_malloc+0x1f4>)
 800838c:	f00b fea2 	bl	80140d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d006      	beq.n	80083a8 <mem_malloc+0x1b0>
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <mem_malloc+0x1ec>)
 800839c:	f240 32bd 	movw	r2, #957	; 0x3bd
 80083a0:	4917      	ldr	r1, [pc, #92]	; (8008400 <mem_malloc+0x208>)
 80083a2:	4812      	ldr	r0, [pc, #72]	; (80083ec <mem_malloc+0x1f4>)
 80083a4:	f00b fe96 	bl	80140d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	3308      	adds	r3, #8
 80083ac:	e011      	b.n	80083d2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80083ae:	8bfb      	ldrh	r3, [r7, #30]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fc33 	bl	8007c1c <ptr_to_mem>
 80083b6:	4603      	mov	r3, r0
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80083bc:	8bfa      	ldrh	r2, [r7, #30]
 80083be:	8bbb      	ldrh	r3, [r7, #28]
 80083c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80083c4:	429a      	cmp	r2, r3
 80083c6:	f4ff af41 	bcc.w	800824c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80083ca:	4804      	ldr	r0, [pc, #16]	; (80083dc <mem_malloc+0x1e4>)
 80083cc:	f00b fc59 	bl	8013c82 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3720      	adds	r7, #32
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	2000d7f8 	.word	0x2000d7f8
 80083e0:	2000d7fc 	.word	0x2000d7fc
 80083e4:	080150f0 	.word	0x080150f0
 80083e8:	080152b4 	.word	0x080152b4
 80083ec:	08015138 	.word	0x08015138
 80083f0:	2000d7f4 	.word	0x2000d7f4
 80083f4:	080152c8 	.word	0x080152c8
 80083f8:	080152e4 	.word	0x080152e4
 80083fc:	08015314 	.word	0x08015314
 8008400:	08015344 	.word	0x08015344

08008404 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	3303      	adds	r3, #3
 800841a:	f023 0303 	bic.w	r3, r3, #3
 800841e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	e011      	b.n	800844a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4413      	add	r3, r2
 8008442:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3301      	adds	r3, #1
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	461a      	mov	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4293      	cmp	r3, r2
 8008454:	dbe7      	blt.n	8008426 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800846a:	2300      	movs	r3, #0
 800846c:	80fb      	strh	r3, [r7, #6]
 800846e:	e009      	b.n	8008484 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <memp_init+0x30>)
 8008474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff ffc3 	bl	8008404 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800847e:	88fb      	ldrh	r3, [r7, #6]
 8008480:	3301      	adds	r3, #1
 8008482:	80fb      	strh	r3, [r7, #6]
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	2b0c      	cmp	r3, #12
 8008488:	d9f2      	bls.n	8008470 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	08017ef8 	.word	0x08017ef8

08008498 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80084a0:	f00b fc22 	bl	8013ce8 <sys_arch_protect>
 80084a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d015      	beq.n	80084e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	6812      	ldr	r2, [r2, #0]
 80084bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <do_memp_malloc_pool+0x3e>
 80084c8:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <do_memp_malloc_pool+0x58>)
 80084ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80084ce:	4909      	ldr	r1, [pc, #36]	; (80084f4 <do_memp_malloc_pool+0x5c>)
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <do_memp_malloc_pool+0x60>)
 80084d2:	f00b fdff 	bl	80140d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f00b fc14 	bl	8013d04 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	e003      	b.n	80084e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f00b fc0f 	bl	8013d04 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	08015368 	.word	0x08015368
 80084f4:	08015398 	.word	0x08015398
 80084f8:	080153bc 	.word	0x080153bc

080084fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <memp_malloc_pool+0x1c>
 800850a:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <memp_malloc_pool+0x38>)
 800850c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008510:	4909      	ldr	r1, [pc, #36]	; (8008538 <memp_malloc_pool+0x3c>)
 8008512:	480a      	ldr	r0, [pc, #40]	; (800853c <memp_malloc_pool+0x40>)
 8008514:	f00b fdde 	bl	80140d4 <iprintf>
  if (desc == NULL) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <memp_malloc_pool+0x26>
    return NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	e003      	b.n	800852a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff ffb8 	bl	8008498 <do_memp_malloc_pool>
 8008528:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	08015368 	.word	0x08015368
 8008538:	080153e4 	.word	0x080153e4
 800853c:	080153bc 	.word	0x080153bc

08008540 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	2b0c      	cmp	r3, #12
 800854e:	d908      	bls.n	8008562 <memp_malloc+0x22>
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <memp_malloc+0x3c>)
 8008552:	f240 1257 	movw	r2, #343	; 0x157
 8008556:	490a      	ldr	r1, [pc, #40]	; (8008580 <memp_malloc+0x40>)
 8008558:	480a      	ldr	r0, [pc, #40]	; (8008584 <memp_malloc+0x44>)
 800855a:	f00b fdbb 	bl	80140d4 <iprintf>
 800855e:	2300      	movs	r3, #0
 8008560:	e008      	b.n	8008574 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	4a08      	ldr	r2, [pc, #32]	; (8008588 <memp_malloc+0x48>)
 8008566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff ff94 	bl	8008498 <do_memp_malloc_pool>
 8008570:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	08015368 	.word	0x08015368
 8008580:	080153f8 	.word	0x080153f8
 8008584:	080153bc 	.word	0x080153bc
 8008588:	08017ef8 	.word	0x08017ef8

0800858c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <do_memp_free_pool+0x22>
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <do_memp_free_pool+0x4c>)
 80085a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80085a6:	490d      	ldr	r1, [pc, #52]	; (80085dc <do_memp_free_pool+0x50>)
 80085a8:	480d      	ldr	r0, [pc, #52]	; (80085e0 <do_memp_free_pool+0x54>)
 80085aa:	f00b fd93 	bl	80140d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80085b2:	f00b fb99 	bl	8013ce8 <sys_arch_protect>
 80085b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80085ca:	68b8      	ldr	r0, [r7, #8]
 80085cc:	f00b fb9a 	bl	8013d04 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	08015368 	.word	0x08015368
 80085dc:	08015418 	.word	0x08015418
 80085e0:	080153bc 	.word	0x080153bc

080085e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <memp_free_pool+0x1e>
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <memp_free_pool+0x3c>)
 80085f6:	f240 1295 	movw	r2, #405	; 0x195
 80085fa:	490a      	ldr	r1, [pc, #40]	; (8008624 <memp_free_pool+0x40>)
 80085fc:	480a      	ldr	r0, [pc, #40]	; (8008628 <memp_free_pool+0x44>)
 80085fe:	f00b fd69 	bl	80140d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <memp_free_pool+0x34>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff ffbb 	bl	800858c <do_memp_free_pool>
 8008616:	e000      	b.n	800861a <memp_free_pool+0x36>
    return;
 8008618:	bf00      	nop
}
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	08015368 	.word	0x08015368
 8008624:	080153e4 	.word	0x080153e4
 8008628:	080153bc 	.word	0x080153bc

0800862c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b0c      	cmp	r3, #12
 800863c:	d907      	bls.n	800864e <memp_free+0x22>
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <memp_free+0x44>)
 8008640:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008644:	490b      	ldr	r1, [pc, #44]	; (8008674 <memp_free+0x48>)
 8008646:	480c      	ldr	r0, [pc, #48]	; (8008678 <memp_free+0x4c>)
 8008648:	f00b fd44 	bl	80140d4 <iprintf>
 800864c:	e00c      	b.n	8008668 <memp_free+0x3c>

  if (mem == NULL) {
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d008      	beq.n	8008666 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	4a09      	ldr	r2, [pc, #36]	; (800867c <memp_free+0x50>)
 8008658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff ff94 	bl	800858c <do_memp_free_pool>
 8008664:	e000      	b.n	8008668 <memp_free+0x3c>
    return;
 8008666:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	08015368 	.word	0x08015368
 8008674:	08015438 	.word	0x08015438
 8008678:	080153bc 	.word	0x080153bc
 800867c:	08017ef8 	.word	0x08017ef8

08008680 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d108      	bne.n	80086b6 <netif_add+0x26>
 80086a4:	4b5b      	ldr	r3, [pc, #364]	; (8008814 <netif_add+0x184>)
 80086a6:	f240 1227 	movw	r2, #295	; 0x127
 80086aa:	495b      	ldr	r1, [pc, #364]	; (8008818 <netif_add+0x188>)
 80086ac:	485b      	ldr	r0, [pc, #364]	; (800881c <netif_add+0x18c>)
 80086ae:	f00b fd11 	bl	80140d4 <iprintf>
 80086b2:	2300      	movs	r3, #0
 80086b4:	e0a9      	b.n	800880a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d108      	bne.n	80086ce <netif_add+0x3e>
 80086bc:	4b55      	ldr	r3, [pc, #340]	; (8008814 <netif_add+0x184>)
 80086be:	f44f 7294 	mov.w	r2, #296	; 0x128
 80086c2:	4957      	ldr	r1, [pc, #348]	; (8008820 <netif_add+0x190>)
 80086c4:	4855      	ldr	r0, [pc, #340]	; (800881c <netif_add+0x18c>)
 80086c6:	f00b fd05 	bl	80140d4 <iprintf>
 80086ca:	2300      	movs	r3, #0
 80086cc:	e09d      	b.n	800880a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80086d4:	4b53      	ldr	r3, [pc, #332]	; (8008824 <netif_add+0x194>)
 80086d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80086de:	4b51      	ldr	r3, [pc, #324]	; (8008824 <netif_add+0x194>)
 80086e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80086e8:	4b4e      	ldr	r3, [pc, #312]	; (8008824 <netif_add+0x194>)
 80086ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a49      	ldr	r2, [pc, #292]	; (8008828 <netif_add+0x198>)
 8008702:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3324      	adds	r3, #36	; 0x24
 8008716:	2204      	movs	r2, #4
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f00b fc3d 	bl	8013f9a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6a3a      	ldr	r2, [r7, #32]
 800872a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800872c:	4b3f      	ldr	r3, [pc, #252]	; (800882c <netif_add+0x19c>)
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800873a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f914 	bl	8008970 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	4798      	blx	r3
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <netif_add+0xc8>
    return NULL;
 8008754:	2300      	movs	r3, #0
 8008756:	e058      	b.n	800880a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800875e:	2bff      	cmp	r3, #255	; 0xff
 8008760:	d103      	bne.n	800876a <netif_add+0xda>
        netif->num = 0;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800876e:	4b30      	ldr	r3, [pc, #192]	; (8008830 <netif_add+0x1a0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	e02b      	b.n	80087ce <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	429a      	cmp	r2, r3
 800877c:	d106      	bne.n	800878c <netif_add+0xfc>
 800877e:	4b25      	ldr	r3, [pc, #148]	; (8008814 <netif_add+0x184>)
 8008780:	f240 128b 	movw	r2, #395	; 0x18b
 8008784:	492b      	ldr	r1, [pc, #172]	; (8008834 <netif_add+0x1a4>)
 8008786:	4825      	ldr	r0, [pc, #148]	; (800881c <netif_add+0x18c>)
 8008788:	f00b fca4 	bl	80140d4 <iprintf>
        num_netifs++;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	3301      	adds	r3, #1
 8008790:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2bff      	cmp	r3, #255	; 0xff
 8008796:	dd06      	ble.n	80087a6 <netif_add+0x116>
 8008798:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <netif_add+0x184>)
 800879a:	f240 128d 	movw	r2, #397	; 0x18d
 800879e:	4926      	ldr	r1, [pc, #152]	; (8008838 <netif_add+0x1a8>)
 80087a0:	481e      	ldr	r0, [pc, #120]	; (800881c <netif_add+0x18c>)
 80087a2:	f00b fc97 	bl	80140d4 <iprintf>
        if (netif2->num == netif->num) {
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d108      	bne.n	80087c8 <netif_add+0x138>
          netif->num++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087bc:	3301      	adds	r3, #1
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80087c6:	e005      	b.n	80087d4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1d0      	bne.n	8008776 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1be      	bne.n	8008758 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087e0:	2bfe      	cmp	r3, #254	; 0xfe
 80087e2:	d103      	bne.n	80087ec <netif_add+0x15c>
    netif_num = 0;
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <netif_add+0x19c>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	e006      	b.n	80087fa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087f2:	3301      	adds	r3, #1
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <netif_add+0x19c>)
 80087f8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <netif_add+0x1a0>)
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008802:	4a0b      	ldr	r2, [pc, #44]	; (8008830 <netif_add+0x1a0>)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008808:	68fb      	ldr	r3, [r7, #12]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	08015454 	.word	0x08015454
 8008818:	080154e8 	.word	0x080154e8
 800881c:	080154a4 	.word	0x080154a4
 8008820:	08015504 	.word	0x08015504
 8008824:	08017f7c 	.word	0x08017f7c
 8008828:	08008c53 	.word	0x08008c53
 800882c:	200108f4 	.word	0x200108f4
 8008830:	200108ec 	.word	0x200108ec
 8008834:	08015528 	.word	0x08015528
 8008838:	0801553c 	.word	0x0801553c

0800883c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f002 fb91 	bl	800af70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f006 ffa7 	bl	800f7a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <netif_do_set_ipaddr+0x20>
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <netif_do_set_ipaddr+0x88>)
 8008874:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008878:	491c      	ldr	r1, [pc, #112]	; (80088ec <netif_do_set_ipaddr+0x8c>)
 800887a:	481d      	ldr	r0, [pc, #116]	; (80088f0 <netif_do_set_ipaddr+0x90>)
 800887c:	f00b fc2a 	bl	80140d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <netif_do_set_ipaddr+0x34>
 8008886:	4b18      	ldr	r3, [pc, #96]	; (80088e8 <netif_do_set_ipaddr+0x88>)
 8008888:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800888c:	4917      	ldr	r1, [pc, #92]	; (80088ec <netif_do_set_ipaddr+0x8c>)
 800888e:	4818      	ldr	r0, [pc, #96]	; (80088f0 <netif_do_set_ipaddr+0x90>)
 8008890:	f00b fc20 	bl	80140d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3304      	adds	r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d01c      	beq.n	80088dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3304      	adds	r3, #4
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff ffbf 	bl	800883c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <netif_do_set_ipaddr+0x6a>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	e000      	b.n	80088cc <netif_do_set_ipaddr+0x6c>
 80088ca:	2300      	movs	r3, #0
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80088d0:	2101      	movs	r1, #1
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f8d2 	bl	8008a7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	08015454 	.word	0x08015454
 80088ec:	0801556c 	.word	0x0801556c
 80088f0:	080154a4 	.word	0x080154a4

080088f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3308      	adds	r3, #8
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d00a      	beq.n	8008924 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <netif_do_set_netmask+0x26>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	e000      	b.n	800891c <netif_do_set_netmask+0x28>
 800891a:	2300      	movs	r3, #0
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	330c      	adds	r3, #12
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d00a      	beq.n	8008962 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <netif_do_set_gw+0x26>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	e000      	b.n	800895a <netif_do_set_gw+0x28>
 8008958:	2300      	movs	r3, #0
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800898c:	4b1c      	ldr	r3, [pc, #112]	; (8008a00 <netif_set_addr+0x90>)
 800898e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008996:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <netif_set_addr+0x90>)
 8008998:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80089a0:	4b17      	ldr	r3, [pc, #92]	; (8008a00 <netif_set_addr+0x90>)
 80089a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <netif_set_addr+0x42>
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <netif_set_addr+0x46>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <netif_set_addr+0x48>
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d006      	beq.n	80089ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80089c0:	f107 0310 	add.w	r3, r7, #16
 80089c4:	461a      	mov	r2, r3
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff ff49 	bl	8008860 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff ff8e 	bl	80088f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff ffa8 	bl	8008932 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80089e8:	f107 0310 	add.w	r3, r7, #16
 80089ec:	461a      	mov	r2, r3
 80089ee:	68b9      	ldr	r1, [r7, #8]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7ff ff35 	bl	8008860 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80089f6:	bf00      	nop
 80089f8:	3720      	adds	r7, #32
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	08017f7c 	.word	0x08017f7c

08008a04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a0c:	4a04      	ldr	r2, [pc, #16]	; (8008a20 <netif_set_default+0x1c>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	200108f0 	.word	0x200108f0

08008a24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d107      	bne.n	8008a42 <netif_set_up+0x1e>
 8008a32:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <netif_set_up+0x4c>)
 8008a34:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008a38:	490e      	ldr	r1, [pc, #56]	; (8008a74 <netif_set_up+0x50>)
 8008a3a:	480f      	ldr	r0, [pc, #60]	; (8008a78 <netif_set_up+0x54>)
 8008a3c:	f00b fb4a 	bl	80140d4 <iprintf>
 8008a40:	e013      	b.n	8008a6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10c      	bne.n	8008a6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008a62:	2103      	movs	r1, #3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f809 	bl	8008a7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	08015454 	.word	0x08015454
 8008a74:	080155dc 	.word	0x080155dc
 8008a78:	080154a4 	.word	0x080154a4

08008a7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <netif_issue_reports+0x20>
 8008a8e:	4b18      	ldr	r3, [pc, #96]	; (8008af0 <netif_issue_reports+0x74>)
 8008a90:	f240 326d 	movw	r2, #877	; 0x36d
 8008a94:	4917      	ldr	r1, [pc, #92]	; (8008af4 <netif_issue_reports+0x78>)
 8008a96:	4818      	ldr	r0, [pc, #96]	; (8008af8 <netif_issue_reports+0x7c>)
 8008a98:	f00b fb1c 	bl	80140d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01e      	beq.n	8008ae8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ab0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d017      	beq.n	8008ae8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d013      	beq.n	8008aea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00e      	beq.n	8008aea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3304      	adds	r3, #4
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f009 fc5f 	bl	80123a4 <etharp_request>
 8008ae6:	e000      	b.n	8008aea <netif_issue_reports+0x6e>
    return;
 8008ae8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	08015454 	.word	0x08015454
 8008af4:	080155f8 	.word	0x080155f8
 8008af8:	080154a4 	.word	0x080154a4

08008afc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d107      	bne.n	8008b1a <netif_set_down+0x1e>
 8008b0a:	4b12      	ldr	r3, [pc, #72]	; (8008b54 <netif_set_down+0x58>)
 8008b0c:	f240 329b 	movw	r2, #923	; 0x39b
 8008b10:	4911      	ldr	r1, [pc, #68]	; (8008b58 <netif_set_down+0x5c>)
 8008b12:	4812      	ldr	r0, [pc, #72]	; (8008b5c <netif_set_down+0x60>)
 8008b14:	f00b fade 	bl	80140d4 <iprintf>
 8008b18:	e019      	b.n	8008b4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d012      	beq.n	8008b4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b2e:	f023 0301 	bic.w	r3, r3, #1
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b40:	f003 0308 	and.w	r3, r3, #8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f008 ffe5 	bl	8011b18 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	08015454 	.word	0x08015454
 8008b58:	0801561c 	.word	0x0801561c
 8008b5c:	080154a4 	.word	0x080154a4

08008b60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d107      	bne.n	8008b7e <netif_set_link_up+0x1e>
 8008b6e:	4b15      	ldr	r3, [pc, #84]	; (8008bc4 <netif_set_link_up+0x64>)
 8008b70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008b74:	4914      	ldr	r1, [pc, #80]	; (8008bc8 <netif_set_link_up+0x68>)
 8008b76:	4815      	ldr	r0, [pc, #84]	; (8008bcc <netif_set_link_up+0x6c>)
 8008b78:	f00b faac 	bl	80140d4 <iprintf>
 8008b7c:	e01e      	b.n	8008bbc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d117      	bne.n	8008bbc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b92:	f043 0304 	orr.w	r3, r3, #4
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f007 fa2a 	bl	800fff8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff ff68 	bl	8008a7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <netif_set_link_up+0x5c>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08015454 	.word	0x08015454
 8008bc8:	0801563c 	.word	0x0801563c
 8008bcc:	080154a4 	.word	0x080154a4

08008bd0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d107      	bne.n	8008bee <netif_set_link_down+0x1e>
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <netif_set_link_down+0x54>)
 8008be0:	f240 4206 	movw	r2, #1030	; 0x406
 8008be4:	4910      	ldr	r1, [pc, #64]	; (8008c28 <netif_set_link_down+0x58>)
 8008be6:	4811      	ldr	r0, [pc, #68]	; (8008c2c <netif_set_link_down+0x5c>)
 8008be8:	f00b fa74 	bl	80140d4 <iprintf>
 8008bec:	e017      	b.n	8008c1e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d010      	beq.n	8008c1e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c02:	f023 0304 	bic.w	r3, r3, #4
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <netif_set_link_down+0x4e>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	08015454 	.word	0x08015454
 8008c28:	08015660 	.word	0x08015660
 8008c2c:	080154a4 	.word	0x080154a4

08008c30 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	61da      	str	r2, [r3, #28]
  }
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008c5e:	f06f 030b 	mvn.w	r3, #11
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d013      	beq.n	8008ca8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <netif_get_by_index+0x48>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	e00c      	b.n	8008ca2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	79fa      	ldrb	r2, [r7, #7]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d101      	bne.n	8008c9c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	e006      	b.n	8008caa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1ef      	bne.n	8008c88 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	200108ec 	.word	0x200108ec

08008cbc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008cc2:	f00b f811 	bl	8013ce8 <sys_arch_protect>
 8008cc6:	6038      	str	r0, [r7, #0]
 8008cc8:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <pbuf_free_ooseq+0x44>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	6838      	ldr	r0, [r7, #0]
 8008cd0:	f00b f818 	bl	8013d04 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <pbuf_free_ooseq+0x48>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	607b      	str	r3, [r7, #4]
 8008cda:	e00a      	b.n	8008cf2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f002 f981 	bl	800afec <tcp_free_ooseq>
      return;
 8008cea:	e005      	b.n	8008cf8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	607b      	str	r3, [r7, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1f1      	bne.n	8008cdc <pbuf_free_ooseq+0x20>
    }
  }
}
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200108f5 	.word	0x200108f5
 8008d04:	20010904 	.word	0x20010904

08008d08 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008d10:	f7ff ffd4 	bl	8008cbc <pbuf_free_ooseq>
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008d22:	f00a ffe1 	bl	8013ce8 <sys_arch_protect>
 8008d26:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <pbuf_pool_is_empty+0x4c>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008d2e:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <pbuf_pool_is_empty+0x4c>)
 8008d30:	2201      	movs	r2, #1
 8008d32:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f00a ffe5 	bl	8013d04 <sys_arch_unprotect>

  if (!queued) {
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10f      	bne.n	8008d60 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008d40:	2100      	movs	r1, #0
 8008d42:	480a      	ldr	r0, [pc, #40]	; (8008d6c <pbuf_pool_is_empty+0x50>)
 8008d44:	f7fe fe9a 	bl	8007a7c <tcpip_try_callback>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <pbuf_pool_is_empty+0x44>
 8008d4e:	f00a ffcb 	bl	8013ce8 <sys_arch_protect>
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <pbuf_pool_is_empty+0x4c>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f00a ffd2 	bl	8013d04 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	200108f5 	.word	0x200108f5
 8008d6c:	08008d09 	.word	0x08008d09

08008d70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	460b      	mov	r3, r1
 8008d80:	80fb      	strh	r3, [r7, #6]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	88fa      	ldrh	r2, [r7, #6]
 8008d96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	88ba      	ldrh	r2, [r7, #4]
 8008d9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008d9e:	8b3b      	ldrh	r3, [r7, #24]
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	7f3a      	ldrb	r2, [r7, #28]
 8008daa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	73da      	strb	r2, [r3, #15]
}
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08c      	sub	sp, #48	; 0x30
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	80bb      	strh	r3, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008de0:	d07f      	beq.n	8008ee2 <pbuf_alloc+0x11e>
 8008de2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008de6:	f300 80c8 	bgt.w	8008f7a <pbuf_alloc+0x1b6>
 8008dea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008dee:	d010      	beq.n	8008e12 <pbuf_alloc+0x4e>
 8008df0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008df4:	f300 80c1 	bgt.w	8008f7a <pbuf_alloc+0x1b6>
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d002      	beq.n	8008e02 <pbuf_alloc+0x3e>
 8008dfc:	2b41      	cmp	r3, #65	; 0x41
 8008dfe:	f040 80bc 	bne.w	8008f7a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008e02:	887a      	ldrh	r2, [r7, #2]
 8008e04:	88bb      	ldrh	r3, [r7, #4]
 8008e06:	4619      	mov	r1, r3
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f000 f8d1 	bl	8008fb0 <pbuf_alloc_reference>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008e10:	e0bd      	b.n	8008f8e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008e1a:	88bb      	ldrh	r3, [r7, #4]
 8008e1c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008e1e:	200c      	movs	r0, #12
 8008e20:	f7ff fb8e 	bl	8008540 <memp_malloc>
 8008e24:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008e2c:	f7ff ff76 	bl	8008d1c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e38:	f000 faa8 	bl	800938c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e0a7      	b.n	8008f90 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008e40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e42:	3303      	adds	r3, #3
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f023 0303 	bic.w	r3, r3, #3
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	8b7a      	ldrh	r2, [r7, #26]
 8008e54:	4293      	cmp	r3, r2
 8008e56:	bf28      	it	cs
 8008e58:	4613      	movcs	r3, r2
 8008e5a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008e5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e5e:	3310      	adds	r3, #16
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4413      	add	r3, r2
 8008e64:	3303      	adds	r3, #3
 8008e66:	f023 0303 	bic.w	r3, r3, #3
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	89f9      	ldrh	r1, [r7, #14]
 8008e6e:	8b7a      	ldrh	r2, [r7, #26]
 8008e70:	2300      	movs	r3, #0
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	887b      	ldrh	r3, [r7, #2]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	6938      	ldr	r0, [r7, #16]
 8008e7e:	f7ff ff77 	bl	8008d70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d006      	beq.n	8008e9c <pbuf_alloc+0xd8>
 8008e8e:	4b42      	ldr	r3, [pc, #264]	; (8008f98 <pbuf_alloc+0x1d4>)
 8008e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e94:	4941      	ldr	r1, [pc, #260]	; (8008f9c <pbuf_alloc+0x1d8>)
 8008e96:	4842      	ldr	r0, [pc, #264]	; (8008fa0 <pbuf_alloc+0x1dc>)
 8008e98:	f00b f91c 	bl	80140d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e9e:	3303      	adds	r3, #3
 8008ea0:	f023 0303 	bic.w	r3, r3, #3
 8008ea4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008ea8:	d106      	bne.n	8008eb8 <pbuf_alloc+0xf4>
 8008eaa:	4b3b      	ldr	r3, [pc, #236]	; (8008f98 <pbuf_alloc+0x1d4>)
 8008eac:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008eb0:	493c      	ldr	r1, [pc, #240]	; (8008fa4 <pbuf_alloc+0x1e0>)
 8008eb2:	483b      	ldr	r0, [pc, #236]	; (8008fa0 <pbuf_alloc+0x1dc>)
 8008eb4:	f00b f90e 	bl	80140d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d102      	bne.n	8008ec4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	e002      	b.n	8008eca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008ece:	8b7a      	ldrh	r2, [r7, #26]
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008eda:	8b7b      	ldrh	r3, [r7, #26]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d19e      	bne.n	8008e1e <pbuf_alloc+0x5a>
      break;
 8008ee0:	e055      	b.n	8008f8e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ee4:	3303      	adds	r3, #3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	88bb      	ldrh	r3, [r7, #4]
 8008ef0:	3303      	adds	r3, #3
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	4413      	add	r3, r2
 8008efc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008efe:	8b3b      	ldrh	r3, [r7, #24]
 8008f00:	3310      	adds	r3, #16
 8008f02:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008f04:	8b3a      	ldrh	r2, [r7, #24]
 8008f06:	88bb      	ldrh	r3, [r7, #4]
 8008f08:	3303      	adds	r3, #3
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d306      	bcc.n	8008f20 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008f12:	8afa      	ldrh	r2, [r7, #22]
 8008f14:	88bb      	ldrh	r3, [r7, #4]
 8008f16:	3303      	adds	r3, #3
 8008f18:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d201      	bcs.n	8008f24 <pbuf_alloc+0x160>
        return NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e035      	b.n	8008f90 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008f24:	8afb      	ldrh	r3, [r7, #22]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff f966 	bl	80081f8 <mem_malloc>
 8008f2c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <pbuf_alloc+0x174>
        return NULL;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e02b      	b.n	8008f90 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008f38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f3a:	3310      	adds	r3, #16
 8008f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3e:	4413      	add	r3, r2
 8008f40:	3303      	adds	r3, #3
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	4618      	mov	r0, r3
 8008f48:	88b9      	ldrh	r1, [r7, #4]
 8008f4a:	88ba      	ldrh	r2, [r7, #4]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	887b      	ldrh	r3, [r7, #2]
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	460b      	mov	r3, r1
 8008f56:	4601      	mov	r1, r0
 8008f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f5a:	f7ff ff09 	bl	8008d70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d010      	beq.n	8008f8c <pbuf_alloc+0x1c8>
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <pbuf_alloc+0x1d4>)
 8008f6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008f70:	490d      	ldr	r1, [pc, #52]	; (8008fa8 <pbuf_alloc+0x1e4>)
 8008f72:	480b      	ldr	r0, [pc, #44]	; (8008fa0 <pbuf_alloc+0x1dc>)
 8008f74:	f00b f8ae 	bl	80140d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008f78:	e008      	b.n	8008f8c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008f7a:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <pbuf_alloc+0x1d4>)
 8008f7c:	f240 1227 	movw	r2, #295	; 0x127
 8008f80:	490a      	ldr	r1, [pc, #40]	; (8008fac <pbuf_alloc+0x1e8>)
 8008f82:	4807      	ldr	r0, [pc, #28]	; (8008fa0 <pbuf_alloc+0x1dc>)
 8008f84:	f00b f8a6 	bl	80140d4 <iprintf>
      return NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e001      	b.n	8008f90 <pbuf_alloc+0x1cc>
      break;
 8008f8c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3728      	adds	r7, #40	; 0x28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	08015684 	.word	0x08015684
 8008f9c:	080156b4 	.word	0x080156b4
 8008fa0:	080156e4 	.word	0x080156e4
 8008fa4:	0801570c 	.word	0x0801570c
 8008fa8:	08015740 	.word	0x08015740
 8008fac:	0801576c 	.word	0x0801576c

08008fb0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	807b      	strh	r3, [r7, #2]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008fc0:	883b      	ldrh	r3, [r7, #0]
 8008fc2:	2b41      	cmp	r3, #65	; 0x41
 8008fc4:	d009      	beq.n	8008fda <pbuf_alloc_reference+0x2a>
 8008fc6:	883b      	ldrh	r3, [r7, #0]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d006      	beq.n	8008fda <pbuf_alloc_reference+0x2a>
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <pbuf_alloc_reference+0x5c>)
 8008fce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008fd2:	490f      	ldr	r1, [pc, #60]	; (8009010 <pbuf_alloc_reference+0x60>)
 8008fd4:	480f      	ldr	r0, [pc, #60]	; (8009014 <pbuf_alloc_reference+0x64>)
 8008fd6:	f00b f87d 	bl	80140d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008fda:	200b      	movs	r0, #11
 8008fdc:	f7ff fab0 	bl	8008540 <memp_malloc>
 8008fe0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e00b      	b.n	8009004 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008fec:	8879      	ldrh	r1, [r7, #2]
 8008fee:	887a      	ldrh	r2, [r7, #2]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	883b      	ldrh	r3, [r7, #0]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff feb7 	bl	8008d70 <pbuf_init_alloced_pbuf>
  return p;
 8009002:	68fb      	ldr	r3, [r7, #12]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	08015684 	.word	0x08015684
 8009010:	08015788 	.word	0x08015788
 8009014:	080156e4 	.word	0x080156e4

08009018 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af02      	add	r7, sp, #8
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
 8009024:	460b      	mov	r3, r1
 8009026:	81bb      	strh	r3, [r7, #12]
 8009028:	4613      	mov	r3, r2
 800902a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009030:	8a7b      	ldrh	r3, [r7, #18]
 8009032:	3303      	adds	r3, #3
 8009034:	f023 0203 	bic.w	r2, r3, #3
 8009038:	89bb      	ldrh	r3, [r7, #12]
 800903a:	441a      	add	r2, r3
 800903c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800903e:	429a      	cmp	r2, r3
 8009040:	d901      	bls.n	8009046 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	e018      	b.n	8009078 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800904c:	8a7b      	ldrh	r3, [r7, #18]
 800904e:	3303      	adds	r3, #3
 8009050:	f023 0303 	bic.w	r3, r3, #3
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	4413      	add	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	e001      	b.n	8009060 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	89b9      	ldrh	r1, [r7, #12]
 8009064:	89ba      	ldrh	r2, [r7, #12]
 8009066:	2302      	movs	r3, #2
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	897b      	ldrh	r3, [r7, #10]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	460b      	mov	r3, r1
 8009070:	6979      	ldr	r1, [r7, #20]
 8009072:	f7ff fe7d 	bl	8008d70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009076:	687b      	ldr	r3, [r7, #4]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d106      	bne.n	80090a0 <pbuf_realloc+0x20>
 8009092:	4b3a      	ldr	r3, [pc, #232]	; (800917c <pbuf_realloc+0xfc>)
 8009094:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009098:	4939      	ldr	r1, [pc, #228]	; (8009180 <pbuf_realloc+0x100>)
 800909a:	483a      	ldr	r0, [pc, #232]	; (8009184 <pbuf_realloc+0x104>)
 800909c:	f00b f81a 	bl	80140d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	891b      	ldrh	r3, [r3, #8]
 80090a4:	887a      	ldrh	r2, [r7, #2]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d263      	bcs.n	8009172 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	891a      	ldrh	r2, [r3, #8]
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80090b4:	887b      	ldrh	r3, [r7, #2]
 80090b6:	817b      	strh	r3, [r7, #10]
  q = p;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80090bc:	e018      	b.n	80090f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	895b      	ldrh	r3, [r3, #10]
 80090c2:	897a      	ldrh	r2, [r7, #10]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	891a      	ldrh	r2, [r3, #8]
 80090cc:	893b      	ldrh	r3, [r7, #8]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <pbuf_realloc+0x70>
 80090e2:	4b26      	ldr	r3, [pc, #152]	; (800917c <pbuf_realloc+0xfc>)
 80090e4:	f240 12af 	movw	r2, #431	; 0x1af
 80090e8:	4927      	ldr	r1, [pc, #156]	; (8009188 <pbuf_realloc+0x108>)
 80090ea:	4826      	ldr	r0, [pc, #152]	; (8009184 <pbuf_realloc+0x104>)
 80090ec:	f00a fff2 	bl	80140d4 <iprintf>
  while (rem_len > q->len) {
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	895b      	ldrh	r3, [r3, #10]
 80090f4:	897a      	ldrh	r2, [r7, #10]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d8e1      	bhi.n	80090be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	7b1b      	ldrb	r3, [r3, #12]
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	2b00      	cmp	r3, #0
 8009104:	d121      	bne.n	800914a <pbuf_realloc+0xca>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	895b      	ldrh	r3, [r3, #10]
 800910a:	897a      	ldrh	r2, [r7, #10]
 800910c:	429a      	cmp	r2, r3
 800910e:	d01c      	beq.n	800914a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	7b5b      	ldrb	r3, [r3, #13]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d116      	bne.n	800914a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	b29a      	uxth	r2, r3
 8009126:	897b      	ldrh	r3, [r7, #10]
 8009128:	4413      	add	r3, r2
 800912a:	b29b      	uxth	r3, r3
 800912c:	4619      	mov	r1, r3
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7fe ff58 	bl	8007fe4 <mem_trim>
 8009134:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <pbuf_realloc+0xca>
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <pbuf_realloc+0xfc>)
 800913e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009142:	4912      	ldr	r1, [pc, #72]	; (800918c <pbuf_realloc+0x10c>)
 8009144:	480f      	ldr	r0, [pc, #60]	; (8009184 <pbuf_realloc+0x104>)
 8009146:	f00a ffc5 	bl	80140d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	897a      	ldrh	r2, [r7, #10]
 800914e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	895a      	ldrh	r2, [r3, #10]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f911 	bl	800938c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	e000      	b.n	8009174 <pbuf_realloc+0xf4>
    return;
 8009172:	bf00      	nop

}
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	08015684 	.word	0x08015684
 8009180:	0801579c 	.word	0x0801579c
 8009184:	080156e4 	.word	0x080156e4
 8009188:	080157b4 	.word	0x080157b4
 800918c:	080157cc 	.word	0x080157cc

08009190 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <pbuf_add_header_impl+0x22>
 80091a4:	4b2b      	ldr	r3, [pc, #172]	; (8009254 <pbuf_add_header_impl+0xc4>)
 80091a6:	f240 12df 	movw	r2, #479	; 0x1df
 80091aa:	492b      	ldr	r1, [pc, #172]	; (8009258 <pbuf_add_header_impl+0xc8>)
 80091ac:	482b      	ldr	r0, [pc, #172]	; (800925c <pbuf_add_header_impl+0xcc>)
 80091ae:	f00a ff91 	bl	80140d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <pbuf_add_header_impl+0x30>
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091be:	d301      	bcc.n	80091c4 <pbuf_add_header_impl+0x34>
    return 1;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e043      	b.n	800924c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <pbuf_add_header_impl+0x3e>
    return 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e03e      	b.n	800924c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	891a      	ldrh	r2, [r3, #8]
 80091d6:	8a7b      	ldrh	r3, [r7, #18]
 80091d8:	4413      	add	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	8a7a      	ldrh	r2, [r7, #18]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d901      	bls.n	80091e6 <pbuf_add_header_impl+0x56>
    return 1;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e032      	b.n	800924c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	7b1b      	ldrb	r3, [r3, #12]
 80091ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80091ec:	8a3b      	ldrh	r3, [r7, #16]
 80091ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00c      	beq.n	8009210 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	425b      	negs	r3, r3
 80091fe:	4413      	add	r3, r2
 8009200:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3310      	adds	r3, #16
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	429a      	cmp	r2, r3
 800920a:	d20d      	bcs.n	8009228 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800920c:	2301      	movs	r3, #1
 800920e:	e01d      	b.n	800924c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	425b      	negs	r3, r3
 800921e:	4413      	add	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e001      	b.n	8009228 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009224:	2301      	movs	r3, #1
 8009226:	e011      	b.n	800924c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	895a      	ldrh	r2, [r3, #10]
 8009232:	8a7b      	ldrh	r3, [r7, #18]
 8009234:	4413      	add	r3, r2
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	891a      	ldrh	r2, [r3, #8]
 8009240:	8a7b      	ldrh	r3, [r7, #18]
 8009242:	4413      	add	r3, r2
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	811a      	strh	r2, [r3, #8]


  return 0;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08015684 	.word	0x08015684
 8009258:	080157e8 	.word	0x080157e8
 800925c:	080156e4 	.word	0x080156e4

08009260 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800926a:	2200      	movs	r2, #0
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff ff8e 	bl	8009190 <pbuf_add_header_impl>
 8009274:	4603      	mov	r3, r0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d106      	bne.n	800929e <pbuf_remove_header+0x1e>
 8009290:	4b20      	ldr	r3, [pc, #128]	; (8009314 <pbuf_remove_header+0x94>)
 8009292:	f240 224b 	movw	r2, #587	; 0x24b
 8009296:	4920      	ldr	r1, [pc, #128]	; (8009318 <pbuf_remove_header+0x98>)
 8009298:	4820      	ldr	r0, [pc, #128]	; (800931c <pbuf_remove_header+0x9c>)
 800929a:	f00a ff1b 	bl	80140d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <pbuf_remove_header+0x2c>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092aa:	d301      	bcc.n	80092b0 <pbuf_remove_header+0x30>
    return 1;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e02c      	b.n	800930a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <pbuf_remove_header+0x3a>
    return 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e027      	b.n	800930a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	895b      	ldrh	r3, [r3, #10]
 80092c2:	89fa      	ldrh	r2, [r7, #14]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d908      	bls.n	80092da <pbuf_remove_header+0x5a>
 80092c8:	4b12      	ldr	r3, [pc, #72]	; (8009314 <pbuf_remove_header+0x94>)
 80092ca:	f240 2255 	movw	r2, #597	; 0x255
 80092ce:	4914      	ldr	r1, [pc, #80]	; (8009320 <pbuf_remove_header+0xa0>)
 80092d0:	4812      	ldr	r0, [pc, #72]	; (800931c <pbuf_remove_header+0x9c>)
 80092d2:	f00a feff 	bl	80140d4 <iprintf>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e017      	b.n	800930a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	441a      	add	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	895a      	ldrh	r2, [r3, #10]
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	891a      	ldrh	r2, [r3, #8]
 80092fe:	89fb      	ldrh	r3, [r7, #14]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	08015684 	.word	0x08015684
 8009318:	080157e8 	.word	0x080157e8
 800931c:	080156e4 	.word	0x080156e4
 8009320:	080157f4 	.word	0x080157f4

08009324 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	807b      	strh	r3, [r7, #2]
 8009330:	4613      	mov	r3, r2
 8009332:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009338:	2b00      	cmp	r3, #0
 800933a:	da08      	bge.n	800934e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800933c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009340:	425b      	negs	r3, r3
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ff9b 	bl	8009280 <pbuf_remove_header>
 800934a:	4603      	mov	r3, r0
 800934c:	e007      	b.n	800935e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800934e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009352:	787a      	ldrb	r2, [r7, #1]
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff ff1a 	bl	8009190 <pbuf_add_header_impl>
 800935c:	4603      	mov	r3, r0
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009372:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009376:	2201      	movs	r2, #1
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff ffd2 	bl	8009324 <pbuf_header_impl>
 8009380:	4603      	mov	r3, r0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10b      	bne.n	80093b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <pbuf_free+0x22>
 80093a0:	4b3b      	ldr	r3, [pc, #236]	; (8009490 <pbuf_free+0x104>)
 80093a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80093a6:	493b      	ldr	r1, [pc, #236]	; (8009494 <pbuf_free+0x108>)
 80093a8:	483b      	ldr	r0, [pc, #236]	; (8009498 <pbuf_free+0x10c>)
 80093aa:	f00a fe93 	bl	80140d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e069      	b.n	8009486 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80093b6:	e062      	b.n	800947e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80093b8:	f00a fc96 	bl	8013ce8 <sys_arch_protect>
 80093bc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7b9b      	ldrb	r3, [r3, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d106      	bne.n	80093d4 <pbuf_free+0x48>
 80093c6:	4b32      	ldr	r3, [pc, #200]	; (8009490 <pbuf_free+0x104>)
 80093c8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80093cc:	4933      	ldr	r1, [pc, #204]	; (800949c <pbuf_free+0x110>)
 80093ce:	4832      	ldr	r0, [pc, #200]	; (8009498 <pbuf_free+0x10c>)
 80093d0:	f00a fe80 	bl	80140d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	7b9b      	ldrb	r3, [r3, #14]
 80093d8:	3b01      	subs	r3, #1
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	739a      	strb	r2, [r3, #14]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7b9b      	ldrb	r3, [r3, #14]
 80093e4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80093e6:	69b8      	ldr	r0, [r7, #24]
 80093e8:	f00a fc8c 	bl	8013d04 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d143      	bne.n	800947a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7b1b      	ldrb	r3, [r3, #12]
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7b5b      	ldrb	r3, [r3, #13]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d011      	beq.n	8009432 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <pbuf_free+0x9c>
 800941a:	4b1d      	ldr	r3, [pc, #116]	; (8009490 <pbuf_free+0x104>)
 800941c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009420:	491f      	ldr	r1, [pc, #124]	; (80094a0 <pbuf_free+0x114>)
 8009422:	481d      	ldr	r0, [pc, #116]	; (8009498 <pbuf_free+0x10c>)
 8009424:	f00a fe56 	bl	80140d4 <iprintf>
        pc->custom_free_function(p);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	4798      	blx	r3
 8009430:	e01d      	b.n	800946e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d104      	bne.n	8009442 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	200c      	movs	r0, #12
 800943c:	f7ff f8f6 	bl	800862c <memp_free>
 8009440:	e015      	b.n	800946e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d104      	bne.n	8009452 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	200b      	movs	r0, #11
 800944c:	f7ff f8ee 	bl	800862c <memp_free>
 8009450:	e00d      	b.n	800946e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <pbuf_free+0xd4>
          mem_free(p);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7fe fd33 	bl	8007ec4 <mem_free>
 800945e:	e006      	b.n	800946e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <pbuf_free+0x104>)
 8009462:	f240 320f 	movw	r2, #783	; 0x30f
 8009466:	490f      	ldr	r1, [pc, #60]	; (80094a4 <pbuf_free+0x118>)
 8009468:	480b      	ldr	r0, [pc, #44]	; (8009498 <pbuf_free+0x10c>)
 800946a:	f00a fe33 	bl	80140d4 <iprintf>
        }
      }
      count++;
 800946e:	7ffb      	ldrb	r3, [r7, #31]
 8009470:	3301      	adds	r3, #1
 8009472:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	607b      	str	r3, [r7, #4]
 8009478:	e001      	b.n	800947e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800947a:	2300      	movs	r3, #0
 800947c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d199      	bne.n	80093b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009484:	7ffb      	ldrb	r3, [r7, #31]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	08015684 	.word	0x08015684
 8009494:	080157e8 	.word	0x080157e8
 8009498:	080156e4 	.word	0x080156e4
 800949c:	08015814 	.word	0x08015814
 80094a0:	0801582c 	.word	0x0801582c
 80094a4:	08015850 	.word	0x08015850

080094a8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80094b4:	e005      	b.n	80094c2 <pbuf_clen+0x1a>
    ++len;
 80094b6:	89fb      	ldrh	r3, [r7, #14]
 80094b8:	3301      	adds	r3, #1
 80094ba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1f6      	bne.n	80094b6 <pbuf_clen+0xe>
  }
  return len;
 80094c8:	89fb      	ldrh	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
	...

080094d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d016      	beq.n	8009514 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80094e6:	f00a fbff 	bl	8013ce8 <sys_arch_protect>
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7b9b      	ldrb	r3, [r3, #14]
 80094f0:	3301      	adds	r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	739a      	strb	r2, [r3, #14]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f00a fc03 	bl	8013d04 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7b9b      	ldrb	r3, [r3, #14]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <pbuf_ref+0x3c>
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <pbuf_ref+0x44>)
 8009508:	f240 3242 	movw	r2, #834	; 0x342
 800950c:	4904      	ldr	r1, [pc, #16]	; (8009520 <pbuf_ref+0x48>)
 800950e:	4805      	ldr	r0, [pc, #20]	; (8009524 <pbuf_ref+0x4c>)
 8009510:	f00a fde0 	bl	80140d4 <iprintf>
  }
}
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	08015684 	.word	0x08015684
 8009520:	08015864 	.word	0x08015864
 8009524:	080156e4 	.word	0x080156e4

08009528 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <pbuf_cat+0x16>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d107      	bne.n	800954e <pbuf_cat+0x26>
 800953e:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <pbuf_cat+0x98>)
 8009540:	f240 3259 	movw	r2, #857	; 0x359
 8009544:	491f      	ldr	r1, [pc, #124]	; (80095c4 <pbuf_cat+0x9c>)
 8009546:	4820      	ldr	r0, [pc, #128]	; (80095c8 <pbuf_cat+0xa0>)
 8009548:	f00a fdc4 	bl	80140d4 <iprintf>
 800954c:	e034      	b.n	80095b8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e00a      	b.n	800956a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	891a      	ldrh	r2, [r3, #8]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	891b      	ldrh	r3, [r3, #8]
 800955c:	4413      	add	r3, r2
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f0      	bne.n	8009554 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	891a      	ldrh	r2, [r3, #8]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	895b      	ldrh	r3, [r3, #10]
 800957a:	429a      	cmp	r2, r3
 800957c:	d006      	beq.n	800958c <pbuf_cat+0x64>
 800957e:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <pbuf_cat+0x98>)
 8009580:	f240 3262 	movw	r2, #866	; 0x362
 8009584:	4911      	ldr	r1, [pc, #68]	; (80095cc <pbuf_cat+0xa4>)
 8009586:	4810      	ldr	r0, [pc, #64]	; (80095c8 <pbuf_cat+0xa0>)
 8009588:	f00a fda4 	bl	80140d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <pbuf_cat+0x7a>
 8009594:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <pbuf_cat+0x98>)
 8009596:	f240 3263 	movw	r2, #867	; 0x363
 800959a:	490d      	ldr	r1, [pc, #52]	; (80095d0 <pbuf_cat+0xa8>)
 800959c:	480a      	ldr	r0, [pc, #40]	; (80095c8 <pbuf_cat+0xa0>)
 800959e:	f00a fd99 	bl	80140d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	891a      	ldrh	r2, [r3, #8]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	891b      	ldrh	r3, [r3, #8]
 80095aa:	4413      	add	r3, r2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	08015684 	.word	0x08015684
 80095c4:	08015878 	.word	0x08015878
 80095c8:	080156e4 	.word	0x080156e4
 80095cc:	080158b0 	.word	0x080158b0
 80095d0:	080158e0 	.word	0x080158e0

080095d4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ffa1 	bl	8009528 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80095e6:	6838      	ldr	r0, [r7, #0]
 80095e8:	f7ff ff76 	bl	80094d8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	2300      	movs	r3, #0
 8009604:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d008      	beq.n	800961e <pbuf_copy+0x2a>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <pbuf_copy+0x2a>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	891a      	ldrh	r2, [r3, #8]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	891b      	ldrh	r3, [r3, #8]
 800961a:	429a      	cmp	r2, r3
 800961c:	d209      	bcs.n	8009632 <pbuf_copy+0x3e>
 800961e:	4b57      	ldr	r3, [pc, #348]	; (800977c <pbuf_copy+0x188>)
 8009620:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009624:	4956      	ldr	r1, [pc, #344]	; (8009780 <pbuf_copy+0x18c>)
 8009626:	4857      	ldr	r0, [pc, #348]	; (8009784 <pbuf_copy+0x190>)
 8009628:	f00a fd54 	bl	80140d4 <iprintf>
 800962c:	f06f 030f 	mvn.w	r3, #15
 8009630:	e09f      	b.n	8009772 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	895b      	ldrh	r3, [r3, #10]
 8009636:	461a      	mov	r2, r3
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	1ad2      	subs	r2, r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	895b      	ldrh	r3, [r3, #10]
 8009640:	4619      	mov	r1, r3
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	1acb      	subs	r3, r1, r3
 8009646:	429a      	cmp	r2, r3
 8009648:	d306      	bcc.n	8009658 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	895b      	ldrh	r3, [r3, #10]
 800964e:	461a      	mov	r2, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e005      	b.n	8009664 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	895b      	ldrh	r3, [r3, #10]
 800965c:	461a      	mov	r2, r3
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	18d0      	adds	r0, r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	4413      	add	r3, r2
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4619      	mov	r1, r3
 8009678:	f00a fc81 	bl	8013f7e <memcpy>
    offset_to += len;
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	895b      	ldrh	r3, [r3, #10]
 8009690:	461a      	mov	r2, r3
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4293      	cmp	r3, r2
 8009696:	d906      	bls.n	80096a6 <pbuf_copy+0xb2>
 8009698:	4b38      	ldr	r3, [pc, #224]	; (800977c <pbuf_copy+0x188>)
 800969a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800969e:	493a      	ldr	r1, [pc, #232]	; (8009788 <pbuf_copy+0x194>)
 80096a0:	4838      	ldr	r0, [pc, #224]	; (8009784 <pbuf_copy+0x190>)
 80096a2:	f00a fd17 	bl	80140d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	895b      	ldrh	r3, [r3, #10]
 80096aa:	461a      	mov	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d906      	bls.n	80096c0 <pbuf_copy+0xcc>
 80096b2:	4b32      	ldr	r3, [pc, #200]	; (800977c <pbuf_copy+0x188>)
 80096b4:	f240 32da 	movw	r2, #986	; 0x3da
 80096b8:	4934      	ldr	r1, [pc, #208]	; (800978c <pbuf_copy+0x198>)
 80096ba:	4832      	ldr	r0, [pc, #200]	; (8009784 <pbuf_copy+0x190>)
 80096bc:	f00a fd0a 	bl	80140d4 <iprintf>
    if (offset_from >= p_from->len) {
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	895b      	ldrh	r3, [r3, #10]
 80096c4:	461a      	mov	r2, r3
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d304      	bcc.n	80096d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	895b      	ldrh	r3, [r3, #10]
 80096da:	461a      	mov	r2, r3
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	4293      	cmp	r3, r2
 80096e0:	d114      	bne.n	800970c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10c      	bne.n	800970c <pbuf_copy+0x118>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d009      	beq.n	800970c <pbuf_copy+0x118>
 80096f8:	4b20      	ldr	r3, [pc, #128]	; (800977c <pbuf_copy+0x188>)
 80096fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80096fe:	4924      	ldr	r1, [pc, #144]	; (8009790 <pbuf_copy+0x19c>)
 8009700:	4820      	ldr	r0, [pc, #128]	; (8009784 <pbuf_copy+0x190>)
 8009702:	f00a fce7 	bl	80140d4 <iprintf>
 8009706:	f06f 030f 	mvn.w	r3, #15
 800970a:	e032      	b.n	8009772 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d013      	beq.n	800973a <pbuf_copy+0x146>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	895a      	ldrh	r2, [r3, #10]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	891b      	ldrh	r3, [r3, #8]
 800971a:	429a      	cmp	r2, r3
 800971c:	d10d      	bne.n	800973a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <pbuf_copy+0x146>
 8009726:	4b15      	ldr	r3, [pc, #84]	; (800977c <pbuf_copy+0x188>)
 8009728:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800972c:	4919      	ldr	r1, [pc, #100]	; (8009794 <pbuf_copy+0x1a0>)
 800972e:	4815      	ldr	r0, [pc, #84]	; (8009784 <pbuf_copy+0x190>)
 8009730:	f00a fcd0 	bl	80140d4 <iprintf>
 8009734:	f06f 0305 	mvn.w	r3, #5
 8009738:	e01b      	b.n	8009772 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d013      	beq.n	8009768 <pbuf_copy+0x174>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	895a      	ldrh	r2, [r3, #10]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	891b      	ldrh	r3, [r3, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	d10d      	bne.n	8009768 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d009      	beq.n	8009768 <pbuf_copy+0x174>
 8009754:	4b09      	ldr	r3, [pc, #36]	; (800977c <pbuf_copy+0x188>)
 8009756:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800975a:	490e      	ldr	r1, [pc, #56]	; (8009794 <pbuf_copy+0x1a0>)
 800975c:	4809      	ldr	r0, [pc, #36]	; (8009784 <pbuf_copy+0x190>)
 800975e:	f00a fcb9 	bl	80140d4 <iprintf>
 8009762:	f06f 0305 	mvn.w	r3, #5
 8009766:	e004      	b.n	8009772 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f47f af61 	bne.w	8009632 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	08015684 	.word	0x08015684
 8009780:	0801592c 	.word	0x0801592c
 8009784:	080156e4 	.word	0x080156e4
 8009788:	0801595c 	.word	0x0801595c
 800978c:	08015974 	.word	0x08015974
 8009790:	08015990 	.word	0x08015990
 8009794:	080159a0 	.word	0x080159a0

08009798 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4611      	mov	r1, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	460b      	mov	r3, r1
 80097a8:	80fb      	strh	r3, [r7, #6]
 80097aa:	4613      	mov	r3, r2
 80097ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d108      	bne.n	80097ce <pbuf_copy_partial+0x36>
 80097bc:	4b2b      	ldr	r3, [pc, #172]	; (800986c <pbuf_copy_partial+0xd4>)
 80097be:	f240 420a 	movw	r2, #1034	; 0x40a
 80097c2:	492b      	ldr	r1, [pc, #172]	; (8009870 <pbuf_copy_partial+0xd8>)
 80097c4:	482b      	ldr	r0, [pc, #172]	; (8009874 <pbuf_copy_partial+0xdc>)
 80097c6:	f00a fc85 	bl	80140d4 <iprintf>
 80097ca:	2300      	movs	r3, #0
 80097cc:	e04a      	b.n	8009864 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d108      	bne.n	80097e6 <pbuf_copy_partial+0x4e>
 80097d4:	4b25      	ldr	r3, [pc, #148]	; (800986c <pbuf_copy_partial+0xd4>)
 80097d6:	f240 420b 	movw	r2, #1035	; 0x40b
 80097da:	4927      	ldr	r1, [pc, #156]	; (8009878 <pbuf_copy_partial+0xe0>)
 80097dc:	4825      	ldr	r0, [pc, #148]	; (8009874 <pbuf_copy_partial+0xdc>)
 80097de:	f00a fc79 	bl	80140d4 <iprintf>
 80097e2:	2300      	movs	r3, #0
 80097e4:	e03e      	b.n	8009864 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	e034      	b.n	8009856 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80097ec:	88bb      	ldrh	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <pbuf_copy_partial+0x70>
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	895b      	ldrh	r3, [r3, #10]
 80097f6:	88ba      	ldrh	r2, [r7, #4]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d305      	bcc.n	8009808 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	895b      	ldrh	r3, [r3, #10]
 8009800:	88ba      	ldrh	r2, [r7, #4]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	80bb      	strh	r3, [r7, #4]
 8009806:	e023      	b.n	8009850 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	895a      	ldrh	r2, [r3, #10]
 800980c:	88bb      	ldrh	r3, [r7, #4]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009812:	8b3a      	ldrh	r2, [r7, #24]
 8009814:	88fb      	ldrh	r3, [r7, #6]
 8009816:	429a      	cmp	r2, r3
 8009818:	d901      	bls.n	800981e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800981a:	88fb      	ldrh	r3, [r7, #6]
 800981c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800981e:	8b7b      	ldrh	r3, [r7, #26]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	18d0      	adds	r0, r2, r3
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	88bb      	ldrh	r3, [r7, #4]
 800982a:	4413      	add	r3, r2
 800982c:	8b3a      	ldrh	r2, [r7, #24]
 800982e:	4619      	mov	r1, r3
 8009830:	f00a fba5 	bl	8013f7e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009834:	8afa      	ldrh	r2, [r7, #22]
 8009836:	8b3b      	ldrh	r3, [r7, #24]
 8009838:	4413      	add	r3, r2
 800983a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800983c:	8b7a      	ldrh	r2, [r7, #26]
 800983e:	8b3b      	ldrh	r3, [r7, #24]
 8009840:	4413      	add	r3, r2
 8009842:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009844:	88fa      	ldrh	r2, [r7, #6]
 8009846:	8b3b      	ldrh	r3, [r7, #24]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	61fb      	str	r3, [r7, #28]
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <pbuf_copy_partial+0xca>
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1c4      	bne.n	80097ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009862:	8afb      	ldrh	r3, [r7, #22]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	08015684 	.word	0x08015684
 8009870:	080159cc 	.word	0x080159cc
 8009874:	080156e4 	.word	0x080156e4
 8009878:	080159ec 	.word	0x080159ec

0800987c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	603a      	str	r2, [r7, #0]
 8009886:	71fb      	strb	r3, [r7, #7]
 8009888:	460b      	mov	r3, r1
 800988a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	8919      	ldrh	r1, [r3, #8]
 8009890:	88ba      	ldrh	r2, [r7, #4]
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff fa95 	bl	8008dc4 <pbuf_alloc>
 800989a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <pbuf_clone+0x2a>
    return NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e011      	b.n	80098ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7ff fea3 	bl	80095f4 <pbuf_copy>
 80098ae:	4603      	mov	r3, r0
 80098b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80098b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d006      	beq.n	80098c8 <pbuf_clone+0x4c>
 80098ba:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <pbuf_clone+0x58>)
 80098bc:	f240 5224 	movw	r2, #1316	; 0x524
 80098c0:	4905      	ldr	r1, [pc, #20]	; (80098d8 <pbuf_clone+0x5c>)
 80098c2:	4806      	ldr	r0, [pc, #24]	; (80098dc <pbuf_clone+0x60>)
 80098c4:	f00a fc06 	bl	80140d4 <iprintf>
  return q;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	08015684 	.word	0x08015684
 80098d8:	08015af8 	.word	0x08015af8
 80098dc:	080156e4 	.word	0x080156e4

080098e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80098e4:	f00a fc0e 	bl	8014104 <rand>
 80098e8:	4603      	mov	r3, r0
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	4b01      	ldr	r3, [pc, #4]	; (8009900 <tcp_init+0x20>)
 80098fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80098fc:	bf00      	nop
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000024 	.word	0x20000024

08009904 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	7d1b      	ldrb	r3, [r3, #20]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d105      	bne.n	8009920 <tcp_free+0x1c>
 8009914:	4b06      	ldr	r3, [pc, #24]	; (8009930 <tcp_free+0x2c>)
 8009916:	22d4      	movs	r2, #212	; 0xd4
 8009918:	4906      	ldr	r1, [pc, #24]	; (8009934 <tcp_free+0x30>)
 800991a:	4807      	ldr	r0, [pc, #28]	; (8009938 <tcp_free+0x34>)
 800991c:	f00a fbda 	bl	80140d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	2001      	movs	r0, #1
 8009924:	f7fe fe82 	bl	800862c <memp_free>
}
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	08015b84 	.word	0x08015b84
 8009934:	08015bb4 	.word	0x08015bb4
 8009938:	08015bc8 	.word	0x08015bc8

0800993c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	7d1b      	ldrb	r3, [r3, #20]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d105      	bne.n	8009958 <tcp_free_listen+0x1c>
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <tcp_free_listen+0x2c>)
 800994e:	22df      	movs	r2, #223	; 0xdf
 8009950:	4906      	ldr	r1, [pc, #24]	; (800996c <tcp_free_listen+0x30>)
 8009952:	4807      	ldr	r0, [pc, #28]	; (8009970 <tcp_free_listen+0x34>)
 8009954:	f00a fbbe 	bl	80140d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	2002      	movs	r0, #2
 800995c:	f7fe fe66 	bl	800862c <memp_free>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	08015b84 	.word	0x08015b84
 800996c:	08015bf0 	.word	0x08015bf0
 8009970:	08015bc8 	.word	0x08015bc8

08009974 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009978:	f000 fea2 	bl	800a6c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800997c:	4b07      	ldr	r3, [pc, #28]	; (800999c <tcp_tmr+0x28>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	3301      	adds	r3, #1
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <tcp_tmr+0x28>)
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <tcp_tmr+0x28>)
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009994:	f000 fb54 	bl	800a040 <tcp_slowtmr>
  }
}
 8009998:	bf00      	nop
 800999a:	bd80      	pop	{r7, pc}
 800999c:	2001090d 	.word	0x2001090d

080099a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d105      	bne.n	80099bc <tcp_remove_listener+0x1c>
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <tcp_remove_listener+0x48>)
 80099b2:	22ff      	movs	r2, #255	; 0xff
 80099b4:	490d      	ldr	r1, [pc, #52]	; (80099ec <tcp_remove_listener+0x4c>)
 80099b6:	480e      	ldr	r0, [pc, #56]	; (80099f0 <tcp_remove_listener+0x50>)
 80099b8:	f00a fb8c 	bl	80140d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	e00a      	b.n	80099d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d102      	bne.n	80099d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1f1      	bne.n	80099c2 <tcp_remove_listener+0x22>
    }
  }
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	08015b84 	.word	0x08015b84
 80099ec:	08015c0c 	.word	0x08015c0c
 80099f0:	08015bc8 	.word	0x08015bc8

080099f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d106      	bne.n	8009a10 <tcp_listen_closed+0x1c>
 8009a02:	4b14      	ldr	r3, [pc, #80]	; (8009a54 <tcp_listen_closed+0x60>)
 8009a04:	f240 1211 	movw	r2, #273	; 0x111
 8009a08:	4913      	ldr	r1, [pc, #76]	; (8009a58 <tcp_listen_closed+0x64>)
 8009a0a:	4814      	ldr	r0, [pc, #80]	; (8009a5c <tcp_listen_closed+0x68>)
 8009a0c:	f00a fb62 	bl	80140d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	7d1b      	ldrb	r3, [r3, #20]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d006      	beq.n	8009a26 <tcp_listen_closed+0x32>
 8009a18:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <tcp_listen_closed+0x60>)
 8009a1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009a1e:	4910      	ldr	r1, [pc, #64]	; (8009a60 <tcp_listen_closed+0x6c>)
 8009a20:	480e      	ldr	r0, [pc, #56]	; (8009a5c <tcp_listen_closed+0x68>)
 8009a22:	f00a fb57 	bl	80140d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009a26:	2301      	movs	r3, #1
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e00b      	b.n	8009a44 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009a2c:	4a0d      	ldr	r2, [pc, #52]	; (8009a64 <tcp_listen_closed+0x70>)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff ffb1 	bl	80099a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d9f0      	bls.n	8009a2c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	08015b84 	.word	0x08015b84
 8009a58:	08015c34 	.word	0x08015c34
 8009a5c:	08015bc8 	.word	0x08015bc8
 8009a60:	08015c40 	.word	0x08015c40
 8009a64:	08017f44 	.word	0x08017f44

08009a68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009a68:	b5b0      	push	{r4, r5, r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af04      	add	r7, sp, #16
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d106      	bne.n	8009a88 <tcp_close_shutdown+0x20>
 8009a7a:	4b63      	ldr	r3, [pc, #396]	; (8009c08 <tcp_close_shutdown+0x1a0>)
 8009a7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009a80:	4962      	ldr	r1, [pc, #392]	; (8009c0c <tcp_close_shutdown+0x1a4>)
 8009a82:	4863      	ldr	r0, [pc, #396]	; (8009c10 <tcp_close_shutdown+0x1a8>)
 8009a84:	f00a fb26 	bl	80140d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d066      	beq.n	8009b5c <tcp_close_shutdown+0xf4>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7d1b      	ldrb	r3, [r3, #20]
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d003      	beq.n	8009a9e <tcp_close_shutdown+0x36>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7d1b      	ldrb	r3, [r3, #20]
 8009a9a:	2b07      	cmp	r3, #7
 8009a9c:	d15e      	bne.n	8009b5c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d104      	bne.n	8009ab0 <tcp_close_shutdown+0x48>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009aae:	d055      	beq.n	8009b5c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8b5b      	ldrh	r3, [r3, #26]
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <tcp_close_shutdown+0x62>
 8009abc:	4b52      	ldr	r3, [pc, #328]	; (8009c08 <tcp_close_shutdown+0x1a0>)
 8009abe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009ac2:	4954      	ldr	r1, [pc, #336]	; (8009c14 <tcp_close_shutdown+0x1ac>)
 8009ac4:	4852      	ldr	r0, [pc, #328]	; (8009c10 <tcp_close_shutdown+0x1a8>)
 8009ac6:	f00a fb05 	bl	80140d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009ad2:	687d      	ldr	r5, [r7, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	8ad2      	ldrh	r2, [r2, #22]
 8009adc:	6879      	ldr	r1, [r7, #4]
 8009ade:	8b09      	ldrh	r1, [r1, #24]
 8009ae0:	9102      	str	r1, [sp, #8]
 8009ae2:	9201      	str	r2, [sp, #4]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	462b      	mov	r3, r5
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4601      	mov	r1, r0
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f004 fe91 	bl	800e814 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 f8c6 	bl	800ac84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009af8:	4b47      	ldr	r3, [pc, #284]	; (8009c18 <tcp_close_shutdown+0x1b0>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d105      	bne.n	8009b0e <tcp_close_shutdown+0xa6>
 8009b02:	4b45      	ldr	r3, [pc, #276]	; (8009c18 <tcp_close_shutdown+0x1b0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	4a43      	ldr	r2, [pc, #268]	; (8009c18 <tcp_close_shutdown+0x1b0>)
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e013      	b.n	8009b36 <tcp_close_shutdown+0xce>
 8009b0e:	4b42      	ldr	r3, [pc, #264]	; (8009c18 <tcp_close_shutdown+0x1b0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e00c      	b.n	8009b30 <tcp_close_shutdown+0xc8>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d104      	bne.n	8009b2a <tcp_close_shutdown+0xc2>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	60da      	str	r2, [r3, #12]
 8009b28:	e005      	b.n	8009b36 <tcp_close_shutdown+0xce>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1ef      	bne.n	8009b16 <tcp_close_shutdown+0xae>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	60da      	str	r2, [r3, #12]
 8009b3c:	4b37      	ldr	r3, [pc, #220]	; (8009c1c <tcp_close_shutdown+0x1b4>)
 8009b3e:	2201      	movs	r2, #1
 8009b40:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009b42:	4b37      	ldr	r3, [pc, #220]	; (8009c20 <tcp_close_shutdown+0x1b8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d102      	bne.n	8009b52 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009b4c:	f003 fd5e 	bl	800d60c <tcp_trigger_input_pcb_close>
 8009b50:	e002      	b.n	8009b58 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fed6 	bl	8009904 <tcp_free>
      }
      return ERR_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e050      	b.n	8009bfe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	7d1b      	ldrb	r3, [r3, #20]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d03b      	beq.n	8009bdc <tcp_close_shutdown+0x174>
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	dc44      	bgt.n	8009bf2 <tcp_close_shutdown+0x18a>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <tcp_close_shutdown+0x10a>
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d02a      	beq.n	8009bc6 <tcp_close_shutdown+0x15e>
 8009b70:	e03f      	b.n	8009bf2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	8adb      	ldrh	r3, [r3, #22]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d021      	beq.n	8009bbe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b7a:	4b2a      	ldr	r3, [pc, #168]	; (8009c24 <tcp_close_shutdown+0x1bc>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d105      	bne.n	8009b90 <tcp_close_shutdown+0x128>
 8009b84:	4b27      	ldr	r3, [pc, #156]	; (8009c24 <tcp_close_shutdown+0x1bc>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	4a26      	ldr	r2, [pc, #152]	; (8009c24 <tcp_close_shutdown+0x1bc>)
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	e013      	b.n	8009bb8 <tcp_close_shutdown+0x150>
 8009b90:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <tcp_close_shutdown+0x1bc>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60bb      	str	r3, [r7, #8]
 8009b96:	e00c      	b.n	8009bb2 <tcp_close_shutdown+0x14a>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d104      	bne.n	8009bac <tcp_close_shutdown+0x144>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	60da      	str	r2, [r3, #12]
 8009baa:	e005      	b.n	8009bb8 <tcp_close_shutdown+0x150>
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	60bb      	str	r3, [r7, #8]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1ef      	bne.n	8009b98 <tcp_close_shutdown+0x130>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff fea0 	bl	8009904 <tcp_free>
      break;
 8009bc4:	e01a      	b.n	8009bfc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff ff14 	bl	80099f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4816      	ldr	r0, [pc, #88]	; (8009c28 <tcp_close_shutdown+0x1c0>)
 8009bd0:	f001 f8a8 	bl	800ad24 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff feb1 	bl	800993c <tcp_free_listen>
      break;
 8009bda:	e00f      	b.n	8009bfc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	480e      	ldr	r0, [pc, #56]	; (8009c18 <tcp_close_shutdown+0x1b0>)
 8009be0:	f001 f8a0 	bl	800ad24 <tcp_pcb_remove>
 8009be4:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <tcp_close_shutdown+0x1b4>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff fe8a 	bl	8009904 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009bf0:	e004      	b.n	8009bfc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f81a 	bl	8009c2c <tcp_close_shutdown_fin>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	e000      	b.n	8009bfe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bdb0      	pop	{r4, r5, r7, pc}
 8009c06:	bf00      	nop
 8009c08:	08015b84 	.word	0x08015b84
 8009c0c:	08015c58 	.word	0x08015c58
 8009c10:	08015bc8 	.word	0x08015bc8
 8009c14:	08015c78 	.word	0x08015c78
 8009c18:	20010904 	.word	0x20010904
 8009c1c:	2001090c 	.word	0x2001090c
 8009c20:	20010944 	.word	0x20010944
 8009c24:	200108fc 	.word	0x200108fc
 8009c28:	20010900 	.word	0x20010900

08009c2c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <tcp_close_shutdown_fin+0x1c>
 8009c3a:	4b2e      	ldr	r3, [pc, #184]	; (8009cf4 <tcp_close_shutdown_fin+0xc8>)
 8009c3c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009c40:	492d      	ldr	r1, [pc, #180]	; (8009cf8 <tcp_close_shutdown_fin+0xcc>)
 8009c42:	482e      	ldr	r0, [pc, #184]	; (8009cfc <tcp_close_shutdown_fin+0xd0>)
 8009c44:	f00a fa46 	bl	80140d4 <iprintf>

  switch (pcb->state) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	7d1b      	ldrb	r3, [r3, #20]
 8009c4c:	2b07      	cmp	r3, #7
 8009c4e:	d020      	beq.n	8009c92 <tcp_close_shutdown_fin+0x66>
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	dc2b      	bgt.n	8009cac <tcp_close_shutdown_fin+0x80>
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d002      	beq.n	8009c5e <tcp_close_shutdown_fin+0x32>
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d00d      	beq.n	8009c78 <tcp_close_shutdown_fin+0x4c>
 8009c5c:	e026      	b.n	8009cac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f003 fee6 	bl	800da30 <tcp_send_fin>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11f      	bne.n	8009cb0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2205      	movs	r2, #5
 8009c74:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c76:	e01b      	b.n	8009cb0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f003 fed9 	bl	800da30 <tcp_send_fin>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d114      	bne.n	8009cb4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2205      	movs	r2, #5
 8009c8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c90:	e010      	b.n	8009cb4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f003 fecc 	bl	800da30 <tcp_send_fin>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2209      	movs	r2, #9
 8009ca8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009caa:	e005      	b.n	8009cb8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	e01c      	b.n	8009cea <tcp_close_shutdown_fin+0xbe>
      break;
 8009cb0:	bf00      	nop
 8009cb2:	e002      	b.n	8009cba <tcp_close_shutdown_fin+0x8e>
      break;
 8009cb4:	bf00      	nop
 8009cb6:	e000      	b.n	8009cba <tcp_close_shutdown_fin+0x8e>
      break;
 8009cb8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d103      	bne.n	8009cca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f003 fff2 	bl	800dcac <tcp_output>
 8009cc8:	e00d      	b.n	8009ce6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d108      	bne.n	8009ce6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8b5b      	ldrh	r3, [r3, #26]
 8009cd8:	f043 0308 	orr.w	r3, r3, #8
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e001      	b.n	8009cea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	08015b84 	.word	0x08015b84
 8009cf8:	08015c34 	.word	0x08015c34
 8009cfc:	08015bc8 	.word	0x08015bc8

08009d00 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <tcp_close+0x22>
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <tcp_close+0x4c>)
 8009d10:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009d14:	490e      	ldr	r1, [pc, #56]	; (8009d50 <tcp_close+0x50>)
 8009d16:	480f      	ldr	r0, [pc, #60]	; (8009d54 <tcp_close+0x54>)
 8009d18:	f00a f9dc 	bl	80140d4 <iprintf>
 8009d1c:	f06f 030f 	mvn.w	r3, #15
 8009d20:	e00f      	b.n	8009d42 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	7d1b      	ldrb	r3, [r3, #20]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d006      	beq.n	8009d38 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8b5b      	ldrh	r3, [r3, #26]
 8009d2e:	f043 0310 	orr.w	r3, r3, #16
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009d38:	2101      	movs	r1, #1
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fe94 	bl	8009a68 <tcp_close_shutdown>
 8009d40:	4603      	mov	r3, r0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	08015b84 	.word	0x08015b84
 8009d50:	08015c94 	.word	0x08015c94
 8009d54:	08015bc8 	.word	0x08015bc8

08009d58 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af04      	add	r7, sp, #16
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d107      	bne.n	8009d78 <tcp_abandon+0x20>
 8009d68:	4b52      	ldr	r3, [pc, #328]	; (8009eb4 <tcp_abandon+0x15c>)
 8009d6a:	f240 223d 	movw	r2, #573	; 0x23d
 8009d6e:	4952      	ldr	r1, [pc, #328]	; (8009eb8 <tcp_abandon+0x160>)
 8009d70:	4852      	ldr	r0, [pc, #328]	; (8009ebc <tcp_abandon+0x164>)
 8009d72:	f00a f9af 	bl	80140d4 <iprintf>
 8009d76:	e099      	b.n	8009eac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	7d1b      	ldrb	r3, [r3, #20]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d106      	bne.n	8009d8e <tcp_abandon+0x36>
 8009d80:	4b4c      	ldr	r3, [pc, #304]	; (8009eb4 <tcp_abandon+0x15c>)
 8009d82:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009d86:	494e      	ldr	r1, [pc, #312]	; (8009ec0 <tcp_abandon+0x168>)
 8009d88:	484c      	ldr	r0, [pc, #304]	; (8009ebc <tcp_abandon+0x164>)
 8009d8a:	f00a f9a3 	bl	80140d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7d1b      	ldrb	r3, [r3, #20]
 8009d92:	2b0a      	cmp	r3, #10
 8009d94:	d107      	bne.n	8009da6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	484a      	ldr	r0, [pc, #296]	; (8009ec4 <tcp_abandon+0x16c>)
 8009d9a:	f000 ffc3 	bl	800ad24 <tcp_pcb_remove>
    tcp_free(pcb);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fdb0 	bl	8009904 <tcp_free>
 8009da4:	e082      	b.n	8009eac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7d1b      	ldrb	r3, [r3, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d126      	bne.n	8009e1e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8adb      	ldrh	r3, [r3, #22]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d02e      	beq.n	8009e36 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009dd8:	4b3b      	ldr	r3, [pc, #236]	; (8009ec8 <tcp_abandon+0x170>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d105      	bne.n	8009dee <tcp_abandon+0x96>
 8009de2:	4b39      	ldr	r3, [pc, #228]	; (8009ec8 <tcp_abandon+0x170>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4a37      	ldr	r2, [pc, #220]	; (8009ec8 <tcp_abandon+0x170>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	e013      	b.n	8009e16 <tcp_abandon+0xbe>
 8009dee:	4b36      	ldr	r3, [pc, #216]	; (8009ec8 <tcp_abandon+0x170>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	61fb      	str	r3, [r7, #28]
 8009df4:	e00c      	b.n	8009e10 <tcp_abandon+0xb8>
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d104      	bne.n	8009e0a <tcp_abandon+0xb2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e005      	b.n	8009e16 <tcp_abandon+0xbe>
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	61fb      	str	r3, [r7, #28]
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1ef      	bne.n	8009df6 <tcp_abandon+0x9e>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	60da      	str	r2, [r3, #12]
 8009e1c:	e00b      	b.n	8009e36 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	8adb      	ldrh	r3, [r3, #22]
 8009e26:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	4828      	ldr	r0, [pc, #160]	; (8009ecc <tcp_abandon+0x174>)
 8009e2c:	f000 ff7a 	bl	800ad24 <tcp_pcb_remove>
 8009e30:	4b27      	ldr	r3, [pc, #156]	; (8009ed0 <tcp_abandon+0x178>)
 8009e32:	2201      	movs	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 fd1c 	bl	800a880 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fd13 	bl	800a880 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 fd0a 	bl	800a880 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00e      	beq.n	8009e90 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3304      	adds	r3, #4
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	8b12      	ldrh	r2, [r2, #24]
 8009e7c:	9202      	str	r2, [sp, #8]
 8009e7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e80:	9201      	str	r2, [sp, #4]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	460b      	mov	r3, r1
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	69b9      	ldr	r1, [r7, #24]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f004 fcc2 	bl	800e814 <tcp_rst>
    }
    last_state = pcb->state;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff fd34 	bl	8009904 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d004      	beq.n	8009eac <tcp_abandon+0x154>
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f06f 010c 	mvn.w	r1, #12
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	4798      	blx	r3
  }
}
 8009eac:	3728      	adds	r7, #40	; 0x28
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	08015b84 	.word	0x08015b84
 8009eb8:	08015cc8 	.word	0x08015cc8
 8009ebc:	08015bc8 	.word	0x08015bc8
 8009ec0:	08015ce4 	.word	0x08015ce4
 8009ec4:	20010908 	.word	0x20010908
 8009ec8:	200108fc 	.word	0x200108fc
 8009ecc:	20010904 	.word	0x20010904
 8009ed0:	2001090c 	.word	0x2001090c

08009ed4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009edc:	2101      	movs	r1, #1
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff ff3a 	bl	8009d58 <tcp_abandon>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d106      	bne.n	8009f08 <tcp_update_rcv_ann_wnd+0x1c>
 8009efa:	4b25      	ldr	r3, [pc, #148]	; (8009f90 <tcp_update_rcv_ann_wnd+0xa4>)
 8009efc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009f00:	4924      	ldr	r1, [pc, #144]	; (8009f94 <tcp_update_rcv_ann_wnd+0xa8>)
 8009f02:	4825      	ldr	r0, [pc, #148]	; (8009f98 <tcp_update_rcv_ann_wnd+0xac>)
 8009f04:	f00a f8e6 	bl	80140d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009f10:	4413      	add	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009f1c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009f20:	bf28      	it	cs
 8009f22:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009f26:	b292      	uxth	r2, r2
 8009f28:	4413      	add	r3, r2
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	db08      	blt.n	8009f44 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	e020      	b.n	8009f86 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dd03      	ble.n	8009f5a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f58:	e014      	b.n	8009f84 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f6c:	d306      	bcc.n	8009f7c <tcp_update_rcv_ann_wnd+0x90>
 8009f6e:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <tcp_update_rcv_ann_wnd+0xa4>)
 8009f70:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f74:	4909      	ldr	r1, [pc, #36]	; (8009f9c <tcp_update_rcv_ann_wnd+0xb0>)
 8009f76:	4808      	ldr	r0, [pc, #32]	; (8009f98 <tcp_update_rcv_ann_wnd+0xac>)
 8009f78:	f00a f8ac 	bl	80140d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009f84:	2300      	movs	r3, #0
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	08015b84 	.word	0x08015b84
 8009f94:	08015de0 	.word	0x08015de0
 8009f98:	08015bc8 	.word	0x08015bc8
 8009f9c:	08015e04 	.word	0x08015e04

08009fa0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d107      	bne.n	8009fc2 <tcp_recved+0x22>
 8009fb2:	4b1f      	ldr	r3, [pc, #124]	; (800a030 <tcp_recved+0x90>)
 8009fb4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009fb8:	491e      	ldr	r1, [pc, #120]	; (800a034 <tcp_recved+0x94>)
 8009fba:	481f      	ldr	r0, [pc, #124]	; (800a038 <tcp_recved+0x98>)
 8009fbc:	f00a f88a 	bl	80140d4 <iprintf>
 8009fc0:	e032      	b.n	800a028 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7d1b      	ldrb	r3, [r3, #20]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d106      	bne.n	8009fd8 <tcp_recved+0x38>
 8009fca:	4b19      	ldr	r3, [pc, #100]	; (800a030 <tcp_recved+0x90>)
 8009fcc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009fd0:	491a      	ldr	r1, [pc, #104]	; (800a03c <tcp_recved+0x9c>)
 8009fd2:	4819      	ldr	r0, [pc, #100]	; (800a038 <tcp_recved+0x98>)
 8009fd4:	f00a f87e 	bl	80140d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fdc:	887b      	ldrh	r3, [r7, #2]
 8009fde:	4413      	add	r3, r2
 8009fe0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009fe2:	89fb      	ldrh	r3, [r7, #14]
 8009fe4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009fe8:	d804      	bhi.n	8009ff4 <tcp_recved+0x54>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fee:	89fa      	ldrh	r2, [r7, #14]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d204      	bcs.n	8009ffe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009ffa:	851a      	strh	r2, [r3, #40]	; 0x28
 8009ffc:	e002      	b.n	800a004 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	89fa      	ldrh	r2, [r7, #14]
 800a002:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff71 	bl	8009eec <tcp_update_rcv_ann_wnd>
 800a00a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a012:	d309      	bcc.n	800a028 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	8b5b      	ldrh	r3, [r3, #26]
 800a018:	f043 0302 	orr.w	r3, r3, #2
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f003 fe42 	bl	800dcac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	08015b84 	.word	0x08015b84
 800a034:	08015e20 	.word	0x08015e20
 800a038:	08015bc8 	.word	0x08015bc8
 800a03c:	08015e38 	.word	0x08015e38

0800a040 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a040:	b5b0      	push	{r4, r5, r7, lr}
 800a042:	b090      	sub	sp, #64	; 0x40
 800a044:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a04c:	4b94      	ldr	r3, [pc, #592]	; (800a2a0 <tcp_slowtmr+0x260>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	4a93      	ldr	r2, [pc, #588]	; (800a2a0 <tcp_slowtmr+0x260>)
 800a054:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a056:	4b93      	ldr	r3, [pc, #588]	; (800a2a4 <tcp_slowtmr+0x264>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	3301      	adds	r3, #1
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4b91      	ldr	r3, [pc, #580]	; (800a2a4 <tcp_slowtmr+0x264>)
 800a060:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a066:	4b90      	ldr	r3, [pc, #576]	; (800a2a8 <tcp_slowtmr+0x268>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a06c:	e29f      	b.n	800a5ae <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	7d1b      	ldrb	r3, [r3, #20]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <tcp_slowtmr+0x44>
 800a076:	4b8d      	ldr	r3, [pc, #564]	; (800a2ac <tcp_slowtmr+0x26c>)
 800a078:	f240 42be 	movw	r2, #1214	; 0x4be
 800a07c:	498c      	ldr	r1, [pc, #560]	; (800a2b0 <tcp_slowtmr+0x270>)
 800a07e:	488d      	ldr	r0, [pc, #564]	; (800a2b4 <tcp_slowtmr+0x274>)
 800a080:	f00a f828 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	7d1b      	ldrb	r3, [r3, #20]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d106      	bne.n	800a09a <tcp_slowtmr+0x5a>
 800a08c:	4b87      	ldr	r3, [pc, #540]	; (800a2ac <tcp_slowtmr+0x26c>)
 800a08e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a092:	4989      	ldr	r1, [pc, #548]	; (800a2b8 <tcp_slowtmr+0x278>)
 800a094:	4887      	ldr	r0, [pc, #540]	; (800a2b4 <tcp_slowtmr+0x274>)
 800a096:	f00a f81d 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	7d1b      	ldrb	r3, [r3, #20]
 800a09e:	2b0a      	cmp	r3, #10
 800a0a0:	d106      	bne.n	800a0b0 <tcp_slowtmr+0x70>
 800a0a2:	4b82      	ldr	r3, [pc, #520]	; (800a2ac <tcp_slowtmr+0x26c>)
 800a0a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a0a8:	4984      	ldr	r1, [pc, #528]	; (800a2bc <tcp_slowtmr+0x27c>)
 800a0aa:	4882      	ldr	r0, [pc, #520]	; (800a2b4 <tcp_slowtmr+0x274>)
 800a0ac:	f00a f812 	bl	80140d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	7f9a      	ldrb	r2, [r3, #30]
 800a0b4:	4b7b      	ldr	r3, [pc, #492]	; (800a2a4 <tcp_slowtmr+0x264>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d105      	bne.n	800a0c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a0c6:	e272      	b.n	800a5ae <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a0c8:	4b76      	ldr	r3, [pc, #472]	; (800a2a4 <tcp_slowtmr+0x264>)
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	7d1b      	ldrb	r3, [r3, #20]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d10a      	bne.n	800a0fa <tcp_slowtmr+0xba>
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	d905      	bls.n	800a0fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0f8:	e11e      	b.n	800a338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a100:	2b0b      	cmp	r3, #11
 800a102:	d905      	bls.n	800a110 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a108:	3301      	adds	r3, #1
 800a10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a10e:	e113      	b.n	800a338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a116:	2b00      	cmp	r3, #0
 800a118:	d075      	beq.n	800a206 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <tcp_slowtmr+0xf0>
 800a122:	4b62      	ldr	r3, [pc, #392]	; (800a2ac <tcp_slowtmr+0x26c>)
 800a124:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a128:	4965      	ldr	r1, [pc, #404]	; (800a2c0 <tcp_slowtmr+0x280>)
 800a12a:	4862      	ldr	r0, [pc, #392]	; (800a2b4 <tcp_slowtmr+0x274>)
 800a12c:	f009 ffd2 	bl	80140d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <tcp_slowtmr+0x106>
 800a138:	4b5c      	ldr	r3, [pc, #368]	; (800a2ac <tcp_slowtmr+0x26c>)
 800a13a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a13e:	4961      	ldr	r1, [pc, #388]	; (800a2c4 <tcp_slowtmr+0x284>)
 800a140:	485c      	ldr	r0, [pc, #368]	; (800a2b4 <tcp_slowtmr+0x274>)
 800a142:	f009 ffc7 	bl	80140d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a14c:	2b0b      	cmp	r3, #11
 800a14e:	d905      	bls.n	800a15c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a154:	3301      	adds	r3, #1
 800a156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a15a:	e0ed      	b.n	800a338 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a162:	3b01      	subs	r3, #1
 800a164:	4a58      	ldr	r2, [pc, #352]	; (800a2c8 <tcp_slowtmr+0x288>)
 800a166:	5cd3      	ldrb	r3, [r2, r3]
 800a168:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a170:	7c7a      	ldrb	r2, [r7, #17]
 800a172:	429a      	cmp	r2, r3
 800a174:	d907      	bls.n	800a186 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a17c:	3301      	adds	r3, #1
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a18c:	7c7a      	ldrb	r2, [r7, #17]
 800a18e:	429a      	cmp	r2, r3
 800a190:	f200 80d2 	bhi.w	800a338 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a194:	2301      	movs	r3, #1
 800a196:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d108      	bne.n	800a1b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1a4:	f004 fc2a 	bl	800e9fc <tcp_zero_window_probe>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d014      	beq.n	800a1d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	623b      	str	r3, [r7, #32]
 800a1b2:	e011      	b.n	800a1d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1be:	f003 faef 	bl	800d7a0 <tcp_split_unsent_seg>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d107      	bne.n	800a1d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a1c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ca:	f003 fd6f 	bl	800dcac <tcp_output>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 80ac 	beq.w	800a338 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1ee:	2b06      	cmp	r3, #6
 800a1f0:	f200 80a2 	bhi.w	800a338 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a204:	e098      	b.n	800a338 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	db0f      	blt.n	800a230 <tcp_slowtmr+0x1f0>
 800a210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a212:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a216:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d008      	beq.n	800a230 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a224:	b29b      	uxth	r3, r3
 800a226:	3301      	adds	r3, #1
 800a228:	b29b      	uxth	r3, r3
 800a22a:	b21a      	sxth	r2, r3
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a238:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a23c:	429a      	cmp	r2, r3
 800a23e:	db7b      	blt.n	800a338 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a242:	f004 f825 	bl	800e290 <tcp_rexmit_rto_prepare>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <tcp_slowtmr+0x21c>
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a250:	2b00      	cmp	r3, #0
 800a252:	d171      	bne.n	800a338 <tcp_slowtmr+0x2f8>
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d06d      	beq.n	800a338 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	7d1b      	ldrb	r3, [r3, #20]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d03a      	beq.n	800a2da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a26a:	2b0c      	cmp	r3, #12
 800a26c:	bf28      	it	cs
 800a26e:	230c      	movcs	r3, #12
 800a270:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a278:	10db      	asrs	r3, r3, #3
 800a27a:	b21b      	sxth	r3, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a284:	4413      	add	r3, r2
 800a286:	7efa      	ldrb	r2, [r7, #27]
 800a288:	4910      	ldr	r1, [pc, #64]	; (800a2cc <tcp_slowtmr+0x28c>)
 800a28a:	5c8a      	ldrb	r2, [r1, r2]
 800a28c:	4093      	lsls	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a296:	4293      	cmp	r3, r2
 800a298:	dc1a      	bgt.n	800a2d0 <tcp_slowtmr+0x290>
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	b21a      	sxth	r2, r3
 800a29e:	e019      	b.n	800a2d4 <tcp_slowtmr+0x294>
 800a2a0:	200108f8 	.word	0x200108f8
 800a2a4:	2001090e 	.word	0x2001090e
 800a2a8:	20010904 	.word	0x20010904
 800a2ac:	08015b84 	.word	0x08015b84
 800a2b0:	08015ec8 	.word	0x08015ec8
 800a2b4:	08015bc8 	.word	0x08015bc8
 800a2b8:	08015ef4 	.word	0x08015ef4
 800a2bc:	08015f20 	.word	0x08015f20
 800a2c0:	08015f50 	.word	0x08015f50
 800a2c4:	08015f84 	.word	0x08015f84
 800a2c8:	08017f3c 	.word	0x08017f3c
 800a2cc:	08017f2c 	.word	0x08017f2c
 800a2d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	2200      	movs	r2, #0
 800a2de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	bf28      	it	cs
 800a2f0:	4613      	movcs	r3, r2
 800a2f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a2f4:	8a7b      	ldrh	r3, [r7, #18]
 800a2f6:	085b      	lsrs	r3, r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	429a      	cmp	r2, r3
 800a310:	d206      	bcs.n	800a320 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	b29a      	uxth	r2, r3
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	2200      	movs	r2, #0
 800a32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a334:	f004 f81c 	bl	800e370 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	7d1b      	ldrb	r3, [r3, #20]
 800a33c:	2b06      	cmp	r3, #6
 800a33e:	d111      	bne.n	800a364 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	8b5b      	ldrh	r3, [r3, #26]
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a34c:	4b9d      	ldr	r3, [pc, #628]	; (800a5c4 <tcp_slowtmr+0x584>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b28      	cmp	r3, #40	; 0x28
 800a358:	d904      	bls.n	800a364 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a35e:	3301      	adds	r3, #1
 800a360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	7a5b      	ldrb	r3, [r3, #9]
 800a368:	f003 0308 	and.w	r3, r3, #8
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d04c      	beq.n	800a40a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a374:	2b04      	cmp	r3, #4
 800a376:	d003      	beq.n	800a380 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a37c:	2b07      	cmp	r3, #7
 800a37e:	d144      	bne.n	800a40a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a380:	4b90      	ldr	r3, [pc, #576]	; (800a5c4 <tcp_slowtmr+0x584>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a390:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a394:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a398:	498b      	ldr	r1, [pc, #556]	; (800a5c8 <tcp_slowtmr+0x588>)
 800a39a:	fba1 1303 	umull	r1, r3, r1, r3
 800a39e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d90a      	bls.n	800a3ba <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a3b8:	e027      	b.n	800a40a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3ba:	4b82      	ldr	r3, [pc, #520]	; (800a5c4 <tcp_slowtmr+0x584>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	4b7e      	ldr	r3, [pc, #504]	; (800a5cc <tcp_slowtmr+0x58c>)
 800a3d4:	fb00 f303 	mul.w	r3, r0, r3
 800a3d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a3da:	497b      	ldr	r1, [pc, #492]	; (800a5c8 <tcp_slowtmr+0x588>)
 800a3dc:	fba1 1303 	umull	r1, r3, r1, r3
 800a3e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d911      	bls.n	800a40a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a3e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3e8:	f004 fac8 	bl	800e97c <tcp_keepalive>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a3f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d107      	bne.n	800a40a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a400:	3301      	adds	r3, #1
 800a402:	b2da      	uxtb	r2, r3
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d011      	beq.n	800a436 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a412:	4b6c      	ldr	r3, [pc, #432]	; (800a5c4 <tcp_slowtmr+0x584>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	1ad2      	subs	r2, r2, r3
 800a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a422:	4619      	mov	r1, r3
 800a424:	460b      	mov	r3, r1
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	440b      	add	r3, r1
 800a42a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d302      	bcc.n	800a436 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a432:	f000 fddb 	bl	800afec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	7d1b      	ldrb	r3, [r3, #20]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d10b      	bne.n	800a456 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a43e:	4b61      	ldr	r3, [pc, #388]	; (800a5c4 <tcp_slowtmr+0x584>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b28      	cmp	r3, #40	; 0x28
 800a44a:	d904      	bls.n	800a456 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a450:	3301      	adds	r3, #1
 800a452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	7d1b      	ldrb	r3, [r3, #20]
 800a45a:	2b09      	cmp	r3, #9
 800a45c:	d10b      	bne.n	800a476 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a45e:	4b59      	ldr	r3, [pc, #356]	; (800a5c4 <tcp_slowtmr+0x584>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2bf0      	cmp	r3, #240	; 0xf0
 800a46a:	d904      	bls.n	800a476 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a470:	3301      	adds	r3, #1
 800a472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d060      	beq.n	800a540 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a484:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a488:	f000 fbfc 	bl	800ac84 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d010      	beq.n	800a4b4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a492:	4b4f      	ldr	r3, [pc, #316]	; (800a5d0 <tcp_slowtmr+0x590>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a498:	429a      	cmp	r2, r3
 800a49a:	d106      	bne.n	800a4aa <tcp_slowtmr+0x46a>
 800a49c:	4b4d      	ldr	r3, [pc, #308]	; (800a5d4 <tcp_slowtmr+0x594>)
 800a49e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a4a2:	494d      	ldr	r1, [pc, #308]	; (800a5d8 <tcp_slowtmr+0x598>)
 800a4a4:	484d      	ldr	r0, [pc, #308]	; (800a5dc <tcp_slowtmr+0x59c>)
 800a4a6:	f009 fe15 	bl	80140d4 <iprintf>
        prev->next = pcb->next;
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	60da      	str	r2, [r3, #12]
 800a4b2:	e00f      	b.n	800a4d4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a4b4:	4b46      	ldr	r3, [pc, #280]	; (800a5d0 <tcp_slowtmr+0x590>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d006      	beq.n	800a4cc <tcp_slowtmr+0x48c>
 800a4be:	4b45      	ldr	r3, [pc, #276]	; (800a5d4 <tcp_slowtmr+0x594>)
 800a4c0:	f240 5271 	movw	r2, #1393	; 0x571
 800a4c4:	4946      	ldr	r1, [pc, #280]	; (800a5e0 <tcp_slowtmr+0x5a0>)
 800a4c6:	4845      	ldr	r0, [pc, #276]	; (800a5dc <tcp_slowtmr+0x59c>)
 800a4c8:	f009 fe04 	bl	80140d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	4a3f      	ldr	r2, [pc, #252]	; (800a5d0 <tcp_slowtmr+0x590>)
 800a4d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a4d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d013      	beq.n	800a504 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a4e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ec:	8ad2      	ldrh	r2, [r2, #22]
 800a4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f0:	8b09      	ldrh	r1, [r1, #24]
 800a4f2:	9102      	str	r1, [sp, #8]
 800a4f4:	9201      	str	r2, [sp, #4]
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	462b      	mov	r3, r5
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a500:	f004 f988 	bl	800e814 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a512:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a51a:	6838      	ldr	r0, [r7, #0]
 800a51c:	f7ff f9f2 	bl	8009904 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a520:	4b30      	ldr	r3, [pc, #192]	; (800a5e4 <tcp_slowtmr+0x5a4>)
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d004      	beq.n	800a536 <tcp_slowtmr+0x4f6>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f06f 010c 	mvn.w	r1, #12
 800a532:	68b8      	ldr	r0, [r7, #8]
 800a534:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a536:	4b2b      	ldr	r3, [pc, #172]	; (800a5e4 <tcp_slowtmr+0x5a4>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d037      	beq.n	800a5ae <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a53e:	e590      	b.n	800a062 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54c:	7f1b      	ldrb	r3, [r3, #28]
 800a54e:	3301      	adds	r3, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	7f1a      	ldrb	r2, [r3, #28]
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	7f5b      	ldrb	r3, [r3, #29]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d325      	bcc.n	800a5ae <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	2200      	movs	r2, #0
 800a566:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a568:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <tcp_slowtmr+0x5a4>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00b      	beq.n	800a590 <tcp_slowtmr+0x550>
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a57e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a580:	6912      	ldr	r2, [r2, #16]
 800a582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a584:	4610      	mov	r0, r2
 800a586:	4798      	blx	r3
 800a588:	4603      	mov	r3, r0
 800a58a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a58e:	e002      	b.n	800a596 <tcp_slowtmr+0x556>
 800a590:	2300      	movs	r3, #0
 800a592:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a596:	4b13      	ldr	r3, [pc, #76]	; (800a5e4 <tcp_slowtmr+0x5a4>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d000      	beq.n	800a5a0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a59e:	e560      	b.n	800a062 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a5a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5aa:	f003 fb7f 	bl	800dcac <tcp_output>
  while (pcb != NULL) {
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f47f ad5c 	bne.w	800a06e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <tcp_slowtmr+0x5a8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a5c0:	e067      	b.n	800a692 <tcp_slowtmr+0x652>
 800a5c2:	bf00      	nop
 800a5c4:	200108f8 	.word	0x200108f8
 800a5c8:	10624dd3 	.word	0x10624dd3
 800a5cc:	000124f8 	.word	0x000124f8
 800a5d0:	20010904 	.word	0x20010904
 800a5d4:	08015b84 	.word	0x08015b84
 800a5d8:	08015fbc 	.word	0x08015fbc
 800a5dc:	08015bc8 	.word	0x08015bc8
 800a5e0:	08015fe8 	.word	0x08015fe8
 800a5e4:	2001090c 	.word	0x2001090c
 800a5e8:	20010908 	.word	0x20010908
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	7d1b      	ldrb	r3, [r3, #20]
 800a5f0:	2b0a      	cmp	r3, #10
 800a5f2:	d006      	beq.n	800a602 <tcp_slowtmr+0x5c2>
 800a5f4:	4b2b      	ldr	r3, [pc, #172]	; (800a6a4 <tcp_slowtmr+0x664>)
 800a5f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a5fa:	492b      	ldr	r1, [pc, #172]	; (800a6a8 <tcp_slowtmr+0x668>)
 800a5fc:	482b      	ldr	r0, [pc, #172]	; (800a6ac <tcp_slowtmr+0x66c>)
 800a5fe:	f009 fd69 	bl	80140d4 <iprintf>
    pcb_remove = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a608:	4b29      	ldr	r3, [pc, #164]	; (800a6b0 <tcp_slowtmr+0x670>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2bf0      	cmp	r3, #240	; 0xf0
 800a614:	d904      	bls.n	800a620 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a61a:	3301      	adds	r3, #1
 800a61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a624:	2b00      	cmp	r3, #0
 800a626:	d02f      	beq.n	800a688 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a62a:	f000 fb2b 	bl	800ac84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	2b00      	cmp	r3, #0
 800a632:	d010      	beq.n	800a656 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a634:	4b1f      	ldr	r3, [pc, #124]	; (800a6b4 <tcp_slowtmr+0x674>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d106      	bne.n	800a64c <tcp_slowtmr+0x60c>
 800a63e:	4b19      	ldr	r3, [pc, #100]	; (800a6a4 <tcp_slowtmr+0x664>)
 800a640:	f240 52af 	movw	r2, #1455	; 0x5af
 800a644:	491c      	ldr	r1, [pc, #112]	; (800a6b8 <tcp_slowtmr+0x678>)
 800a646:	4819      	ldr	r0, [pc, #100]	; (800a6ac <tcp_slowtmr+0x66c>)
 800a648:	f009 fd44 	bl	80140d4 <iprintf>
        prev->next = pcb->next;
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	e00f      	b.n	800a676 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a656:	4b17      	ldr	r3, [pc, #92]	; (800a6b4 <tcp_slowtmr+0x674>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d006      	beq.n	800a66e <tcp_slowtmr+0x62e>
 800a660:	4b10      	ldr	r3, [pc, #64]	; (800a6a4 <tcp_slowtmr+0x664>)
 800a662:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a666:	4915      	ldr	r1, [pc, #84]	; (800a6bc <tcp_slowtmr+0x67c>)
 800a668:	4810      	ldr	r0, [pc, #64]	; (800a6ac <tcp_slowtmr+0x66c>)
 800a66a:	f009 fd33 	bl	80140d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	4a10      	ldr	r2, [pc, #64]	; (800a6b4 <tcp_slowtmr+0x674>)
 800a674:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a680:	69f8      	ldr	r0, [r7, #28]
 800a682:	f7ff f93f 	bl	8009904 <tcp_free>
 800a686:	e004      	b.n	800a692 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1a9      	bne.n	800a5ec <tcp_slowtmr+0x5ac>
    }
  }
}
 800a698:	bf00      	nop
 800a69a:	bf00      	nop
 800a69c:	3730      	adds	r7, #48	; 0x30
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	08015b84 	.word	0x08015b84
 800a6a8:	08016014 	.word	0x08016014
 800a6ac:	08015bc8 	.word	0x08015bc8
 800a6b0:	200108f8 	.word	0x200108f8
 800a6b4:	20010908 	.word	0x20010908
 800a6b8:	08016044 	.word	0x08016044
 800a6bc:	0801606c 	.word	0x0801606c

0800a6c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a6c6:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <tcp_fasttmr+0xbc>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	4b2b      	ldr	r3, [pc, #172]	; (800a77c <tcp_fasttmr+0xbc>)
 800a6d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a6d2:	4b2b      	ldr	r3, [pc, #172]	; (800a780 <tcp_fasttmr+0xc0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a6d8:	e048      	b.n	800a76c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	7f9a      	ldrb	r2, [r3, #30]
 800a6de:	4b27      	ldr	r3, [pc, #156]	; (800a77c <tcp_fasttmr+0xbc>)
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d03f      	beq.n	800a766 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a6e6:	4b25      	ldr	r3, [pc, #148]	; (800a77c <tcp_fasttmr+0xbc>)
 800a6e8:	781a      	ldrb	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	8b5b      	ldrh	r3, [r3, #26]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d010      	beq.n	800a71c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8b5b      	ldrh	r3, [r3, #26]
 800a6fe:	f043 0302 	orr.w	r3, r3, #2
 800a702:	b29a      	uxth	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f003 facf 	bl	800dcac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	8b5b      	ldrh	r3, [r3, #26]
 800a712:	f023 0303 	bic.w	r3, r3, #3
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	8b5b      	ldrh	r3, [r3, #26]
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	8b5b      	ldrh	r3, [r3, #26]
 800a72c:	f023 0308 	bic.w	r3, r3, #8
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff fa78 	bl	8009c2c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00a      	beq.n	800a760 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a74a:	4b0e      	ldr	r3, [pc, #56]	; (800a784 <tcp_fasttmr+0xc4>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f819 	bl	800a788 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a756:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <tcp_fasttmr+0xc4>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d000      	beq.n	800a760 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a75e:	e7b8      	b.n	800a6d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	607b      	str	r3, [r7, #4]
 800a764:	e002      	b.n	800a76c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1b3      	bne.n	800a6da <tcp_fasttmr+0x1a>
    }
  }
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	2001090e 	.word	0x2001090e
 800a780:	20010904 	.word	0x20010904
 800a784:	2001090c 	.word	0x2001090c

0800a788 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a788:	b590      	push	{r4, r7, lr}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <tcp_process_refused_data+0x22>
 800a796:	4b37      	ldr	r3, [pc, #220]	; (800a874 <tcp_process_refused_data+0xec>)
 800a798:	f240 6209 	movw	r2, #1545	; 0x609
 800a79c:	4936      	ldr	r1, [pc, #216]	; (800a878 <tcp_process_refused_data+0xf0>)
 800a79e:	4837      	ldr	r0, [pc, #220]	; (800a87c <tcp_process_refused_data+0xf4>)
 800a7a0:	f009 fc98 	bl	80140d4 <iprintf>
 800a7a4:	f06f 030f 	mvn.w	r3, #15
 800a7a8:	e060      	b.n	800a86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ae:	7b5b      	ldrb	r3, [r3, #13]
 800a7b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <tcp_process_refused_data+0x58>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6918      	ldr	r0, [r3, #16]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	47a0      	blx	r4
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73fb      	strb	r3, [r7, #15]
 800a7de:	e007      	b.n	800a7f0 <tcp_process_refused_data+0x68>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	f000 f8a4 	bl	800a934 <tcp_recv_null>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d12a      	bne.n	800a84e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	f003 0320 	and.w	r3, r3, #32
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d033      	beq.n	800a86a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a806:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a80a:	d005      	beq.n	800a818 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a810:	3301      	adds	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00b      	beq.n	800a83a <tcp_process_refused_data+0xb2>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6918      	ldr	r0, [r3, #16]
 800a82c:	2300      	movs	r3, #0
 800a82e:	2200      	movs	r2, #0
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	47a0      	blx	r4
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
 800a838:	e001      	b.n	800a83e <tcp_process_refused_data+0xb6>
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a842:	f113 0f0d 	cmn.w	r3, #13
 800a846:	d110      	bne.n	800a86a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a848:	f06f 030c 	mvn.w	r3, #12
 800a84c:	e00e      	b.n	800a86c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a852:	f113 0f0d 	cmn.w	r3, #13
 800a856:	d102      	bne.n	800a85e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a858:	f06f 030c 	mvn.w	r3, #12
 800a85c:	e006      	b.n	800a86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a864:	f06f 0304 	mvn.w	r3, #4
 800a868:	e000      	b.n	800a86c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	bd90      	pop	{r4, r7, pc}
 800a874:	08015b84 	.word	0x08015b84
 800a878:	08016094 	.word	0x08016094
 800a87c:	08015bc8 	.word	0x08015bc8

0800a880 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a888:	e007      	b.n	800a89a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f80a 	bl	800a8aa <tcp_seg_free>
    seg = next;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1f4      	bne.n	800a88a <tcp_segs_free+0xa>
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00c      	beq.n	800a8d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fd61 	bl	800938c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	2003      	movs	r0, #3
 800a8ce:	f7fd fead 	bl	800862c <memp_free>
  }
}
 800a8d2:	bf00      	nop
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <tcp_seg_copy+0x1c>
 800a8ea:	4b0f      	ldr	r3, [pc, #60]	; (800a928 <tcp_seg_copy+0x4c>)
 800a8ec:	f240 6282 	movw	r2, #1666	; 0x682
 800a8f0:	490e      	ldr	r1, [pc, #56]	; (800a92c <tcp_seg_copy+0x50>)
 800a8f2:	480f      	ldr	r0, [pc, #60]	; (800a930 <tcp_seg_copy+0x54>)
 800a8f4:	f009 fbee 	bl	80140d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a8f8:	2003      	movs	r0, #3
 800a8fa:	f7fd fe21 	bl	8008540 <memp_malloc>
 800a8fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <tcp_seg_copy+0x2e>
    return NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	e00a      	b.n	800a920 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a90a:	2210      	movs	r2, #16
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f009 fb35 	bl	8013f7e <memcpy>
  pbuf_ref(cseg->p);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fe fddd 	bl	80094d8 <pbuf_ref>
  return cseg;
 800a91e:	68fb      	ldr	r3, [r7, #12]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08015b84 	.word	0x08015b84
 800a92c:	080160d8 	.word	0x080160d8
 800a930:	08015bc8 	.word	0x08015bc8

0800a934 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <tcp_recv_null+0x28>
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <tcp_recv_null+0x60>)
 800a94a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a94e:	4912      	ldr	r1, [pc, #72]	; (800a998 <tcp_recv_null+0x64>)
 800a950:	4812      	ldr	r0, [pc, #72]	; (800a99c <tcp_recv_null+0x68>)
 800a952:	f009 fbbf 	bl	80140d4 <iprintf>
 800a956:	f06f 030f 	mvn.w	r3, #15
 800a95a:	e016      	b.n	800a98a <tcp_recv_null+0x56>

  if (p != NULL) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	891b      	ldrh	r3, [r3, #8]
 800a966:	4619      	mov	r1, r3
 800a968:	68b8      	ldr	r0, [r7, #8]
 800a96a:	f7ff fb19 	bl	8009fa0 <tcp_recved>
    pbuf_free(p);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fe fd0c 	bl	800938c <pbuf_free>
 800a974:	e008      	b.n	800a988 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a97e:	68b8      	ldr	r0, [r7, #8]
 800a980:	f7ff f9be 	bl	8009d00 <tcp_close>
 800a984:	4603      	mov	r3, r0
 800a986:	e000      	b.n	800a98a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	08015b84 	.word	0x08015b84
 800a998:	080160f4 	.word	0x080160f4
 800a99c:	08015bc8 	.word	0x08015bc8

0800a9a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	db01      	blt.n	800a9b6 <tcp_kill_prio+0x16>
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	e000      	b.n	800a9b8 <tcp_kill_prio+0x18>
 800a9b6:	237f      	movs	r3, #127	; 0x7f
 800a9b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a9ba:	7afb      	ldrb	r3, [r7, #11]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d034      	beq.n	800aa2a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a9c0:	7afb      	ldrb	r3, [r7, #11]
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9ce:	4b19      	ldr	r3, [pc, #100]	; (800aa34 <tcp_kill_prio+0x94>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	e01f      	b.n	800aa16 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	7d5b      	ldrb	r3, [r3, #21]
 800a9da:	7afa      	ldrb	r2, [r7, #11]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d80c      	bhi.n	800a9fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a9e4:	7afa      	ldrb	r2, [r7, #11]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d112      	bne.n	800aa10 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9ea:	4b13      	ldr	r3, [pc, #76]	; (800aa38 <tcp_kill_prio+0x98>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d80a      	bhi.n	800aa10 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <tcp_kill_prio+0x98>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	7d5b      	ldrb	r3, [r3, #21]
 800aa0e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1dc      	bne.n	800a9d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d004      	beq.n	800aa2c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800aa22:	6938      	ldr	r0, [r7, #16]
 800aa24:	f7ff fa56 	bl	8009ed4 <tcp_abort>
 800aa28:	e000      	b.n	800aa2c <tcp_kill_prio+0x8c>
    return;
 800aa2a:	bf00      	nop
  }
}
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20010904 	.word	0x20010904
 800aa38:	200108f8 	.word	0x200108f8

0800aa3c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	2b08      	cmp	r3, #8
 800aa4a:	d009      	beq.n	800aa60 <tcp_kill_state+0x24>
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	2b09      	cmp	r3, #9
 800aa50:	d006      	beq.n	800aa60 <tcp_kill_state+0x24>
 800aa52:	4b1a      	ldr	r3, [pc, #104]	; (800aabc <tcp_kill_state+0x80>)
 800aa54:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800aa58:	4919      	ldr	r1, [pc, #100]	; (800aac0 <tcp_kill_state+0x84>)
 800aa5a:	481a      	ldr	r0, [pc, #104]	; (800aac4 <tcp_kill_state+0x88>)
 800aa5c:	f009 fb3a 	bl	80140d4 <iprintf>

  inactivity = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800aa64:	2300      	movs	r3, #0
 800aa66:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa68:	4b17      	ldr	r3, [pc, #92]	; (800aac8 <tcp_kill_state+0x8c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	617b      	str	r3, [r7, #20]
 800aa6e:	e017      	b.n	800aaa0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	7d1b      	ldrb	r3, [r3, #20]
 800aa74:	79fa      	ldrb	r2, [r7, #7]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d10f      	bne.n	800aa9a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aa7a:	4b14      	ldr	r3, [pc, #80]	; (800aacc <tcp_kill_state+0x90>)
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d807      	bhi.n	800aa9a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aa8a:	4b10      	ldr	r3, [pc, #64]	; (800aacc <tcp_kill_state+0x90>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	617b      	str	r3, [r7, #20]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e4      	bne.n	800aa70 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aaac:	2100      	movs	r1, #0
 800aaae:	6938      	ldr	r0, [r7, #16]
 800aab0:	f7ff f952 	bl	8009d58 <tcp_abandon>
  }
}
 800aab4:	bf00      	nop
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	08015b84 	.word	0x08015b84
 800aac0:	08016110 	.word	0x08016110
 800aac4:	08015bc8 	.word	0x08015bc8
 800aac8:	20010904 	.word	0x20010904
 800aacc:	200108f8 	.word	0x200108f8

0800aad0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aade:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <tcp_kill_timewait+0x58>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e012      	b.n	800ab0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aae6:	4b11      	ldr	r3, [pc, #68]	; (800ab2c <tcp_kill_timewait+0x5c>)
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d807      	bhi.n	800ab06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800aaf6:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <tcp_kill_timewait+0x5c>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1e9      	bne.n	800aae6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ab18:	68b8      	ldr	r0, [r7, #8]
 800ab1a:	f7ff f9db 	bl	8009ed4 <tcp_abort>
  }
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20010908 	.word	0x20010908
 800ab2c:	200108f8 	.word	0x200108f8

0800ab30 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <tcp_handle_closepend+0x48>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ab3c:	e014      	b.n	800ab68 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	8b5b      	ldrh	r3, [r3, #26]
 800ab48:	f003 0308 	and.w	r3, r3, #8
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8b5b      	ldrh	r3, [r3, #26]
 800ab54:	f023 0308 	bic.w	r3, r3, #8
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff f864 	bl	8009c2c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e7      	bne.n	800ab3e <tcp_handle_closepend+0xe>
  }
}
 800ab6e:	bf00      	nop
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20010904 	.word	0x20010904

0800ab7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab86:	2001      	movs	r0, #1
 800ab88:	f7fd fcda 	bl	8008540 <memp_malloc>
 800ab8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d126      	bne.n	800abe2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ab94:	f7ff ffcc 	bl	800ab30 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ab98:	f7ff ff9a 	bl	800aad0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	f7fd fccf 	bl	8008540 <memp_malloc>
 800aba2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d11b      	bne.n	800abe2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800abaa:	2009      	movs	r0, #9
 800abac:	f7ff ff46 	bl	800aa3c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abb0:	2001      	movs	r0, #1
 800abb2:	f7fd fcc5 	bl	8008540 <memp_malloc>
 800abb6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d111      	bne.n	800abe2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800abbe:	2008      	movs	r0, #8
 800abc0:	f7ff ff3c 	bl	800aa3c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abc4:	2001      	movs	r0, #1
 800abc6:	f7fd fcbb 	bl	8008540 <memp_malloc>
 800abca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d107      	bne.n	800abe2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fee3 	bl	800a9a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abda:	2001      	movs	r0, #1
 800abdc:	f7fd fcb0 	bl	8008540 <memp_malloc>
 800abe0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d03f      	beq.n	800ac68 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800abe8:	229c      	movs	r2, #156	; 0x9c
 800abea:	2100      	movs	r1, #0
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f009 f9d4 	bl	8013f9a <memset>
    pcb->prio = prio;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	79fa      	ldrb	r2, [r7, #7]
 800abf6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800abfe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ac08:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	22ff      	movs	r2, #255	; 0xff
 800ac16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ac1e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2206      	movs	r2, #6
 800ac24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2206      	movs	r2, #6
 800ac2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac34:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <tcp_alloc+0xf8>)
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ac46:	4b0c      	ldr	r3, [pc, #48]	; (800ac78 <tcp_alloc+0xfc>)
 800ac48:	781a      	ldrb	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ac54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <tcp_alloc+0x100>)
 800ac5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4a07      	ldr	r2, [pc, #28]	; (800ac80 <tcp_alloc+0x104>)
 800ac64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ac68:	68fb      	ldr	r3, [r7, #12]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200108f8 	.word	0x200108f8
 800ac78:	2001090e 	.word	0x2001090e
 800ac7c:	0800a935 	.word	0x0800a935
 800ac80:	006ddd00 	.word	0x006ddd00

0800ac84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d107      	bne.n	800aca2 <tcp_pcb_purge+0x1e>
 800ac92:	4b21      	ldr	r3, [pc, #132]	; (800ad18 <tcp_pcb_purge+0x94>)
 800ac94:	f640 0251 	movw	r2, #2129	; 0x851
 800ac98:	4920      	ldr	r1, [pc, #128]	; (800ad1c <tcp_pcb_purge+0x98>)
 800ac9a:	4821      	ldr	r0, [pc, #132]	; (800ad20 <tcp_pcb_purge+0x9c>)
 800ac9c:	f009 fa1a 	bl	80140d4 <iprintf>
 800aca0:	e037      	b.n	800ad12 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	7d1b      	ldrb	r3, [r3, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d033      	beq.n	800ad12 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800acae:	2b0a      	cmp	r3, #10
 800acb0:	d02f      	beq.n	800ad12 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d02b      	beq.n	800ad12 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fb60 	bl	800938c <pbuf_free>
      pcb->refused_data = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f986 	bl	800afec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ace6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff fdc7 	bl	800a880 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff fdc2 	bl	800a880 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	66da      	str	r2, [r3, #108]	; 0x6c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	08015b84 	.word	0x08015b84
 800ad1c:	080161d0 	.word	0x080161d0
 800ad20:	08015bc8 	.word	0x08015bc8

0800ad24 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <tcp_pcb_remove+0x1e>
 800ad34:	4b3e      	ldr	r3, [pc, #248]	; (800ae30 <tcp_pcb_remove+0x10c>)
 800ad36:	f640 0283 	movw	r2, #2179	; 0x883
 800ad3a:	493e      	ldr	r1, [pc, #248]	; (800ae34 <tcp_pcb_remove+0x110>)
 800ad3c:	483e      	ldr	r0, [pc, #248]	; (800ae38 <tcp_pcb_remove+0x114>)
 800ad3e:	f009 f9c9 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <tcp_pcb_remove+0x32>
 800ad48:	4b39      	ldr	r3, [pc, #228]	; (800ae30 <tcp_pcb_remove+0x10c>)
 800ad4a:	f640 0284 	movw	r2, #2180	; 0x884
 800ad4e:	493b      	ldr	r1, [pc, #236]	; (800ae3c <tcp_pcb_remove+0x118>)
 800ad50:	4839      	ldr	r0, [pc, #228]	; (800ae38 <tcp_pcb_remove+0x114>)
 800ad52:	f009 f9bf 	bl	80140d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d105      	bne.n	800ad6c <tcp_pcb_remove+0x48>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	e013      	b.n	800ad94 <tcp_pcb_remove+0x70>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	e00c      	b.n	800ad8e <tcp_pcb_remove+0x6a>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d104      	bne.n	800ad88 <tcp_pcb_remove+0x64>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	60da      	str	r2, [r3, #12]
 800ad86:	e005      	b.n	800ad94 <tcp_pcb_remove+0x70>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1ef      	bne.n	800ad74 <tcp_pcb_remove+0x50>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2200      	movs	r2, #0
 800ad98:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ad9a:	6838      	ldr	r0, [r7, #0]
 800ad9c:	f7ff ff72 	bl	800ac84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	7d1b      	ldrb	r3, [r3, #20]
 800ada4:	2b0a      	cmp	r3, #10
 800ada6:	d013      	beq.n	800add0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800adac:	2b01      	cmp	r3, #1
 800adae:	d00f      	beq.n	800add0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	8b5b      	ldrh	r3, [r3, #26]
 800adb4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d009      	beq.n	800add0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	8b5b      	ldrh	r3, [r3, #26]
 800adc0:	f043 0302 	orr.w	r3, r3, #2
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adca:	6838      	ldr	r0, [r7, #0]
 800adcc:	f002 ff6e 	bl	800dcac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	7d1b      	ldrb	r3, [r3, #20]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d020      	beq.n	800ae1a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d006      	beq.n	800adee <tcp_pcb_remove+0xca>
 800ade0:	4b13      	ldr	r3, [pc, #76]	; (800ae30 <tcp_pcb_remove+0x10c>)
 800ade2:	f640 0293 	movw	r2, #2195	; 0x893
 800ade6:	4916      	ldr	r1, [pc, #88]	; (800ae40 <tcp_pcb_remove+0x11c>)
 800ade8:	4813      	ldr	r0, [pc, #76]	; (800ae38 <tcp_pcb_remove+0x114>)
 800adea:	f009 f973 	bl	80140d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d006      	beq.n	800ae04 <tcp_pcb_remove+0xe0>
 800adf6:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <tcp_pcb_remove+0x10c>)
 800adf8:	f640 0294 	movw	r2, #2196	; 0x894
 800adfc:	4911      	ldr	r1, [pc, #68]	; (800ae44 <tcp_pcb_remove+0x120>)
 800adfe:	480e      	ldr	r0, [pc, #56]	; (800ae38 <tcp_pcb_remove+0x114>)
 800ae00:	f009 f968 	bl	80140d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <tcp_pcb_remove+0xf6>
 800ae0c:	4b08      	ldr	r3, [pc, #32]	; (800ae30 <tcp_pcb_remove+0x10c>)
 800ae0e:	f640 0296 	movw	r2, #2198	; 0x896
 800ae12:	490d      	ldr	r1, [pc, #52]	; (800ae48 <tcp_pcb_remove+0x124>)
 800ae14:	4808      	ldr	r0, [pc, #32]	; (800ae38 <tcp_pcb_remove+0x114>)
 800ae16:	f009 f95d 	bl	80140d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	2200      	movs	r2, #0
 800ae24:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	08015b84 	.word	0x08015b84
 800ae34:	080161ec 	.word	0x080161ec
 800ae38:	08015bc8 	.word	0x08015bc8
 800ae3c:	08016208 	.word	0x08016208
 800ae40:	08016228 	.word	0x08016228
 800ae44:	08016240 	.word	0x08016240
 800ae48:	0801625c 	.word	0x0801625c

0800ae4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <tcp_next_iss+0x1c>
 800ae5a:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <tcp_next_iss+0x38>)
 800ae5c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ae60:	4909      	ldr	r1, [pc, #36]	; (800ae88 <tcp_next_iss+0x3c>)
 800ae62:	480a      	ldr	r0, [pc, #40]	; (800ae8c <tcp_next_iss+0x40>)
 800ae64:	f009 f936 	bl	80140d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae68:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <tcp_next_iss+0x44>)
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <tcp_next_iss+0x48>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4413      	add	r3, r2
 800ae72:	4a07      	ldr	r2, [pc, #28]	; (800ae90 <tcp_next_iss+0x44>)
 800ae74:	6013      	str	r3, [r2, #0]
  return iss;
 800ae76:	4b06      	ldr	r3, [pc, #24]	; (800ae90 <tcp_next_iss+0x44>)
 800ae78:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08015b84 	.word	0x08015b84
 800ae88:	08016274 	.word	0x08016274
 800ae8c:	08015bc8 	.word	0x08015bc8
 800ae90:	20000028 	.word	0x20000028
 800ae94:	200108f8 	.word	0x200108f8

0800ae98 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d106      	bne.n	800aeba <tcp_eff_send_mss_netif+0x22>
 800aeac:	4b14      	ldr	r3, [pc, #80]	; (800af00 <tcp_eff_send_mss_netif+0x68>)
 800aeae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800aeb2:	4914      	ldr	r1, [pc, #80]	; (800af04 <tcp_eff_send_mss_netif+0x6c>)
 800aeb4:	4814      	ldr	r0, [pc, #80]	; (800af08 <tcp_eff_send_mss_netif+0x70>)
 800aeb6:	f009 f90d 	bl	80140d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aec0:	89fb      	ldrh	r3, [r7, #14]
 800aec2:	e019      	b.n	800aef8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aec8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aeca:	8afb      	ldrh	r3, [r7, #22]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d012      	beq.n	800aef6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aed0:	2328      	movs	r3, #40	; 0x28
 800aed2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aed4:	8afa      	ldrh	r2, [r7, #22]
 800aed6:	8abb      	ldrh	r3, [r7, #20]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d904      	bls.n	800aee6 <tcp_eff_send_mss_netif+0x4e>
 800aedc:	8afa      	ldrh	r2, [r7, #22]
 800aede:	8abb      	ldrh	r3, [r7, #20]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	e000      	b.n	800aee8 <tcp_eff_send_mss_netif+0x50>
 800aee6:	2300      	movs	r3, #0
 800aee8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aeea:	8a7a      	ldrh	r2, [r7, #18]
 800aeec:	89fb      	ldrh	r3, [r7, #14]
 800aeee:	4293      	cmp	r3, r2
 800aef0:	bf28      	it	cs
 800aef2:	4613      	movcs	r3, r2
 800aef4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800aef6:	89fb      	ldrh	r3, [r7, #14]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	08015b84 	.word	0x08015b84
 800af04:	08016290 	.word	0x08016290
 800af08:	08015bc8 	.word	0x08015bc8

0800af0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d119      	bne.n	800af54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800af20:	4b10      	ldr	r3, [pc, #64]	; (800af64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800af22:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800af26:	4910      	ldr	r1, [pc, #64]	; (800af68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800af28:	4810      	ldr	r0, [pc, #64]	; (800af6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800af2a:	f009 f8d3 	bl	80140d4 <iprintf>

  while (pcb != NULL) {
 800af2e:	e011      	b.n	800af54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d108      	bne.n	800af4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7fe ffc6 	bl	8009ed4 <tcp_abort>
      pcb = next;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e002      	b.n	800af54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1ea      	bne.n	800af30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	08015b84 	.word	0x08015b84
 800af68:	080162b8 	.word	0x080162b8
 800af6c:	08015bc8 	.word	0x08015bc8

0800af70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d02a      	beq.n	800afd6 <tcp_netif_ip_addr_changed+0x66>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d026      	beq.n	800afd6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af88:	4b15      	ldr	r3, [pc, #84]	; (800afe0 <tcp_netif_ip_addr_changed+0x70>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7ff ffbc 	bl	800af0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af94:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <tcp_netif_ip_addr_changed+0x74>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7ff ffb6 	bl	800af0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d017      	beq.n	800afd6 <tcp_netif_ip_addr_changed+0x66>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d013      	beq.n	800afd6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afae:	4b0e      	ldr	r3, [pc, #56]	; (800afe8 <tcp_netif_ip_addr_changed+0x78>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	e00c      	b.n	800afd0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d103      	bne.n	800afca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1ef      	bne.n	800afb6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800afd6:	bf00      	nop
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20010904 	.word	0x20010904
 800afe4:	200108fc 	.word	0x200108fc
 800afe8:	20010900 	.word	0x20010900

0800afec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff fc3d 	bl	800a880 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b014:	b590      	push	{r4, r7, lr}
 800b016:	b08d      	sub	sp, #52	; 0x34
 800b018:	af04      	add	r7, sp, #16
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d105      	bne.n	800b030 <tcp_input+0x1c>
 800b024:	4b9b      	ldr	r3, [pc, #620]	; (800b294 <tcp_input+0x280>)
 800b026:	2283      	movs	r2, #131	; 0x83
 800b028:	499b      	ldr	r1, [pc, #620]	; (800b298 <tcp_input+0x284>)
 800b02a:	489c      	ldr	r0, [pc, #624]	; (800b29c <tcp_input+0x288>)
 800b02c:	f009 f852 	bl	80140d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	4a9a      	ldr	r2, [pc, #616]	; (800b2a0 <tcp_input+0x28c>)
 800b036:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	895b      	ldrh	r3, [r3, #10]
 800b03c:	2b13      	cmp	r3, #19
 800b03e:	f240 83d1 	bls.w	800b7e4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b042:	4b98      	ldr	r3, [pc, #608]	; (800b2a4 <tcp_input+0x290>)
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	4a97      	ldr	r2, [pc, #604]	; (800b2a4 <tcp_input+0x290>)
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	4611      	mov	r1, r2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f007 fdfd 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	f040 83c7 	bne.w	800b7e8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b05a:	4b92      	ldr	r3, [pc, #584]	; (800b2a4 <tcp_input+0x290>)
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b062:	2be0      	cmp	r3, #224	; 0xe0
 800b064:	f000 83c0 	beq.w	800b7e8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b068:	4b8d      	ldr	r3, [pc, #564]	; (800b2a0 <tcp_input+0x28c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	899b      	ldrh	r3, [r3, #12]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4618      	mov	r0, r3
 800b072:	f7fc fd8d 	bl	8007b90 <lwip_htons>
 800b076:	4603      	mov	r3, r0
 800b078:	0b1b      	lsrs	r3, r3, #12
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b082:	7cbb      	ldrb	r3, [r7, #18]
 800b084:	2b13      	cmp	r3, #19
 800b086:	f240 83b1 	bls.w	800b7ec <tcp_input+0x7d8>
 800b08a:	7cbb      	ldrb	r3, [r7, #18]
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	891b      	ldrh	r3, [r3, #8]
 800b092:	429a      	cmp	r2, r3
 800b094:	f200 83aa 	bhi.w	800b7ec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b098:	7cbb      	ldrb	r3, [r7, #18]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b14      	subs	r3, #20
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	4b81      	ldr	r3, [pc, #516]	; (800b2a8 <tcp_input+0x294>)
 800b0a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b0a4:	4b81      	ldr	r3, [pc, #516]	; (800b2ac <tcp_input+0x298>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	895a      	ldrh	r2, [r3, #10]
 800b0ae:	7cbb      	ldrb	r3, [r7, #18]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d309      	bcc.n	800b0ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b0b6:	4b7c      	ldr	r3, [pc, #496]	; (800b2a8 <tcp_input+0x294>)
 800b0b8:	881a      	ldrh	r2, [r3, #0]
 800b0ba:	4b7d      	ldr	r3, [pc, #500]	; (800b2b0 <tcp_input+0x29c>)
 800b0bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b0be:	7cbb      	ldrb	r3, [r7, #18]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fe f8dc 	bl	8009280 <pbuf_remove_header>
 800b0c8:	e04e      	b.n	800b168 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d105      	bne.n	800b0de <tcp_input+0xca>
 800b0d2:	4b70      	ldr	r3, [pc, #448]	; (800b294 <tcp_input+0x280>)
 800b0d4:	22c2      	movs	r2, #194	; 0xc2
 800b0d6:	4977      	ldr	r1, [pc, #476]	; (800b2b4 <tcp_input+0x2a0>)
 800b0d8:	4870      	ldr	r0, [pc, #448]	; (800b29c <tcp_input+0x288>)
 800b0da:	f008 fffb 	bl	80140d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b0de:	2114      	movs	r1, #20
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7fe f8cd 	bl	8009280 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	895a      	ldrh	r2, [r3, #10]
 800b0ea:	4b71      	ldr	r3, [pc, #452]	; (800b2b0 <tcp_input+0x29c>)
 800b0ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b0ee:	4b6e      	ldr	r3, [pc, #440]	; (800b2a8 <tcp_input+0x294>)
 800b0f0:	881a      	ldrh	r2, [r3, #0]
 800b0f2:	4b6f      	ldr	r3, [pc, #444]	; (800b2b0 <tcp_input+0x29c>)
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b0fa:	4b6d      	ldr	r3, [pc, #436]	; (800b2b0 <tcp_input+0x29c>)
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	4619      	mov	r1, r3
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7fe f8bd 	bl	8009280 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	895b      	ldrh	r3, [r3, #10]
 800b10c:	8a3a      	ldrh	r2, [r7, #16]
 800b10e:	429a      	cmp	r2, r3
 800b110:	f200 836e 	bhi.w	800b7f0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	4a64      	ldr	r2, [pc, #400]	; (800b2ac <tcp_input+0x298>)
 800b11c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	8a3a      	ldrh	r2, [r7, #16]
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe f8aa 	bl	8009280 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	891a      	ldrh	r2, [r3, #8]
 800b130:	8a3b      	ldrh	r3, [r7, #16]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	b29a      	uxth	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	895b      	ldrh	r3, [r3, #10]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <tcp_input+0x13a>
 800b142:	4b54      	ldr	r3, [pc, #336]	; (800b294 <tcp_input+0x280>)
 800b144:	22df      	movs	r2, #223	; 0xdf
 800b146:	495c      	ldr	r1, [pc, #368]	; (800b2b8 <tcp_input+0x2a4>)
 800b148:	4854      	ldr	r0, [pc, #336]	; (800b29c <tcp_input+0x288>)
 800b14a:	f008 ffc3 	bl	80140d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	891a      	ldrh	r2, [r3, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	891b      	ldrh	r3, [r3, #8]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d005      	beq.n	800b168 <tcp_input+0x154>
 800b15c:	4b4d      	ldr	r3, [pc, #308]	; (800b294 <tcp_input+0x280>)
 800b15e:	22e0      	movs	r2, #224	; 0xe0
 800b160:	4956      	ldr	r1, [pc, #344]	; (800b2bc <tcp_input+0x2a8>)
 800b162:	484e      	ldr	r0, [pc, #312]	; (800b29c <tcp_input+0x288>)
 800b164:	f008 ffb6 	bl	80140d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b168:	4b4d      	ldr	r3, [pc, #308]	; (800b2a0 <tcp_input+0x28c>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	4a4b      	ldr	r2, [pc, #300]	; (800b2a0 <tcp_input+0x28c>)
 800b172:	6814      	ldr	r4, [r2, #0]
 800b174:	4618      	mov	r0, r3
 800b176:	f7fc fd0b 	bl	8007b90 <lwip_htons>
 800b17a:	4603      	mov	r3, r0
 800b17c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b17e:	4b48      	ldr	r3, [pc, #288]	; (800b2a0 <tcp_input+0x28c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	885b      	ldrh	r3, [r3, #2]
 800b184:	b29b      	uxth	r3, r3
 800b186:	4a46      	ldr	r2, [pc, #280]	; (800b2a0 <tcp_input+0x28c>)
 800b188:	6814      	ldr	r4, [r2, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fc fd00 	bl	8007b90 <lwip_htons>
 800b190:	4603      	mov	r3, r0
 800b192:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b194:	4b42      	ldr	r3, [pc, #264]	; (800b2a0 <tcp_input+0x28c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	4a41      	ldr	r2, [pc, #260]	; (800b2a0 <tcp_input+0x28c>)
 800b19c:	6814      	ldr	r4, [r2, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fc fd0b 	bl	8007bba <lwip_htonl>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	6063      	str	r3, [r4, #4]
 800b1a8:	6863      	ldr	r3, [r4, #4]
 800b1aa:	4a45      	ldr	r2, [pc, #276]	; (800b2c0 <tcp_input+0x2ac>)
 800b1ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b1ae:	4b3c      	ldr	r3, [pc, #240]	; (800b2a0 <tcp_input+0x28c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	4a3a      	ldr	r2, [pc, #232]	; (800b2a0 <tcp_input+0x28c>)
 800b1b6:	6814      	ldr	r4, [r2, #0]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fc fcfe 	bl	8007bba <lwip_htonl>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	60a3      	str	r3, [r4, #8]
 800b1c2:	68a3      	ldr	r3, [r4, #8]
 800b1c4:	4a3f      	ldr	r2, [pc, #252]	; (800b2c4 <tcp_input+0x2b0>)
 800b1c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b1c8:	4b35      	ldr	r3, [pc, #212]	; (800b2a0 <tcp_input+0x28c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	89db      	ldrh	r3, [r3, #14]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	4a33      	ldr	r2, [pc, #204]	; (800b2a0 <tcp_input+0x28c>)
 800b1d2:	6814      	ldr	r4, [r2, #0]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fc fcdb 	bl	8007b90 <lwip_htons>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b1de:	4b30      	ldr	r3, [pc, #192]	; (800b2a0 <tcp_input+0x28c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	899b      	ldrh	r3, [r3, #12]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fc fcd2 	bl	8007b90 <lwip_htons>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	4b34      	ldr	r3, [pc, #208]	; (800b2c8 <tcp_input+0x2b4>)
 800b1f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	891a      	ldrh	r2, [r3, #8]
 800b1fe:	4b33      	ldr	r3, [pc, #204]	; (800b2cc <tcp_input+0x2b8>)
 800b200:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b202:	4b31      	ldr	r3, [pc, #196]	; (800b2c8 <tcp_input+0x2b4>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00c      	beq.n	800b228 <tcp_input+0x214>
    tcplen++;
 800b20e:	4b2f      	ldr	r3, [pc, #188]	; (800b2cc <tcp_input+0x2b8>)
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	3301      	adds	r3, #1
 800b214:	b29a      	uxth	r2, r3
 800b216:	4b2d      	ldr	r3, [pc, #180]	; (800b2cc <tcp_input+0x2b8>)
 800b218:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	891a      	ldrh	r2, [r3, #8]
 800b21e:	4b2b      	ldr	r3, [pc, #172]	; (800b2cc <tcp_input+0x2b8>)
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	429a      	cmp	r2, r3
 800b224:	f200 82e6 	bhi.w	800b7f4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b22c:	4b28      	ldr	r3, [pc, #160]	; (800b2d0 <tcp_input+0x2bc>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	61fb      	str	r3, [r7, #28]
 800b232:	e09d      	b.n	800b370 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	7d1b      	ldrb	r3, [r3, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d105      	bne.n	800b248 <tcp_input+0x234>
 800b23c:	4b15      	ldr	r3, [pc, #84]	; (800b294 <tcp_input+0x280>)
 800b23e:	22fb      	movs	r2, #251	; 0xfb
 800b240:	4924      	ldr	r1, [pc, #144]	; (800b2d4 <tcp_input+0x2c0>)
 800b242:	4816      	ldr	r0, [pc, #88]	; (800b29c <tcp_input+0x288>)
 800b244:	f008 ff46 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	7d1b      	ldrb	r3, [r3, #20]
 800b24c:	2b0a      	cmp	r3, #10
 800b24e:	d105      	bne.n	800b25c <tcp_input+0x248>
 800b250:	4b10      	ldr	r3, [pc, #64]	; (800b294 <tcp_input+0x280>)
 800b252:	22fc      	movs	r2, #252	; 0xfc
 800b254:	4920      	ldr	r1, [pc, #128]	; (800b2d8 <tcp_input+0x2c4>)
 800b256:	4811      	ldr	r0, [pc, #68]	; (800b29c <tcp_input+0x288>)
 800b258:	f008 ff3c 	bl	80140d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d105      	bne.n	800b270 <tcp_input+0x25c>
 800b264:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <tcp_input+0x280>)
 800b266:	22fd      	movs	r2, #253	; 0xfd
 800b268:	491c      	ldr	r1, [pc, #112]	; (800b2dc <tcp_input+0x2c8>)
 800b26a:	480c      	ldr	r0, [pc, #48]	; (800b29c <tcp_input+0x288>)
 800b26c:	f008 ff32 	bl	80140d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	7a1b      	ldrb	r3, [r3, #8]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d033      	beq.n	800b2e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	7a1a      	ldrb	r2, [r3, #8]
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <tcp_input+0x290>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b284:	3301      	adds	r3, #1
 800b286:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b288:	429a      	cmp	r2, r3
 800b28a:	d029      	beq.n	800b2e0 <tcp_input+0x2cc>
      prev = pcb;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	61bb      	str	r3, [r7, #24]
      continue;
 800b290:	e06b      	b.n	800b36a <tcp_input+0x356>
 800b292:	bf00      	nop
 800b294:	080162ec 	.word	0x080162ec
 800b298:	08016320 	.word	0x08016320
 800b29c:	08016338 	.word	0x08016338
 800b2a0:	20010920 	.word	0x20010920
 800b2a4:	2000d184 	.word	0x2000d184
 800b2a8:	20010924 	.word	0x20010924
 800b2ac:	20010928 	.word	0x20010928
 800b2b0:	20010926 	.word	0x20010926
 800b2b4:	08016360 	.word	0x08016360
 800b2b8:	08016370 	.word	0x08016370
 800b2bc:	0801637c 	.word	0x0801637c
 800b2c0:	20010930 	.word	0x20010930
 800b2c4:	20010934 	.word	0x20010934
 800b2c8:	2001093c 	.word	0x2001093c
 800b2cc:	2001093a 	.word	0x2001093a
 800b2d0:	20010904 	.word	0x20010904
 800b2d4:	0801639c 	.word	0x0801639c
 800b2d8:	080163c4 	.word	0x080163c4
 800b2dc:	080163f0 	.word	0x080163f0
    }

    if (pcb->remote_port == tcphdr->src &&
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	8b1a      	ldrh	r2, [r3, #24]
 800b2e4:	4b72      	ldr	r3, [pc, #456]	; (800b4b0 <tcp_input+0x49c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d13a      	bne.n	800b366 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	8ada      	ldrh	r2, [r3, #22]
 800b2f4:	4b6e      	ldr	r3, [pc, #440]	; (800b4b0 <tcp_input+0x49c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	885b      	ldrh	r3, [r3, #2]
 800b2fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d132      	bne.n	800b366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	4b6b      	ldr	r3, [pc, #428]	; (800b4b4 <tcp_input+0x4a0>)
 800b306:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b308:	429a      	cmp	r2, r3
 800b30a:	d12c      	bne.n	800b366 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	4b68      	ldr	r3, [pc, #416]	; (800b4b4 <tcp_input+0x4a0>)
 800b312:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b314:	429a      	cmp	r2, r3
 800b316:	d126      	bne.n	800b366 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	69fa      	ldr	r2, [r7, #28]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d106      	bne.n	800b330 <tcp_input+0x31c>
 800b322:	4b65      	ldr	r3, [pc, #404]	; (800b4b8 <tcp_input+0x4a4>)
 800b324:	f240 120d 	movw	r2, #269	; 0x10d
 800b328:	4964      	ldr	r1, [pc, #400]	; (800b4bc <tcp_input+0x4a8>)
 800b32a:	4865      	ldr	r0, [pc, #404]	; (800b4c0 <tcp_input+0x4ac>)
 800b32c:	f008 fed2 	bl	80140d4 <iprintf>
      if (prev != NULL) {
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <tcp_input+0x338>
        prev->next = pcb->next;
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	68da      	ldr	r2, [r3, #12]
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b33e:	4b61      	ldr	r3, [pc, #388]	; (800b4c4 <tcp_input+0x4b0>)
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b346:	4a5f      	ldr	r2, [pc, #380]	; (800b4c4 <tcp_input+0x4b0>)
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	69fa      	ldr	r2, [r7, #28]
 800b352:	429a      	cmp	r2, r3
 800b354:	d111      	bne.n	800b37a <tcp_input+0x366>
 800b356:	4b58      	ldr	r3, [pc, #352]	; (800b4b8 <tcp_input+0x4a4>)
 800b358:	f240 1215 	movw	r2, #277	; 0x115
 800b35c:	495a      	ldr	r1, [pc, #360]	; (800b4c8 <tcp_input+0x4b4>)
 800b35e:	4858      	ldr	r0, [pc, #352]	; (800b4c0 <tcp_input+0x4ac>)
 800b360:	f008 feb8 	bl	80140d4 <iprintf>
      break;
 800b364:	e009      	b.n	800b37a <tcp_input+0x366>
    }
    prev = pcb;
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	61fb      	str	r3, [r7, #28]
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f47f af5e 	bne.w	800b234 <tcp_input+0x220>
 800b378:	e000      	b.n	800b37c <tcp_input+0x368>
      break;
 800b37a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f040 80aa 	bne.w	800b4d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b384:	4b51      	ldr	r3, [pc, #324]	; (800b4cc <tcp_input+0x4b8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	e03f      	b.n	800b40c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	7d1b      	ldrb	r3, [r3, #20]
 800b390:	2b0a      	cmp	r3, #10
 800b392:	d006      	beq.n	800b3a2 <tcp_input+0x38e>
 800b394:	4b48      	ldr	r3, [pc, #288]	; (800b4b8 <tcp_input+0x4a4>)
 800b396:	f240 121f 	movw	r2, #287	; 0x11f
 800b39a:	494d      	ldr	r1, [pc, #308]	; (800b4d0 <tcp_input+0x4bc>)
 800b39c:	4848      	ldr	r0, [pc, #288]	; (800b4c0 <tcp_input+0x4ac>)
 800b39e:	f008 fe99 	bl	80140d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	7a1b      	ldrb	r3, [r3, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d009      	beq.n	800b3be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	7a1a      	ldrb	r2, [r3, #8]
 800b3ae:	4b41      	ldr	r3, [pc, #260]	; (800b4b4 <tcp_input+0x4a0>)
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d122      	bne.n	800b404 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	8b1a      	ldrh	r2, [r3, #24]
 800b3c2:	4b3b      	ldr	r3, [pc, #236]	; (800b4b0 <tcp_input+0x49c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d11b      	bne.n	800b406 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	8ada      	ldrh	r2, [r3, #22]
 800b3d2:	4b37      	ldr	r3, [pc, #220]	; (800b4b0 <tcp_input+0x49c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	885b      	ldrh	r3, [r3, #2]
 800b3d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d113      	bne.n	800b406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	4b34      	ldr	r3, [pc, #208]	; (800b4b4 <tcp_input+0x4a0>)
 800b3e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d10d      	bne.n	800b406 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b31      	ldr	r3, [pc, #196]	; (800b4b4 <tcp_input+0x4a0>)
 800b3f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d107      	bne.n	800b406 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b3f6:	69f8      	ldr	r0, [r7, #28]
 800b3f8:	f000 fb56 	bl	800baa8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7fd ffc5 	bl	800938c <pbuf_free>
        return;
 800b402:	e1fd      	b.n	800b800 <tcp_input+0x7ec>
        continue;
 800b404:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1bc      	bne.n	800b38c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b416:	4b2f      	ldr	r3, [pc, #188]	; (800b4d4 <tcp_input+0x4c0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	e02a      	b.n	800b474 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	7a1b      	ldrb	r3, [r3, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00c      	beq.n	800b440 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	7a1a      	ldrb	r2, [r3, #8]
 800b42a:	4b22      	ldr	r3, [pc, #136]	; (800b4b4 <tcp_input+0x4a0>)
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b432:	3301      	adds	r3, #1
 800b434:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b436:	429a      	cmp	r2, r3
 800b438:	d002      	beq.n	800b440 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	61bb      	str	r3, [r7, #24]
        continue;
 800b43e:	e016      	b.n	800b46e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	8ada      	ldrh	r2, [r3, #22]
 800b444:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <tcp_input+0x49c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	885b      	ldrh	r3, [r3, #2]
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d10c      	bne.n	800b46a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	4b17      	ldr	r3, [pc, #92]	; (800b4b4 <tcp_input+0x4a0>)
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d00f      	beq.n	800b47c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00d      	beq.n	800b47e <tcp_input+0x46a>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d009      	beq.n	800b47e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1d1      	bne.n	800b41e <tcp_input+0x40a>
 800b47a:	e000      	b.n	800b47e <tcp_input+0x46a>
            break;
 800b47c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d029      	beq.n	800b4d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00a      	beq.n	800b4a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	68da      	ldr	r2, [r3, #12]
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b492:	4b10      	ldr	r3, [pc, #64]	; (800b4d4 <tcp_input+0x4c0>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b49a:	4a0e      	ldr	r2, [pc, #56]	; (800b4d4 <tcp_input+0x4c0>)
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b4a0:	6978      	ldr	r0, [r7, #20]
 800b4a2:	f000 fa03 	bl	800b8ac <tcp_listen_input>
      }
      pbuf_free(p);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fd ff70 	bl	800938c <pbuf_free>
      return;
 800b4ac:	e1a8      	b.n	800b800 <tcp_input+0x7ec>
 800b4ae:	bf00      	nop
 800b4b0:	20010920 	.word	0x20010920
 800b4b4:	2000d184 	.word	0x2000d184
 800b4b8:	080162ec 	.word	0x080162ec
 800b4bc:	08016418 	.word	0x08016418
 800b4c0:	08016338 	.word	0x08016338
 800b4c4:	20010904 	.word	0x20010904
 800b4c8:	08016444 	.word	0x08016444
 800b4cc:	20010908 	.word	0x20010908
 800b4d0:	08016470 	.word	0x08016470
 800b4d4:	20010900 	.word	0x20010900
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 8158 	beq.w	800b790 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b4e0:	4b95      	ldr	r3, [pc, #596]	; (800b738 <tcp_input+0x724>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	891a      	ldrh	r2, [r3, #8]
 800b4ea:	4b93      	ldr	r3, [pc, #588]	; (800b738 <tcp_input+0x724>)
 800b4ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b4ee:	4a92      	ldr	r2, [pc, #584]	; (800b738 <tcp_input+0x724>)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b4f4:	4b91      	ldr	r3, [pc, #580]	; (800b73c <tcp_input+0x728>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a8f      	ldr	r2, [pc, #572]	; (800b738 <tcp_input+0x724>)
 800b4fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b4fc:	4b90      	ldr	r3, [pc, #576]	; (800b740 <tcp_input+0x72c>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b502:	4b90      	ldr	r3, [pc, #576]	; (800b744 <tcp_input+0x730>)
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b508:	4b8f      	ldr	r3, [pc, #572]	; (800b748 <tcp_input+0x734>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b50e:	4b8f      	ldr	r3, [pc, #572]	; (800b74c <tcp_input+0x738>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 0308 	and.w	r3, r3, #8
 800b516:	2b00      	cmp	r3, #0
 800b518:	d006      	beq.n	800b528 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	7b5b      	ldrb	r3, [r3, #13]
 800b51e:	f043 0301 	orr.w	r3, r3, #1
 800b522:	b2da      	uxtb	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d017      	beq.n	800b560 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b530:	69f8      	ldr	r0, [r7, #28]
 800b532:	f7ff f929 	bl	800a788 <tcp_process_refused_data>
 800b536:	4603      	mov	r3, r0
 800b538:	f113 0f0d 	cmn.w	r3, #13
 800b53c:	d007      	beq.n	800b54e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00c      	beq.n	800b560 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b546:	4b82      	ldr	r3, [pc, #520]	; (800b750 <tcp_input+0x73c>)
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d008      	beq.n	800b560 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 80e3 	bne.w	800b71e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b558:	69f8      	ldr	r0, [r7, #28]
 800b55a:	f003 f9ad 	bl	800e8b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b55e:	e0de      	b.n	800b71e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b560:	4a7c      	ldr	r2, [pc, #496]	; (800b754 <tcp_input+0x740>)
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b566:	69f8      	ldr	r0, [r7, #28]
 800b568:	f000 fb18 	bl	800bb9c <tcp_process>
 800b56c:	4603      	mov	r3, r0
 800b56e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b574:	f113 0f0d 	cmn.w	r3, #13
 800b578:	f000 80d3 	beq.w	800b722 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b57c:	4b71      	ldr	r3, [pc, #452]	; (800b744 <tcp_input+0x730>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	f003 0308 	and.w	r3, r3, #8
 800b584:	2b00      	cmp	r3, #0
 800b586:	d015      	beq.n	800b5b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d008      	beq.n	800b5a4 <tcp_input+0x590>
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b598:	69fa      	ldr	r2, [r7, #28]
 800b59a:	6912      	ldr	r2, [r2, #16]
 800b59c:	f06f 010d 	mvn.w	r1, #13
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b5a4:	69f9      	ldr	r1, [r7, #28]
 800b5a6:	486c      	ldr	r0, [pc, #432]	; (800b758 <tcp_input+0x744>)
 800b5a8:	f7ff fbbc 	bl	800ad24 <tcp_pcb_remove>
        tcp_free(pcb);
 800b5ac:	69f8      	ldr	r0, [r7, #28]
 800b5ae:	f7fe f9a9 	bl	8009904 <tcp_free>
 800b5b2:	e0da      	b.n	800b76a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b5b8:	4b63      	ldr	r3, [pc, #396]	; (800b748 <tcp_input+0x734>)
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01d      	beq.n	800b5fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b5c0:	4b61      	ldr	r3, [pc, #388]	; (800b748 <tcp_input+0x734>)
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00a      	beq.n	800b5e6 <tcp_input+0x5d2>
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5d6:	69fa      	ldr	r2, [r7, #28]
 800b5d8:	6910      	ldr	r0, [r2, #16]
 800b5da:	89fa      	ldrh	r2, [r7, #14]
 800b5dc:	69f9      	ldr	r1, [r7, #28]
 800b5de:	4798      	blx	r3
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	74fb      	strb	r3, [r7, #19]
 800b5e4:	e001      	b.n	800b5ea <tcp_input+0x5d6>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b5ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5ee:	f113 0f0d 	cmn.w	r3, #13
 800b5f2:	f000 8098 	beq.w	800b726 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b5f6:	4b54      	ldr	r3, [pc, #336]	; (800b748 <tcp_input+0x734>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b5fc:	69f8      	ldr	r0, [r7, #28]
 800b5fe:	f000 f915 	bl	800b82c <tcp_input_delayed_close>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	f040 8090 	bne.w	800b72a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b60a:	4b4d      	ldr	r3, [pc, #308]	; (800b740 <tcp_input+0x72c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d041      	beq.n	800b696 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b616:	2b00      	cmp	r3, #0
 800b618:	d006      	beq.n	800b628 <tcp_input+0x614>
 800b61a:	4b50      	ldr	r3, [pc, #320]	; (800b75c <tcp_input+0x748>)
 800b61c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b620:	494f      	ldr	r1, [pc, #316]	; (800b760 <tcp_input+0x74c>)
 800b622:	4850      	ldr	r0, [pc, #320]	; (800b764 <tcp_input+0x750>)
 800b624:	f008 fd56 	bl	80140d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	8b5b      	ldrh	r3, [r3, #26]
 800b62c:	f003 0310 	and.w	r3, r3, #16
 800b630:	2b00      	cmp	r3, #0
 800b632:	d008      	beq.n	800b646 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b634:	4b42      	ldr	r3, [pc, #264]	; (800b740 <tcp_input+0x72c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fd fea7 	bl	800938c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b63e:	69f8      	ldr	r0, [r7, #28]
 800b640:	f7fe fc48 	bl	8009ed4 <tcp_abort>
            goto aborted;
 800b644:	e091      	b.n	800b76a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00c      	beq.n	800b66a <tcp_input+0x656>
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	6918      	ldr	r0, [r3, #16]
 800b65a:	4b39      	ldr	r3, [pc, #228]	; (800b740 <tcp_input+0x72c>)
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	2300      	movs	r3, #0
 800b660:	69f9      	ldr	r1, [r7, #28]
 800b662:	47a0      	blx	r4
 800b664:	4603      	mov	r3, r0
 800b666:	74fb      	strb	r3, [r7, #19]
 800b668:	e008      	b.n	800b67c <tcp_input+0x668>
 800b66a:	4b35      	ldr	r3, [pc, #212]	; (800b740 <tcp_input+0x72c>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	69f9      	ldr	r1, [r7, #28]
 800b672:	2000      	movs	r0, #0
 800b674:	f7ff f95e 	bl	800a934 <tcp_recv_null>
 800b678:	4603      	mov	r3, r0
 800b67a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b67c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b680:	f113 0f0d 	cmn.w	r3, #13
 800b684:	d053      	beq.n	800b72e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b68e:	4b2c      	ldr	r3, [pc, #176]	; (800b740 <tcp_input+0x72c>)
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b696:	4b2b      	ldr	r3, [pc, #172]	; (800b744 <tcp_input+0x730>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	f003 0320 	and.w	r3, r3, #32
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d030      	beq.n	800b704 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d009      	beq.n	800b6be <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ae:	7b5a      	ldrb	r2, [r3, #13]
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6b4:	f042 0220 	orr.w	r2, r2, #32
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	735a      	strb	r2, [r3, #13]
 800b6bc:	e022      	b.n	800b704 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b6c6:	d005      	beq.n	800b6d4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00b      	beq.n	800b6f6 <tcp_input+0x6e2>
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	6918      	ldr	r0, [r3, #16]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	69f9      	ldr	r1, [r7, #28]
 800b6ee:	47a0      	blx	r4
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	74fb      	strb	r3, [r7, #19]
 800b6f4:	e001      	b.n	800b6fa <tcp_input+0x6e6>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b6fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6fe:	f113 0f0d 	cmn.w	r3, #13
 800b702:	d016      	beq.n	800b732 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b704:	4b13      	ldr	r3, [pc, #76]	; (800b754 <tcp_input+0x740>)
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b70a:	69f8      	ldr	r0, [r7, #28]
 800b70c:	f000 f88e 	bl	800b82c <tcp_input_delayed_close>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d128      	bne.n	800b768 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b716:	69f8      	ldr	r0, [r7, #28]
 800b718:	f002 fac8 	bl	800dcac <tcp_output>
 800b71c:	e025      	b.n	800b76a <tcp_input+0x756>
        goto aborted;
 800b71e:	bf00      	nop
 800b720:	e023      	b.n	800b76a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b722:	bf00      	nop
 800b724:	e021      	b.n	800b76a <tcp_input+0x756>
              goto aborted;
 800b726:	bf00      	nop
 800b728:	e01f      	b.n	800b76a <tcp_input+0x756>
          goto aborted;
 800b72a:	bf00      	nop
 800b72c:	e01d      	b.n	800b76a <tcp_input+0x756>
            goto aborted;
 800b72e:	bf00      	nop
 800b730:	e01b      	b.n	800b76a <tcp_input+0x756>
              goto aborted;
 800b732:	bf00      	nop
 800b734:	e019      	b.n	800b76a <tcp_input+0x756>
 800b736:	bf00      	nop
 800b738:	20010910 	.word	0x20010910
 800b73c:	20010920 	.word	0x20010920
 800b740:	20010940 	.word	0x20010940
 800b744:	2001093d 	.word	0x2001093d
 800b748:	20010938 	.word	0x20010938
 800b74c:	2001093c 	.word	0x2001093c
 800b750:	2001093a 	.word	0x2001093a
 800b754:	20010944 	.word	0x20010944
 800b758:	20010904 	.word	0x20010904
 800b75c:	080162ec 	.word	0x080162ec
 800b760:	080164a0 	.word	0x080164a0
 800b764:	08016338 	.word	0x08016338
          goto aborted;
 800b768:	bf00      	nop
    tcp_input_pcb = NULL;
 800b76a:	4b27      	ldr	r3, [pc, #156]	; (800b808 <tcp_input+0x7f4>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b770:	4b26      	ldr	r3, [pc, #152]	; (800b80c <tcp_input+0x7f8>)
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b776:	4b26      	ldr	r3, [pc, #152]	; (800b810 <tcp_input+0x7fc>)
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d03f      	beq.n	800b7fe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b77e:	4b24      	ldr	r3, [pc, #144]	; (800b810 <tcp_input+0x7fc>)
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	4618      	mov	r0, r3
 800b784:	f7fd fe02 	bl	800938c <pbuf_free>
      inseg.p = NULL;
 800b788:	4b21      	ldr	r3, [pc, #132]	; (800b810 <tcp_input+0x7fc>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b78e:	e036      	b.n	800b7fe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b790:	4b20      	ldr	r3, [pc, #128]	; (800b814 <tcp_input+0x800>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	899b      	ldrh	r3, [r3, #12]
 800b796:	b29b      	uxth	r3, r3
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fc f9f9 	bl	8007b90 <lwip_htons>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	f003 0304 	and.w	r3, r3, #4
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d118      	bne.n	800b7dc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7aa:	4b1b      	ldr	r3, [pc, #108]	; (800b818 <tcp_input+0x804>)
 800b7ac:	6819      	ldr	r1, [r3, #0]
 800b7ae:	4b1b      	ldr	r3, [pc, #108]	; (800b81c <tcp_input+0x808>)
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4b1a      	ldr	r3, [pc, #104]	; (800b820 <tcp_input+0x80c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7ba:	4b16      	ldr	r3, [pc, #88]	; (800b814 <tcp_input+0x800>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7be:	885b      	ldrh	r3, [r3, #2]
 800b7c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7c2:	4a14      	ldr	r2, [pc, #80]	; (800b814 <tcp_input+0x800>)
 800b7c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7c6:	8812      	ldrh	r2, [r2, #0]
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	9202      	str	r2, [sp, #8]
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	4b15      	ldr	r3, [pc, #84]	; (800b824 <tcp_input+0x810>)
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <tcp_input+0x814>)
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	f003 f81c 	bl	800e814 <tcp_rst>
    pbuf_free(p);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7fd fdd5 	bl	800938c <pbuf_free>
  return;
 800b7e2:	e00c      	b.n	800b7fe <tcp_input+0x7ea>
    goto dropped;
 800b7e4:	bf00      	nop
 800b7e6:	e006      	b.n	800b7f6 <tcp_input+0x7e2>
    goto dropped;
 800b7e8:	bf00      	nop
 800b7ea:	e004      	b.n	800b7f6 <tcp_input+0x7e2>
    goto dropped;
 800b7ec:	bf00      	nop
 800b7ee:	e002      	b.n	800b7f6 <tcp_input+0x7e2>
      goto dropped;
 800b7f0:	bf00      	nop
 800b7f2:	e000      	b.n	800b7f6 <tcp_input+0x7e2>
      goto dropped;
 800b7f4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7fd fdc8 	bl	800938c <pbuf_free>
 800b7fc:	e000      	b.n	800b800 <tcp_input+0x7ec>
  return;
 800b7fe:	bf00      	nop
}
 800b800:	3724      	adds	r7, #36	; 0x24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd90      	pop	{r4, r7, pc}
 800b806:	bf00      	nop
 800b808:	20010944 	.word	0x20010944
 800b80c:	20010940 	.word	0x20010940
 800b810:	20010910 	.word	0x20010910
 800b814:	20010920 	.word	0x20010920
 800b818:	20010934 	.word	0x20010934
 800b81c:	2001093a 	.word	0x2001093a
 800b820:	20010930 	.word	0x20010930
 800b824:	2000d194 	.word	0x2000d194
 800b828:	2000d198 	.word	0x2000d198

0800b82c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <tcp_input_delayed_close+0x1c>
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <tcp_input_delayed_close+0x6c>)
 800b83c:	f240 225a 	movw	r2, #602	; 0x25a
 800b840:	4916      	ldr	r1, [pc, #88]	; (800b89c <tcp_input_delayed_close+0x70>)
 800b842:	4817      	ldr	r0, [pc, #92]	; (800b8a0 <tcp_input_delayed_close+0x74>)
 800b844:	f008 fc46 	bl	80140d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b848:	4b16      	ldr	r3, [pc, #88]	; (800b8a4 <tcp_input_delayed_close+0x78>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	f003 0310 	and.w	r3, r3, #16
 800b850:	2b00      	cmp	r3, #0
 800b852:	d01c      	beq.n	800b88e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8b5b      	ldrh	r3, [r3, #26]
 800b858:	f003 0310 	and.w	r3, r3, #16
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10d      	bne.n	800b87c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b866:	2b00      	cmp	r3, #0
 800b868:	d008      	beq.n	800b87c <tcp_input_delayed_close+0x50>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	6912      	ldr	r2, [r2, #16]
 800b874:	f06f 010e 	mvn.w	r1, #14
 800b878:	4610      	mov	r0, r2
 800b87a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	480a      	ldr	r0, [pc, #40]	; (800b8a8 <tcp_input_delayed_close+0x7c>)
 800b880:	f7ff fa50 	bl	800ad24 <tcp_pcb_remove>
    tcp_free(pcb);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7fe f83d 	bl	8009904 <tcp_free>
    return 1;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e000      	b.n	800b890 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	080162ec 	.word	0x080162ec
 800b89c:	080164bc 	.word	0x080164bc
 800b8a0:	08016338 	.word	0x08016338
 800b8a4:	2001093d 	.word	0x2001093d
 800b8a8:	20010904 	.word	0x20010904

0800b8ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b08b      	sub	sp, #44	; 0x2c
 800b8b0:	af04      	add	r7, sp, #16
 800b8b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b8b4:	4b6f      	ldr	r3, [pc, #444]	; (800ba74 <tcp_listen_input+0x1c8>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	f003 0304 	and.w	r3, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 80d2 	bne.w	800ba66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <tcp_listen_input+0x2a>
 800b8c8:	4b6b      	ldr	r3, [pc, #428]	; (800ba78 <tcp_listen_input+0x1cc>)
 800b8ca:	f240 2281 	movw	r2, #641	; 0x281
 800b8ce:	496b      	ldr	r1, [pc, #428]	; (800ba7c <tcp_listen_input+0x1d0>)
 800b8d0:	486b      	ldr	r0, [pc, #428]	; (800ba80 <tcp_listen_input+0x1d4>)
 800b8d2:	f008 fbff 	bl	80140d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b8d6:	4b67      	ldr	r3, [pc, #412]	; (800ba74 <tcp_listen_input+0x1c8>)
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	f003 0310 	and.w	r3, r3, #16
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d019      	beq.n	800b916 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8e2:	4b68      	ldr	r3, [pc, #416]	; (800ba84 <tcp_listen_input+0x1d8>)
 800b8e4:	6819      	ldr	r1, [r3, #0]
 800b8e6:	4b68      	ldr	r3, [pc, #416]	; (800ba88 <tcp_listen_input+0x1dc>)
 800b8e8:	881b      	ldrh	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b67      	ldr	r3, [pc, #412]	; (800ba8c <tcp_listen_input+0x1e0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8f2:	4b67      	ldr	r3, [pc, #412]	; (800ba90 <tcp_listen_input+0x1e4>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8f6:	885b      	ldrh	r3, [r3, #2]
 800b8f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8fa:	4a65      	ldr	r2, [pc, #404]	; (800ba90 <tcp_listen_input+0x1e4>)
 800b8fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8fe:	8812      	ldrh	r2, [r2, #0]
 800b900:	b292      	uxth	r2, r2
 800b902:	9202      	str	r2, [sp, #8]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	4b63      	ldr	r3, [pc, #396]	; (800ba94 <tcp_listen_input+0x1e8>)
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4b63      	ldr	r3, [pc, #396]	; (800ba98 <tcp_listen_input+0x1ec>)
 800b90c:	4602      	mov	r2, r0
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f002 ff80 	bl	800e814 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b914:	e0a9      	b.n	800ba6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b916:	4b57      	ldr	r3, [pc, #348]	; (800ba74 <tcp_listen_input+0x1c8>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80a3 	beq.w	800ba6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7d5b      	ldrb	r3, [r3, #21]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff f927 	bl	800ab7c <tcp_alloc>
 800b92e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d111      	bne.n	800b95a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00a      	beq.n	800b954 <tcp_listen_input+0xa8>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6910      	ldr	r0, [r2, #16]
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	2100      	movs	r1, #0
 800b94c:	4798      	blx	r3
 800b94e:	4603      	mov	r3, r0
 800b950:	73bb      	strb	r3, [r7, #14]
      return;
 800b952:	e08b      	b.n	800ba6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b954:	23f0      	movs	r3, #240	; 0xf0
 800b956:	73bb      	strb	r3, [r7, #14]
      return;
 800b958:	e088      	b.n	800ba6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b95a:	4b50      	ldr	r3, [pc, #320]	; (800ba9c <tcp_listen_input+0x1f0>)
 800b95c:	695a      	ldr	r2, [r3, #20]
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b962:	4b4e      	ldr	r3, [pc, #312]	; (800ba9c <tcp_listen_input+0x1f0>)
 800b964:	691a      	ldr	r2, [r3, #16]
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	8ada      	ldrh	r2, [r3, #22]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b972:	4b47      	ldr	r3, [pc, #284]	; (800ba90 <tcp_listen_input+0x1e4>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	b29a      	uxth	r2, r3
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2203      	movs	r2, #3
 800b982:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b984:	4b41      	ldr	r3, [pc, #260]	; (800ba8c <tcp_listen_input+0x1e0>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b996:	6978      	ldr	r0, [r7, #20]
 800b998:	f7ff fa58 	bl	800ae4c <tcp_next_iss>
 800b99c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b9b6:	4b35      	ldr	r3, [pc, #212]	; (800ba8c <tcp_listen_input+0x1e0>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	1e5a      	subs	r2, r3, #1
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	691a      	ldr	r2, [r3, #16]
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	7a5b      	ldrb	r3, [r3, #9]
 800b9d2:	f003 030c 	and.w	r3, r3, #12
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7a1a      	ldrb	r2, [r3, #8]
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b9e4:	4b2e      	ldr	r3, [pc, #184]	; (800baa0 <tcp_listen_input+0x1f4>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	60da      	str	r2, [r3, #12]
 800b9ec:	4a2c      	ldr	r2, [pc, #176]	; (800baa0 <tcp_listen_input+0x1f4>)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	f003 f8d1 	bl	800eb98 <tcp_timer_needed>
 800b9f6:	4b2b      	ldr	r3, [pc, #172]	; (800baa4 <tcp_listen_input+0x1f8>)
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b9fc:	6978      	ldr	r0, [r7, #20]
 800b9fe:	f001 fd8f 	bl	800d520 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ba02:	4b23      	ldr	r3, [pc, #140]	; (800ba90 <tcp_listen_input+0x1e4>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	89db      	ldrh	r3, [r3, #14]
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4618      	mov	r0, r3
 800ba26:	f006 fe5d 	bl	80126e4 <ip4_route>
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	461a      	mov	r2, r3
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff fa30 	bl	800ae98 <tcp_eff_send_mss_netif>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba40:	2112      	movs	r1, #18
 800ba42:	6978      	ldr	r0, [r7, #20]
 800ba44:	f002 f844 	bl	800dad0 <tcp_enqueue_flags>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ba4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ba54:	2100      	movs	r1, #0
 800ba56:	6978      	ldr	r0, [r7, #20]
 800ba58:	f7fe f97e 	bl	8009d58 <tcp_abandon>
      return;
 800ba5c:	e006      	b.n	800ba6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ba5e:	6978      	ldr	r0, [r7, #20]
 800ba60:	f002 f924 	bl	800dcac <tcp_output>
  return;
 800ba64:	e001      	b.n	800ba6a <tcp_listen_input+0x1be>
    return;
 800ba66:	bf00      	nop
 800ba68:	e000      	b.n	800ba6c <tcp_listen_input+0x1c0>
  return;
 800ba6a:	bf00      	nop
}
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd90      	pop	{r4, r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2001093c 	.word	0x2001093c
 800ba78:	080162ec 	.word	0x080162ec
 800ba7c:	080164e4 	.word	0x080164e4
 800ba80:	08016338 	.word	0x08016338
 800ba84:	20010934 	.word	0x20010934
 800ba88:	2001093a 	.word	0x2001093a
 800ba8c:	20010930 	.word	0x20010930
 800ba90:	20010920 	.word	0x20010920
 800ba94:	2000d194 	.word	0x2000d194
 800ba98:	2000d198 	.word	0x2000d198
 800ba9c:	2000d184 	.word	0x2000d184
 800baa0:	20010904 	.word	0x20010904
 800baa4:	2001090c 	.word	0x2001090c

0800baa8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af04      	add	r7, sp, #16
 800baae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bab0:	4b2f      	ldr	r3, [pc, #188]	; (800bb70 <tcp_timewait_input+0xc8>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d153      	bne.n	800bb64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <tcp_timewait_input+0x28>
 800bac2:	4b2c      	ldr	r3, [pc, #176]	; (800bb74 <tcp_timewait_input+0xcc>)
 800bac4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bac8:	492b      	ldr	r1, [pc, #172]	; (800bb78 <tcp_timewait_input+0xd0>)
 800baca:	482c      	ldr	r0, [pc, #176]	; (800bb7c <tcp_timewait_input+0xd4>)
 800bacc:	f008 fb02 	bl	80140d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <tcp_timewait_input+0xc8>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 0302 	and.w	r3, r3, #2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d02a      	beq.n	800bb32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800badc:	4b28      	ldr	r3, [pc, #160]	; (800bb80 <tcp_timewait_input+0xd8>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	db2d      	blt.n	800bb46 <tcp_timewait_input+0x9e>
 800baea:	4b25      	ldr	r3, [pc, #148]	; (800bb80 <tcp_timewait_input+0xd8>)
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	6879      	ldr	r1, [r7, #4]
 800baf4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800baf6:	440b      	add	r3, r1
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dc23      	bgt.n	800bb46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bafe:	4b21      	ldr	r3, [pc, #132]	; (800bb84 <tcp_timewait_input+0xdc>)
 800bb00:	6819      	ldr	r1, [r3, #0]
 800bb02:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <tcp_timewait_input+0xe0>)
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <tcp_timewait_input+0xd8>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb0e:	4b1f      	ldr	r3, [pc, #124]	; (800bb8c <tcp_timewait_input+0xe4>)
 800bb10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb12:	885b      	ldrh	r3, [r3, #2]
 800bb14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb16:	4a1d      	ldr	r2, [pc, #116]	; (800bb8c <tcp_timewait_input+0xe4>)
 800bb18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb1a:	8812      	ldrh	r2, [r2, #0]
 800bb1c:	b292      	uxth	r2, r2
 800bb1e:	9202      	str	r2, [sp, #8]
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	4b1b      	ldr	r3, [pc, #108]	; (800bb90 <tcp_timewait_input+0xe8>)
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	4b1b      	ldr	r3, [pc, #108]	; (800bb94 <tcp_timewait_input+0xec>)
 800bb28:	4602      	mov	r2, r0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f002 fe72 	bl	800e814 <tcp_rst>
      return;
 800bb30:	e01b      	b.n	800bb6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bb32:	4b0f      	ldr	r3, [pc, #60]	; (800bb70 <tcp_timewait_input+0xc8>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bb3e:	4b16      	ldr	r3, [pc, #88]	; (800bb98 <tcp_timewait_input+0xf0>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bb46:	4b10      	ldr	r3, [pc, #64]	; (800bb88 <tcp_timewait_input+0xe0>)
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00c      	beq.n	800bb68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	8b5b      	ldrh	r3, [r3, #26]
 800bb52:	f043 0302 	orr.w	r3, r3, #2
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f002 f8a5 	bl	800dcac <tcp_output>
  }
  return;
 800bb62:	e001      	b.n	800bb68 <tcp_timewait_input+0xc0>
    return;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <tcp_timewait_input+0xc2>
  return;
 800bb68:	bf00      	nop
}
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	2001093c 	.word	0x2001093c
 800bb74:	080162ec 	.word	0x080162ec
 800bb78:	08016504 	.word	0x08016504
 800bb7c:	08016338 	.word	0x08016338
 800bb80:	20010930 	.word	0x20010930
 800bb84:	20010934 	.word	0x20010934
 800bb88:	2001093a 	.word	0x2001093a
 800bb8c:	20010920 	.word	0x20010920
 800bb90:	2000d194 	.word	0x2000d194
 800bb94:	2000d198 	.word	0x2000d198
 800bb98:	200108f8 	.word	0x200108f8

0800bb9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bb9c:	b590      	push	{r4, r7, lr}
 800bb9e:	b08d      	sub	sp, #52	; 0x34
 800bba0:	af04      	add	r7, sp, #16
 800bba2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <tcp_process+0x24>
 800bbb2:	4b9d      	ldr	r3, [pc, #628]	; (800be28 <tcp_process+0x28c>)
 800bbb4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bbb8:	499c      	ldr	r1, [pc, #624]	; (800be2c <tcp_process+0x290>)
 800bbba:	489d      	ldr	r0, [pc, #628]	; (800be30 <tcp_process+0x294>)
 800bbbc:	f008 fa8a 	bl	80140d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bbc0:	4b9c      	ldr	r3, [pc, #624]	; (800be34 <tcp_process+0x298>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d04e      	beq.n	800bc6a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	7d1b      	ldrb	r3, [r3, #20]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d108      	bne.n	800bbe6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbd8:	4b97      	ldr	r3, [pc, #604]	; (800be38 <tcp_process+0x29c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d123      	bne.n	800bc28 <tcp_process+0x8c>
        acceptable = 1;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	76fb      	strb	r3, [r7, #27]
 800bbe4:	e020      	b.n	800bc28 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbea:	4b94      	ldr	r3, [pc, #592]	; (800be3c <tcp_process+0x2a0>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d102      	bne.n	800bbf8 <tcp_process+0x5c>
        acceptable = 1;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	76fb      	strb	r3, [r7, #27]
 800bbf6:	e017      	b.n	800bc28 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bbf8:	4b90      	ldr	r3, [pc, #576]	; (800be3c <tcp_process+0x2a0>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	db10      	blt.n	800bc28 <tcp_process+0x8c>
 800bc06:	4b8d      	ldr	r3, [pc, #564]	; (800be3c <tcp_process+0x2a0>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc12:	440b      	add	r3, r1
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dc06      	bgt.n	800bc28 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	8b5b      	ldrh	r3, [r3, #26]
 800bc1e:	f043 0302 	orr.w	r3, r3, #2
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bc28:	7efb      	ldrb	r3, [r7, #27]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d01b      	beq.n	800bc66 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	7d1b      	ldrb	r3, [r3, #20]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d106      	bne.n	800bc44 <tcp_process+0xa8>
 800bc36:	4b7c      	ldr	r3, [pc, #496]	; (800be28 <tcp_process+0x28c>)
 800bc38:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bc3c:	4980      	ldr	r1, [pc, #512]	; (800be40 <tcp_process+0x2a4>)
 800bc3e:	487c      	ldr	r0, [pc, #496]	; (800be30 <tcp_process+0x294>)
 800bc40:	f008 fa48 	bl	80140d4 <iprintf>
      recv_flags |= TF_RESET;
 800bc44:	4b7f      	ldr	r3, [pc, #508]	; (800be44 <tcp_process+0x2a8>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	f043 0308 	orr.w	r3, r3, #8
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	4b7d      	ldr	r3, [pc, #500]	; (800be44 <tcp_process+0x2a8>)
 800bc50:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8b5b      	ldrh	r3, [r3, #26]
 800bc56:	f023 0301 	bic.w	r3, r3, #1
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bc60:	f06f 030d 	mvn.w	r3, #13
 800bc64:	e37a      	b.n	800c35c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	e378      	b.n	800c35c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc6a:	4b72      	ldr	r3, [pc, #456]	; (800be34 <tcp_process+0x298>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d010      	beq.n	800bc98 <tcp_process+0xfc>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	7d1b      	ldrb	r3, [r3, #20]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d00c      	beq.n	800bc98 <tcp_process+0xfc>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	7d1b      	ldrb	r3, [r3, #20]
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d008      	beq.n	800bc98 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	8b5b      	ldrh	r3, [r3, #26]
 800bc8a:	f043 0302 	orr.w	r3, r3, #2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	e361      	b.n	800c35c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	8b5b      	ldrh	r3, [r3, #26]
 800bc9c:	f003 0310 	and.w	r3, r3, #16
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d103      	bne.n	800bcac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bca4:	4b68      	ldr	r3, [pc, #416]	; (800be48 <tcp_process+0x2ac>)
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f001 fc2f 	bl	800d520 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7d1b      	ldrb	r3, [r3, #20]
 800bcc6:	3b02      	subs	r3, #2
 800bcc8:	2b07      	cmp	r3, #7
 800bcca:	f200 8337 	bhi.w	800c33c <tcp_process+0x7a0>
 800bcce:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <tcp_process+0x138>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bcf5 	.word	0x0800bcf5
 800bcd8:	0800bf25 	.word	0x0800bf25
 800bcdc:	0800c09d 	.word	0x0800c09d
 800bce0:	0800c0c7 	.word	0x0800c0c7
 800bce4:	0800c1eb 	.word	0x0800c1eb
 800bce8:	0800c09d 	.word	0x0800c09d
 800bcec:	0800c277 	.word	0x0800c277
 800bcf0:	0800c307 	.word	0x0800c307
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bcf4:	4b4f      	ldr	r3, [pc, #316]	; (800be34 <tcp_process+0x298>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f003 0310 	and.w	r3, r3, #16
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 80e4 	beq.w	800beca <tcp_process+0x32e>
 800bd02:	4b4c      	ldr	r3, [pc, #304]	; (800be34 <tcp_process+0x298>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 80dd 	beq.w	800beca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	4b48      	ldr	r3, [pc, #288]	; (800be38 <tcp_process+0x29c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	f040 80d5 	bne.w	800beca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bd20:	4b46      	ldr	r3, [pc, #280]	; (800be3c <tcp_process+0x2a0>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bd32:	4b41      	ldr	r3, [pc, #260]	; (800be38 <tcp_process+0x29c>)
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bd3a:	4b44      	ldr	r3, [pc, #272]	; (800be4c <tcp_process+0x2b0>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	89db      	ldrh	r3, [r3, #14]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd54:	4b39      	ldr	r3, [pc, #228]	; (800be3c <tcp_process+0x2a0>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	1e5a      	subs	r2, r3, #1
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2204      	movs	r2, #4
 800bd62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f006 fcb9 	bl	80126e4 <ip4_route>
 800bd72:	4601      	mov	r1, r0
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3304      	adds	r3, #4
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff f88c 	bl	800ae98 <tcp_eff_send_mss_netif>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd8c:	009a      	lsls	r2, r3, #2
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd92:	005b      	lsls	r3, r3, #1
 800bd94:	f241 111c 	movw	r1, #4380	; 0x111c
 800bd98:	428b      	cmp	r3, r1
 800bd9a:	bf38      	it	cc
 800bd9c:	460b      	movcc	r3, r1
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d204      	bcs.n	800bdac <tcp_process+0x210>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	e00d      	b.n	800bdc8 <tcp_process+0x22c>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	f241 121c 	movw	r2, #4380	; 0x111c
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d904      	bls.n	800bdc4 <tcp_process+0x228>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	e001      	b.n	800bdc8 <tcp_process+0x22c>
 800bdc4:	f241 131c 	movw	r3, #4380	; 0x111c
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d106      	bne.n	800bde6 <tcp_process+0x24a>
 800bdd8:	4b13      	ldr	r3, [pc, #76]	; (800be28 <tcp_process+0x28c>)
 800bdda:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bdde:	491c      	ldr	r1, [pc, #112]	; (800be50 <tcp_process+0x2b4>)
 800bde0:	4813      	ldr	r0, [pc, #76]	; (800be30 <tcp_process+0x294>)
 800bde2:	f008 f977 	bl	80140d4 <iprintf>
        --pcb->snd_queuelen;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdfa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d12a      	bne.n	800be58 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <tcp_process+0x280>
 800be0e:	4b06      	ldr	r3, [pc, #24]	; (800be28 <tcp_process+0x28c>)
 800be10:	f44f 725d 	mov.w	r2, #884	; 0x374
 800be14:	490f      	ldr	r1, [pc, #60]	; (800be54 <tcp_process+0x2b8>)
 800be16:	4806      	ldr	r0, [pc, #24]	; (800be30 <tcp_process+0x294>)
 800be18:	f008 f95c 	bl	80140d4 <iprintf>
          pcb->unsent = rseg->next;
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	66da      	str	r2, [r3, #108]	; 0x6c
 800be24:	e01c      	b.n	800be60 <tcp_process+0x2c4>
 800be26:	bf00      	nop
 800be28:	080162ec 	.word	0x080162ec
 800be2c:	08016524 	.word	0x08016524
 800be30:	08016338 	.word	0x08016338
 800be34:	2001093c 	.word	0x2001093c
 800be38:	20010934 	.word	0x20010934
 800be3c:	20010930 	.word	0x20010930
 800be40:	08016540 	.word	0x08016540
 800be44:	2001093d 	.word	0x2001093d
 800be48:	200108f8 	.word	0x200108f8
 800be4c:	20010920 	.word	0x20010920
 800be50:	08016560 	.word	0x08016560
 800be54:	08016578 	.word	0x08016578
        } else {
          pcb->unacked = rseg->next;
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800be60:	69f8      	ldr	r0, [r7, #28]
 800be62:	f7fe fd22 	bl	800a8aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d104      	bne.n	800be78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be74:	861a      	strh	r2, [r3, #48]	; 0x30
 800be76:	e006      	b.n	800be86 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00a      	beq.n	800bea6 <tcp_process+0x30a>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6910      	ldr	r0, [r2, #16]
 800be9a:	2200      	movs	r2, #0
 800be9c:	6879      	ldr	r1, [r7, #4]
 800be9e:	4798      	blx	r3
 800bea0:	4603      	mov	r3, r0
 800bea2:	76bb      	strb	r3, [r7, #26]
 800bea4:	e001      	b.n	800beaa <tcp_process+0x30e>
 800bea6:	2300      	movs	r3, #0
 800bea8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800beaa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800beae:	f113 0f0d 	cmn.w	r3, #13
 800beb2:	d102      	bne.n	800beba <tcp_process+0x31e>
          return ERR_ABRT;
 800beb4:	f06f 030c 	mvn.w	r3, #12
 800beb8:	e250      	b.n	800c35c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	8b5b      	ldrh	r3, [r3, #26]
 800bebe:	f043 0302 	orr.w	r3, r3, #2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bec8:	e23a      	b.n	800c340 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800beca:	4b98      	ldr	r3, [pc, #608]	; (800c12c <tcp_process+0x590>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	f003 0310 	and.w	r3, r3, #16
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f000 8234 	beq.w	800c340 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bed8:	4b95      	ldr	r3, [pc, #596]	; (800c130 <tcp_process+0x594>)
 800beda:	6819      	ldr	r1, [r3, #0]
 800bedc:	4b95      	ldr	r3, [pc, #596]	; (800c134 <tcp_process+0x598>)
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	4b95      	ldr	r3, [pc, #596]	; (800c138 <tcp_process+0x59c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bee8:	4b94      	ldr	r3, [pc, #592]	; (800c13c <tcp_process+0x5a0>)
 800beea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800beec:	885b      	ldrh	r3, [r3, #2]
 800beee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bef0:	4a92      	ldr	r2, [pc, #584]	; (800c13c <tcp_process+0x5a0>)
 800bef2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bef4:	8812      	ldrh	r2, [r2, #0]
 800bef6:	b292      	uxth	r2, r2
 800bef8:	9202      	str	r2, [sp, #8]
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	4b90      	ldr	r3, [pc, #576]	; (800c140 <tcp_process+0x5a4>)
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	4b90      	ldr	r3, [pc, #576]	; (800c144 <tcp_process+0x5a8>)
 800bf02:	4602      	mov	r2, r0
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f002 fc85 	bl	800e814 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf10:	2b05      	cmp	r3, #5
 800bf12:	f200 8215 	bhi.w	800c340 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f002 fa4f 	bl	800e3c0 <tcp_rexmit_rto>
      break;
 800bf22:	e20d      	b.n	800c340 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bf24:	4b81      	ldr	r3, [pc, #516]	; (800c12c <tcp_process+0x590>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 80a1 	beq.w	800c074 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf32:	4b7f      	ldr	r3, [pc, #508]	; (800c130 <tcp_process+0x594>)
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	1ad3      	subs	r3, r2, r3
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	db7e      	blt.n	800c040 <tcp_process+0x4a4>
 800bf42:	4b7b      	ldr	r3, [pc, #492]	; (800c130 <tcp_process+0x594>)
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	dc77      	bgt.n	800c040 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2204      	movs	r2, #4
 800bf54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bf5e:	23fa      	movs	r3, #250	; 0xfa
 800bf60:	76bb      	strb	r3, [r7, #26]
 800bf62:	e01d      	b.n	800bfa0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <tcp_process+0x3e0>
 800bf6e:	4b76      	ldr	r3, [pc, #472]	; (800c148 <tcp_process+0x5ac>)
 800bf70:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bf74:	4975      	ldr	r1, [pc, #468]	; (800c14c <tcp_process+0x5b0>)
 800bf76:	4876      	ldr	r0, [pc, #472]	; (800c150 <tcp_process+0x5b4>)
 800bf78:	f008 f8ac 	bl	80140d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <tcp_process+0x400>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	6910      	ldr	r0, [r2, #16]
 800bf90:	2200      	movs	r2, #0
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	4798      	blx	r3
 800bf96:	4603      	mov	r3, r0
 800bf98:	76bb      	strb	r3, [r7, #26]
 800bf9a:	e001      	b.n	800bfa0 <tcp_process+0x404>
 800bf9c:	23f0      	movs	r3, #240	; 0xf0
 800bf9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bfa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00a      	beq.n	800bfbe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bfa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfac:	f113 0f0d 	cmn.w	r3, #13
 800bfb0:	d002      	beq.n	800bfb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7fd ff8e 	bl	8009ed4 <tcp_abort>
            }
            return ERR_ABRT;
 800bfb8:	f06f 030c 	mvn.w	r3, #12
 800bfbc:	e1ce      	b.n	800c35c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fae0 	bl	800c584 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bfc4:	4b63      	ldr	r3, [pc, #396]	; (800c154 <tcp_process+0x5b8>)
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <tcp_process+0x43c>
            recv_acked--;
 800bfcc:	4b61      	ldr	r3, [pc, #388]	; (800c154 <tcp_process+0x5b8>)
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	4b5f      	ldr	r3, [pc, #380]	; (800c154 <tcp_process+0x5b8>)
 800bfd6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfdc:	009a      	lsls	r2, r3, #2
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	f241 111c 	movw	r1, #4380	; 0x111c
 800bfe8:	428b      	cmp	r3, r1
 800bfea:	bf38      	it	cc
 800bfec:	460b      	movcc	r3, r1
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d204      	bcs.n	800bffc <tcp_process+0x460>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	e00d      	b.n	800c018 <tcp_process+0x47c>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	f241 121c 	movw	r2, #4380	; 0x111c
 800c006:	4293      	cmp	r3, r2
 800c008:	d904      	bls.n	800c014 <tcp_process+0x478>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	b29b      	uxth	r3, r3
 800c012:	e001      	b.n	800c018 <tcp_process+0x47c>
 800c014:	f241 131c 	movw	r3, #4380	; 0x111c
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c01e:	4b4e      	ldr	r3, [pc, #312]	; (800c158 <tcp_process+0x5bc>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f003 0320 	and.w	r3, r3, #32
 800c026:	2b00      	cmp	r3, #0
 800c028:	d037      	beq.n	800c09a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	8b5b      	ldrh	r3, [r3, #26]
 800c02e:	f043 0302 	orr.w	r3, r3, #2
 800c032:	b29a      	uxth	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2207      	movs	r2, #7
 800c03c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c03e:	e02c      	b.n	800c09a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c040:	4b3b      	ldr	r3, [pc, #236]	; (800c130 <tcp_process+0x594>)
 800c042:	6819      	ldr	r1, [r3, #0]
 800c044:	4b3b      	ldr	r3, [pc, #236]	; (800c134 <tcp_process+0x598>)
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	4b3b      	ldr	r3, [pc, #236]	; (800c138 <tcp_process+0x59c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c050:	4b3a      	ldr	r3, [pc, #232]	; (800c13c <tcp_process+0x5a0>)
 800c052:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c058:	4a38      	ldr	r2, [pc, #224]	; (800c13c <tcp_process+0x5a0>)
 800c05a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c05c:	8812      	ldrh	r2, [r2, #0]
 800c05e:	b292      	uxth	r2, r2
 800c060:	9202      	str	r2, [sp, #8]
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	4b36      	ldr	r3, [pc, #216]	; (800c140 <tcp_process+0x5a4>)
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	4b36      	ldr	r3, [pc, #216]	; (800c144 <tcp_process+0x5a8>)
 800c06a:	4602      	mov	r2, r0
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f002 fbd1 	bl	800e814 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c072:	e167      	b.n	800c344 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c074:	4b2d      	ldr	r3, [pc, #180]	; (800c12c <tcp_process+0x590>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f003 0302 	and.w	r3, r3, #2
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 8161 	beq.w	800c344 <tcp_process+0x7a8>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c086:	1e5a      	subs	r2, r3, #1
 800c088:	4b2b      	ldr	r3, [pc, #172]	; (800c138 <tcp_process+0x59c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	f040 8159 	bne.w	800c344 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f002 f9b6 	bl	800e404 <tcp_rexmit>
      break;
 800c098:	e154      	b.n	800c344 <tcp_process+0x7a8>
 800c09a:	e153      	b.n	800c344 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fa71 	bl	800c584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c0a2:	4b2d      	ldr	r3, [pc, #180]	; (800c158 <tcp_process+0x5bc>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 814c 	beq.w	800c348 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	8b5b      	ldrh	r3, [r3, #26]
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2207      	movs	r2, #7
 800c0c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0c4:	e140      	b.n	800c348 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fa5c 	bl	800c584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c0cc:	4b22      	ldr	r3, [pc, #136]	; (800c158 <tcp_process+0x5bc>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f003 0320 	and.w	r3, r3, #32
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d071      	beq.n	800c1bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0d8:	4b14      	ldr	r3, [pc, #80]	; (800c12c <tcp_process+0x590>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	f003 0310 	and.w	r3, r3, #16
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d060      	beq.n	800c1a6 <tcp_process+0x60a>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0e8:	4b11      	ldr	r3, [pc, #68]	; (800c130 <tcp_process+0x594>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d15a      	bne.n	800c1a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d156      	bne.n	800c1a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8b5b      	ldrh	r3, [r3, #26]
 800c0fc:	f043 0302 	orr.w	r3, r3, #2
 800c100:	b29a      	uxth	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7fe fdbc 	bl	800ac84 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c10c:	4b13      	ldr	r3, [pc, #76]	; (800c15c <tcp_process+0x5c0>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	429a      	cmp	r2, r3
 800c114:	d105      	bne.n	800c122 <tcp_process+0x586>
 800c116:	4b11      	ldr	r3, [pc, #68]	; (800c15c <tcp_process+0x5c0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	4a0f      	ldr	r2, [pc, #60]	; (800c15c <tcp_process+0x5c0>)
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	e02e      	b.n	800c180 <tcp_process+0x5e4>
 800c122:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <tcp_process+0x5c0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	e027      	b.n	800c17a <tcp_process+0x5de>
 800c12a:	bf00      	nop
 800c12c:	2001093c 	.word	0x2001093c
 800c130:	20010934 	.word	0x20010934
 800c134:	2001093a 	.word	0x2001093a
 800c138:	20010930 	.word	0x20010930
 800c13c:	20010920 	.word	0x20010920
 800c140:	2000d194 	.word	0x2000d194
 800c144:	2000d198 	.word	0x2000d198
 800c148:	080162ec 	.word	0x080162ec
 800c14c:	0801658c 	.word	0x0801658c
 800c150:	08016338 	.word	0x08016338
 800c154:	20010938 	.word	0x20010938
 800c158:	2001093d 	.word	0x2001093d
 800c15c:	20010904 	.word	0x20010904
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	429a      	cmp	r2, r3
 800c168:	d104      	bne.n	800c174 <tcp_process+0x5d8>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	60da      	str	r2, [r3, #12]
 800c172:	e005      	b.n	800c180 <tcp_process+0x5e4>
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	617b      	str	r3, [r7, #20]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1ef      	bne.n	800c160 <tcp_process+0x5c4>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	60da      	str	r2, [r3, #12]
 800c186:	4b77      	ldr	r3, [pc, #476]	; (800c364 <tcp_process+0x7c8>)
 800c188:	2201      	movs	r2, #1
 800c18a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	220a      	movs	r2, #10
 800c190:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c192:	4b75      	ldr	r3, [pc, #468]	; (800c368 <tcp_process+0x7cc>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60da      	str	r2, [r3, #12]
 800c19a:	4a73      	ldr	r2, [pc, #460]	; (800c368 <tcp_process+0x7cc>)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	f002 fcfa 	bl	800eb98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c1a4:	e0d2      	b.n	800c34c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	8b5b      	ldrh	r3, [r3, #26]
 800c1aa:	f043 0302 	orr.w	r3, r3, #2
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2208      	movs	r2, #8
 800c1b8:	751a      	strb	r2, [r3, #20]
      break;
 800c1ba:	e0c7      	b.n	800c34c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1bc:	4b6b      	ldr	r3, [pc, #428]	; (800c36c <tcp_process+0x7d0>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 0310 	and.w	r3, r3, #16
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80c1 	beq.w	800c34c <tcp_process+0x7b0>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1ce:	4b68      	ldr	r3, [pc, #416]	; (800c370 <tcp_process+0x7d4>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	f040 80ba 	bne.w	800c34c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f040 80b5 	bne.w	800c34c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2206      	movs	r2, #6
 800c1e6:	751a      	strb	r2, [r3, #20]
      break;
 800c1e8:	e0b0      	b.n	800c34c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f9ca 	bl	800c584 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c1f0:	4b60      	ldr	r3, [pc, #384]	; (800c374 <tcp_process+0x7d8>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	f003 0320 	and.w	r3, r3, #32
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 80a9 	beq.w	800c350 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	8b5b      	ldrh	r3, [r3, #26]
 800c202:	f043 0302 	orr.w	r3, r3, #2
 800c206:	b29a      	uxth	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7fe fd39 	bl	800ac84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c212:	4b59      	ldr	r3, [pc, #356]	; (800c378 <tcp_process+0x7dc>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d105      	bne.n	800c228 <tcp_process+0x68c>
 800c21c:	4b56      	ldr	r3, [pc, #344]	; (800c378 <tcp_process+0x7dc>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	4a55      	ldr	r2, [pc, #340]	; (800c378 <tcp_process+0x7dc>)
 800c224:	6013      	str	r3, [r2, #0]
 800c226:	e013      	b.n	800c250 <tcp_process+0x6b4>
 800c228:	4b53      	ldr	r3, [pc, #332]	; (800c378 <tcp_process+0x7dc>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	613b      	str	r3, [r7, #16]
 800c22e:	e00c      	b.n	800c24a <tcp_process+0x6ae>
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	429a      	cmp	r2, r3
 800c238:	d104      	bne.n	800c244 <tcp_process+0x6a8>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68da      	ldr	r2, [r3, #12]
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	60da      	str	r2, [r3, #12]
 800c242:	e005      	b.n	800c250 <tcp_process+0x6b4>
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	613b      	str	r3, [r7, #16]
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1ef      	bne.n	800c230 <tcp_process+0x694>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	60da      	str	r2, [r3, #12]
 800c256:	4b43      	ldr	r3, [pc, #268]	; (800c364 <tcp_process+0x7c8>)
 800c258:	2201      	movs	r2, #1
 800c25a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	220a      	movs	r2, #10
 800c260:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c262:	4b41      	ldr	r3, [pc, #260]	; (800c368 <tcp_process+0x7cc>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	4a3f      	ldr	r2, [pc, #252]	; (800c368 <tcp_process+0x7cc>)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	f002 fc92 	bl	800eb98 <tcp_timer_needed>
      }
      break;
 800c274:	e06c      	b.n	800c350 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f984 	bl	800c584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c27c:	4b3b      	ldr	r3, [pc, #236]	; (800c36c <tcp_process+0x7d0>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	f003 0310 	and.w	r3, r3, #16
 800c284:	2b00      	cmp	r3, #0
 800c286:	d065      	beq.n	800c354 <tcp_process+0x7b8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c28c:	4b38      	ldr	r3, [pc, #224]	; (800c370 <tcp_process+0x7d4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d15f      	bne.n	800c354 <tcp_process+0x7b8>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d15b      	bne.n	800c354 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7fe fcf1 	bl	800ac84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c2a2:	4b35      	ldr	r3, [pc, #212]	; (800c378 <tcp_process+0x7dc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d105      	bne.n	800c2b8 <tcp_process+0x71c>
 800c2ac:	4b32      	ldr	r3, [pc, #200]	; (800c378 <tcp_process+0x7dc>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	4a31      	ldr	r2, [pc, #196]	; (800c378 <tcp_process+0x7dc>)
 800c2b4:	6013      	str	r3, [r2, #0]
 800c2b6:	e013      	b.n	800c2e0 <tcp_process+0x744>
 800c2b8:	4b2f      	ldr	r3, [pc, #188]	; (800c378 <tcp_process+0x7dc>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	60fb      	str	r3, [r7, #12]
 800c2be:	e00c      	b.n	800c2da <tcp_process+0x73e>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d104      	bne.n	800c2d4 <tcp_process+0x738>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	68da      	ldr	r2, [r3, #12]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	60da      	str	r2, [r3, #12]
 800c2d2:	e005      	b.n	800c2e0 <tcp_process+0x744>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1ef      	bne.n	800c2c0 <tcp_process+0x724>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	60da      	str	r2, [r3, #12]
 800c2e6:	4b1f      	ldr	r3, [pc, #124]	; (800c364 <tcp_process+0x7c8>)
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	220a      	movs	r2, #10
 800c2f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c2f2:	4b1d      	ldr	r3, [pc, #116]	; (800c368 <tcp_process+0x7cc>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	60da      	str	r2, [r3, #12]
 800c2fa:	4a1b      	ldr	r2, [pc, #108]	; (800c368 <tcp_process+0x7cc>)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	f002 fc4a 	bl	800eb98 <tcp_timer_needed>
      }
      break;
 800c304:	e026      	b.n	800c354 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f93c 	bl	800c584 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c30c:	4b17      	ldr	r3, [pc, #92]	; (800c36c <tcp_process+0x7d0>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01f      	beq.n	800c358 <tcp_process+0x7bc>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c31c:	4b14      	ldr	r3, [pc, #80]	; (800c370 <tcp_process+0x7d4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	429a      	cmp	r2, r3
 800c322:	d119      	bne.n	800c358 <tcp_process+0x7bc>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d115      	bne.n	800c358 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c32c:	4b11      	ldr	r3, [pc, #68]	; (800c374 <tcp_process+0x7d8>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	f043 0310 	orr.w	r3, r3, #16
 800c334:	b2da      	uxtb	r2, r3
 800c336:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <tcp_process+0x7d8>)
 800c338:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c33a:	e00d      	b.n	800c358 <tcp_process+0x7bc>
    default:
      break;
 800c33c:	bf00      	nop
 800c33e:	e00c      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c340:	bf00      	nop
 800c342:	e00a      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c344:	bf00      	nop
 800c346:	e008      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c348:	bf00      	nop
 800c34a:	e006      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c34c:	bf00      	nop
 800c34e:	e004      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c350:	bf00      	nop
 800c352:	e002      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <tcp_process+0x7be>
      break;
 800c358:	bf00      	nop
  }
  return ERR_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3724      	adds	r7, #36	; 0x24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd90      	pop	{r4, r7, pc}
 800c364:	2001090c 	.word	0x2001090c
 800c368:	20010908 	.word	0x20010908
 800c36c:	2001093c 	.word	0x2001093c
 800c370:	20010934 	.word	0x20010934
 800c374:	2001093d 	.word	0x2001093d
 800c378:	20010904 	.word	0x20010904

0800c37c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d106      	bne.n	800c39a <tcp_oos_insert_segment+0x1e>
 800c38c:	4b3b      	ldr	r3, [pc, #236]	; (800c47c <tcp_oos_insert_segment+0x100>)
 800c38e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c392:	493b      	ldr	r1, [pc, #236]	; (800c480 <tcp_oos_insert_segment+0x104>)
 800c394:	483b      	ldr	r0, [pc, #236]	; (800c484 <tcp_oos_insert_segment+0x108>)
 800c396:	f007 fe9d 	bl	80140d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	899b      	ldrh	r3, [r3, #12]
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fb fbf4 	bl	8007b90 <lwip_htons>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d028      	beq.n	800c406 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c3b4:	6838      	ldr	r0, [r7, #0]
 800c3b6:	f7fe fa63 	bl	800a880 <tcp_segs_free>
    next = NULL;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	e056      	b.n	800c46e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	899b      	ldrh	r3, [r3, #12]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fb fbe1 	bl	8007b90 <lwip_htons>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00d      	beq.n	800c3f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	899b      	ldrh	r3, [r3, #12]
 800c3e0:	b29c      	uxth	r4, r3
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	f7fb fbd4 	bl	8007b90 <lwip_htons>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	4322      	orrs	r2, r4
 800c3f2:	b292      	uxth	r2, r2
 800c3f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7fe fa52 	bl	800a8aa <tcp_seg_free>
    while (next &&
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00e      	beq.n	800c42a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	891b      	ldrh	r3, [r3, #8]
 800c410:	461a      	mov	r2, r3
 800c412:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <tcp_oos_insert_segment+0x10c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	441a      	add	r2, r3
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	8909      	ldrh	r1, [r1, #8]
 800c422:	440b      	add	r3, r1
 800c424:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c426:	2b00      	cmp	r3, #0
 800c428:	daca      	bge.n	800c3c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d01e      	beq.n	800c46e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	891b      	ldrh	r3, [r3, #8]
 800c434:	461a      	mov	r2, r3
 800c436:	4b14      	ldr	r3, [pc, #80]	; (800c488 <tcp_oos_insert_segment+0x10c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	441a      	add	r2, r3
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c444:	2b00      	cmp	r3, #0
 800c446:	dd12      	ble.n	800c46e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	b29a      	uxth	r2, r3
 800c450:	4b0d      	ldr	r3, [pc, #52]	; (800c488 <tcp_oos_insert_segment+0x10c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	b29b      	uxth	r3, r3
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	891b      	ldrh	r3, [r3, #8]
 800c466:	4619      	mov	r1, r3
 800c468:	4610      	mov	r0, r2
 800c46a:	f7fc fe09 	bl	8009080 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	601a      	str	r2, [r3, #0]
}
 800c474:	bf00      	nop
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd90      	pop	{r4, r7, pc}
 800c47c:	080162ec 	.word	0x080162ec
 800c480:	080165ac 	.word	0x080165ac
 800c484:	08016338 	.word	0x08016338
 800c488:	20010930 	.word	0x20010930

0800c48c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c48c:	b5b0      	push	{r4, r5, r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c49a:	e03e      	b.n	800c51a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fc fffc 	bl	80094a8 <pbuf_clen>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4ba:	8a7a      	ldrh	r2, [r7, #18]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d906      	bls.n	800c4ce <tcp_free_acked_segments+0x42>
 800c4c0:	4b2a      	ldr	r3, [pc, #168]	; (800c56c <tcp_free_acked_segments+0xe0>)
 800c4c2:	f240 4257 	movw	r2, #1111	; 0x457
 800c4c6:	492a      	ldr	r1, [pc, #168]	; (800c570 <tcp_free_acked_segments+0xe4>)
 800c4c8:	482a      	ldr	r0, [pc, #168]	; (800c574 <tcp_free_acked_segments+0xe8>)
 800c4ca:	f007 fe03 	bl	80140d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c4d4:	8a7b      	ldrh	r3, [r7, #18]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	891a      	ldrh	r2, [r3, #8]
 800c4e4:	4b24      	ldr	r3, [pc, #144]	; (800c578 <tcp_free_acked_segments+0xec>)
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	4b22      	ldr	r3, [pc, #136]	; (800c578 <tcp_free_acked_segments+0xec>)
 800c4ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c4f0:	6978      	ldr	r0, [r7, #20]
 800c4f2:	f7fe f9da 	bl	800a8aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00c      	beq.n	800c51a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d109      	bne.n	800c51a <tcp_free_acked_segments+0x8e>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <tcp_free_acked_segments+0x8e>
 800c50c:	4b17      	ldr	r3, [pc, #92]	; (800c56c <tcp_free_acked_segments+0xe0>)
 800c50e:	f240 4261 	movw	r2, #1121	; 0x461
 800c512:	491a      	ldr	r1, [pc, #104]	; (800c57c <tcp_free_acked_segments+0xf0>)
 800c514:	4817      	ldr	r0, [pc, #92]	; (800c574 <tcp_free_acked_segments+0xe8>)
 800c516:	f007 fddd 	bl	80140d4 <iprintf>
  while (seg_list != NULL &&
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d020      	beq.n	800c562 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	4618      	mov	r0, r3
 800c528:	f7fb fb47 	bl	8007bba <lwip_htonl>
 800c52c:	4604      	mov	r4, r0
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	891b      	ldrh	r3, [r3, #8]
 800c532:	461d      	mov	r5, r3
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	899b      	ldrh	r3, [r3, #12]
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fb fb27 	bl	8007b90 <lwip_htons>
 800c542:	4603      	mov	r3, r0
 800c544:	b2db      	uxtb	r3, r3
 800c546:	f003 0303 	and.w	r3, r3, #3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <tcp_free_acked_segments+0xc6>
 800c54e:	2301      	movs	r3, #1
 800c550:	e000      	b.n	800c554 <tcp_free_acked_segments+0xc8>
 800c552:	2300      	movs	r3, #0
 800c554:	442b      	add	r3, r5
 800c556:	18e2      	adds	r2, r4, r3
 800c558:	4b09      	ldr	r3, [pc, #36]	; (800c580 <tcp_free_acked_segments+0xf4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c55e:	2b00      	cmp	r3, #0
 800c560:	dd9c      	ble.n	800c49c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c562:	68bb      	ldr	r3, [r7, #8]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bdb0      	pop	{r4, r5, r7, pc}
 800c56c:	080162ec 	.word	0x080162ec
 800c570:	080165d4 	.word	0x080165d4
 800c574:	08016338 	.word	0x08016338
 800c578:	20010938 	.word	0x20010938
 800c57c:	080165fc 	.word	0x080165fc
 800c580:	20010934 	.word	0x20010934

0800c584 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c584:	b5b0      	push	{r4, r5, r7, lr}
 800c586:	b094      	sub	sp, #80	; 0x50
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <tcp_receive+0x20>
 800c596:	4b91      	ldr	r3, [pc, #580]	; (800c7dc <tcp_receive+0x258>)
 800c598:	f240 427b 	movw	r2, #1147	; 0x47b
 800c59c:	4990      	ldr	r1, [pc, #576]	; (800c7e0 <tcp_receive+0x25c>)
 800c59e:	4891      	ldr	r0, [pc, #580]	; (800c7e4 <tcp_receive+0x260>)
 800c5a0:	f007 fd98 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7d1b      	ldrb	r3, [r3, #20]
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d806      	bhi.n	800c5ba <tcp_receive+0x36>
 800c5ac:	4b8b      	ldr	r3, [pc, #556]	; (800c7dc <tcp_receive+0x258>)
 800c5ae:	f240 427c 	movw	r2, #1148	; 0x47c
 800c5b2:	498d      	ldr	r1, [pc, #564]	; (800c7e8 <tcp_receive+0x264>)
 800c5b4:	488b      	ldr	r0, [pc, #556]	; (800c7e4 <tcp_receive+0x260>)
 800c5b6:	f007 fd8d 	bl	80140d4 <iprintf>

  if (flags & TCP_ACK) {
 800c5ba:	4b8c      	ldr	r3, [pc, #560]	; (800c7ec <tcp_receive+0x268>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	f003 0310 	and.w	r3, r3, #16
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 8264 	beq.w	800ca90 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d4:	4413      	add	r3, r2
 800c5d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5dc:	4b84      	ldr	r3, [pc, #528]	; (800c7f0 <tcp_receive+0x26c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	db1b      	blt.n	800c61e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5ea:	4b81      	ldr	r3, [pc, #516]	; (800c7f0 <tcp_receive+0x26c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d106      	bne.n	800c600 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5f6:	4b7f      	ldr	r3, [pc, #508]	; (800c7f4 <tcp_receive+0x270>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	db0e      	blt.n	800c61e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c604:	4b7b      	ldr	r3, [pc, #492]	; (800c7f4 <tcp_receive+0x270>)
 800c606:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c608:	429a      	cmp	r2, r3
 800c60a:	d125      	bne.n	800c658 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c60c:	4b7a      	ldr	r3, [pc, #488]	; (800c7f8 <tcp_receive+0x274>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	89db      	ldrh	r3, [r3, #14]
 800c612:	b29a      	uxth	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d91c      	bls.n	800c658 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c61e:	4b76      	ldr	r3, [pc, #472]	; (800c7f8 <tcp_receive+0x274>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	89db      	ldrh	r3, [r3, #14]
 800c624:	b29a      	uxth	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c638:	429a      	cmp	r2, r3
 800c63a:	d205      	bcs.n	800c648 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c648:	4b69      	ldr	r3, [pc, #420]	; (800c7f0 <tcp_receive+0x26c>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c650:	4b68      	ldr	r3, [pc, #416]	; (800c7f4 <tcp_receive+0x270>)
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c658:	4b66      	ldr	r3, [pc, #408]	; (800c7f4 <tcp_receive+0x270>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	dc58      	bgt.n	800c718 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c666:	4b65      	ldr	r3, [pc, #404]	; (800c7fc <tcp_receive+0x278>)
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d14b      	bne.n	800c706 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c678:	4413      	add	r3, r2
 800c67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d142      	bne.n	800c706 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c686:	2b00      	cmp	r3, #0
 800c688:	db3d      	blt.n	800c706 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c68e:	4b59      	ldr	r3, [pc, #356]	; (800c7f4 <tcp_receive+0x270>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	429a      	cmp	r2, r3
 800c694:	d137      	bne.n	800c706 <tcp_receive+0x182>
              found_dupack = 1;
 800c696:	2301      	movs	r3, #1
 800c698:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6a0:	2bff      	cmp	r3, #255	; 0xff
 800c6a2:	d007      	beq.n	800c6b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d91b      	bls.n	800c6f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6c8:	4413      	add	r3, r2
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d30a      	bcc.n	800c6ec <tcp_receive+0x168>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6e0:	4413      	add	r3, r2
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c6ea:	e004      	b.n	800c6f6 <tcp_receive+0x172>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d902      	bls.n	800c706 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 feeb 	bl	800e4dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f040 8161 	bne.w	800c9d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c716:	e15b      	b.n	800c9d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c718:	4b36      	ldr	r3, [pc, #216]	; (800c7f4 <tcp_receive+0x270>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	f2c0 814e 	blt.w	800c9c6 <tcp_receive+0x442>
 800c72a:	4b32      	ldr	r3, [pc, #200]	; (800c7f4 <tcp_receive+0x270>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	f300 8146 	bgt.w	800c9c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	8b5b      	ldrh	r3, [r3, #26]
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	2b00      	cmp	r3, #0
 800c744:	d010      	beq.n	800c768 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	8b5b      	ldrh	r3, [r3, #26]
 800c74a:	f023 0304 	bic.w	r3, r3, #4
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c776:	10db      	asrs	r3, r3, #3
 800c778:	b21b      	sxth	r3, r3
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c782:	b29b      	uxth	r3, r3
 800c784:	4413      	add	r3, r2
 800c786:	b29b      	uxth	r3, r3
 800c788:	b21a      	sxth	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c790:	4b18      	ldr	r3, [pc, #96]	; (800c7f4 <tcp_receive+0x270>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	b29a      	uxth	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c7a8:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <tcp_receive+0x270>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7d1b      	ldrb	r3, [r3, #20]
 800c7b4:	2b03      	cmp	r3, #3
 800c7b6:	f240 8097 	bls.w	800c8e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d245      	bcs.n	800c856 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8b5b      	ldrh	r3, [r3, #26]
 800c7ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d014      	beq.n	800c800 <tcp_receive+0x27c>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e013      	b.n	800c802 <tcp_receive+0x27e>
 800c7da:	bf00      	nop
 800c7dc:	080162ec 	.word	0x080162ec
 800c7e0:	0801661c 	.word	0x0801661c
 800c7e4:	08016338 	.word	0x08016338
 800c7e8:	08016638 	.word	0x08016638
 800c7ec:	2001093c 	.word	0x2001093c
 800c7f0:	20010930 	.word	0x20010930
 800c7f4:	20010934 	.word	0x20010934
 800c7f8:	20010920 	.word	0x20010920
 800c7fc:	2001093a 	.word	0x2001093a
 800c800:	2302      	movs	r3, #2
 800c802:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c806:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c810:	fb12 f303 	smulbb	r3, r2, r3
 800c814:	b29b      	uxth	r3, r3
 800c816:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c818:	4293      	cmp	r3, r2
 800c81a:	bf28      	it	cs
 800c81c:	4613      	movcs	r3, r2
 800c81e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c826:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c828:	4413      	add	r3, r2
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c832:	429a      	cmp	r2, r3
 800c834:	d309      	bcc.n	800c84a <tcp_receive+0x2c6>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c83c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c83e:	4413      	add	r3, r2
 800c840:	b29a      	uxth	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c848:	e04e      	b.n	800c8e8 <tcp_receive+0x364>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c850:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c854:	e048      	b.n	800c8e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c85c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c85e:	4413      	add	r3, r2
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c868:	429a      	cmp	r2, r3
 800c86a:	d309      	bcc.n	800c880 <tcp_receive+0x2fc>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c872:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c874:	4413      	add	r3, r2
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c87e:	e004      	b.n	800c88a <tcp_receive+0x306>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c896:	429a      	cmp	r2, r3
 800c898:	d326      	bcc.n	800c8e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8ba:	4413      	add	r3, r2
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d30a      	bcc.n	800c8de <tcp_receive+0x35a>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8d2:	4413      	add	r3, r2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c8dc:	e004      	b.n	800c8e8 <tcp_receive+0x364>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f0:	4a98      	ldr	r2, [pc, #608]	; (800cb54 <tcp_receive+0x5d0>)
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff fdca 	bl	800c48c <tcp_free_acked_segments>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c906:	4a94      	ldr	r2, [pc, #592]	; (800cb58 <tcp_receive+0x5d4>)
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff fdbf 	bl	800c48c <tcp_free_acked_segments>
 800c90e:	4602      	mov	r2, r0
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d104      	bne.n	800c926 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c922:	861a      	strh	r2, [r3, #48]	; 0x30
 800c924:	e002      	b.n	800c92c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c936:	2b00      	cmp	r3, #0
 800c938:	d103      	bne.n	800c942 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c948:	4b84      	ldr	r3, [pc, #528]	; (800cb5c <tcp_receive+0x5d8>)
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	4413      	add	r3, r2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	8b5b      	ldrh	r3, [r3, #26]
 800c95a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d035      	beq.n	800c9ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c966:	2b00      	cmp	r3, #0
 800c968:	d118      	bne.n	800c99c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00c      	beq.n	800c98c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fb f91b 	bl	8007bba <lwip_htonl>
 800c984:	4603      	mov	r3, r0
 800c986:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c988:	2b00      	cmp	r3, #0
 800c98a:	dc20      	bgt.n	800c9ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8b5b      	ldrh	r3, [r3, #26]
 800c990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c994:	b29a      	uxth	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c99a:	e018      	b.n	800c9ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fb f906 	bl	8007bba <lwip_htonl>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	1ae3      	subs	r3, r4, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dc0b      	bgt.n	800c9ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9c4:	e003      	b.n	800c9ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 ff76 	bl	800e8b8 <tcp_send_empty_ack>
 800c9cc:	e000      	b.n	800c9d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d05b      	beq.n	800ca90 <tcp_receive+0x50c>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9dc:	4b60      	ldr	r3, [pc, #384]	; (800cb60 <tcp_receive+0x5dc>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	da54      	bge.n	800ca90 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c9e6:	4b5f      	ldr	r3, [pc, #380]	; (800cb64 <tcp_receive+0x5e0>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c9fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca04:	10db      	asrs	r3, r3, #3
 800ca06:	b21b      	sxth	r3, r3
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca1e:	4413      	add	r3, r2
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	b21a      	sxth	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ca28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	da05      	bge.n	800ca3c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ca30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca34:	425b      	negs	r3, r3
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ca3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca46:	109b      	asrs	r3, r3, #2
 800ca48:	b21b      	sxth	r3, r3
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca60:	4413      	add	r3, r2
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	b21a      	sxth	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca70:	10db      	asrs	r3, r3, #3
 800ca72:	b21b      	sxth	r3, r3
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	4413      	add	r3, r2
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	b21a      	sxth	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ca90:	4b35      	ldr	r3, [pc, #212]	; (800cb68 <tcp_receive+0x5e4>)
 800ca92:	881b      	ldrh	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f000 84e2 	beq.w	800d45e <tcp_receive+0xeda>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	7d1b      	ldrb	r3, [r3, #20]
 800ca9e:	2b06      	cmp	r3, #6
 800caa0:	f200 84dd 	bhi.w	800d45e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caa8:	4b30      	ldr	r3, [pc, #192]	; (800cb6c <tcp_receive+0x5e8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	3b01      	subs	r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f2c0 808f 	blt.w	800cbd4 <tcp_receive+0x650>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caba:	4b2b      	ldr	r3, [pc, #172]	; (800cb68 <tcp_receive+0x5e4>)
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	4619      	mov	r1, r3
 800cac0:	4b2a      	ldr	r3, [pc, #168]	; (800cb6c <tcp_receive+0x5e8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	440b      	add	r3, r1
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	3301      	adds	r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f300 8082 	bgt.w	800cbd4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cad0:	4b27      	ldr	r3, [pc, #156]	; (800cb70 <tcp_receive+0x5ec>)
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cada:	4b24      	ldr	r3, [pc, #144]	; (800cb6c <tcp_receive+0x5e8>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cae2:	4b23      	ldr	r3, [pc, #140]	; (800cb70 <tcp_receive+0x5ec>)
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d106      	bne.n	800caf8 <tcp_receive+0x574>
 800caea:	4b22      	ldr	r3, [pc, #136]	; (800cb74 <tcp_receive+0x5f0>)
 800caec:	f240 5294 	movw	r2, #1428	; 0x594
 800caf0:	4921      	ldr	r1, [pc, #132]	; (800cb78 <tcp_receive+0x5f4>)
 800caf2:	4822      	ldr	r0, [pc, #136]	; (800cb7c <tcp_receive+0x5f8>)
 800caf4:	f007 faee 	bl	80140d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d906      	bls.n	800cb10 <tcp_receive+0x58c>
 800cb02:	4b1c      	ldr	r3, [pc, #112]	; (800cb74 <tcp_receive+0x5f0>)
 800cb04:	f240 5295 	movw	r2, #1429	; 0x595
 800cb08:	491d      	ldr	r1, [pc, #116]	; (800cb80 <tcp_receive+0x5fc>)
 800cb0a:	481c      	ldr	r0, [pc, #112]	; (800cb7c <tcp_receive+0x5f8>)
 800cb0c:	f007 fae2 	bl	80140d4 <iprintf>
      off = (u16_t)off32;
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cb16:	4b16      	ldr	r3, [pc, #88]	; (800cb70 <tcp_receive+0x5ec>)
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	891b      	ldrh	r3, [r3, #8]
 800cb1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d906      	bls.n	800cb32 <tcp_receive+0x5ae>
 800cb24:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <tcp_receive+0x5f0>)
 800cb26:	f240 5297 	movw	r2, #1431	; 0x597
 800cb2a:	4916      	ldr	r1, [pc, #88]	; (800cb84 <tcp_receive+0x600>)
 800cb2c:	4813      	ldr	r0, [pc, #76]	; (800cb7c <tcp_receive+0x5f8>)
 800cb2e:	f007 fad1 	bl	80140d4 <iprintf>
      inseg.len -= off;
 800cb32:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <tcp_receive+0x5ec>)
 800cb34:	891a      	ldrh	r2, [r3, #8]
 800cb36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	4b0c      	ldr	r3, [pc, #48]	; (800cb70 <tcp_receive+0x5ec>)
 800cb40:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cb42:	4b0b      	ldr	r3, [pc, #44]	; (800cb70 <tcp_receive+0x5ec>)
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	891a      	ldrh	r2, [r3, #8]
 800cb48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cb50:	e02a      	b.n	800cba8 <tcp_receive+0x624>
 800cb52:	bf00      	nop
 800cb54:	08016654 	.word	0x08016654
 800cb58:	0801665c 	.word	0x0801665c
 800cb5c:	20010938 	.word	0x20010938
 800cb60:	20010934 	.word	0x20010934
 800cb64:	200108f8 	.word	0x200108f8
 800cb68:	2001093a 	.word	0x2001093a
 800cb6c:	20010930 	.word	0x20010930
 800cb70:	20010910 	.word	0x20010910
 800cb74:	080162ec 	.word	0x080162ec
 800cb78:	08016664 	.word	0x08016664
 800cb7c:	08016338 	.word	0x08016338
 800cb80:	08016674 	.word	0x08016674
 800cb84:	08016684 	.word	0x08016684
        off -= p->len;
 800cb88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8a:	895b      	ldrh	r3, [r3, #10]
 800cb8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cb96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb9e:	2200      	movs	r2, #0
 800cba0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbaa:	895b      	ldrh	r3, [r3, #10]
 800cbac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d8e9      	bhi.n	800cb88 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cbb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cbb8:	4619      	mov	r1, r3
 800cbba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbbc:	f7fc fb60 	bl	8009280 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	4a91      	ldr	r2, [pc, #580]	; (800ce0c <tcp_receive+0x888>)
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	4b91      	ldr	r3, [pc, #580]	; (800ce10 <tcp_receive+0x88c>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	4a8f      	ldr	r2, [pc, #572]	; (800ce0c <tcp_receive+0x888>)
 800cbce:	6812      	ldr	r2, [r2, #0]
 800cbd0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cbd2:	e00d      	b.n	800cbf0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cbd4:	4b8d      	ldr	r3, [pc, #564]	; (800ce0c <tcp_receive+0x888>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	da06      	bge.n	800cbf0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	8b5b      	ldrh	r3, [r3, #26]
 800cbe6:	f043 0302 	orr.w	r3, r3, #2
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cbf0:	4b86      	ldr	r3, [pc, #536]	; (800ce0c <tcp_receive+0x888>)
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f2c0 842a 	blt.w	800d454 <tcp_receive+0xed0>
 800cc00:	4b82      	ldr	r3, [pc, #520]	; (800ce0c <tcp_receive+0x888>)
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc0c:	440b      	add	r3, r1
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	3301      	adds	r3, #1
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f300 841e 	bgt.w	800d454 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc1c:	4b7b      	ldr	r3, [pc, #492]	; (800ce0c <tcp_receive+0x888>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	f040 829a 	bne.w	800d15a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cc26:	4b7a      	ldr	r3, [pc, #488]	; (800ce10 <tcp_receive+0x88c>)
 800cc28:	891c      	ldrh	r4, [r3, #8]
 800cc2a:	4b79      	ldr	r3, [pc, #484]	; (800ce10 <tcp_receive+0x88c>)
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	899b      	ldrh	r3, [r3, #12]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fa ffac 	bl	8007b90 <lwip_htons>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	f003 0303 	and.w	r3, r3, #3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <tcp_receive+0x6c4>
 800cc44:	2301      	movs	r3, #1
 800cc46:	e000      	b.n	800cc4a <tcp_receive+0x6c6>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4423      	add	r3, r4
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	4b71      	ldr	r3, [pc, #452]	; (800ce14 <tcp_receive+0x890>)
 800cc50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc56:	4b6f      	ldr	r3, [pc, #444]	; (800ce14 <tcp_receive+0x890>)
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d275      	bcs.n	800cd4a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc5e:	4b6c      	ldr	r3, [pc, #432]	; (800ce10 <tcp_receive+0x88c>)
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	899b      	ldrh	r3, [r3, #12]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fa ff92 	bl	8007b90 <lwip_htons>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d01f      	beq.n	800ccb8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc78:	4b65      	ldr	r3, [pc, #404]	; (800ce10 <tcp_receive+0x88c>)
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	899b      	ldrh	r3, [r3, #12]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	b21b      	sxth	r3, r3
 800cc82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc86:	b21c      	sxth	r4, r3
 800cc88:	4b61      	ldr	r3, [pc, #388]	; (800ce10 <tcp_receive+0x88c>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	899b      	ldrh	r3, [r3, #12]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fa ff7d 	bl	8007b90 <lwip_htons>
 800cc96:	4603      	mov	r3, r0
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fa ff74 	bl	8007b90 <lwip_htons>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	b21b      	sxth	r3, r3
 800ccac:	4323      	orrs	r3, r4
 800ccae:	b21a      	sxth	r2, r3
 800ccb0:	4b57      	ldr	r3, [pc, #348]	; (800ce10 <tcp_receive+0x88c>)
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	b292      	uxth	r2, r2
 800ccb6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccbc:	4b54      	ldr	r3, [pc, #336]	; (800ce10 <tcp_receive+0x88c>)
 800ccbe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ccc0:	4b53      	ldr	r3, [pc, #332]	; (800ce10 <tcp_receive+0x88c>)
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	899b      	ldrh	r3, [r3, #12]
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fa ff61 	bl	8007b90 <lwip_htons>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d005      	beq.n	800cce6 <tcp_receive+0x762>
            inseg.len -= 1;
 800ccda:	4b4d      	ldr	r3, [pc, #308]	; (800ce10 <tcp_receive+0x88c>)
 800ccdc:	891b      	ldrh	r3, [r3, #8]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	4b4b      	ldr	r3, [pc, #300]	; (800ce10 <tcp_receive+0x88c>)
 800cce4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cce6:	4b4a      	ldr	r3, [pc, #296]	; (800ce10 <tcp_receive+0x88c>)
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	4a49      	ldr	r2, [pc, #292]	; (800ce10 <tcp_receive+0x88c>)
 800ccec:	8912      	ldrh	r2, [r2, #8]
 800ccee:	4611      	mov	r1, r2
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fc f9c5 	bl	8009080 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ccf6:	4b46      	ldr	r3, [pc, #280]	; (800ce10 <tcp_receive+0x88c>)
 800ccf8:	891c      	ldrh	r4, [r3, #8]
 800ccfa:	4b45      	ldr	r3, [pc, #276]	; (800ce10 <tcp_receive+0x88c>)
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	899b      	ldrh	r3, [r3, #12]
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fa ff44 	bl	8007b90 <lwip_htons>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f003 0303 	and.w	r3, r3, #3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <tcp_receive+0x794>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e000      	b.n	800cd1a <tcp_receive+0x796>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4423      	add	r3, r4
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	4b3d      	ldr	r3, [pc, #244]	; (800ce14 <tcp_receive+0x890>)
 800cd20:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd22:	4b3c      	ldr	r3, [pc, #240]	; (800ce14 <tcp_receive+0x890>)
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	461a      	mov	r2, r3
 800cd28:	4b38      	ldr	r3, [pc, #224]	; (800ce0c <tcp_receive+0x888>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	441a      	add	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd36:	440b      	add	r3, r1
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d006      	beq.n	800cd4a <tcp_receive+0x7c6>
 800cd3c:	4b36      	ldr	r3, [pc, #216]	; (800ce18 <tcp_receive+0x894>)
 800cd3e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cd42:	4936      	ldr	r1, [pc, #216]	; (800ce1c <tcp_receive+0x898>)
 800cd44:	4836      	ldr	r0, [pc, #216]	; (800ce20 <tcp_receive+0x89c>)
 800cd46:	f007 f9c5 	bl	80140d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f000 80e7 	beq.w	800cf22 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd54:	4b2e      	ldr	r3, [pc, #184]	; (800ce10 <tcp_receive+0x88c>)
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	899b      	ldrh	r3, [r3, #12]
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fa ff17 	bl	8007b90 <lwip_htons>
 800cd62:	4603      	mov	r3, r0
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f003 0301 	and.w	r3, r3, #1
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d010      	beq.n	800cd90 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cd6e:	e00a      	b.n	800cd86 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd74:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f7fd fd92 	bl	800a8aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1f0      	bne.n	800cd70 <tcp_receive+0x7ec>
 800cd8e:	e0c8      	b.n	800cf22 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cd96:	e052      	b.n	800ce3e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	899b      	ldrh	r3, [r3, #12]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fa fef5 	bl	8007b90 <lwip_htons>
 800cda6:	4603      	mov	r3, r0
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d03d      	beq.n	800ce2e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cdb2:	4b17      	ldr	r3, [pc, #92]	; (800ce10 <tcp_receive+0x88c>)
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	899b      	ldrh	r3, [r3, #12]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fa fee8 	bl	8007b90 <lwip_htons>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d130      	bne.n	800ce2e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cdcc:	4b10      	ldr	r3, [pc, #64]	; (800ce10 <tcp_receive+0x88c>)
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	899b      	ldrh	r3, [r3, #12]
 800cdd2:	b29c      	uxth	r4, r3
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f7fa fedb 	bl	8007b90 <lwip_htons>
 800cdda:	4603      	mov	r3, r0
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <tcp_receive+0x88c>)
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	4322      	orrs	r2, r4
 800cde4:	b292      	uxth	r2, r2
 800cde6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cde8:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <tcp_receive+0x88c>)
 800cdea:	891c      	ldrh	r4, [r3, #8]
 800cdec:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <tcp_receive+0x88c>)
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	899b      	ldrh	r3, [r3, #12]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fa fecb 	bl	8007b90 <lwip_htons>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00e      	beq.n	800ce24 <tcp_receive+0x8a0>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e00d      	b.n	800ce26 <tcp_receive+0x8a2>
 800ce0a:	bf00      	nop
 800ce0c:	20010930 	.word	0x20010930
 800ce10:	20010910 	.word	0x20010910
 800ce14:	2001093a 	.word	0x2001093a
 800ce18:	080162ec 	.word	0x080162ec
 800ce1c:	08016694 	.word	0x08016694
 800ce20:	08016338 	.word	0x08016338
 800ce24:	2300      	movs	r3, #0
 800ce26:	4423      	add	r3, r4
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	4b98      	ldr	r3, [pc, #608]	; (800d08c <tcp_receive+0xb08>)
 800ce2c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ce2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce30:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ce32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ce38:	6938      	ldr	r0, [r7, #16]
 800ce3a:	f7fd fd36 	bl	800a8aa <tcp_seg_free>
            while (next &&
 800ce3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00e      	beq.n	800ce62 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ce44:	4b91      	ldr	r3, [pc, #580]	; (800d08c <tcp_receive+0xb08>)
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4b91      	ldr	r3, [pc, #580]	; (800d090 <tcp_receive+0xb0c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	441a      	add	r2, r3
 800ce50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce58:	8909      	ldrh	r1, [r1, #8]
 800ce5a:	440b      	add	r3, r1
 800ce5c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	da9a      	bge.n	800cd98 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ce62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d059      	beq.n	800cf1c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ce68:	4b88      	ldr	r3, [pc, #544]	; (800d08c <tcp_receive+0xb08>)
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	4b88      	ldr	r3, [pc, #544]	; (800d090 <tcp_receive+0xb0c>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	441a      	add	r2, r3
 800ce74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	dd4d      	ble.n	800cf1c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	4b81      	ldr	r3, [pc, #516]	; (800d090 <tcp_receive+0xb0c>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	4b80      	ldr	r3, [pc, #512]	; (800d094 <tcp_receive+0xb10>)
 800ce94:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ce96:	4b7f      	ldr	r3, [pc, #508]	; (800d094 <tcp_receive+0xb10>)
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	899b      	ldrh	r3, [r3, #12]
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fa fe76 	bl	8007b90 <lwip_htons>
 800cea4:	4603      	mov	r3, r0
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <tcp_receive+0x938>
                inseg.len -= 1;
 800ceb0:	4b78      	ldr	r3, [pc, #480]	; (800d094 <tcp_receive+0xb10>)
 800ceb2:	891b      	ldrh	r3, [r3, #8]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	4b76      	ldr	r3, [pc, #472]	; (800d094 <tcp_receive+0xb10>)
 800ceba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cebc:	4b75      	ldr	r3, [pc, #468]	; (800d094 <tcp_receive+0xb10>)
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4a74      	ldr	r2, [pc, #464]	; (800d094 <tcp_receive+0xb10>)
 800cec2:	8912      	ldrh	r2, [r2, #8]
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fc f8da 	bl	8009080 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cecc:	4b71      	ldr	r3, [pc, #452]	; (800d094 <tcp_receive+0xb10>)
 800cece:	891c      	ldrh	r4, [r3, #8]
 800ced0:	4b70      	ldr	r3, [pc, #448]	; (800d094 <tcp_receive+0xb10>)
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	899b      	ldrh	r3, [r3, #12]
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fa fe59 	bl	8007b90 <lwip_htons>
 800cede:	4603      	mov	r3, r0
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <tcp_receive+0x96a>
 800ceea:	2301      	movs	r3, #1
 800ceec:	e000      	b.n	800cef0 <tcp_receive+0x96c>
 800ceee:	2300      	movs	r3, #0
 800cef0:	4423      	add	r3, r4
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	4b65      	ldr	r3, [pc, #404]	; (800d08c <tcp_receive+0xb08>)
 800cef6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cef8:	4b64      	ldr	r3, [pc, #400]	; (800d08c <tcp_receive+0xb08>)
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	461a      	mov	r2, r3
 800cefe:	4b64      	ldr	r3, [pc, #400]	; (800d090 <tcp_receive+0xb0c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	441a      	add	r2, r3
 800cf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d006      	beq.n	800cf1c <tcp_receive+0x998>
 800cf0e:	4b62      	ldr	r3, [pc, #392]	; (800d098 <tcp_receive+0xb14>)
 800cf10:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cf14:	4961      	ldr	r1, [pc, #388]	; (800d09c <tcp_receive+0xb18>)
 800cf16:	4862      	ldr	r0, [pc, #392]	; (800d0a0 <tcp_receive+0xb1c>)
 800cf18:	f007 f8dc 	bl	80140d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf20:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cf22:	4b5a      	ldr	r3, [pc, #360]	; (800d08c <tcp_receive+0xb08>)
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	4b59      	ldr	r3, [pc, #356]	; (800d090 <tcp_receive+0xb0c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	441a      	add	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf36:	4b55      	ldr	r3, [pc, #340]	; (800d08c <tcp_receive+0xb08>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d206      	bcs.n	800cf4c <tcp_receive+0x9c8>
 800cf3e:	4b56      	ldr	r3, [pc, #344]	; (800d098 <tcp_receive+0xb14>)
 800cf40:	f240 6207 	movw	r2, #1543	; 0x607
 800cf44:	4957      	ldr	r1, [pc, #348]	; (800d0a4 <tcp_receive+0xb20>)
 800cf46:	4856      	ldr	r0, [pc, #344]	; (800d0a0 <tcp_receive+0xb1c>)
 800cf48:	f007 f8c4 	bl	80140d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf50:	4b4e      	ldr	r3, [pc, #312]	; (800d08c <tcp_receive+0xb08>)
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7fc ffc5 	bl	8009eec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cf62:	4b4c      	ldr	r3, [pc, #304]	; (800d094 <tcp_receive+0xb10>)
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	891b      	ldrh	r3, [r3, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d006      	beq.n	800cf7a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800cf6c:	4b49      	ldr	r3, [pc, #292]	; (800d094 <tcp_receive+0xb10>)
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	4a4d      	ldr	r2, [pc, #308]	; (800d0a8 <tcp_receive+0xb24>)
 800cf72:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cf74:	4b47      	ldr	r3, [pc, #284]	; (800d094 <tcp_receive+0xb10>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf7a:	4b46      	ldr	r3, [pc, #280]	; (800d094 <tcp_receive+0xb10>)
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	899b      	ldrh	r3, [r3, #12]
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fa fe04 	bl	8007b90 <lwip_htons>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 80b8 	beq.w	800d106 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cf96:	4b45      	ldr	r3, [pc, #276]	; (800d0ac <tcp_receive+0xb28>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	f043 0320 	orr.w	r3, r3, #32
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	4b42      	ldr	r3, [pc, #264]	; (800d0ac <tcp_receive+0xb28>)
 800cfa2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cfa4:	e0af      	b.n	800d106 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfaa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	4a36      	ldr	r2, [pc, #216]	; (800d090 <tcp_receive+0xb0c>)
 800cfb6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	891b      	ldrh	r3, [r3, #8]
 800cfbc:	461c      	mov	r4, r3
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	899b      	ldrh	r3, [r3, #12]
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fa fde2 	bl	8007b90 <lwip_htons>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 0303 	and.w	r3, r3, #3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <tcp_receive+0xa58>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e000      	b.n	800cfde <tcp_receive+0xa5a>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	191a      	adds	r2, r3, r4
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe4:	441a      	add	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfee:	461c      	mov	r4, r3
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	891b      	ldrh	r3, [r3, #8]
 800cff4:	461d      	mov	r5, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	899b      	ldrh	r3, [r3, #12]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fa fdc6 	bl	8007b90 <lwip_htons>
 800d004:	4603      	mov	r3, r0
 800d006:	b2db      	uxtb	r3, r3
 800d008:	f003 0303 	and.w	r3, r3, #3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <tcp_receive+0xa90>
 800d010:	2301      	movs	r3, #1
 800d012:	e000      	b.n	800d016 <tcp_receive+0xa92>
 800d014:	2300      	movs	r3, #0
 800d016:	442b      	add	r3, r5
 800d018:	429c      	cmp	r4, r3
 800d01a:	d206      	bcs.n	800d02a <tcp_receive+0xaa6>
 800d01c:	4b1e      	ldr	r3, [pc, #120]	; (800d098 <tcp_receive+0xb14>)
 800d01e:	f240 622b 	movw	r2, #1579	; 0x62b
 800d022:	4923      	ldr	r1, [pc, #140]	; (800d0b0 <tcp_receive+0xb2c>)
 800d024:	481e      	ldr	r0, [pc, #120]	; (800d0a0 <tcp_receive+0xb1c>)
 800d026:	f007 f855 	bl	80140d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	891b      	ldrh	r3, [r3, #8]
 800d02e:	461c      	mov	r4, r3
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	899b      	ldrh	r3, [r3, #12]
 800d036:	b29b      	uxth	r3, r3
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fa fda9 	bl	8007b90 <lwip_htons>
 800d03e:	4603      	mov	r3, r0
 800d040:	b2db      	uxtb	r3, r3
 800d042:	f003 0303 	and.w	r3, r3, #3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <tcp_receive+0xaca>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e000      	b.n	800d050 <tcp_receive+0xacc>
 800d04e:	2300      	movs	r3, #0
 800d050:	1919      	adds	r1, r3, r4
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d056:	b28b      	uxth	r3, r1
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7fc ff43 	bl	8009eec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	891b      	ldrh	r3, [r3, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d028      	beq.n	800d0c2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d070:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <tcp_receive+0xb24>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d01d      	beq.n	800d0b4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <tcp_receive+0xb24>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fc fa50 	bl	8009528 <pbuf_cat>
 800d088:	e018      	b.n	800d0bc <tcp_receive+0xb38>
 800d08a:	bf00      	nop
 800d08c:	2001093a 	.word	0x2001093a
 800d090:	20010930 	.word	0x20010930
 800d094:	20010910 	.word	0x20010910
 800d098:	080162ec 	.word	0x080162ec
 800d09c:	080166cc 	.word	0x080166cc
 800d0a0:	08016338 	.word	0x08016338
 800d0a4:	08016708 	.word	0x08016708
 800d0a8:	20010940 	.word	0x20010940
 800d0ac:	2001093d 	.word	0x2001093d
 800d0b0:	08016728 	.word	0x08016728
            } else {
              recv_data = cseg->p;
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4a70      	ldr	r2, [pc, #448]	; (800d27c <tcp_receive+0xcf8>)
 800d0ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	899b      	ldrh	r3, [r3, #12]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fa fd60 	bl	8007b90 <lwip_htons>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00d      	beq.n	800d0f8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d0dc:	4b68      	ldr	r3, [pc, #416]	; (800d280 <tcp_receive+0xcfc>)
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	f043 0320 	orr.w	r3, r3, #32
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	4b66      	ldr	r3, [pc, #408]	; (800d280 <tcp_receive+0xcfc>)
 800d0e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7d1b      	ldrb	r3, [r3, #20]
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d102      	bne.n	800d0f8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2207      	movs	r2, #7
 800d0f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d100:	68b8      	ldr	r0, [r7, #8]
 800d102:	f7fd fbd2 	bl	800a8aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d008      	beq.n	800d120 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d11a:	429a      	cmp	r2, r3
 800d11c:	f43f af43 	beq.w	800cfa6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	8b5b      	ldrh	r3, [r3, #26]
 800d124:	f003 0301 	and.w	r3, r3, #1
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00e      	beq.n	800d14a <tcp_receive+0xbc6>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	8b5b      	ldrh	r3, [r3, #26]
 800d130:	f023 0301 	bic.w	r3, r3, #1
 800d134:	b29a      	uxth	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	835a      	strh	r2, [r3, #26]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	8b5b      	ldrh	r3, [r3, #26]
 800d13e:	f043 0302 	orr.w	r3, r3, #2
 800d142:	b29a      	uxth	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d148:	e188      	b.n	800d45c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	8b5b      	ldrh	r3, [r3, #26]
 800d14e:	f043 0301 	orr.w	r3, r3, #1
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d158:	e180      	b.n	800d45c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d162:	4848      	ldr	r0, [pc, #288]	; (800d284 <tcp_receive+0xd00>)
 800d164:	f7fd fbba 	bl	800a8dc <tcp_seg_copy>
 800d168:	4602      	mov	r2, r0
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	675a      	str	r2, [r3, #116]	; 0x74
 800d16e:	e16d      	b.n	800d44c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d170:	2300      	movs	r3, #0
 800d172:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d178:	63bb      	str	r3, [r7, #56]	; 0x38
 800d17a:	e157      	b.n	800d42c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	4b41      	ldr	r3, [pc, #260]	; (800d288 <tcp_receive+0xd04>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	429a      	cmp	r2, r3
 800d188:	d11d      	bne.n	800d1c6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d18a:	4b3e      	ldr	r3, [pc, #248]	; (800d284 <tcp_receive+0xd00>)
 800d18c:	891a      	ldrh	r2, [r3, #8]
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	891b      	ldrh	r3, [r3, #8]
 800d192:	429a      	cmp	r2, r3
 800d194:	f240 814f 	bls.w	800d436 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d198:	483a      	ldr	r0, [pc, #232]	; (800d284 <tcp_receive+0xd00>)
 800d19a:	f7fd fb9f 	bl	800a8dc <tcp_seg_copy>
 800d19e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 8149 	beq.w	800d43a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b0:	697a      	ldr	r2, [r7, #20]
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	e002      	b.n	800d1bc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d1bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1be:	6978      	ldr	r0, [r7, #20]
 800d1c0:	f7ff f8dc 	bl	800c37c <tcp_oos_insert_segment>
                }
                break;
 800d1c4:	e139      	b.n	800d43a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d117      	bne.n	800d1fc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d1cc:	4b2e      	ldr	r3, [pc, #184]	; (800d288 <tcp_receive+0xd04>)
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	da57      	bge.n	800d28c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1dc:	4829      	ldr	r0, [pc, #164]	; (800d284 <tcp_receive+0xd00>)
 800d1de:	f7fd fb7d 	bl	800a8dc <tcp_seg_copy>
 800d1e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 8129 	beq.w	800d43e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	69ba      	ldr	r2, [r7, #24]
 800d1f0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d1f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1f4:	69b8      	ldr	r0, [r7, #24]
 800d1f6:	f7ff f8c1 	bl	800c37c <tcp_oos_insert_segment>
                  }
                  break;
 800d1fa:	e120      	b.n	800d43e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d1fc:	4b22      	ldr	r3, [pc, #136]	; (800d288 <tcp_receive+0xd04>)
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	3b01      	subs	r3, #1
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	db3e      	blt.n	800d28c <tcp_receive+0xd08>
 800d20e:	4b1e      	ldr	r3, [pc, #120]	; (800d288 <tcp_receive+0xd04>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	3301      	adds	r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dc35      	bgt.n	800d28c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d220:	4818      	ldr	r0, [pc, #96]	; (800d284 <tcp_receive+0xd00>)
 800d222:	f7fd fb5b 	bl	800a8dc <tcp_seg_copy>
 800d226:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 8109 	beq.w	800d442 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d238:	8912      	ldrh	r2, [r2, #8]
 800d23a:	441a      	add	r2, r3
 800d23c:	4b12      	ldr	r3, [pc, #72]	; (800d288 <tcp_receive+0xd04>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	dd12      	ble.n	800d26c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d246:	4b10      	ldr	r3, [pc, #64]	; (800d288 <tcp_receive+0xd04>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	b29b      	uxth	r3, r3
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	b29a      	uxth	r2, r3
 800d258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d262:	891b      	ldrh	r3, [r3, #8]
 800d264:	4619      	mov	r1, r3
 800d266:	4610      	mov	r0, r2
 800d268:	f7fb ff0a 	bl	8009080 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d274:	69f8      	ldr	r0, [r7, #28]
 800d276:	f7ff f881 	bl	800c37c <tcp_oos_insert_segment>
                  }
                  break;
 800d27a:	e0e2      	b.n	800d442 <tcp_receive+0xebe>
 800d27c:	20010940 	.word	0x20010940
 800d280:	2001093d 	.word	0x2001093d
 800d284:	20010910 	.word	0x20010910
 800d288:	20010930 	.word	0x20010930
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	f040 80c6 	bne.w	800d426 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d29a:	4b80      	ldr	r3, [pc, #512]	; (800d49c <tcp_receive+0xf18>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f340 80bd 	ble.w	800d426 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	899b      	ldrh	r3, [r3, #12]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fa fc6b 	bl	8007b90 <lwip_htons>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f040 80bf 	bne.w	800d446 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d2c8:	4875      	ldr	r0, [pc, #468]	; (800d4a0 <tcp_receive+0xf1c>)
 800d2ca:	f7fd fb07 	bl	800a8dc <tcp_seg_copy>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 80b6 	beq.w	800d44a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2e6:	8912      	ldrh	r2, [r2, #8]
 800d2e8:	441a      	add	r2, r3
 800d2ea:	4b6c      	ldr	r3, [pc, #432]	; (800d49c <tcp_receive+0xf18>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	dd12      	ble.n	800d31a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d2f4:	4b69      	ldr	r3, [pc, #420]	; (800d49c <tcp_receive+0xf18>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	b29b      	uxth	r3, r3
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	b29a      	uxth	r2, r3
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	891b      	ldrh	r3, [r3, #8]
 800d312:	4619      	mov	r1, r3
 800d314:	4610      	mov	r0, r2
 800d316:	f7fb feb3 	bl	8009080 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d31a:	4b62      	ldr	r3, [pc, #392]	; (800d4a4 <tcp_receive+0xf20>)
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	461a      	mov	r2, r3
 800d320:	4b5e      	ldr	r3, [pc, #376]	; (800d49c <tcp_receive+0xf18>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	441a      	add	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	6879      	ldr	r1, [r7, #4]
 800d32c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d32e:	440b      	add	r3, r1
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	f340 8089 	ble.w	800d44a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	899b      	ldrh	r3, [r3, #12]
 800d340:	b29b      	uxth	r3, r3
 800d342:	4618      	mov	r0, r3
 800d344:	f7fa fc24 	bl	8007b90 <lwip_htons>
 800d348:	4603      	mov	r3, r0
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	d022      	beq.n	800d39a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	899b      	ldrh	r3, [r3, #12]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	b21b      	sxth	r3, r3
 800d360:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d364:	b21c      	sxth	r4, r3
 800d366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	899b      	ldrh	r3, [r3, #12]
 800d36e:	b29b      	uxth	r3, r3
 800d370:	4618      	mov	r0, r3
 800d372:	f7fa fc0d 	bl	8007b90 <lwip_htons>
 800d376:	4603      	mov	r3, r0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d380:	b29b      	uxth	r3, r3
 800d382:	4618      	mov	r0, r3
 800d384:	f7fa fc04 	bl	8007b90 <lwip_htons>
 800d388:	4603      	mov	r3, r0
 800d38a:	b21b      	sxth	r3, r3
 800d38c:	4323      	orrs	r3, r4
 800d38e:	b21a      	sxth	r2, r3
 800d390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	b292      	uxth	r2, r2
 800d398:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3a4:	4413      	add	r3, r2
 800d3a6:	b299      	uxth	r1, r3
 800d3a8:	4b3c      	ldr	r3, [pc, #240]	; (800d49c <tcp_receive+0xf18>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	1a8a      	subs	r2, r1, r2
 800d3b4:	b292      	uxth	r2, r2
 800d3b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	891b      	ldrh	r3, [r3, #8]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fb fe5a 	bl	8009080 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	891c      	ldrh	r4, [r3, #8]
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	899b      	ldrh	r3, [r3, #12]
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fa fbd7 	bl	8007b90 <lwip_htons>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <tcp_receive+0xe6e>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e000      	b.n	800d3f4 <tcp_receive+0xe70>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	4423      	add	r3, r4
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <tcp_receive+0xf20>)
 800d3fa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d3fc:	4b29      	ldr	r3, [pc, #164]	; (800d4a4 <tcp_receive+0xf20>)
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	4b26      	ldr	r3, [pc, #152]	; (800d49c <tcp_receive+0xf18>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	441a      	add	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d410:	440b      	add	r3, r1
 800d412:	429a      	cmp	r2, r3
 800d414:	d019      	beq.n	800d44a <tcp_receive+0xec6>
 800d416:	4b24      	ldr	r3, [pc, #144]	; (800d4a8 <tcp_receive+0xf24>)
 800d418:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d41c:	4923      	ldr	r1, [pc, #140]	; (800d4ac <tcp_receive+0xf28>)
 800d41e:	4824      	ldr	r0, [pc, #144]	; (800d4b0 <tcp_receive+0xf2c>)
 800d420:	f006 fe58 	bl	80140d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d424:	e011      	b.n	800d44a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f47f aea4 	bne.w	800d17c <tcp_receive+0xbf8>
 800d434:	e00a      	b.n	800d44c <tcp_receive+0xec8>
                break;
 800d436:	bf00      	nop
 800d438:	e008      	b.n	800d44c <tcp_receive+0xec8>
                break;
 800d43a:	bf00      	nop
 800d43c:	e006      	b.n	800d44c <tcp_receive+0xec8>
                  break;
 800d43e:	bf00      	nop
 800d440:	e004      	b.n	800d44c <tcp_receive+0xec8>
                  break;
 800d442:	bf00      	nop
 800d444:	e002      	b.n	800d44c <tcp_receive+0xec8>
                  break;
 800d446:	bf00      	nop
 800d448:	e000      	b.n	800d44c <tcp_receive+0xec8>
                break;
 800d44a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 fa33 	bl	800e8b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d452:	e003      	b.n	800d45c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f001 fa2f 	bl	800e8b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d45a:	e01a      	b.n	800d492 <tcp_receive+0xf0e>
 800d45c:	e019      	b.n	800d492 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d45e:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <tcp_receive+0xf18>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	db0a      	blt.n	800d482 <tcp_receive+0xefe>
 800d46c:	4b0b      	ldr	r3, [pc, #44]	; (800d49c <tcp_receive+0xf18>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d478:	440b      	add	r3, r1
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	3301      	adds	r3, #1
 800d47e:	2b00      	cmp	r3, #0
 800d480:	dd07      	ble.n	800d492 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	8b5b      	ldrh	r3, [r3, #26]
 800d486:	f043 0302 	orr.w	r3, r3, #2
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d490:	e7ff      	b.n	800d492 <tcp_receive+0xf0e>
 800d492:	bf00      	nop
 800d494:	3750      	adds	r7, #80	; 0x50
 800d496:	46bd      	mov	sp, r7
 800d498:	bdb0      	pop	{r4, r5, r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20010930 	.word	0x20010930
 800d4a0:	20010910 	.word	0x20010910
 800d4a4:	2001093a 	.word	0x2001093a
 800d4a8:	080162ec 	.word	0x080162ec
 800d4ac:	08016694 	.word	0x08016694
 800d4b0:	08016338 	.word	0x08016338

0800d4b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d4ba:	4b15      	ldr	r3, [pc, #84]	; (800d510 <tcp_get_next_optbyte+0x5c>)
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	1c5a      	adds	r2, r3, #1
 800d4c0:	b291      	uxth	r1, r2
 800d4c2:	4a13      	ldr	r2, [pc, #76]	; (800d510 <tcp_get_next_optbyte+0x5c>)
 800d4c4:	8011      	strh	r1, [r2, #0]
 800d4c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d4c8:	4b12      	ldr	r3, [pc, #72]	; (800d514 <tcp_get_next_optbyte+0x60>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <tcp_get_next_optbyte+0x26>
 800d4d0:	4b11      	ldr	r3, [pc, #68]	; (800d518 <tcp_get_next_optbyte+0x64>)
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	88fa      	ldrh	r2, [r7, #6]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d208      	bcs.n	800d4ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d4da:	4b10      	ldr	r3, [pc, #64]	; (800d51c <tcp_get_next_optbyte+0x68>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3314      	adds	r3, #20
 800d4e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d4e2:	88fb      	ldrh	r3, [r7, #6]
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	e00b      	b.n	800d504 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d4ec:	88fb      	ldrh	r3, [r7, #6]
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <tcp_get_next_optbyte+0x64>)
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d4fa:	4b06      	ldr	r3, [pc, #24]	; (800d514 <tcp_get_next_optbyte+0x60>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	797b      	ldrb	r3, [r7, #5]
 800d500:	4413      	add	r3, r2
 800d502:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d504:	4618      	mov	r0, r3
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	2001092c 	.word	0x2001092c
 800d514:	20010928 	.word	0x20010928
 800d518:	20010926 	.word	0x20010926
 800d51c:	20010920 	.word	0x20010920

0800d520 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d106      	bne.n	800d53c <tcp_parseopt+0x1c>
 800d52e:	4b32      	ldr	r3, [pc, #200]	; (800d5f8 <tcp_parseopt+0xd8>)
 800d530:	f240 727d 	movw	r2, #1917	; 0x77d
 800d534:	4931      	ldr	r1, [pc, #196]	; (800d5fc <tcp_parseopt+0xdc>)
 800d536:	4832      	ldr	r0, [pc, #200]	; (800d600 <tcp_parseopt+0xe0>)
 800d538:	f006 fdcc 	bl	80140d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d53c:	4b31      	ldr	r3, [pc, #196]	; (800d604 <tcp_parseopt+0xe4>)
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d055      	beq.n	800d5f0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d544:	4b30      	ldr	r3, [pc, #192]	; (800d608 <tcp_parseopt+0xe8>)
 800d546:	2200      	movs	r2, #0
 800d548:	801a      	strh	r2, [r3, #0]
 800d54a:	e045      	b.n	800d5d8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d54c:	f7ff ffb2 	bl	800d4b4 <tcp_get_next_optbyte>
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	2b02      	cmp	r3, #2
 800d558:	d006      	beq.n	800d568 <tcp_parseopt+0x48>
 800d55a:	2b02      	cmp	r3, #2
 800d55c:	dc2b      	bgt.n	800d5b6 <tcp_parseopt+0x96>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d041      	beq.n	800d5e6 <tcp_parseopt+0xc6>
 800d562:	2b01      	cmp	r3, #1
 800d564:	d127      	bne.n	800d5b6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d566:	e037      	b.n	800d5d8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d568:	f7ff ffa4 	bl	800d4b4 <tcp_get_next_optbyte>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d13b      	bne.n	800d5ea <tcp_parseopt+0xca>
 800d572:	4b25      	ldr	r3, [pc, #148]	; (800d608 <tcp_parseopt+0xe8>)
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	3301      	adds	r3, #1
 800d578:	4a22      	ldr	r2, [pc, #136]	; (800d604 <tcp_parseopt+0xe4>)
 800d57a:	8812      	ldrh	r2, [r2, #0]
 800d57c:	4293      	cmp	r3, r2
 800d57e:	da34      	bge.n	800d5ea <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d580:	f7ff ff98 	bl	800d4b4 <tcp_get_next_optbyte>
 800d584:	4603      	mov	r3, r0
 800d586:	b29b      	uxth	r3, r3
 800d588:	021b      	lsls	r3, r3, #8
 800d58a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d58c:	f7ff ff92 	bl	800d4b4 <tcp_get_next_optbyte>
 800d590:	4603      	mov	r3, r0
 800d592:	b29a      	uxth	r2, r3
 800d594:	89bb      	ldrh	r3, [r7, #12]
 800d596:	4313      	orrs	r3, r2
 800d598:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d59a:	89bb      	ldrh	r3, [r7, #12]
 800d59c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d5a0:	d804      	bhi.n	800d5ac <tcp_parseopt+0x8c>
 800d5a2:	89bb      	ldrh	r3, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <tcp_parseopt+0x8c>
 800d5a8:	89ba      	ldrh	r2, [r7, #12]
 800d5aa:	e001      	b.n	800d5b0 <tcp_parseopt+0x90>
 800d5ac:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d5b4:	e010      	b.n	800d5d8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d5b6:	f7ff ff7d 	bl	800d4b4 <tcp_get_next_optbyte>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d5be:	7afb      	ldrb	r3, [r7, #11]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d914      	bls.n	800d5ee <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d5c4:	7afb      	ldrb	r3, [r7, #11]
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	4b0f      	ldr	r3, [pc, #60]	; (800d608 <tcp_parseopt+0xe8>)
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	3b02      	subs	r3, #2
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <tcp_parseopt+0xe8>)
 800d5d6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d5d8:	4b0b      	ldr	r3, [pc, #44]	; (800d608 <tcp_parseopt+0xe8>)
 800d5da:	881a      	ldrh	r2, [r3, #0]
 800d5dc:	4b09      	ldr	r3, [pc, #36]	; (800d604 <tcp_parseopt+0xe4>)
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d3b3      	bcc.n	800d54c <tcp_parseopt+0x2c>
 800d5e4:	e004      	b.n	800d5f0 <tcp_parseopt+0xd0>
          return;
 800d5e6:	bf00      	nop
 800d5e8:	e002      	b.n	800d5f0 <tcp_parseopt+0xd0>
            return;
 800d5ea:	bf00      	nop
 800d5ec:	e000      	b.n	800d5f0 <tcp_parseopt+0xd0>
            return;
 800d5ee:	bf00      	nop
      }
    }
  }
}
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	080162ec 	.word	0x080162ec
 800d5fc:	08016750 	.word	0x08016750
 800d600:	08016338 	.word	0x08016338
 800d604:	20010924 	.word	0x20010924
 800d608:	2001092c 	.word	0x2001092c

0800d60c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d60c:	b480      	push	{r7}
 800d60e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d610:	4b05      	ldr	r3, [pc, #20]	; (800d628 <tcp_trigger_input_pcb_close+0x1c>)
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	f043 0310 	orr.w	r3, r3, #16
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b03      	ldr	r3, [pc, #12]	; (800d628 <tcp_trigger_input_pcb_close+0x1c>)
 800d61c:	701a      	strb	r2, [r3, #0]
}
 800d61e:	bf00      	nop
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr
 800d628:	2001093d 	.word	0x2001093d

0800d62c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00a      	beq.n	800d654 <tcp_route+0x28>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	7a1b      	ldrb	r3, [r3, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d006      	beq.n	800d654 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	7a1b      	ldrb	r3, [r3, #8]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fb fb10 	bl	8008c70 <netif_get_by_index>
 800d650:	4603      	mov	r3, r0
 800d652:	e003      	b.n	800d65c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f005 f845 	bl	80126e4 <ip4_route>
 800d65a:	4603      	mov	r3, r0
  }
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	4613      	mov	r3, r2
 800d672:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d105      	bne.n	800d686 <tcp_create_segment+0x22>
 800d67a:	4b44      	ldr	r3, [pc, #272]	; (800d78c <tcp_create_segment+0x128>)
 800d67c:	22a3      	movs	r2, #163	; 0xa3
 800d67e:	4944      	ldr	r1, [pc, #272]	; (800d790 <tcp_create_segment+0x12c>)
 800d680:	4844      	ldr	r0, [pc, #272]	; (800d794 <tcp_create_segment+0x130>)
 800d682:	f006 fd27 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d105      	bne.n	800d698 <tcp_create_segment+0x34>
 800d68c:	4b3f      	ldr	r3, [pc, #252]	; (800d78c <tcp_create_segment+0x128>)
 800d68e:	22a4      	movs	r2, #164	; 0xa4
 800d690:	4941      	ldr	r1, [pc, #260]	; (800d798 <tcp_create_segment+0x134>)
 800d692:	4840      	ldr	r0, [pc, #256]	; (800d794 <tcp_create_segment+0x130>)
 800d694:	f006 fd1e 	bl	80140d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	f003 0304 	and.w	r3, r3, #4
 800d6a4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d6a6:	2003      	movs	r0, #3
 800d6a8:	f7fa ff4a 	bl	8008540 <memp_malloc>
 800d6ac:	6138      	str	r0, [r7, #16]
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d6b4:	68b8      	ldr	r0, [r7, #8]
 800d6b6:	f7fb fe69 	bl	800938c <pbuf_free>
    return NULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e061      	b.n	800d782 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d6c4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	891a      	ldrh	r2, [r3, #8]
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d205      	bcs.n	800d6ea <tcp_create_segment+0x86>
 800d6de:	4b2b      	ldr	r3, [pc, #172]	; (800d78c <tcp_create_segment+0x128>)
 800d6e0:	22b0      	movs	r2, #176	; 0xb0
 800d6e2:	492e      	ldr	r1, [pc, #184]	; (800d79c <tcp_create_segment+0x138>)
 800d6e4:	482b      	ldr	r0, [pc, #172]	; (800d794 <tcp_create_segment+0x130>)
 800d6e6:	f006 fcf5 	bl	80140d4 <iprintf>
  seg->len = p->tot_len - optlen;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	891a      	ldrh	r2, [r3, #8]
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	1ad3      	subs	r3, r2, r3
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d6fa:	2114      	movs	r1, #20
 800d6fc:	68b8      	ldr	r0, [r7, #8]
 800d6fe:	f7fb fdaf 	bl	8009260 <pbuf_add_header>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d708:	6938      	ldr	r0, [r7, #16]
 800d70a:	f7fd f8ce 	bl	800a8aa <tcp_seg_free>
    return NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	e037      	b.n	800d782 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	685a      	ldr	r2, [r3, #4]
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	8ada      	ldrh	r2, [r3, #22]
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	68dc      	ldr	r4, [r3, #12]
 800d724:	4610      	mov	r0, r2
 800d726:	f7fa fa33 	bl	8007b90 <lwip_htons>
 800d72a:	4603      	mov	r3, r0
 800d72c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	8b1a      	ldrh	r2, [r3, #24]
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	68dc      	ldr	r4, [r3, #12]
 800d736:	4610      	mov	r0, r2
 800d738:	f7fa fa2a 	bl	8007b90 <lwip_htons>
 800d73c:	4603      	mov	r3, r0
 800d73e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	68dc      	ldr	r4, [r3, #12]
 800d744:	6838      	ldr	r0, [r7, #0]
 800d746:	f7fa fa38 	bl	8007bba <lwip_htonl>
 800d74a:	4603      	mov	r3, r0
 800d74c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
 800d750:	089b      	lsrs	r3, r3, #2
 800d752:	b2db      	uxtb	r3, r3
 800d754:	b29b      	uxth	r3, r3
 800d756:	3305      	adds	r3, #5
 800d758:	b29b      	uxth	r3, r3
 800d75a:	031b      	lsls	r3, r3, #12
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	b29b      	uxth	r3, r3
 800d762:	4313      	orrs	r3, r2
 800d764:	b29a      	uxth	r2, r3
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	68dc      	ldr	r4, [r3, #12]
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7fa fa10 	bl	8007b90 <lwip_htons>
 800d770:	4603      	mov	r3, r0
 800d772:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	749a      	strb	r2, [r3, #18]
 800d77c:	2200      	movs	r2, #0
 800d77e:	74da      	strb	r2, [r3, #19]
  return seg;
 800d780:	693b      	ldr	r3, [r7, #16]
}
 800d782:	4618      	mov	r0, r3
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	bd90      	pop	{r4, r7, pc}
 800d78a:	bf00      	nop
 800d78c:	0801676c 	.word	0x0801676c
 800d790:	080167a0 	.word	0x080167a0
 800d794:	080167c0 	.word	0x080167c0
 800d798:	080167e8 	.word	0x080167e8
 800d79c:	0801680c 	.word	0x0801680c

0800d7a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d7a0:	b590      	push	{r4, r7, lr}
 800d7a2:	b08b      	sub	sp, #44	; 0x2c
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	61fb      	str	r3, [r7, #28]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <tcp_split_unsent_seg+0x2c>
 800d7be:	4b95      	ldr	r3, [pc, #596]	; (800da14 <tcp_split_unsent_seg+0x274>)
 800d7c0:	f240 324b 	movw	r2, #843	; 0x34b
 800d7c4:	4994      	ldr	r1, [pc, #592]	; (800da18 <tcp_split_unsent_seg+0x278>)
 800d7c6:	4895      	ldr	r0, [pc, #596]	; (800da1c <tcp_split_unsent_seg+0x27c>)
 800d7c8:	f006 fc84 	bl	80140d4 <iprintf>

  useg = pcb->unsent;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7dc:	e116      	b.n	800da0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d7de:	887b      	ldrh	r3, [r7, #2]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d109      	bne.n	800d7f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d7e4:	4b8b      	ldr	r3, [pc, #556]	; (800da14 <tcp_split_unsent_seg+0x274>)
 800d7e6:	f240 3253 	movw	r2, #851	; 0x353
 800d7ea:	498d      	ldr	r1, [pc, #564]	; (800da20 <tcp_split_unsent_seg+0x280>)
 800d7ec:	488b      	ldr	r0, [pc, #556]	; (800da1c <tcp_split_unsent_seg+0x27c>)
 800d7ee:	f006 fc71 	bl	80140d4 <iprintf>
    return ERR_VAL;
 800d7f2:	f06f 0305 	mvn.w	r3, #5
 800d7f6:	e109      	b.n	800da0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	891b      	ldrh	r3, [r3, #8]
 800d7fc:	887a      	ldrh	r2, [r7, #2]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d301      	bcc.n	800d806 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	e102      	b.n	800da0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d80a:	887a      	ldrh	r2, [r7, #2]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d906      	bls.n	800d81e <tcp_split_unsent_seg+0x7e>
 800d810:	4b80      	ldr	r3, [pc, #512]	; (800da14 <tcp_split_unsent_seg+0x274>)
 800d812:	f240 325b 	movw	r2, #859	; 0x35b
 800d816:	4983      	ldr	r1, [pc, #524]	; (800da24 <tcp_split_unsent_seg+0x284>)
 800d818:	4880      	ldr	r0, [pc, #512]	; (800da1c <tcp_split_unsent_seg+0x27c>)
 800d81a:	f006 fc5b 	bl	80140d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	891b      	ldrh	r3, [r3, #8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <tcp_split_unsent_seg+0x94>
 800d826:	4b7b      	ldr	r3, [pc, #492]	; (800da14 <tcp_split_unsent_seg+0x274>)
 800d828:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d82c:	497e      	ldr	r1, [pc, #504]	; (800da28 <tcp_split_unsent_seg+0x288>)
 800d82e:	487b      	ldr	r0, [pc, #492]	; (800da1c <tcp_split_unsent_seg+0x27c>)
 800d830:	f006 fc50 	bl	80140d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	7a9b      	ldrb	r3, [r3, #10]
 800d838:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	f003 0304 	and.w	r3, r3, #4
 800d844:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	891a      	ldrh	r2, [r3, #8]
 800d84a:	887b      	ldrh	r3, [r7, #2]
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	b29a      	uxth	r2, r3
 800d854:	89bb      	ldrh	r3, [r7, #12]
 800d856:	4413      	add	r3, r2
 800d858:	b29b      	uxth	r3, r3
 800d85a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d85e:	4619      	mov	r1, r3
 800d860:	2036      	movs	r0, #54	; 0x36
 800d862:	f7fb faaf 	bl	8008dc4 <pbuf_alloc>
 800d866:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 80b7 	beq.w	800d9de <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	891a      	ldrh	r2, [r3, #8]
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	891b      	ldrh	r3, [r3, #8]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	887b      	ldrh	r3, [r7, #2]
 800d880:	4413      	add	r3, r2
 800d882:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	6858      	ldr	r0, [r3, #4]
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	685a      	ldr	r2, [r3, #4]
 800d88c:	7bbb      	ldrb	r3, [r7, #14]
 800d88e:	18d1      	adds	r1, r2, r3
 800d890:	897b      	ldrh	r3, [r7, #10]
 800d892:	89ba      	ldrh	r2, [r7, #12]
 800d894:	f7fb ff80 	bl	8009798 <pbuf_copy_partial>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	89bb      	ldrh	r3, [r7, #12]
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	f040 809f 	bne.w	800d9e2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	899b      	ldrh	r3, [r3, #12]
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fa f96f 	bl	8007b90 <lwip_htons>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d8bc:	2300      	movs	r3, #0
 800d8be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d8c0:	7efb      	ldrb	r3, [r7, #27]
 800d8c2:	f003 0308 	and.w	r3, r3, #8
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d8ca:	7efb      	ldrb	r3, [r7, #27]
 800d8cc:	f023 0308 	bic.w	r3, r3, #8
 800d8d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d8d2:	7ebb      	ldrb	r3, [r7, #26]
 800d8d4:	f043 0308 	orr.w	r3, r3, #8
 800d8d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d8da:	7efb      	ldrb	r3, [r7, #27]
 800d8dc:	f003 0301 	and.w	r3, r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d007      	beq.n	800d8f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d8e4:	7efb      	ldrb	r3, [r7, #27]
 800d8e6:	f023 0301 	bic.w	r3, r3, #1
 800d8ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d8ec:	7ebb      	ldrb	r3, [r7, #26]
 800d8ee:	f043 0301 	orr.w	r3, r3, #1
 800d8f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fa f95d 	bl	8007bba <lwip_htonl>
 800d900:	4602      	mov	r2, r0
 800d902:	887b      	ldrh	r3, [r7, #2]
 800d904:	18d1      	adds	r1, r2, r3
 800d906:	7eba      	ldrb	r2, [r7, #26]
 800d908:	7bfb      	ldrb	r3, [r7, #15]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	460b      	mov	r3, r1
 800d90e:	6939      	ldr	r1, [r7, #16]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7ff fea7 	bl	800d664 <tcp_create_segment>
 800d916:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d063      	beq.n	800d9e6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fb fdc0 	bl	80094a8 <pbuf_clen>
 800d928:	4603      	mov	r3, r0
 800d92a:	461a      	mov	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d932:	1a9b      	subs	r3, r3, r2
 800d934:	b29a      	uxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	6858      	ldr	r0, [r3, #4]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	891a      	ldrh	r2, [r3, #8]
 800d946:	89bb      	ldrh	r3, [r7, #12]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	4619      	mov	r1, r3
 800d94e:	f7fb fb97 	bl	8009080 <pbuf_realloc>
  useg->len -= remainder;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	891a      	ldrh	r2, [r3, #8]
 800d956:	89bb      	ldrh	r3, [r7, #12]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	899b      	ldrh	r3, [r3, #12]
 800d966:	b29c      	uxth	r4, r3
 800d968:	7efb      	ldrb	r3, [r7, #27]
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7fa f90f 	bl	8007b90 <lwip_htons>
 800d972:	4603      	mov	r3, r0
 800d974:	461a      	mov	r2, r3
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	4322      	orrs	r2, r4
 800d97c:	b292      	uxth	r2, r2
 800d97e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	f7fb fd8f 	bl	80094a8 <pbuf_clen>
 800d98a:	4603      	mov	r3, r0
 800d98c:	461a      	mov	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d994:	4413      	add	r3, r2
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fb fd80 	bl	80094a8 <pbuf_clen>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d9b2:	4413      	add	r3, r2
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	69fa      	ldr	r2, [r7, #28]
 800d9c8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d103      	bne.n	800d9da <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e016      	b.n	800da0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d9de:	bf00      	nop
 800d9e0:	e002      	b.n	800d9e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d9e2:	bf00      	nop
 800d9e4:	e000      	b.n	800d9e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d9e6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d006      	beq.n	800d9fc <tcp_split_unsent_seg+0x25c>
 800d9ee:	4b09      	ldr	r3, [pc, #36]	; (800da14 <tcp_split_unsent_seg+0x274>)
 800d9f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d9f4:	490d      	ldr	r1, [pc, #52]	; (800da2c <tcp_split_unsent_seg+0x28c>)
 800d9f6:	4809      	ldr	r0, [pc, #36]	; (800da1c <tcp_split_unsent_seg+0x27c>)
 800d9f8:	f006 fb6c 	bl	80140d4 <iprintf>
  if (p != NULL) {
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800da02:	6938      	ldr	r0, [r7, #16]
 800da04:	f7fb fcc2 	bl	800938c <pbuf_free>
  }

  return ERR_MEM;
 800da08:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3724      	adds	r7, #36	; 0x24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd90      	pop	{r4, r7, pc}
 800da14:	0801676c 	.word	0x0801676c
 800da18:	08016b00 	.word	0x08016b00
 800da1c:	080167c0 	.word	0x080167c0
 800da20:	08016b24 	.word	0x08016b24
 800da24:	08016b48 	.word	0x08016b48
 800da28:	08016b58 	.word	0x08016b58
 800da2c:	08016b68 	.word	0x08016b68

0800da30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d106      	bne.n	800da4c <tcp_send_fin+0x1c>
 800da3e:	4b21      	ldr	r3, [pc, #132]	; (800dac4 <tcp_send_fin+0x94>)
 800da40:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800da44:	4920      	ldr	r1, [pc, #128]	; (800dac8 <tcp_send_fin+0x98>)
 800da46:	4821      	ldr	r0, [pc, #132]	; (800dacc <tcp_send_fin+0x9c>)
 800da48:	f006 fb44 	bl	80140d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d02e      	beq.n	800dab2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	e002      	b.n	800da62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f8      	bne.n	800da5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	899b      	ldrh	r3, [r3, #12]
 800da70:	b29b      	uxth	r3, r3
 800da72:	4618      	mov	r0, r3
 800da74:	f7fa f88c 	bl	8007b90 <lwip_htons>
 800da78:	4603      	mov	r3, r0
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f003 0307 	and.w	r3, r3, #7
 800da80:	2b00      	cmp	r3, #0
 800da82:	d116      	bne.n	800dab2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	899b      	ldrh	r3, [r3, #12]
 800da8a:	b29c      	uxth	r4, r3
 800da8c:	2001      	movs	r0, #1
 800da8e:	f7fa f87f 	bl	8007b90 <lwip_htons>
 800da92:	4603      	mov	r3, r0
 800da94:	461a      	mov	r2, r3
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	4322      	orrs	r2, r4
 800da9c:	b292      	uxth	r2, r2
 800da9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	8b5b      	ldrh	r3, [r3, #26]
 800daa4:	f043 0320 	orr.w	r3, r3, #32
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	e004      	b.n	800dabc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dab2:	2101      	movs	r1, #1
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f80b 	bl	800dad0 <tcp_enqueue_flags>
 800daba:	4603      	mov	r3, r0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd90      	pop	{r4, r7, pc}
 800dac4:	0801676c 	.word	0x0801676c
 800dac8:	08016b74 	.word	0x08016b74
 800dacc:	080167c0 	.word	0x080167c0

0800dad0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08a      	sub	sp, #40	; 0x28
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	f003 0303 	and.w	r3, r3, #3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <tcp_enqueue_flags+0x2c>
 800daee:	4b67      	ldr	r3, [pc, #412]	; (800dc8c <tcp_enqueue_flags+0x1bc>)
 800daf0:	f240 4211 	movw	r2, #1041	; 0x411
 800daf4:	4966      	ldr	r1, [pc, #408]	; (800dc90 <tcp_enqueue_flags+0x1c0>)
 800daf6:	4867      	ldr	r0, [pc, #412]	; (800dc94 <tcp_enqueue_flags+0x1c4>)
 800daf8:	f006 faec 	bl	80140d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d106      	bne.n	800db10 <tcp_enqueue_flags+0x40>
 800db02:	4b62      	ldr	r3, [pc, #392]	; (800dc8c <tcp_enqueue_flags+0x1bc>)
 800db04:	f240 4213 	movw	r2, #1043	; 0x413
 800db08:	4963      	ldr	r1, [pc, #396]	; (800dc98 <tcp_enqueue_flags+0x1c8>)
 800db0a:	4862      	ldr	r0, [pc, #392]	; (800dc94 <tcp_enqueue_flags+0x1c4>)
 800db0c:	f006 fae2 	bl	80140d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	f003 0302 	and.w	r3, r3, #2
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800db1a:	2301      	movs	r3, #1
 800db1c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db1e:	7ffb      	ldrb	r3, [r7, #31]
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	b2db      	uxtb	r3, r3
 800db24:	f003 0304 	and.w	r3, r3, #4
 800db28:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db32:	4619      	mov	r1, r3
 800db34:	2036      	movs	r0, #54	; 0x36
 800db36:	f7fb f945 	bl	8008dc4 <pbuf_alloc>
 800db3a:	6138      	str	r0, [r7, #16]
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d109      	bne.n	800db56 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	8b5b      	ldrh	r3, [r3, #26]
 800db46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db50:	f04f 33ff 	mov.w	r3, #4294967295
 800db54:	e095      	b.n	800dc82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	895a      	ldrh	r2, [r3, #10]
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	429a      	cmp	r2, r3
 800db60:	d206      	bcs.n	800db70 <tcp_enqueue_flags+0xa0>
 800db62:	4b4a      	ldr	r3, [pc, #296]	; (800dc8c <tcp_enqueue_flags+0x1bc>)
 800db64:	f240 4239 	movw	r2, #1081	; 0x439
 800db68:	494c      	ldr	r1, [pc, #304]	; (800dc9c <tcp_enqueue_flags+0x1cc>)
 800db6a:	484a      	ldr	r0, [pc, #296]	; (800dc94 <tcp_enqueue_flags+0x1c4>)
 800db6c:	f006 fab2 	bl	80140d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800db74:	78fa      	ldrb	r2, [r7, #3]
 800db76:	7ffb      	ldrb	r3, [r7, #31]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	460b      	mov	r3, r1
 800db7c:	6939      	ldr	r1, [r7, #16]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff fd70 	bl	800d664 <tcp_create_segment>
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d109      	bne.n	800dba0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	8b5b      	ldrh	r3, [r3, #26]
 800db90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db94:	b29a      	uxth	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295
 800db9e:	e070      	b.n	800dc82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	f003 0303 	and.w	r3, r3, #3
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d006      	beq.n	800dbba <tcp_enqueue_flags+0xea>
 800dbac:	4b37      	ldr	r3, [pc, #220]	; (800dc8c <tcp_enqueue_flags+0x1bc>)
 800dbae:	f240 4242 	movw	r2, #1090	; 0x442
 800dbb2:	493b      	ldr	r1, [pc, #236]	; (800dca0 <tcp_enqueue_flags+0x1d0>)
 800dbb4:	4837      	ldr	r0, [pc, #220]	; (800dc94 <tcp_enqueue_flags+0x1c4>)
 800dbb6:	f006 fa8d 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	891b      	ldrh	r3, [r3, #8]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d006      	beq.n	800dbd0 <tcp_enqueue_flags+0x100>
 800dbc2:	4b32      	ldr	r3, [pc, #200]	; (800dc8c <tcp_enqueue_flags+0x1bc>)
 800dbc4:	f240 4243 	movw	r2, #1091	; 0x443
 800dbc8:	4936      	ldr	r1, [pc, #216]	; (800dca4 <tcp_enqueue_flags+0x1d4>)
 800dbca:	4832      	ldr	r0, [pc, #200]	; (800dc94 <tcp_enqueue_flags+0x1c4>)
 800dbcc:	f006 fa82 	bl	80140d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d103      	bne.n	800dbe0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	66da      	str	r2, [r3, #108]	; 0x6c
 800dbde:	e00d      	b.n	800dbfc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe4:	61bb      	str	r3, [r7, #24]
 800dbe6:	e002      	b.n	800dbee <tcp_enqueue_flags+0x11e>
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1f8      	bne.n	800dbe8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dc04:	78fb      	ldrb	r3, [r7, #3]
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d104      	bne.n	800dc18 <tcp_enqueue_flags+0x148>
 800dc0e:	78fb      	ldrb	r3, [r7, #3]
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d004      	beq.n	800dc22 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dc22:	78fb      	ldrb	r3, [r7, #3]
 800dc24:	f003 0301 	and.w	r3, r3, #1
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d006      	beq.n	800dc3a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	8b5b      	ldrh	r3, [r3, #26]
 800dc30:	f043 0320 	orr.w	r3, r3, #32
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fb fc32 	bl	80094a8 <pbuf_clen>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc4e:	4413      	add	r3, r2
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00e      	beq.n	800dc80 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10a      	bne.n	800dc80 <tcp_enqueue_flags+0x1b0>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d106      	bne.n	800dc80 <tcp_enqueue_flags+0x1b0>
 800dc72:	4b06      	ldr	r3, [pc, #24]	; (800dc8c <tcp_enqueue_flags+0x1bc>)
 800dc74:	f240 4265 	movw	r2, #1125	; 0x465
 800dc78:	490b      	ldr	r1, [pc, #44]	; (800dca8 <tcp_enqueue_flags+0x1d8>)
 800dc7a:	4806      	ldr	r0, [pc, #24]	; (800dc94 <tcp_enqueue_flags+0x1c4>)
 800dc7c:	f006 fa2a 	bl	80140d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	0801676c 	.word	0x0801676c
 800dc90:	08016b90 	.word	0x08016b90
 800dc94:	080167c0 	.word	0x080167c0
 800dc98:	08016be8 	.word	0x08016be8
 800dc9c:	08016c08 	.word	0x08016c08
 800dca0:	08016c44 	.word	0x08016c44
 800dca4:	08016c5c 	.word	0x08016c5c
 800dca8:	08016c88 	.word	0x08016c88

0800dcac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dcac:	b5b0      	push	{r4, r5, r7, lr}
 800dcae:	b08a      	sub	sp, #40	; 0x28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <tcp_output+0x1c>
 800dcba:	4b8a      	ldr	r3, [pc, #552]	; (800dee4 <tcp_output+0x238>)
 800dcbc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dcc0:	4989      	ldr	r1, [pc, #548]	; (800dee8 <tcp_output+0x23c>)
 800dcc2:	488a      	ldr	r0, [pc, #552]	; (800deec <tcp_output+0x240>)
 800dcc4:	f006 fa06 	bl	80140d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d106      	bne.n	800dcde <tcp_output+0x32>
 800dcd0:	4b84      	ldr	r3, [pc, #528]	; (800dee4 <tcp_output+0x238>)
 800dcd2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dcd6:	4986      	ldr	r1, [pc, #536]	; (800def0 <tcp_output+0x244>)
 800dcd8:	4884      	ldr	r0, [pc, #528]	; (800deec <tcp_output+0x240>)
 800dcda:	f006 f9fb 	bl	80140d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dcde:	4b85      	ldr	r3, [pc, #532]	; (800def4 <tcp_output+0x248>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d101      	bne.n	800dcec <tcp_output+0x40>
    return ERR_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	e1ce      	b.n	800e08a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	bf28      	it	cs
 800dcfc:	4613      	movcs	r3, r2
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd06:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10b      	bne.n	800dd26 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	8b5b      	ldrh	r3, [r3, #26]
 800dd12:	f003 0302 	and.w	r3, r3, #2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 81aa 	beq.w	800e070 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 fdcb 	bl	800e8b8 <tcp_send_empty_ack>
 800dd22:	4603      	mov	r3, r0
 800dd24:	e1b1      	b.n	800e08a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff fc7c 	bl	800d62c <tcp_route>
 800dd34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <tcp_output+0x96>
    return ERR_RTE;
 800dd3c:	f06f 0303 	mvn.w	r3, #3
 800dd40:	e1a3      	b.n	800e08a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <tcp_output+0xa4>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d111      	bne.n	800dd74 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d002      	beq.n	800dd5c <tcp_output+0xb0>
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	e000      	b.n	800dd5e <tcp_output+0xb2>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d102      	bne.n	800dd6c <tcp_output+0xc0>
      return ERR_RTE;
 800dd66:	f06f 0303 	mvn.w	r3, #3
 800dd6a:	e18e      	b.n	800e08a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7f9 ff1d 	bl	8007bba <lwip_htonl>
 800dd80:	4602      	mov	r2, r0
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd8a:	8912      	ldrh	r2, [r2, #8]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	69ba      	ldr	r2, [r7, #24]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d227      	bcs.n	800dde4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d114      	bne.n	800ddcc <tcp_output+0x120>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d110      	bne.n	800ddcc <tcp_output+0x120>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10b      	bne.n	800ddcc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	8b5b      	ldrh	r3, [r3, #26]
 800ddd0:	f003 0302 	and.w	r3, r3, #2
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 814d 	beq.w	800e074 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fd6c 	bl	800e8b8 <tcp_send_empty_ack>
 800dde0:	4603      	mov	r3, r0
 800dde2:	e152      	b.n	800e08a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 811c 	beq.w	800e032 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ddfa:	e002      	b.n	800de02 <tcp_output+0x156>
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	623b      	str	r3, [r7, #32]
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1f8      	bne.n	800ddfc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800de0a:	e112      	b.n	800e032 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	899b      	ldrh	r3, [r3, #12]
 800de12:	b29b      	uxth	r3, r3
 800de14:	4618      	mov	r0, r3
 800de16:	f7f9 febb 	bl	8007b90 <lwip_htons>
 800de1a:	4603      	mov	r3, r0
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 0304 	and.w	r3, r3, #4
 800de22:	2b00      	cmp	r3, #0
 800de24:	d006      	beq.n	800de34 <tcp_output+0x188>
 800de26:	4b2f      	ldr	r3, [pc, #188]	; (800dee4 <tcp_output+0x238>)
 800de28:	f240 5236 	movw	r2, #1334	; 0x536
 800de2c:	4932      	ldr	r1, [pc, #200]	; (800def8 <tcp_output+0x24c>)
 800de2e:	482f      	ldr	r0, [pc, #188]	; (800deec <tcp_output+0x240>)
 800de30:	f006 f950 	bl	80140d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01f      	beq.n	800de7c <tcp_output+0x1d0>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	8b5b      	ldrh	r3, [r3, #26]
 800de40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800de44:	2b00      	cmp	r3, #0
 800de46:	d119      	bne.n	800de7c <tcp_output+0x1d0>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00b      	beq.n	800de68 <tcp_output+0x1bc>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d110      	bne.n	800de7c <tcp_output+0x1d0>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de5e:	891a      	ldrh	r2, [r3, #8]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de64:	429a      	cmp	r2, r3
 800de66:	d209      	bcs.n	800de7c <tcp_output+0x1d0>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d004      	beq.n	800de7c <tcp_output+0x1d0>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800de78:	2b08      	cmp	r3, #8
 800de7a:	d901      	bls.n	800de80 <tcp_output+0x1d4>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e000      	b.n	800de82 <tcp_output+0x1d6>
 800de80:	2300      	movs	r3, #0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8b5b      	ldrh	r3, [r3, #26]
 800de8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f000 80e4 	beq.w	800e05c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	7d1b      	ldrb	r3, [r3, #20]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d00d      	beq.n	800deb8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	899b      	ldrh	r3, [r3, #12]
 800dea2:	b29c      	uxth	r4, r3
 800dea4:	2010      	movs	r0, #16
 800dea6:	f7f9 fe73 	bl	8007b90 <lwip_htons>
 800deaa:	4603      	mov	r3, r0
 800deac:	461a      	mov	r2, r3
 800deae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	4322      	orrs	r2, r4
 800deb4:	b292      	uxth	r2, r2
 800deb6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800debe:	f000 f909 	bl	800e0d4 <tcp_output_segment>
 800dec2:	4603      	mov	r3, r0
 800dec4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d016      	beq.n	800defc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	8b5b      	ldrh	r3, [r3, #26]
 800ded2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	835a      	strh	r2, [r3, #26]
      return err;
 800dedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dee0:	e0d3      	b.n	800e08a <tcp_output+0x3de>
 800dee2:	bf00      	nop
 800dee4:	0801676c 	.word	0x0801676c
 800dee8:	08016cb0 	.word	0x08016cb0
 800deec:	080167c0 	.word	0x080167c0
 800def0:	08016cc8 	.word	0x08016cc8
 800def4:	20010944 	.word	0x20010944
 800def8:	08016cf0 	.word	0x08016cf0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	7d1b      	ldrb	r3, [r3, #20]
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d006      	beq.n	800df1a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8b5b      	ldrh	r3, [r3, #26]
 800df10:	f023 0303 	bic.w	r3, r3, #3
 800df14:	b29a      	uxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	4618      	mov	r0, r3
 800df22:	f7f9 fe4a 	bl	8007bba <lwip_htonl>
 800df26:	4604      	mov	r4, r0
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	891b      	ldrh	r3, [r3, #8]
 800df2c:	461d      	mov	r5, r3
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	899b      	ldrh	r3, [r3, #12]
 800df34:	b29b      	uxth	r3, r3
 800df36:	4618      	mov	r0, r3
 800df38:	f7f9 fe2a 	bl	8007b90 <lwip_htons>
 800df3c:	4603      	mov	r3, r0
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f003 0303 	and.w	r3, r3, #3
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <tcp_output+0x2a0>
 800df48:	2301      	movs	r3, #1
 800df4a:	e000      	b.n	800df4e <tcp_output+0x2a2>
 800df4c:	2300      	movs	r3, #0
 800df4e:	442b      	add	r3, r5
 800df50:	4423      	add	r3, r4
 800df52:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	da02      	bge.n	800df66 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68ba      	ldr	r2, [r7, #8]
 800df64:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	891b      	ldrh	r3, [r3, #8]
 800df6a:	461c      	mov	r4, r3
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	899b      	ldrh	r3, [r3, #12]
 800df72:	b29b      	uxth	r3, r3
 800df74:	4618      	mov	r0, r3
 800df76:	f7f9 fe0b 	bl	8007b90 <lwip_htons>
 800df7a:	4603      	mov	r3, r0
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	f003 0303 	and.w	r3, r3, #3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d001      	beq.n	800df8a <tcp_output+0x2de>
 800df86:	2301      	movs	r3, #1
 800df88:	e000      	b.n	800df8c <tcp_output+0x2e0>
 800df8a:	2300      	movs	r3, #0
 800df8c:	4423      	add	r3, r4
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d049      	beq.n	800e026 <tcp_output+0x37a>
      seg->next = NULL;
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	2200      	movs	r2, #0
 800df96:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d105      	bne.n	800dfac <tcp_output+0x300>
        pcb->unacked = seg;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	623b      	str	r3, [r7, #32]
 800dfaa:	e03f      	b.n	800e02c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7f9 fe01 	bl	8007bba <lwip_htonl>
 800dfb8:	4604      	mov	r4, r0
 800dfba:	6a3b      	ldr	r3, [r7, #32]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7f9 fdfa 	bl	8007bba <lwip_htonl>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	1ae3      	subs	r3, r4, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	da24      	bge.n	800e018 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	3370      	adds	r3, #112	; 0x70
 800dfd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dfd4:	e002      	b.n	800dfdc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d011      	beq.n	800e008 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7f9 fde4 	bl	8007bba <lwip_htonl>
 800dff2:	4604      	mov	r4, r0
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7f9 fddd 	bl	8007bba <lwip_htonl>
 800e000:	4603      	mov	r3, r0
 800e002:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e004:	2b00      	cmp	r3, #0
 800e006:	dbe6      	blt.n	800dfd6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e014:	601a      	str	r2, [r3, #0]
 800e016:	e009      	b.n	800e02c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	623b      	str	r3, [r7, #32]
 800e024:	e002      	b.n	800e02c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e028:	f7fc fc3f 	bl	800a8aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e030:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	2b00      	cmp	r3, #0
 800e036:	d012      	beq.n	800e05e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f9 fdbb 	bl	8007bba <lwip_htonl>
 800e044:	4602      	mov	r2, r0
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e04e:	8912      	ldrh	r2, [r2, #8]
 800e050:	4413      	add	r3, r2
  while (seg != NULL &&
 800e052:	69ba      	ldr	r2, [r7, #24]
 800e054:	429a      	cmp	r2, r3
 800e056:	f4bf aed9 	bcs.w	800de0c <tcp_output+0x160>
 800e05a:	e000      	b.n	800e05e <tcp_output+0x3b2>
      break;
 800e05c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d108      	bne.n	800e078 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e06e:	e004      	b.n	800e07a <tcp_output+0x3ce>
    goto output_done;
 800e070:	bf00      	nop
 800e072:	e002      	b.n	800e07a <tcp_output+0x3ce>
    goto output_done;
 800e074:	bf00      	nop
 800e076:	e000      	b.n	800e07a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e078:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	8b5b      	ldrh	r3, [r3, #26]
 800e07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e082:	b29a      	uxth	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3728      	adds	r7, #40	; 0x28
 800e08e:	46bd      	mov	sp, r7
 800e090:	bdb0      	pop	{r4, r5, r7, pc}
 800e092:	bf00      	nop

0800e094 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d106      	bne.n	800e0b0 <tcp_output_segment_busy+0x1c>
 800e0a2:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <tcp_output_segment_busy+0x34>)
 800e0a4:	f240 529a 	movw	r2, #1434	; 0x59a
 800e0a8:	4908      	ldr	r1, [pc, #32]	; (800e0cc <tcp_output_segment_busy+0x38>)
 800e0aa:	4809      	ldr	r0, [pc, #36]	; (800e0d0 <tcp_output_segment_busy+0x3c>)
 800e0ac:	f006 f812 	bl	80140d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	7b9b      	ldrb	r3, [r3, #14]
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d001      	beq.n	800e0be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e000      	b.n	800e0c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	0801676c 	.word	0x0801676c
 800e0cc:	08016d08 	.word	0x08016d08
 800e0d0:	080167c0 	.word	0x080167c0

0800e0d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e0d4:	b5b0      	push	{r4, r5, r7, lr}
 800e0d6:	b08c      	sub	sp, #48	; 0x30
 800e0d8:	af04      	add	r7, sp, #16
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <tcp_output_segment+0x20>
 800e0e6:	4b63      	ldr	r3, [pc, #396]	; (800e274 <tcp_output_segment+0x1a0>)
 800e0e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e0ec:	4962      	ldr	r1, [pc, #392]	; (800e278 <tcp_output_segment+0x1a4>)
 800e0ee:	4863      	ldr	r0, [pc, #396]	; (800e27c <tcp_output_segment+0x1a8>)
 800e0f0:	f005 fff0 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d106      	bne.n	800e108 <tcp_output_segment+0x34>
 800e0fa:	4b5e      	ldr	r3, [pc, #376]	; (800e274 <tcp_output_segment+0x1a0>)
 800e0fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e100:	495f      	ldr	r1, [pc, #380]	; (800e280 <tcp_output_segment+0x1ac>)
 800e102:	485e      	ldr	r0, [pc, #376]	; (800e27c <tcp_output_segment+0x1a8>)
 800e104:	f005 ffe6 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d106      	bne.n	800e11c <tcp_output_segment+0x48>
 800e10e:	4b59      	ldr	r3, [pc, #356]	; (800e274 <tcp_output_segment+0x1a0>)
 800e110:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e114:	495b      	ldr	r1, [pc, #364]	; (800e284 <tcp_output_segment+0x1b0>)
 800e116:	4859      	ldr	r0, [pc, #356]	; (800e27c <tcp_output_segment+0x1a8>)
 800e118:	f005 ffdc 	bl	80140d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7ff ffb9 	bl	800e094 <tcp_output_segment_busy>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e128:	2300      	movs	r3, #0
 800e12a:	e09f      	b.n	800e26c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	68dc      	ldr	r4, [r3, #12]
 800e134:	4610      	mov	r0, r2
 800e136:	f7f9 fd40 	bl	8007bba <lwip_htonl>
 800e13a:	4603      	mov	r3, r0
 800e13c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	68dc      	ldr	r4, [r3, #12]
 800e146:	4610      	mov	r0, r2
 800e148:	f7f9 fd22 	bl	8007b90 <lwip_htons>
 800e14c:	4603      	mov	r3, r0
 800e14e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e158:	441a      	add	r2, r3
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	3314      	adds	r3, #20
 800e164:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	7a9b      	ldrb	r3, [r3, #10]
 800e16a:	f003 0301 	and.w	r3, r3, #1
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d015      	beq.n	800e19e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	3304      	adds	r3, #4
 800e176:	461a      	mov	r2, r3
 800e178:	6879      	ldr	r1, [r7, #4]
 800e17a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e17e:	f7fc fe8b 	bl	800ae98 <tcp_eff_send_mss_netif>
 800e182:	4603      	mov	r3, r0
 800e184:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e186:	8b7b      	ldrh	r3, [r7, #26]
 800e188:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f9 fd14 	bl	8007bba <lwip_htonl>
 800e192:	4602      	mov	r2, r0
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	3304      	adds	r3, #4
 800e19c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	da02      	bge.n	800e1ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10c      	bne.n	800e1d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e1b6:	4b34      	ldr	r3, [pc, #208]	; (800e288 <tcp_output_segment+0x1b4>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f9 fcf8 	bl	8007bba <lwip_htonl>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	68da      	ldr	r2, [r3, #12]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	8959      	ldrh	r1, [r3, #10]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	8b3a      	ldrh	r2, [r7, #24]
 800e1ea:	1a8a      	subs	r2, r1, r2
 800e1ec:	b292      	uxth	r2, r2
 800e1ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	8919      	ldrh	r1, [r3, #8]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	8b3a      	ldrh	r2, [r7, #24]
 800e1fc:	1a8a      	subs	r2, r1, r2
 800e1fe:	b292      	uxth	r2, r2
 800e200:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	68d2      	ldr	r2, [r2, #12]
 800e20a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	68db      	ldr	r3, [r3, #12]
 800e210:	2200      	movs	r2, #0
 800e212:	741a      	strb	r2, [r3, #16]
 800e214:	2200      	movs	r2, #0
 800e216:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	f103 0214 	add.w	r2, r3, #20
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	7a9b      	ldrb	r3, [r3, #10]
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	f003 0304 	and.w	r3, r3, #4
 800e22a:	4413      	add	r3, r2
 800e22c:	69fa      	ldr	r2, [r7, #28]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d006      	beq.n	800e240 <tcp_output_segment+0x16c>
 800e232:	4b10      	ldr	r3, [pc, #64]	; (800e274 <tcp_output_segment+0x1a0>)
 800e234:	f240 621c 	movw	r2, #1564	; 0x61c
 800e238:	4914      	ldr	r1, [pc, #80]	; (800e28c <tcp_output_segment+0x1b8>)
 800e23a:	4810      	ldr	r0, [pc, #64]	; (800e27c <tcp_output_segment+0x1a8>)
 800e23c:	f005 ff4a 	bl	80140d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6858      	ldr	r0, [r3, #4]
 800e244:	68b9      	ldr	r1, [r7, #8]
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	1d1c      	adds	r4, r3, #4
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	7add      	ldrb	r5, [r3, #11]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	7a9b      	ldrb	r3, [r3, #10]
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	9202      	str	r2, [sp, #8]
 800e256:	2206      	movs	r2, #6
 800e258:	9201      	str	r2, [sp, #4]
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	462b      	mov	r3, r5
 800e25e:	4622      	mov	r2, r4
 800e260:	f004 fc1c 	bl	8012a9c <ip4_output_if>
 800e264:	4603      	mov	r3, r0
 800e266:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3720      	adds	r7, #32
 800e270:	46bd      	mov	sp, r7
 800e272:	bdb0      	pop	{r4, r5, r7, pc}
 800e274:	0801676c 	.word	0x0801676c
 800e278:	08016d30 	.word	0x08016d30
 800e27c:	080167c0 	.word	0x080167c0
 800e280:	08016d50 	.word	0x08016d50
 800e284:	08016d70 	.word	0x08016d70
 800e288:	200108f8 	.word	0x200108f8
 800e28c:	08016d94 	.word	0x08016d94

0800e290 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e290:	b5b0      	push	{r4, r5, r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <tcp_rexmit_rto_prepare+0x1c>
 800e29e:	4b31      	ldr	r3, [pc, #196]	; (800e364 <tcp_rexmit_rto_prepare+0xd4>)
 800e2a0:	f240 6263 	movw	r2, #1635	; 0x663
 800e2a4:	4930      	ldr	r1, [pc, #192]	; (800e368 <tcp_rexmit_rto_prepare+0xd8>)
 800e2a6:	4831      	ldr	r0, [pc, #196]	; (800e36c <tcp_rexmit_rto_prepare+0xdc>)
 800e2a8:	f005 ff14 	bl	80140d4 <iprintf>

  if (pcb->unacked == NULL) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d102      	bne.n	800e2ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e2b4:	f06f 0305 	mvn.w	r3, #5
 800e2b8:	e050      	b.n	800e35c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2be:	60fb      	str	r3, [r7, #12]
 800e2c0:	e00b      	b.n	800e2da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f7ff fee6 	bl	800e094 <tcp_output_segment_busy>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e2ce:	f06f 0305 	mvn.w	r3, #5
 800e2d2:	e043      	b.n	800e35c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	60fb      	str	r3, [r7, #12]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1ef      	bne.n	800e2c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f7ff fed6 	bl	800e094 <tcp_output_segment_busy>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e2ee:	f06f 0305 	mvn.w	r3, #5
 800e2f2:	e033      	b.n	800e35c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	8b5b      	ldrh	r3, [r3, #26]
 800e30e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e312:	b29a      	uxth	r2, r3
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	4618      	mov	r0, r3
 800e320:	f7f9 fc4b 	bl	8007bba <lwip_htonl>
 800e324:	4604      	mov	r4, r0
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	891b      	ldrh	r3, [r3, #8]
 800e32a:	461d      	mov	r5, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	899b      	ldrh	r3, [r3, #12]
 800e332:	b29b      	uxth	r3, r3
 800e334:	4618      	mov	r0, r3
 800e336:	f7f9 fc2b 	bl	8007b90 <lwip_htons>
 800e33a:	4603      	mov	r3, r0
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	f003 0303 	and.w	r3, r3, #3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <tcp_rexmit_rto_prepare+0xba>
 800e346:	2301      	movs	r3, #1
 800e348:	e000      	b.n	800e34c <tcp_rexmit_rto_prepare+0xbc>
 800e34a:	2300      	movs	r3, #0
 800e34c:	442b      	add	r3, r5
 800e34e:	18e2      	adds	r2, r4, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bdb0      	pop	{r4, r5, r7, pc}
 800e364:	0801676c 	.word	0x0801676c
 800e368:	08016da8 	.word	0x08016da8
 800e36c:	080167c0 	.word	0x080167c0

0800e370 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d106      	bne.n	800e38c <tcp_rexmit_rto_commit+0x1c>
 800e37e:	4b0d      	ldr	r3, [pc, #52]	; (800e3b4 <tcp_rexmit_rto_commit+0x44>)
 800e380:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e384:	490c      	ldr	r1, [pc, #48]	; (800e3b8 <tcp_rexmit_rto_commit+0x48>)
 800e386:	480d      	ldr	r0, [pc, #52]	; (800e3bc <tcp_rexmit_rto_commit+0x4c>)
 800e388:	f005 fea4 	bl	80140d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e392:	2bff      	cmp	r3, #255	; 0xff
 800e394:	d007      	beq.n	800e3a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e39c:	3301      	adds	r3, #1
 800e39e:	b2da      	uxtb	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff fc80 	bl	800dcac <tcp_output>
}
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	0801676c 	.word	0x0801676c
 800e3b8:	08016dcc 	.word	0x08016dcc
 800e3bc:	080167c0 	.word	0x080167c0

0800e3c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d106      	bne.n	800e3dc <tcp_rexmit_rto+0x1c>
 800e3ce:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <tcp_rexmit_rto+0x38>)
 800e3d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e3d4:	4909      	ldr	r1, [pc, #36]	; (800e3fc <tcp_rexmit_rto+0x3c>)
 800e3d6:	480a      	ldr	r0, [pc, #40]	; (800e400 <tcp_rexmit_rto+0x40>)
 800e3d8:	f005 fe7c 	bl	80140d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ff57 	bl	800e290 <tcp_rexmit_rto_prepare>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d102      	bne.n	800e3ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff ffc1 	bl	800e370 <tcp_rexmit_rto_commit>
  }
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	0801676c 	.word	0x0801676c
 800e3fc:	08016df0 	.word	0x08016df0
 800e400:	080167c0 	.word	0x080167c0

0800e404 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d106      	bne.n	800e420 <tcp_rexmit+0x1c>
 800e412:	4b2f      	ldr	r3, [pc, #188]	; (800e4d0 <tcp_rexmit+0xcc>)
 800e414:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e418:	492e      	ldr	r1, [pc, #184]	; (800e4d4 <tcp_rexmit+0xd0>)
 800e41a:	482f      	ldr	r0, [pc, #188]	; (800e4d8 <tcp_rexmit+0xd4>)
 800e41c:	f005 fe5a 	bl	80140d4 <iprintf>

  if (pcb->unacked == NULL) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e424:	2b00      	cmp	r3, #0
 800e426:	d102      	bne.n	800e42e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e428:	f06f 0305 	mvn.w	r3, #5
 800e42c:	e04c      	b.n	800e4c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e432:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e434:	68b8      	ldr	r0, [r7, #8]
 800e436:	f7ff fe2d 	bl	800e094 <tcp_output_segment_busy>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d002      	beq.n	800e446 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e440:	f06f 0305 	mvn.w	r3, #5
 800e444:	e040      	b.n	800e4c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	336c      	adds	r3, #108	; 0x6c
 800e452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e454:	e002      	b.n	800e45c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d011      	beq.n	800e488 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f9 fba4 	bl	8007bba <lwip_htonl>
 800e472:	4604      	mov	r4, r0
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7f9 fb9d 	bl	8007bba <lwip_htonl>
 800e480:	4603      	mov	r3, r0
 800e482:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e484:	2b00      	cmp	r3, #0
 800e486:	dbe6      	blt.n	800e456 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d103      	bne.n	800e4a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4ac:	2bff      	cmp	r3, #255	; 0xff
 800e4ae:	d007      	beq.n	800e4c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}
 800e4d0:	0801676c 	.word	0x0801676c
 800e4d4:	08016e0c 	.word	0x08016e0c
 800e4d8:	080167c0 	.word	0x080167c0

0800e4dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d106      	bne.n	800e4f8 <tcp_rexmit_fast+0x1c>
 800e4ea:	4b2a      	ldr	r3, [pc, #168]	; (800e594 <tcp_rexmit_fast+0xb8>)
 800e4ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e4f0:	4929      	ldr	r1, [pc, #164]	; (800e598 <tcp_rexmit_fast+0xbc>)
 800e4f2:	482a      	ldr	r0, [pc, #168]	; (800e59c <tcp_rexmit_fast+0xc0>)
 800e4f4:	f005 fdee 	bl	80140d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d044      	beq.n	800e58a <tcp_rexmit_fast+0xae>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	8b5b      	ldrh	r3, [r3, #26]
 800e504:	f003 0304 	and.w	r3, r3, #4
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d13e      	bne.n	800e58a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7ff ff79 	bl	800e404 <tcp_rexmit>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d138      	bne.n	800e58a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e524:	4293      	cmp	r3, r2
 800e526:	bf28      	it	cs
 800e528:	4613      	movcs	r3, r2
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	0fda      	lsrs	r2, r3, #31
 800e52e:	4413      	add	r3, r2
 800e530:	105b      	asrs	r3, r3, #1
 800e532:	b29a      	uxth	r2, r3
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e540:	461a      	mov	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	429a      	cmp	r2, r3
 800e54a:	d206      	bcs.n	800e55a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e564:	4619      	mov	r1, r3
 800e566:	0049      	lsls	r1, r1, #1
 800e568:	440b      	add	r3, r1
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	4413      	add	r3, r2
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	8b5b      	ldrh	r3, [r3, #26]
 800e57a:	f043 0304 	orr.w	r3, r3, #4
 800e57e:	b29a      	uxth	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e58a:	bf00      	nop
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	0801676c 	.word	0x0801676c
 800e598:	08016e24 	.word	0x08016e24
 800e59c:	080167c0 	.word	0x080167c0

0800e5a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	607b      	str	r3, [r7, #4]
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	817b      	strh	r3, [r7, #10]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e5b2:	897a      	ldrh	r2, [r7, #10]
 800e5b4:	893b      	ldrh	r3, [r7, #8]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3314      	adds	r3, #20
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	2022      	movs	r0, #34	; 0x22
 800e5c6:	f7fa fbfd 	bl	8008dc4 <pbuf_alloc>
 800e5ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d04d      	beq.n	800e66e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e5d2:	897b      	ldrh	r3, [r7, #10]
 800e5d4:	3313      	adds	r3, #19
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	8952      	ldrh	r2, [r2, #10]
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	db06      	blt.n	800e5ec <tcp_output_alloc_header_common+0x4c>
 800e5de:	4b26      	ldr	r3, [pc, #152]	; (800e678 <tcp_output_alloc_header_common+0xd8>)
 800e5e0:	f240 7223 	movw	r2, #1827	; 0x723
 800e5e4:	4925      	ldr	r1, [pc, #148]	; (800e67c <tcp_output_alloc_header_common+0xdc>)
 800e5e6:	4826      	ldr	r0, [pc, #152]	; (800e680 <tcp_output_alloc_header_common+0xe0>)
 800e5e8:	f005 fd74 	bl	80140d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e5f2:	8c3b      	ldrh	r3, [r7, #32]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7f9 facb 	bl	8007b90 <lwip_htons>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e604:	4618      	mov	r0, r3
 800e606:	f7f9 fac3 	bl	8007b90 <lwip_htons>
 800e60a:	4603      	mov	r3, r0
 800e60c:	461a      	mov	r2, r3
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f7f9 face 	bl	8007bba <lwip_htonl>
 800e61e:	4602      	mov	r2, r0
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e624:	897b      	ldrh	r3, [r7, #10]
 800e626:	089b      	lsrs	r3, r3, #2
 800e628:	b29b      	uxth	r3, r3
 800e62a:	3305      	adds	r3, #5
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	031b      	lsls	r3, r3, #12
 800e630:	b29a      	uxth	r2, r3
 800e632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e636:	b29b      	uxth	r3, r3
 800e638:	4313      	orrs	r3, r2
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7f9 faa7 	bl	8007b90 <lwip_htons>
 800e642:	4603      	mov	r3, r0
 800e644:	461a      	mov	r2, r3
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e64a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f9 fa9f 	bl	8007b90 <lwip_htons>
 800e652:	4603      	mov	r3, r0
 800e654:	461a      	mov	r2, r3
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	2200      	movs	r2, #0
 800e65e:	741a      	strb	r2, [r3, #16]
 800e660:	2200      	movs	r2, #0
 800e662:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	2200      	movs	r2, #0
 800e668:	749a      	strb	r2, [r3, #18]
 800e66a:	2200      	movs	r2, #0
 800e66c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e66e:	697b      	ldr	r3, [r7, #20]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	0801676c 	.word	0x0801676c
 800e67c:	08016e44 	.word	0x08016e44
 800e680:	080167c0 	.word	0x080167c0

0800e684 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e684:	b5b0      	push	{r4, r5, r7, lr}
 800e686:	b08a      	sub	sp, #40	; 0x28
 800e688:	af04      	add	r7, sp, #16
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	607b      	str	r3, [r7, #4]
 800e68e:	460b      	mov	r3, r1
 800e690:	817b      	strh	r3, [r7, #10]
 800e692:	4613      	mov	r3, r2
 800e694:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d106      	bne.n	800e6aa <tcp_output_alloc_header+0x26>
 800e69c:	4b15      	ldr	r3, [pc, #84]	; (800e6f4 <tcp_output_alloc_header+0x70>)
 800e69e:	f240 7242 	movw	r2, #1858	; 0x742
 800e6a2:	4915      	ldr	r1, [pc, #84]	; (800e6f8 <tcp_output_alloc_header+0x74>)
 800e6a4:	4815      	ldr	r0, [pc, #84]	; (800e6fc <tcp_output_alloc_header+0x78>)
 800e6a6:	f005 fd15 	bl	80140d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	8adb      	ldrh	r3, [r3, #22]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	8b12      	ldrh	r2, [r2, #24]
 800e6b6:	68f9      	ldr	r1, [r7, #12]
 800e6b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e6ba:	893d      	ldrh	r5, [r7, #8]
 800e6bc:	897c      	ldrh	r4, [r7, #10]
 800e6be:	9103      	str	r1, [sp, #12]
 800e6c0:	2110      	movs	r1, #16
 800e6c2:	9102      	str	r1, [sp, #8]
 800e6c4:	9201      	str	r2, [sp, #4]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	462a      	mov	r2, r5
 800e6cc:	4621      	mov	r1, r4
 800e6ce:	f7ff ff67 	bl	800e5a0 <tcp_output_alloc_header_common>
 800e6d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d006      	beq.n	800e6e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e6e2:	441a      	add	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e6e8:	697b      	ldr	r3, [r7, #20]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	0801676c 	.word	0x0801676c
 800e6f8:	08016e74 	.word	0x08016e74
 800e6fc:	080167c0 	.word	0x080167c0

0800e700 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b088      	sub	sp, #32
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	4611      	mov	r1, r2
 800e70c:	461a      	mov	r2, r3
 800e70e:	460b      	mov	r3, r1
 800e710:	71fb      	strb	r3, [r7, #7]
 800e712:	4613      	mov	r3, r2
 800e714:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e716:	2300      	movs	r3, #0
 800e718:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <tcp_output_fill_options+0x2e>
 800e720:	4b13      	ldr	r3, [pc, #76]	; (800e770 <tcp_output_fill_options+0x70>)
 800e722:	f240 7256 	movw	r2, #1878	; 0x756
 800e726:	4913      	ldr	r1, [pc, #76]	; (800e774 <tcp_output_fill_options+0x74>)
 800e728:	4813      	ldr	r0, [pc, #76]	; (800e778 <tcp_output_fill_options+0x78>)
 800e72a:	f005 fcd3 	bl	80140d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	3314      	adds	r3, #20
 800e738:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	f103 0214 	add.w	r2, r3, #20
 800e740:	8bfb      	ldrh	r3, [r7, #30]
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4619      	mov	r1, r3
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	f003 0304 	and.w	r3, r3, #4
 800e74e:	440b      	add	r3, r1
 800e750:	4413      	add	r3, r2
 800e752:	697a      	ldr	r2, [r7, #20]
 800e754:	429a      	cmp	r2, r3
 800e756:	d006      	beq.n	800e766 <tcp_output_fill_options+0x66>
 800e758:	4b05      	ldr	r3, [pc, #20]	; (800e770 <tcp_output_fill_options+0x70>)
 800e75a:	f240 7275 	movw	r2, #1909	; 0x775
 800e75e:	4907      	ldr	r1, [pc, #28]	; (800e77c <tcp_output_fill_options+0x7c>)
 800e760:	4805      	ldr	r0, [pc, #20]	; (800e778 <tcp_output_fill_options+0x78>)
 800e762:	f005 fcb7 	bl	80140d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e766:	bf00      	nop
 800e768:	3720      	adds	r7, #32
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	0801676c 	.word	0x0801676c
 800e774:	08016e9c 	.word	0x08016e9c
 800e778:	080167c0 	.word	0x080167c0
 800e77c:	08016d94 	.word	0x08016d94

0800e780 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b08a      	sub	sp, #40	; 0x28
 800e784:	af04      	add	r7, sp, #16
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <tcp_output_control_segment+0x22>
 800e794:	4b1c      	ldr	r3, [pc, #112]	; (800e808 <tcp_output_control_segment+0x88>)
 800e796:	f240 7287 	movw	r2, #1927	; 0x787
 800e79a:	491c      	ldr	r1, [pc, #112]	; (800e80c <tcp_output_control_segment+0x8c>)
 800e79c:	481c      	ldr	r0, [pc, #112]	; (800e810 <tcp_output_control_segment+0x90>)
 800e79e:	f005 fc99 	bl	80140d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f7fe ff40 	bl	800d62c <tcp_route>
 800e7ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e7b4:	23fc      	movs	r3, #252	; 0xfc
 800e7b6:	75fb      	strb	r3, [r7, #23]
 800e7b8:	e01c      	b.n	800e7f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d006      	beq.n	800e7ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	7adb      	ldrb	r3, [r3, #11]
 800e7c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	7a9b      	ldrb	r3, [r3, #10]
 800e7ca:	757b      	strb	r3, [r7, #21]
 800e7cc:	e003      	b.n	800e7d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e7ce:	23ff      	movs	r3, #255	; 0xff
 800e7d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e7d6:	7dba      	ldrb	r2, [r7, #22]
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	9302      	str	r3, [sp, #8]
 800e7dc:	2306      	movs	r3, #6
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	7d7b      	ldrb	r3, [r7, #21]
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	68b8      	ldr	r0, [r7, #8]
 800e7ec:	f004 f956 	bl	8012a9c <ip4_output_if>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e7f4:	68b8      	ldr	r0, [r7, #8]
 800e7f6:	f7fa fdc9 	bl	800938c <pbuf_free>
  return err;
 800e7fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3718      	adds	r7, #24
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	0801676c 	.word	0x0801676c
 800e80c:	08016ec4 	.word	0x08016ec4
 800e810:	080167c0 	.word	0x080167c0

0800e814 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e814:	b590      	push	{r4, r7, lr}
 800e816:	b08b      	sub	sp, #44	; 0x2c
 800e818:	af04      	add	r7, sp, #16
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d106      	bne.n	800e836 <tcp_rst+0x22>
 800e828:	4b1f      	ldr	r3, [pc, #124]	; (800e8a8 <tcp_rst+0x94>)
 800e82a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e82e:	491f      	ldr	r1, [pc, #124]	; (800e8ac <tcp_rst+0x98>)
 800e830:	481f      	ldr	r0, [pc, #124]	; (800e8b0 <tcp_rst+0x9c>)
 800e832:	f005 fc4f 	bl	80140d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d106      	bne.n	800e84a <tcp_rst+0x36>
 800e83c:	4b1a      	ldr	r3, [pc, #104]	; (800e8a8 <tcp_rst+0x94>)
 800e83e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e842:	491c      	ldr	r1, [pc, #112]	; (800e8b4 <tcp_rst+0xa0>)
 800e844:	481a      	ldr	r0, [pc, #104]	; (800e8b0 <tcp_rst+0x9c>)
 800e846:	f005 fc45 	bl	80140d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e84a:	2300      	movs	r3, #0
 800e84c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e84e:	f246 0308 	movw	r3, #24584	; 0x6008
 800e852:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	b29c      	uxth	r4, r3
 800e858:	68b8      	ldr	r0, [r7, #8]
 800e85a:	f7f9 f9ae 	bl	8007bba <lwip_htonl>
 800e85e:	4602      	mov	r2, r0
 800e860:	8abb      	ldrh	r3, [r7, #20]
 800e862:	9303      	str	r3, [sp, #12]
 800e864:	2314      	movs	r3, #20
 800e866:	9302      	str	r3, [sp, #8]
 800e868:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	4613      	mov	r3, r2
 800e872:	2200      	movs	r2, #0
 800e874:	4621      	mov	r1, r4
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff fe92 	bl	800e5a0 <tcp_output_alloc_header_common>
 800e87c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00c      	beq.n	800e89e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e884:	7dfb      	ldrb	r3, [r7, #23]
 800e886:	2200      	movs	r2, #0
 800e888:	6939      	ldr	r1, [r7, #16]
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f7ff ff38 	bl	800e700 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	6939      	ldr	r1, [r7, #16]
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f7ff ff72 	bl	800e780 <tcp_output_control_segment>
 800e89c:	e000      	b.n	800e8a0 <tcp_rst+0x8c>
    return;
 800e89e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e8a0:	371c      	adds	r7, #28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd90      	pop	{r4, r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	0801676c 	.word	0x0801676c
 800e8ac:	08016ef0 	.word	0x08016ef0
 800e8b0:	080167c0 	.word	0x080167c0
 800e8b4:	08016f0c 	.word	0x08016f0c

0800e8b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e8b8:	b590      	push	{r4, r7, lr}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <tcp_send_empty_ack+0x24>
 800e8ce:	4b28      	ldr	r3, [pc, #160]	; (800e970 <tcp_send_empty_ack+0xb8>)
 800e8d0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e8d4:	4927      	ldr	r1, [pc, #156]	; (800e974 <tcp_send_empty_ack+0xbc>)
 800e8d6:	4828      	ldr	r0, [pc, #160]	; (800e978 <tcp_send_empty_ack+0xc0>)
 800e8d8:	f005 fbfc 	bl	80140d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	f003 0304 	and.w	r3, r3, #4
 800e8e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e8e8:	7d7b      	ldrb	r3, [r7, #21]
 800e8ea:	b29c      	uxth	r4, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7f9 f962 	bl	8007bba <lwip_htonl>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7ff fec1 	bl	800e684 <tcp_output_alloc_header>
 800e902:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d109      	bne.n	800e91e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8b5b      	ldrh	r3, [r3, #26]
 800e90e:	f043 0303 	orr.w	r3, r3, #3
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e918:	f06f 0301 	mvn.w	r3, #1
 800e91c:	e023      	b.n	800e966 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e91e:	7dbb      	ldrb	r3, [r7, #22]
 800e920:	7dfa      	ldrb	r2, [r7, #23]
 800e922:	6939      	ldr	r1, [r7, #16]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff feeb 	bl	800e700 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	3304      	adds	r3, #4
 800e930:	6939      	ldr	r1, [r7, #16]
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff ff24 	bl	800e780 <tcp_output_control_segment>
 800e938:	4603      	mov	r3, r0
 800e93a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d007      	beq.n	800e954 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	8b5b      	ldrh	r3, [r3, #26]
 800e948:	f043 0303 	orr.w	r3, r3, #3
 800e94c:	b29a      	uxth	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	835a      	strh	r2, [r3, #26]
 800e952:	e006      	b.n	800e962 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	8b5b      	ldrh	r3, [r3, #26]
 800e958:	f023 0303 	bic.w	r3, r3, #3
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e966:	4618      	mov	r0, r3
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd90      	pop	{r4, r7, pc}
 800e96e:	bf00      	nop
 800e970:	0801676c 	.word	0x0801676c
 800e974:	08016f28 	.word	0x08016f28
 800e978:	080167c0 	.word	0x080167c0

0800e97c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e97c:	b590      	push	{r4, r7, lr}
 800e97e:	b087      	sub	sp, #28
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e984:	2300      	movs	r3, #0
 800e986:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <tcp_keepalive+0x20>
 800e98e:	4b18      	ldr	r3, [pc, #96]	; (800e9f0 <tcp_keepalive+0x74>)
 800e990:	f640 0224 	movw	r2, #2084	; 0x824
 800e994:	4917      	ldr	r1, [pc, #92]	; (800e9f4 <tcp_keepalive+0x78>)
 800e996:	4818      	ldr	r0, [pc, #96]	; (800e9f8 <tcp_keepalive+0x7c>)
 800e998:	f005 fb9c 	bl	80140d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
 800e99e:	b29c      	uxth	r4, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7f9 f907 	bl	8007bba <lwip_htonl>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7ff fe66 	bl	800e684 <tcp_output_alloc_header>
 800e9b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c4:	e010      	b.n	800e9e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9c6:	7dfb      	ldrb	r3, [r7, #23]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	6939      	ldr	r1, [r7, #16]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff fe97 	bl	800e700 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	6939      	ldr	r1, [r7, #16]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7ff fed0 	bl	800e780 <tcp_output_control_segment>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	371c      	adds	r7, #28
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd90      	pop	{r4, r7, pc}
 800e9f0:	0801676c 	.word	0x0801676c
 800e9f4:	08016f48 	.word	0x08016f48
 800e9f8:	080167c0 	.word	0x080167c0

0800e9fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e9fc:	b590      	push	{r4, r7, lr}
 800e9fe:	b08b      	sub	sp, #44	; 0x2c
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ea04:	2300      	movs	r3, #0
 800ea06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d106      	bne.n	800ea1e <tcp_zero_window_probe+0x22>
 800ea10:	4b4c      	ldr	r3, [pc, #304]	; (800eb44 <tcp_zero_window_probe+0x148>)
 800ea12:	f640 024f 	movw	r2, #2127	; 0x84f
 800ea16:	494c      	ldr	r1, [pc, #304]	; (800eb48 <tcp_zero_window_probe+0x14c>)
 800ea18:	484c      	ldr	r0, [pc, #304]	; (800eb4c <tcp_zero_window_probe+0x150>)
 800ea1a:	f005 fb5b 	bl	80140d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ea24:	6a3b      	ldr	r3, [r7, #32]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d101      	bne.n	800ea2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	e086      	b.n	800eb3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea34:	2bff      	cmp	r3, #255	; 0xff
 800ea36:	d007      	beq.n	800ea48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea3e:	3301      	adds	r3, #1
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7f9 f89d 	bl	8007b90 <lwip_htons>
 800ea56:	4603      	mov	r3, r0
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d005      	beq.n	800ea6e <tcp_zero_window_probe+0x72>
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	891b      	ldrh	r3, [r3, #8]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d101      	bne.n	800ea6e <tcp_zero_window_probe+0x72>
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e000      	b.n	800ea70 <tcp_zero_window_probe+0x74>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea72:	7ffb      	ldrb	r3, [r7, #31]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bf0c      	ite	eq
 800ea78:	2301      	moveq	r3, #1
 800ea7a:	2300      	movne	r3, #0
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea84:	b299      	uxth	r1, r3
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	8bba      	ldrh	r2, [r7, #28]
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7ff fdf8 	bl	800e684 <tcp_output_alloc_header>
 800ea94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d102      	bne.n	800eaa2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa0:	e04c      	b.n	800eb3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800eaa8:	7ffb      	ldrb	r3, [r7, #31]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d011      	beq.n	800ead2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	899b      	ldrh	r3, [r3, #12]
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	b21b      	sxth	r3, r3
 800eab6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eaba:	b21c      	sxth	r4, r3
 800eabc:	2011      	movs	r0, #17
 800eabe:	f7f9 f867 	bl	8007b90 <lwip_htons>
 800eac2:	4603      	mov	r3, r0
 800eac4:	b21b      	sxth	r3, r3
 800eac6:	4323      	orrs	r3, r4
 800eac8:	b21b      	sxth	r3, r3
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	819a      	strh	r2, [r3, #12]
 800ead0:	e010      	b.n	800eaf4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	3314      	adds	r3, #20
 800ead8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	6858      	ldr	r0, [r3, #4]
 800eade:	6a3b      	ldr	r3, [r7, #32]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	891a      	ldrh	r2, [r3, #8]
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	891b      	ldrh	r3, [r3, #8]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	2201      	movs	r2, #1
 800eaee:	6939      	ldr	r1, [r7, #16]
 800eaf0:	f7fa fe52 	bl	8009798 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7f9 f85d 	bl	8007bba <lwip_htonl>
 800eb00:	4603      	mov	r3, r0
 800eb02:	3301      	adds	r3, #1
 800eb04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	da02      	bge.n	800eb18 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	69b9      	ldr	r1, [r7, #24]
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff fded 	bl	800e700 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	69b9      	ldr	r1, [r7, #24]
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f7ff fe26 	bl	800e780 <tcp_output_control_segment>
 800eb34:	4603      	mov	r3, r0
 800eb36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	372c      	adds	r7, #44	; 0x2c
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd90      	pop	{r4, r7, pc}
 800eb44:	0801676c 	.word	0x0801676c
 800eb48:	08016f64 	.word	0x08016f64
 800eb4c:	080167c0 	.word	0x080167c0

0800eb50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eb58:	f7fa ff0c 	bl	8009974 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eb5c:	4b0a      	ldr	r3, [pc, #40]	; (800eb88 <tcpip_tcp_timer+0x38>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d103      	bne.n	800eb6c <tcpip_tcp_timer+0x1c>
 800eb64:	4b09      	ldr	r3, [pc, #36]	; (800eb8c <tcpip_tcp_timer+0x3c>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d005      	beq.n	800eb78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	4908      	ldr	r1, [pc, #32]	; (800eb90 <tcpip_tcp_timer+0x40>)
 800eb70:	20fa      	movs	r0, #250	; 0xfa
 800eb72:	f000 f8f3 	bl	800ed5c <sys_timeout>
 800eb76:	e003      	b.n	800eb80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb78:	4b06      	ldr	r3, [pc, #24]	; (800eb94 <tcpip_tcp_timer+0x44>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	601a      	str	r2, [r3, #0]
  }
}
 800eb7e:	bf00      	nop
 800eb80:	bf00      	nop
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20010904 	.word	0x20010904
 800eb8c:	20010908 	.word	0x20010908
 800eb90:	0800eb51 	.word	0x0800eb51
 800eb94:	20010950 	.word	0x20010950

0800eb98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb9c:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <tcp_timer_needed+0x30>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10f      	bne.n	800ebc4 <tcp_timer_needed+0x2c>
 800eba4:	4b09      	ldr	r3, [pc, #36]	; (800ebcc <tcp_timer_needed+0x34>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d103      	bne.n	800ebb4 <tcp_timer_needed+0x1c>
 800ebac:	4b08      	ldr	r3, [pc, #32]	; (800ebd0 <tcp_timer_needed+0x38>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ebb4:	4b04      	ldr	r3, [pc, #16]	; (800ebc8 <tcp_timer_needed+0x30>)
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ebba:	2200      	movs	r2, #0
 800ebbc:	4905      	ldr	r1, [pc, #20]	; (800ebd4 <tcp_timer_needed+0x3c>)
 800ebbe:	20fa      	movs	r0, #250	; 0xfa
 800ebc0:	f000 f8cc 	bl	800ed5c <sys_timeout>
  }
}
 800ebc4:	bf00      	nop
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	20010950 	.word	0x20010950
 800ebcc:	20010904 	.word	0x20010904
 800ebd0:	20010908 	.word	0x20010908
 800ebd4:	0800eb51 	.word	0x0800eb51

0800ebd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b086      	sub	sp, #24
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ebe4:	200a      	movs	r0, #10
 800ebe6:	f7f9 fcab 	bl	8008540 <memp_malloc>
 800ebea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d109      	bne.n	800ec06 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d151      	bne.n	800ec9c <sys_timeout_abs+0xc4>
 800ebf8:	4b2a      	ldr	r3, [pc, #168]	; (800eca4 <sys_timeout_abs+0xcc>)
 800ebfa:	22be      	movs	r2, #190	; 0xbe
 800ebfc:	492a      	ldr	r1, [pc, #168]	; (800eca8 <sys_timeout_abs+0xd0>)
 800ebfe:	482b      	ldr	r0, [pc, #172]	; (800ecac <sys_timeout_abs+0xd4>)
 800ec00:	f005 fa68 	bl	80140d4 <iprintf>
    return;
 800ec04:	e04a      	b.n	800ec9c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ec1e:	4b24      	ldr	r3, [pc, #144]	; (800ecb0 <sys_timeout_abs+0xd8>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d103      	bne.n	800ec2e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ec26:	4a22      	ldr	r2, [pc, #136]	; (800ecb0 <sys_timeout_abs+0xd8>)
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	6013      	str	r3, [r2, #0]
    return;
 800ec2c:	e037      	b.n	800ec9e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	685a      	ldr	r2, [r3, #4]
 800ec32:	4b1f      	ldr	r3, [pc, #124]	; (800ecb0 <sys_timeout_abs+0xd8>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	0fdb      	lsrs	r3, r3, #31
 800ec3c:	f003 0301 	and.w	r3, r3, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d007      	beq.n	800ec56 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ec46:	4b1a      	ldr	r3, [pc, #104]	; (800ecb0 <sys_timeout_abs+0xd8>)
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ec4e:	4a18      	ldr	r2, [pc, #96]	; (800ecb0 <sys_timeout_abs+0xd8>)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	e023      	b.n	800ec9e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec56:	4b16      	ldr	r3, [pc, #88]	; (800ecb0 <sys_timeout_abs+0xd8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	617b      	str	r3, [r7, #20]
 800ec5c:	e01a      	b.n	800ec94 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00b      	beq.n	800ec7e <sys_timeout_abs+0xa6>
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	685a      	ldr	r2, [r3, #4]
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	0fdb      	lsrs	r3, r3, #31
 800ec74:	f003 0301 	and.w	r3, r3, #1
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d007      	beq.n	800ec8e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	601a      	str	r2, [r3, #0]
        break;
 800ec8c:	e007      	b.n	800ec9e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1e1      	bne.n	800ec5e <sys_timeout_abs+0x86>
 800ec9a:	e000      	b.n	800ec9e <sys_timeout_abs+0xc6>
    return;
 800ec9c:	bf00      	nop
      }
    }
  }
}
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	08016f88 	.word	0x08016f88
 800eca8:	08016fbc 	.word	0x08016fbc
 800ecac:	08016ffc 	.word	0x08016ffc
 800ecb0:	20010948 	.word	0x20010948

0800ecb4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	4798      	blx	r3

  now = sys_now();
 800ecc6:	f7f5 fc95 	bl	80045f4 <sys_now>
 800ecca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	4b0f      	ldr	r3, [pc, #60]	; (800ed10 <lwip_cyclic_timer+0x5c>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	0fdb      	lsrs	r3, r3, #31
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d009      	beq.n	800ecfe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	4907      	ldr	r1, [pc, #28]	; (800ed14 <lwip_cyclic_timer+0x60>)
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7ff ff6e 	bl	800ebd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ecfc:	e004      	b.n	800ed08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	4904      	ldr	r1, [pc, #16]	; (800ed14 <lwip_cyclic_timer+0x60>)
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff ff68 	bl	800ebd8 <sys_timeout_abs>
}
 800ed08:	bf00      	nop
 800ed0a:	3718      	adds	r7, #24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	2001094c 	.word	0x2001094c
 800ed14:	0800ecb5 	.word	0x0800ecb5

0800ed18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed1e:	2301      	movs	r3, #1
 800ed20:	607b      	str	r3, [r7, #4]
 800ed22:	e00e      	b.n	800ed42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ed24:	4a0b      	ldr	r2, [pc, #44]	; (800ed54 <sys_timeouts_init+0x3c>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	00db      	lsls	r3, r3, #3
 800ed30:	4a08      	ldr	r2, [pc, #32]	; (800ed54 <sys_timeouts_init+0x3c>)
 800ed32:	4413      	add	r3, r2
 800ed34:	461a      	mov	r2, r3
 800ed36:	4908      	ldr	r1, [pc, #32]	; (800ed58 <sys_timeouts_init+0x40>)
 800ed38:	f000 f810 	bl	800ed5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	607b      	str	r3, [r7, #4]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b04      	cmp	r3, #4
 800ed46:	d9ed      	bls.n	800ed24 <sys_timeouts_init+0xc>
  }
}
 800ed48:	bf00      	nop
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	08017f54 	.word	0x08017f54
 800ed58:	0800ecb5 	.word	0x0800ecb5

0800ed5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed6e:	d306      	bcc.n	800ed7e <sys_timeout+0x22>
 800ed70:	4b0a      	ldr	r3, [pc, #40]	; (800ed9c <sys_timeout+0x40>)
 800ed72:	f240 1229 	movw	r2, #297	; 0x129
 800ed76:	490a      	ldr	r1, [pc, #40]	; (800eda0 <sys_timeout+0x44>)
 800ed78:	480a      	ldr	r0, [pc, #40]	; (800eda4 <sys_timeout+0x48>)
 800ed7a:	f005 f9ab 	bl	80140d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ed7e:	f7f5 fc39 	bl	80045f4 <sys_now>
 800ed82:	4602      	mov	r2, r0
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4413      	add	r3, r2
 800ed88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	68b9      	ldr	r1, [r7, #8]
 800ed8e:	6978      	ldr	r0, [r7, #20]
 800ed90:	f7ff ff22 	bl	800ebd8 <sys_timeout_abs>
#endif
}
 800ed94:	bf00      	nop
 800ed96:	3718      	adds	r7, #24
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	08016f88 	.word	0x08016f88
 800eda0:	08017024 	.word	0x08017024
 800eda4:	08016ffc 	.word	0x08016ffc

0800eda8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800edae:	f7f5 fc21 	bl	80045f4 <sys_now>
 800edb2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800edb4:	4b17      	ldr	r3, [pc, #92]	; (800ee14 <sys_check_timeouts+0x6c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d022      	beq.n	800ee06 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	0fdb      	lsrs	r3, r3, #31
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d11a      	bne.n	800ee0a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a0e      	ldr	r2, [pc, #56]	; (800ee14 <sys_check_timeouts+0x6c>)
 800edda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	4a0a      	ldr	r2, [pc, #40]	; (800ee18 <sys_check_timeouts+0x70>)
 800edee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800edf0:	68b9      	ldr	r1, [r7, #8]
 800edf2:	200a      	movs	r0, #10
 800edf4:	f7f9 fc1a 	bl	800862c <memp_free>
    if (handler != NULL) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0da      	beq.n	800edb4 <sys_check_timeouts+0xc>
      handler(arg);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6838      	ldr	r0, [r7, #0]
 800ee02:	4798      	blx	r3
  do {
 800ee04:	e7d6      	b.n	800edb4 <sys_check_timeouts+0xc>
      return;
 800ee06:	bf00      	nop
 800ee08:	e000      	b.n	800ee0c <sys_check_timeouts+0x64>
      return;
 800ee0a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	20010948 	.word	0x20010948
 800ee18:	2001094c 	.word	0x2001094c

0800ee1c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ee22:	4b16      	ldr	r3, [pc, #88]	; (800ee7c <sys_timeouts_sleeptime+0x60>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d102      	bne.n	800ee30 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ee2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2e:	e020      	b.n	800ee72 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800ee30:	f7f5 fbe0 	bl	80045f4 <sys_now>
 800ee34:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ee36:	4b11      	ldr	r3, [pc, #68]	; (800ee7c <sys_timeouts_sleeptime+0x60>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	685a      	ldr	r2, [r3, #4]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	0fdb      	lsrs	r3, r3, #31
 800ee42:	f003 0301 	and.w	r3, r3, #1
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <sys_timeouts_sleeptime+0x34>
    return 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	e010      	b.n	800ee72 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ee50:	4b0a      	ldr	r3, [pc, #40]	; (800ee7c <sys_timeouts_sleeptime+0x60>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	da06      	bge.n	800ee70 <sys_timeouts_sleeptime+0x54>
 800ee62:	4b07      	ldr	r3, [pc, #28]	; (800ee80 <sys_timeouts_sleeptime+0x64>)
 800ee64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ee68:	4906      	ldr	r1, [pc, #24]	; (800ee84 <sys_timeouts_sleeptime+0x68>)
 800ee6a:	4807      	ldr	r0, [pc, #28]	; (800ee88 <sys_timeouts_sleeptime+0x6c>)
 800ee6c:	f005 f932 	bl	80140d4 <iprintf>
    return ret;
 800ee70:	683b      	ldr	r3, [r7, #0]
  }
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20010948 	.word	0x20010948
 800ee80:	08016f88 	.word	0x08016f88
 800ee84:	0801705c 	.word	0x0801705c
 800ee88:	08016ffc 	.word	0x08016ffc

0800ee8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee90:	f005 f938 	bl	8014104 <rand>
 800ee94:	4603      	mov	r3, r0
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	4b01      	ldr	r3, [pc, #4]	; (800eeac <udp_init+0x20>)
 800eea6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eea8:	bf00      	nop
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	2000002c 	.word	0x2000002c

0800eeb0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800eeba:	4b17      	ldr	r3, [pc, #92]	; (800ef18 <udp_new_port+0x68>)
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	1c5a      	adds	r2, r3, #1
 800eec0:	b291      	uxth	r1, r2
 800eec2:	4a15      	ldr	r2, [pc, #84]	; (800ef18 <udp_new_port+0x68>)
 800eec4:	8011      	strh	r1, [r2, #0]
 800eec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d103      	bne.n	800eed6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800eece:	4b12      	ldr	r3, [pc, #72]	; (800ef18 <udp_new_port+0x68>)
 800eed0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eed4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eed6:	4b11      	ldr	r3, [pc, #68]	; (800ef1c <udp_new_port+0x6c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	603b      	str	r3, [r7, #0]
 800eedc:	e011      	b.n	800ef02 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	8a5a      	ldrh	r2, [r3, #18]
 800eee2:	4b0d      	ldr	r3, [pc, #52]	; (800ef18 <udp_new_port+0x68>)
 800eee4:	881b      	ldrh	r3, [r3, #0]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d108      	bne.n	800eefc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800eeea:	88fb      	ldrh	r3, [r7, #6]
 800eeec:	3301      	adds	r3, #1
 800eeee:	80fb      	strh	r3, [r7, #6]
 800eef0:	88fb      	ldrh	r3, [r7, #6]
 800eef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eef6:	d3e0      	bcc.n	800eeba <udp_new_port+0xa>
        return 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	e007      	b.n	800ef0c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	603b      	str	r3, [r7, #0]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1ea      	bne.n	800eede <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ef08:	4b03      	ldr	r3, [pc, #12]	; (800ef18 <udp_new_port+0x68>)
 800ef0a:	881b      	ldrh	r3, [r3, #0]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr
 800ef18:	2000002c 	.word	0x2000002c
 800ef1c:	20010954 	.word	0x20010954

0800ef20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d105      	bne.n	800ef40 <udp_input_local_match+0x20>
 800ef34:	4b27      	ldr	r3, [pc, #156]	; (800efd4 <udp_input_local_match+0xb4>)
 800ef36:	2287      	movs	r2, #135	; 0x87
 800ef38:	4927      	ldr	r1, [pc, #156]	; (800efd8 <udp_input_local_match+0xb8>)
 800ef3a:	4828      	ldr	r0, [pc, #160]	; (800efdc <udp_input_local_match+0xbc>)
 800ef3c:	f005 f8ca 	bl	80140d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d105      	bne.n	800ef52 <udp_input_local_match+0x32>
 800ef46:	4b23      	ldr	r3, [pc, #140]	; (800efd4 <udp_input_local_match+0xb4>)
 800ef48:	2288      	movs	r2, #136	; 0x88
 800ef4a:	4925      	ldr	r1, [pc, #148]	; (800efe0 <udp_input_local_match+0xc0>)
 800ef4c:	4823      	ldr	r0, [pc, #140]	; (800efdc <udp_input_local_match+0xbc>)
 800ef4e:	f005 f8c1 	bl	80140d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	7a1b      	ldrb	r3, [r3, #8]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d00b      	beq.n	800ef72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	7a1a      	ldrb	r2, [r3, #8]
 800ef5e:	4b21      	ldr	r3, [pc, #132]	; (800efe4 <udp_input_local_match+0xc4>)
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef66:	3301      	adds	r3, #1
 800ef68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d001      	beq.n	800ef72 <udp_input_local_match+0x52>
    return 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e02b      	b.n	800efca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ef72:	79fb      	ldrb	r3, [r7, #7]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d018      	beq.n	800efaa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d013      	beq.n	800efa6 <udp_input_local_match+0x86>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00f      	beq.n	800efa6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ef86:	4b17      	ldr	r3, [pc, #92]	; (800efe4 <udp_input_local_match+0xc4>)
 800ef88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8e:	d00a      	beq.n	800efa6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	4b13      	ldr	r3, [pc, #76]	; (800efe4 <udp_input_local_match+0xc4>)
 800ef96:	695b      	ldr	r3, [r3, #20]
 800ef98:	405a      	eors	r2, r3
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d110      	bne.n	800efc8 <udp_input_local_match+0xa8>
          return 1;
 800efa6:	2301      	movs	r3, #1
 800efa8:	e00f      	b.n	800efca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d009      	beq.n	800efc4 <udp_input_local_match+0xa4>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d005      	beq.n	800efc4 <udp_input_local_match+0xa4>
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <udp_input_local_match+0xc4>)
 800efbe:	695b      	ldr	r3, [r3, #20]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d101      	bne.n	800efc8 <udp_input_local_match+0xa8>
        return 1;
 800efc4:	2301      	movs	r3, #1
 800efc6:	e000      	b.n	800efca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	08017070 	.word	0x08017070
 800efd8:	080170a0 	.word	0x080170a0
 800efdc:	080170c4 	.word	0x080170c4
 800efe0:	080170ec 	.word	0x080170ec
 800efe4:	2000d184 	.word	0x2000d184

0800efe8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800efe8:	b590      	push	{r4, r7, lr}
 800efea:	b08d      	sub	sp, #52	; 0x34
 800efec:	af02      	add	r7, sp, #8
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d105      	bne.n	800f008 <udp_input+0x20>
 800effc:	4b7c      	ldr	r3, [pc, #496]	; (800f1f0 <udp_input+0x208>)
 800effe:	22cf      	movs	r2, #207	; 0xcf
 800f000:	497c      	ldr	r1, [pc, #496]	; (800f1f4 <udp_input+0x20c>)
 800f002:	487d      	ldr	r0, [pc, #500]	; (800f1f8 <udp_input+0x210>)
 800f004:	f005 f866 	bl	80140d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d105      	bne.n	800f01a <udp_input+0x32>
 800f00e:	4b78      	ldr	r3, [pc, #480]	; (800f1f0 <udp_input+0x208>)
 800f010:	22d0      	movs	r2, #208	; 0xd0
 800f012:	497a      	ldr	r1, [pc, #488]	; (800f1fc <udp_input+0x214>)
 800f014:	4878      	ldr	r0, [pc, #480]	; (800f1f8 <udp_input+0x210>)
 800f016:	f005 f85d 	bl	80140d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	895b      	ldrh	r3, [r3, #10]
 800f01e:	2b07      	cmp	r3, #7
 800f020:	d803      	bhi.n	800f02a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7fa f9b2 	bl	800938c <pbuf_free>
    goto end;
 800f028:	e0de      	b.n	800f1e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f030:	4b73      	ldr	r3, [pc, #460]	; (800f200 <udp_input+0x218>)
 800f032:	695b      	ldr	r3, [r3, #20]
 800f034:	4a72      	ldr	r2, [pc, #456]	; (800f200 <udp_input+0x218>)
 800f036:	6812      	ldr	r2, [r2, #0]
 800f038:	4611      	mov	r1, r2
 800f03a:	4618      	mov	r0, r3
 800f03c:	f003 fe06 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 800f040:	4603      	mov	r3, r0
 800f042:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	b29b      	uxth	r3, r3
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7f8 fda0 	bl	8007b90 <lwip_htons>
 800f050:	4603      	mov	r3, r0
 800f052:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	885b      	ldrh	r3, [r3, #2]
 800f058:	b29b      	uxth	r3, r3
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f8 fd98 	bl	8007b90 <lwip_htons>
 800f060:	4603      	mov	r3, r0
 800f062:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f064:	2300      	movs	r3, #0
 800f066:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f068:	2300      	movs	r3, #0
 800f06a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f070:	4b64      	ldr	r3, [pc, #400]	; (800f204 <udp_input+0x21c>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	627b      	str	r3, [r7, #36]	; 0x24
 800f076:	e054      	b.n	800f122 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	8a5b      	ldrh	r3, [r3, #18]
 800f07c:	89fa      	ldrh	r2, [r7, #14]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d14a      	bne.n	800f118 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f082:	7cfb      	ldrb	r3, [r7, #19]
 800f084:	461a      	mov	r2, r3
 800f086:	6839      	ldr	r1, [r7, #0]
 800f088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f08a:	f7ff ff49 	bl	800ef20 <udp_input_local_match>
 800f08e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f090:	2b00      	cmp	r3, #0
 800f092:	d041      	beq.n	800f118 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f096:	7c1b      	ldrb	r3, [r3, #16]
 800f098:	f003 0304 	and.w	r3, r3, #4
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d11d      	bne.n	800f0dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d102      	bne.n	800f0ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	61fb      	str	r3, [r7, #28]
 800f0aa:	e017      	b.n	800f0dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f0ac:	7cfb      	ldrb	r3, [r7, #19]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d014      	beq.n	800f0dc <udp_input+0xf4>
 800f0b2:	4b53      	ldr	r3, [pc, #332]	; (800f200 <udp_input+0x218>)
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ba:	d10f      	bne.n	800f0dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d008      	beq.n	800f0dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	3304      	adds	r3, #4
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d101      	bne.n	800f0dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	8a9b      	ldrh	r3, [r3, #20]
 800f0e0:	8a3a      	ldrh	r2, [r7, #16]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d118      	bne.n	800f118 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d005      	beq.n	800f0fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	4b43      	ldr	r3, [pc, #268]	; (800f200 <udp_input+0x218>)
 800f0f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d10e      	bne.n	800f118 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d014      	beq.n	800f12a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	68da      	ldr	r2, [r3, #12]
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f108:	4b3e      	ldr	r3, [pc, #248]	; (800f204 <udp_input+0x21c>)
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f110:	4a3c      	ldr	r2, [pc, #240]	; (800f204 <udp_input+0x21c>)
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f116:	e008      	b.n	800f12a <udp_input+0x142>
      }
    }

    prev = pcb;
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	627b      	str	r3, [r7, #36]	; 0x24
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1a7      	bne.n	800f078 <udp_input+0x90>
 800f128:	e000      	b.n	800f12c <udp_input+0x144>
        break;
 800f12a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <udp_input+0x15a>
    for_us = 1;
 800f13c:	2301      	movs	r3, #1
 800f13e:	76fb      	strb	r3, [r7, #27]
 800f140:	e00a      	b.n	800f158 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	3304      	adds	r3, #4
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	4b2d      	ldr	r3, [pc, #180]	; (800f200 <udp_input+0x218>)
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	bf0c      	ite	eq
 800f150:	2301      	moveq	r3, #1
 800f152:	2300      	movne	r3, #0
 800f154:	b2db      	uxtb	r3, r3
 800f156:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f158:	7efb      	ldrb	r3, [r7, #27]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d041      	beq.n	800f1e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f15e:	2108      	movs	r1, #8
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7fa f88d 	bl	8009280 <pbuf_remove_header>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f16c:	4b20      	ldr	r3, [pc, #128]	; (800f1f0 <udp_input+0x208>)
 800f16e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f172:	4925      	ldr	r1, [pc, #148]	; (800f208 <udp_input+0x220>)
 800f174:	4820      	ldr	r0, [pc, #128]	; (800f1f8 <udp_input+0x210>)
 800f176:	f004 ffad 	bl	80140d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7fa f906 	bl	800938c <pbuf_free>
      goto end;
 800f180:	e032      	b.n	800f1e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	2b00      	cmp	r3, #0
 800f186:	d012      	beq.n	800f1ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	699b      	ldr	r3, [r3, #24]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00a      	beq.n	800f1a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	699c      	ldr	r4, [r3, #24]
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	69d8      	ldr	r0, [r3, #28]
 800f198:	8a3b      	ldrh	r3, [r7, #16]
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	4b1b      	ldr	r3, [pc, #108]	; (800f20c <udp_input+0x224>)
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f1a4:	e021      	b.n	800f1ea <udp_input+0x202>
        pbuf_free(p);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7fa f8f0 	bl	800938c <pbuf_free>
        goto end;
 800f1ac:	e01c      	b.n	800f1e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f1ae:	7cfb      	ldrb	r3, [r7, #19]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d112      	bne.n	800f1da <udp_input+0x1f2>
 800f1b4:	4b12      	ldr	r3, [pc, #72]	; (800f200 <udp_input+0x218>)
 800f1b6:	695b      	ldr	r3, [r3, #20]
 800f1b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1bc:	2be0      	cmp	r3, #224	; 0xe0
 800f1be:	d00c      	beq.n	800f1da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f1c0:	4b0f      	ldr	r3, [pc, #60]	; (800f200 <udp_input+0x218>)
 800f1c2:	899b      	ldrh	r3, [r3, #12]
 800f1c4:	3308      	adds	r3, #8
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	b21b      	sxth	r3, r3
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7fa f8ca 	bl	8009366 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f1d2:	2103      	movs	r1, #3
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f003 f9fb 	bl	80125d0 <icmp_dest_unreach>
      pbuf_free(p);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7fa f8d6 	bl	800938c <pbuf_free>
  return;
 800f1e0:	e003      	b.n	800f1ea <udp_input+0x202>
    pbuf_free(p);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7fa f8d2 	bl	800938c <pbuf_free>
  return;
 800f1e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f1ea:	372c      	adds	r7, #44	; 0x2c
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd90      	pop	{r4, r7, pc}
 800f1f0:	08017070 	.word	0x08017070
 800f1f4:	08017114 	.word	0x08017114
 800f1f8:	080170c4 	.word	0x080170c4
 800f1fc:	0801712c 	.word	0x0801712c
 800f200:	2000d184 	.word	0x2000d184
 800f204:	20010954 	.word	0x20010954
 800f208:	08017148 	.word	0x08017148
 800f20c:	2000d194 	.word	0x2000d194

0800f210 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b088      	sub	sp, #32
 800f214:	af02      	add	r7, sp, #8
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d109      	bne.n	800f238 <udp_sendto_if+0x28>
 800f224:	4b2e      	ldr	r3, [pc, #184]	; (800f2e0 <udp_sendto_if+0xd0>)
 800f226:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f22a:	492e      	ldr	r1, [pc, #184]	; (800f2e4 <udp_sendto_if+0xd4>)
 800f22c:	482e      	ldr	r0, [pc, #184]	; (800f2e8 <udp_sendto_if+0xd8>)
 800f22e:	f004 ff51 	bl	80140d4 <iprintf>
 800f232:	f06f 030f 	mvn.w	r3, #15
 800f236:	e04f      	b.n	800f2d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d109      	bne.n	800f252 <udp_sendto_if+0x42>
 800f23e:	4b28      	ldr	r3, [pc, #160]	; (800f2e0 <udp_sendto_if+0xd0>)
 800f240:	f240 2281 	movw	r2, #641	; 0x281
 800f244:	4929      	ldr	r1, [pc, #164]	; (800f2ec <udp_sendto_if+0xdc>)
 800f246:	4828      	ldr	r0, [pc, #160]	; (800f2e8 <udp_sendto_if+0xd8>)
 800f248:	f004 ff44 	bl	80140d4 <iprintf>
 800f24c:	f06f 030f 	mvn.w	r3, #15
 800f250:	e042      	b.n	800f2d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d109      	bne.n	800f26c <udp_sendto_if+0x5c>
 800f258:	4b21      	ldr	r3, [pc, #132]	; (800f2e0 <udp_sendto_if+0xd0>)
 800f25a:	f240 2282 	movw	r2, #642	; 0x282
 800f25e:	4924      	ldr	r1, [pc, #144]	; (800f2f0 <udp_sendto_if+0xe0>)
 800f260:	4821      	ldr	r0, [pc, #132]	; (800f2e8 <udp_sendto_if+0xd8>)
 800f262:	f004 ff37 	bl	80140d4 <iprintf>
 800f266:	f06f 030f 	mvn.w	r3, #15
 800f26a:	e035      	b.n	800f2d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d109      	bne.n	800f286 <udp_sendto_if+0x76>
 800f272:	4b1b      	ldr	r3, [pc, #108]	; (800f2e0 <udp_sendto_if+0xd0>)
 800f274:	f240 2283 	movw	r2, #643	; 0x283
 800f278:	491e      	ldr	r1, [pc, #120]	; (800f2f4 <udp_sendto_if+0xe4>)
 800f27a:	481b      	ldr	r0, [pc, #108]	; (800f2e8 <udp_sendto_if+0xd8>)
 800f27c:	f004 ff2a 	bl	80140d4 <iprintf>
 800f280:	f06f 030f 	mvn.w	r3, #15
 800f284:	e028      	b.n	800f2d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d009      	beq.n	800f2a0 <udp_sendto_if+0x90>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d005      	beq.n	800f2a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f29c:	2be0      	cmp	r3, #224	; 0xe0
 800f29e:	d103      	bne.n	800f2a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	3304      	adds	r3, #4
 800f2a4:	617b      	str	r3, [r7, #20]
 800f2a6:	e00b      	b.n	800f2c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	6a3b      	ldr	r3, [r7, #32]
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d002      	beq.n	800f2bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f2b6:	f06f 0303 	mvn.w	r3, #3
 800f2ba:	e00d      	b.n	800f2d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f2c0:	887a      	ldrh	r2, [r7, #2]
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	68b9      	ldr	r1, [r7, #8]
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f000 f811 	bl	800f2f8 <udp_sendto_if_src>
 800f2d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3718      	adds	r7, #24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	08017070 	.word	0x08017070
 800f2e4:	080171e4 	.word	0x080171e4
 800f2e8:	080170c4 	.word	0x080170c4
 800f2ec:	08017200 	.word	0x08017200
 800f2f0:	0801721c 	.word	0x0801721c
 800f2f4:	0801723c 	.word	0x0801723c

0800f2f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b08c      	sub	sp, #48	; 0x30
 800f2fc:	af04      	add	r7, sp, #16
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
 800f304:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d109      	bne.n	800f320 <udp_sendto_if_src+0x28>
 800f30c:	4b65      	ldr	r3, [pc, #404]	; (800f4a4 <udp_sendto_if_src+0x1ac>)
 800f30e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f312:	4965      	ldr	r1, [pc, #404]	; (800f4a8 <udp_sendto_if_src+0x1b0>)
 800f314:	4865      	ldr	r0, [pc, #404]	; (800f4ac <udp_sendto_if_src+0x1b4>)
 800f316:	f004 fedd 	bl	80140d4 <iprintf>
 800f31a:	f06f 030f 	mvn.w	r3, #15
 800f31e:	e0bc      	b.n	800f49a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d109      	bne.n	800f33a <udp_sendto_if_src+0x42>
 800f326:	4b5f      	ldr	r3, [pc, #380]	; (800f4a4 <udp_sendto_if_src+0x1ac>)
 800f328:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f32c:	4960      	ldr	r1, [pc, #384]	; (800f4b0 <udp_sendto_if_src+0x1b8>)
 800f32e:	485f      	ldr	r0, [pc, #380]	; (800f4ac <udp_sendto_if_src+0x1b4>)
 800f330:	f004 fed0 	bl	80140d4 <iprintf>
 800f334:	f06f 030f 	mvn.w	r3, #15
 800f338:	e0af      	b.n	800f49a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d109      	bne.n	800f354 <udp_sendto_if_src+0x5c>
 800f340:	4b58      	ldr	r3, [pc, #352]	; (800f4a4 <udp_sendto_if_src+0x1ac>)
 800f342:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f346:	495b      	ldr	r1, [pc, #364]	; (800f4b4 <udp_sendto_if_src+0x1bc>)
 800f348:	4858      	ldr	r0, [pc, #352]	; (800f4ac <udp_sendto_if_src+0x1b4>)
 800f34a:	f004 fec3 	bl	80140d4 <iprintf>
 800f34e:	f06f 030f 	mvn.w	r3, #15
 800f352:	e0a2      	b.n	800f49a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d109      	bne.n	800f36e <udp_sendto_if_src+0x76>
 800f35a:	4b52      	ldr	r3, [pc, #328]	; (800f4a4 <udp_sendto_if_src+0x1ac>)
 800f35c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f360:	4955      	ldr	r1, [pc, #340]	; (800f4b8 <udp_sendto_if_src+0x1c0>)
 800f362:	4852      	ldr	r0, [pc, #328]	; (800f4ac <udp_sendto_if_src+0x1b4>)
 800f364:	f004 feb6 	bl	80140d4 <iprintf>
 800f368:	f06f 030f 	mvn.w	r3, #15
 800f36c:	e095      	b.n	800f49a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	2b00      	cmp	r3, #0
 800f372:	d109      	bne.n	800f388 <udp_sendto_if_src+0x90>
 800f374:	4b4b      	ldr	r3, [pc, #300]	; (800f4a4 <udp_sendto_if_src+0x1ac>)
 800f376:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f37a:	4950      	ldr	r1, [pc, #320]	; (800f4bc <udp_sendto_if_src+0x1c4>)
 800f37c:	484b      	ldr	r0, [pc, #300]	; (800f4ac <udp_sendto_if_src+0x1b4>)
 800f37e:	f004 fea9 	bl	80140d4 <iprintf>
 800f382:	f06f 030f 	mvn.w	r3, #15
 800f386:	e088      	b.n	800f49a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	8a5b      	ldrh	r3, [r3, #18]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d10f      	bne.n	800f3b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f390:	68f9      	ldr	r1, [r7, #12]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	8a5b      	ldrh	r3, [r3, #18]
 800f396:	461a      	mov	r2, r3
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f893 	bl	800f4c4 <udp_bind>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f3a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d002      	beq.n	800f3b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f3aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f3ae:	e074      	b.n	800f49a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	891b      	ldrh	r3, [r3, #8]
 800f3b4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d902      	bls.n	800f3c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c0:	e06b      	b.n	800f49a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f3c2:	2108      	movs	r1, #8
 800f3c4:	68b8      	ldr	r0, [r7, #8]
 800f3c6:	f7f9 ff4b 	bl	8009260 <pbuf_add_header>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d015      	beq.n	800f3fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f3d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3d4:	2108      	movs	r1, #8
 800f3d6:	2022      	movs	r0, #34	; 0x22
 800f3d8:	f7f9 fcf4 	bl	8008dc4 <pbuf_alloc>
 800f3dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d102      	bne.n	800f3ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e8:	e057      	b.n	800f49a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	891b      	ldrh	r3, [r3, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d006      	beq.n	800f400 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	69f8      	ldr	r0, [r7, #28]
 800f3f6:	f7fa f8ed 	bl	80095d4 <pbuf_chain>
 800f3fa:	e001      	b.n	800f400 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	895b      	ldrh	r3, [r3, #10]
 800f404:	2b07      	cmp	r3, #7
 800f406:	d806      	bhi.n	800f416 <udp_sendto_if_src+0x11e>
 800f408:	4b26      	ldr	r3, [pc, #152]	; (800f4a4 <udp_sendto_if_src+0x1ac>)
 800f40a:	f240 320d 	movw	r2, #781	; 0x30d
 800f40e:	492c      	ldr	r1, [pc, #176]	; (800f4c0 <udp_sendto_if_src+0x1c8>)
 800f410:	4826      	ldr	r0, [pc, #152]	; (800f4ac <udp_sendto_if_src+0x1b4>)
 800f412:	f004 fe5f 	bl	80140d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	8a5b      	ldrh	r3, [r3, #18]
 800f420:	4618      	mov	r0, r3
 800f422:	f7f8 fbb5 	bl	8007b90 <lwip_htons>
 800f426:	4603      	mov	r3, r0
 800f428:	461a      	mov	r2, r3
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f42e:	887b      	ldrh	r3, [r7, #2]
 800f430:	4618      	mov	r0, r3
 800f432:	f7f8 fbad 	bl	8007b90 <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	461a      	mov	r2, r3
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	2200      	movs	r2, #0
 800f442:	719a      	strb	r2, [r3, #6]
 800f444:	2200      	movs	r2, #0
 800f446:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	891b      	ldrh	r3, [r3, #8]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7f8 fb9f 	bl	8007b90 <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	461a      	mov	r2, r3
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f45a:	2311      	movs	r3, #17
 800f45c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	7adb      	ldrb	r3, [r3, #11]
 800f462:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	7a9b      	ldrb	r3, [r3, #10]
 800f468:	7cb9      	ldrb	r1, [r7, #18]
 800f46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f46c:	9202      	str	r2, [sp, #8]
 800f46e:	7cfa      	ldrb	r2, [r7, #19]
 800f470:	9201      	str	r2, [sp, #4]
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	460b      	mov	r3, r1
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f47a:	69f8      	ldr	r0, [r7, #28]
 800f47c:	f003 fb38 	bl	8012af0 <ip4_output_if_src>
 800f480:	4603      	mov	r3, r0
 800f482:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f484:	69fa      	ldr	r2, [r7, #28]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d004      	beq.n	800f496 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f48c:	69f8      	ldr	r0, [r7, #28]
 800f48e:	f7f9 ff7d 	bl	800938c <pbuf_free>
    q = NULL;
 800f492:	2300      	movs	r3, #0
 800f494:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f496:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3720      	adds	r7, #32
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	08017070 	.word	0x08017070
 800f4a8:	0801725c 	.word	0x0801725c
 800f4ac:	080170c4 	.word	0x080170c4
 800f4b0:	0801727c 	.word	0x0801727c
 800f4b4:	0801729c 	.word	0x0801729c
 800f4b8:	080172c0 	.word	0x080172c0
 800f4bc:	080172e4 	.word	0x080172e4
 800f4c0:	08017308 	.word	0x08017308

0800f4c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d101      	bne.n	800f4dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f4d8:	4b39      	ldr	r3, [pc, #228]	; (800f5c0 <udp_bind+0xfc>)
 800f4da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d109      	bne.n	800f4f6 <udp_bind+0x32>
 800f4e2:	4b38      	ldr	r3, [pc, #224]	; (800f5c4 <udp_bind+0x100>)
 800f4e4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f4e8:	4937      	ldr	r1, [pc, #220]	; (800f5c8 <udp_bind+0x104>)
 800f4ea:	4838      	ldr	r0, [pc, #224]	; (800f5cc <udp_bind+0x108>)
 800f4ec:	f004 fdf2 	bl	80140d4 <iprintf>
 800f4f0:	f06f 030f 	mvn.w	r3, #15
 800f4f4:	e060      	b.n	800f5b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f4fa:	4b35      	ldr	r3, [pc, #212]	; (800f5d0 <udp_bind+0x10c>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	617b      	str	r3, [r7, #20]
 800f500:	e009      	b.n	800f516 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	429a      	cmp	r2, r3
 800f508:	d102      	bne.n	800f510 <udp_bind+0x4c>
      rebind = 1;
 800f50a:	2301      	movs	r3, #1
 800f50c:	74fb      	strb	r3, [r7, #19]
      break;
 800f50e:	e005      	b.n	800f51c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	617b      	str	r3, [r7, #20]
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d1f2      	bne.n	800f502 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f51c:	88fb      	ldrh	r3, [r7, #6]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d109      	bne.n	800f536 <udp_bind+0x72>
    port = udp_new_port();
 800f522:	f7ff fcc5 	bl	800eeb0 <udp_new_port>
 800f526:	4603      	mov	r3, r0
 800f528:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f52a:	88fb      	ldrh	r3, [r7, #6]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d12c      	bne.n	800f58a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f530:	f06f 0307 	mvn.w	r3, #7
 800f534:	e040      	b.n	800f5b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f536:	4b26      	ldr	r3, [pc, #152]	; (800f5d0 <udp_bind+0x10c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	e022      	b.n	800f584 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	429a      	cmp	r2, r3
 800f544:	d01b      	beq.n	800f57e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	8a5b      	ldrh	r3, [r3, #18]
 800f54a:	88fa      	ldrh	r2, [r7, #6]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d116      	bne.n	800f57e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f558:	429a      	cmp	r2, r3
 800f55a:	d00d      	beq.n	800f578 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00a      	beq.n	800f578 <udp_bind+0xb4>
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d006      	beq.n	800f578 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f56a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d003      	beq.n	800f578 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f578:	f06f 0307 	mvn.w	r3, #7
 800f57c:	e01c      	b.n	800f5b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	617b      	str	r3, [r7, #20]
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1d9      	bne.n	800f53e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <udp_bind+0xd2>
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	e000      	b.n	800f598 <udp_bind+0xd4>
 800f596:	2300      	movs	r3, #0
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	88fa      	ldrh	r2, [r7, #6]
 800f5a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f5a2:	7cfb      	ldrb	r3, [r7, #19]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d106      	bne.n	800f5b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f5a8:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <udp_bind+0x10c>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f5b0:	4a07      	ldr	r2, [pc, #28]	; (800f5d0 <udp_bind+0x10c>)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	08017f7c 	.word	0x08017f7c
 800f5c4:	08017070 	.word	0x08017070
 800f5c8:	08017338 	.word	0x08017338
 800f5cc:	080170c4 	.word	0x080170c4
 800f5d0:	20010954 	.word	0x20010954

0800f5d4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d109      	bne.n	800f5fc <udp_connect+0x28>
 800f5e8:	4b2c      	ldr	r3, [pc, #176]	; (800f69c <udp_connect+0xc8>)
 800f5ea:	f240 4235 	movw	r2, #1077	; 0x435
 800f5ee:	492c      	ldr	r1, [pc, #176]	; (800f6a0 <udp_connect+0xcc>)
 800f5f0:	482c      	ldr	r0, [pc, #176]	; (800f6a4 <udp_connect+0xd0>)
 800f5f2:	f004 fd6f 	bl	80140d4 <iprintf>
 800f5f6:	f06f 030f 	mvn.w	r3, #15
 800f5fa:	e04b      	b.n	800f694 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d109      	bne.n	800f616 <udp_connect+0x42>
 800f602:	4b26      	ldr	r3, [pc, #152]	; (800f69c <udp_connect+0xc8>)
 800f604:	f240 4236 	movw	r2, #1078	; 0x436
 800f608:	4927      	ldr	r1, [pc, #156]	; (800f6a8 <udp_connect+0xd4>)
 800f60a:	4826      	ldr	r0, [pc, #152]	; (800f6a4 <udp_connect+0xd0>)
 800f60c:	f004 fd62 	bl	80140d4 <iprintf>
 800f610:	f06f 030f 	mvn.w	r3, #15
 800f614:	e03e      	b.n	800f694 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	8a5b      	ldrh	r3, [r3, #18]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d10f      	bne.n	800f63e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f61e:	68f9      	ldr	r1, [r7, #12]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	8a5b      	ldrh	r3, [r3, #18]
 800f624:	461a      	mov	r2, r3
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f7ff ff4c 	bl	800f4c4 <udp_bind>
 800f62c:	4603      	mov	r3, r0
 800f62e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <udp_connect+0x6a>
      return err;
 800f638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f63c:	e02a      	b.n	800f694 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <udp_connect+0x76>
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	e000      	b.n	800f64c <udp_connect+0x78>
 800f64a:	2300      	movs	r3, #0
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	88fa      	ldrh	r2, [r7, #6]
 800f654:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	7c1b      	ldrb	r3, [r3, #16]
 800f65a:	f043 0304 	orr.w	r3, r3, #4
 800f65e:	b2da      	uxtb	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f664:	4b11      	ldr	r3, [pc, #68]	; (800f6ac <udp_connect+0xd8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	e008      	b.n	800f67e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	429a      	cmp	r2, r3
 800f672:	d101      	bne.n	800f678 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f674:	2300      	movs	r3, #0
 800f676:	e00d      	b.n	800f694 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	617b      	str	r3, [r7, #20]
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d1f3      	bne.n	800f66c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f684:	4b09      	ldr	r3, [pc, #36]	; (800f6ac <udp_connect+0xd8>)
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f68c:	4a07      	ldr	r2, [pc, #28]	; (800f6ac <udp_connect+0xd8>)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	3718      	adds	r7, #24
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	08017070 	.word	0x08017070
 800f6a0:	08017350 	.word	0x08017350
 800f6a4:	080170c4 	.word	0x080170c4
 800f6a8:	0801736c 	.word	0x0801736c
 800f6ac:	20010954 	.word	0x20010954

0800f6b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d107      	bne.n	800f6d2 <udp_recv+0x22>
 800f6c2:	4b08      	ldr	r3, [pc, #32]	; (800f6e4 <udp_recv+0x34>)
 800f6c4:	f240 428a 	movw	r2, #1162	; 0x48a
 800f6c8:	4907      	ldr	r1, [pc, #28]	; (800f6e8 <udp_recv+0x38>)
 800f6ca:	4808      	ldr	r0, [pc, #32]	; (800f6ec <udp_recv+0x3c>)
 800f6cc:	f004 fd02 	bl	80140d4 <iprintf>
 800f6d0:	e005      	b.n	800f6de <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	68ba      	ldr	r2, [r7, #8]
 800f6d6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	61da      	str	r2, [r3, #28]
}
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	08017070 	.word	0x08017070
 800f6e8:	080173a4 	.word	0x080173a4
 800f6ec:	080170c4 	.word	0x080170c4

0800f6f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d107      	bne.n	800f70e <udp_remove+0x1e>
 800f6fe:	4b19      	ldr	r3, [pc, #100]	; (800f764 <udp_remove+0x74>)
 800f700:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f704:	4918      	ldr	r1, [pc, #96]	; (800f768 <udp_remove+0x78>)
 800f706:	4819      	ldr	r0, [pc, #100]	; (800f76c <udp_remove+0x7c>)
 800f708:	f004 fce4 	bl	80140d4 <iprintf>
 800f70c:	e026      	b.n	800f75c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f70e:	4b18      	ldr	r3, [pc, #96]	; (800f770 <udp_remove+0x80>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	429a      	cmp	r2, r3
 800f716:	d105      	bne.n	800f724 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f718:	4b15      	ldr	r3, [pc, #84]	; (800f770 <udp_remove+0x80>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	4a14      	ldr	r2, [pc, #80]	; (800f770 <udp_remove+0x80>)
 800f720:	6013      	str	r3, [r2, #0]
 800f722:	e017      	b.n	800f754 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f724:	4b12      	ldr	r3, [pc, #72]	; (800f770 <udp_remove+0x80>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	60fb      	str	r3, [r7, #12]
 800f72a:	e010      	b.n	800f74e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d009      	beq.n	800f748 <udp_remove+0x58>
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d104      	bne.n	800f748 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	68da      	ldr	r2, [r3, #12]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	60da      	str	r2, [r3, #12]
        break;
 800f746:	e005      	b.n	800f754 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	60fb      	str	r3, [r7, #12]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1eb      	bne.n	800f72c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f754:	6879      	ldr	r1, [r7, #4]
 800f756:	2000      	movs	r0, #0
 800f758:	f7f8 ff68 	bl	800862c <memp_free>
}
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	08017070 	.word	0x08017070
 800f768:	080173bc 	.word	0x080173bc
 800f76c:	080170c4 	.word	0x080170c4
 800f770:	20010954 	.word	0x20010954

0800f774 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b082      	sub	sp, #8
 800f778:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f77a:	2000      	movs	r0, #0
 800f77c:	f7f8 fee0 	bl	8008540 <memp_malloc>
 800f780:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d007      	beq.n	800f798 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f788:	2220      	movs	r2, #32
 800f78a:	2100      	movs	r1, #0
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f004 fc04 	bl	8013f9a <memset>
    pcb->ttl = UDP_TTL;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	22ff      	movs	r2, #255	; 0xff
 800f796:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f798:	687b      	ldr	r3, [r7, #4]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d01e      	beq.n	800f7f2 <udp_netif_ip_addr_changed+0x4e>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01a      	beq.n	800f7f2 <udp_netif_ip_addr_changed+0x4e>
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d017      	beq.n	800f7f2 <udp_netif_ip_addr_changed+0x4e>
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d013      	beq.n	800f7f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f7ca:	4b0d      	ldr	r3, [pc, #52]	; (800f800 <udp_netif_ip_addr_changed+0x5c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	60fb      	str	r3, [r7, #12]
 800f7d0:	e00c      	b.n	800f7ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d103      	bne.n	800f7e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	60fb      	str	r3, [r7, #12]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1ef      	bne.n	800f7d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f7f2:	bf00      	nop
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	20010954 	.word	0x20010954

0800f804 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f808:	4b20      	ldr	r3, [pc, #128]	; (800f88c <dhcp_inc_pcb_refcount+0x88>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d133      	bne.n	800f878 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f810:	4b1f      	ldr	r3, [pc, #124]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <dhcp_inc_pcb_refcount+0x20>
 800f818:	4b1e      	ldr	r3, [pc, #120]	; (800f894 <dhcp_inc_pcb_refcount+0x90>)
 800f81a:	22e5      	movs	r2, #229	; 0xe5
 800f81c:	491e      	ldr	r1, [pc, #120]	; (800f898 <dhcp_inc_pcb_refcount+0x94>)
 800f81e:	481f      	ldr	r0, [pc, #124]	; (800f89c <dhcp_inc_pcb_refcount+0x98>)
 800f820:	f004 fc58 	bl	80140d4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f824:	f7ff ffa6 	bl	800f774 <udp_new>
 800f828:	4603      	mov	r3, r0
 800f82a:	4a19      	ldr	r2, [pc, #100]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f82c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f82e:	4b18      	ldr	r3, [pc, #96]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d102      	bne.n	800f83c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f836:	f04f 33ff 	mov.w	r3, #4294967295
 800f83a:	e024      	b.n	800f886 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f83c:	4b14      	ldr	r3, [pc, #80]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	7a5a      	ldrb	r2, [r3, #9]
 800f842:	4b13      	ldr	r3, [pc, #76]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f042 0220 	orr.w	r2, r2, #32
 800f84a:	b2d2      	uxtb	r2, r2
 800f84c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f84e:	4b10      	ldr	r3, [pc, #64]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2244      	movs	r2, #68	; 0x44
 800f854:	4912      	ldr	r1, [pc, #72]	; (800f8a0 <dhcp_inc_pcb_refcount+0x9c>)
 800f856:	4618      	mov	r0, r3
 800f858:	f7ff fe34 	bl	800f4c4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f85c:	4b0c      	ldr	r3, [pc, #48]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2243      	movs	r2, #67	; 0x43
 800f862:	490f      	ldr	r1, [pc, #60]	; (800f8a0 <dhcp_inc_pcb_refcount+0x9c>)
 800f864:	4618      	mov	r0, r3
 800f866:	f7ff feb5 	bl	800f5d4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f86a:	4b09      	ldr	r3, [pc, #36]	; (800f890 <dhcp_inc_pcb_refcount+0x8c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2200      	movs	r2, #0
 800f870:	490c      	ldr	r1, [pc, #48]	; (800f8a4 <dhcp_inc_pcb_refcount+0xa0>)
 800f872:	4618      	mov	r0, r3
 800f874:	f7ff ff1c 	bl	800f6b0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f878:	4b04      	ldr	r3, [pc, #16]	; (800f88c <dhcp_inc_pcb_refcount+0x88>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	3301      	adds	r3, #1
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	4b02      	ldr	r3, [pc, #8]	; (800f88c <dhcp_inc_pcb_refcount+0x88>)
 800f882:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f884:	2300      	movs	r3, #0
}
 800f886:	4618      	mov	r0, r3
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20010984 	.word	0x20010984
 800f890:	20010980 	.word	0x20010980
 800f894:	080173d4 	.word	0x080173d4
 800f898:	0801740c 	.word	0x0801740c
 800f89c:	08017434 	.word	0x08017434
 800f8a0:	08017f7c 	.word	0x08017f7c
 800f8a4:	08011139 	.word	0x08011139

0800f8a8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f8ac:	4b0e      	ldr	r3, [pc, #56]	; (800f8e8 <dhcp_dec_pcb_refcount+0x40>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d105      	bne.n	800f8c0 <dhcp_dec_pcb_refcount+0x18>
 800f8b4:	4b0d      	ldr	r3, [pc, #52]	; (800f8ec <dhcp_dec_pcb_refcount+0x44>)
 800f8b6:	22ff      	movs	r2, #255	; 0xff
 800f8b8:	490d      	ldr	r1, [pc, #52]	; (800f8f0 <dhcp_dec_pcb_refcount+0x48>)
 800f8ba:	480e      	ldr	r0, [pc, #56]	; (800f8f4 <dhcp_dec_pcb_refcount+0x4c>)
 800f8bc:	f004 fc0a 	bl	80140d4 <iprintf>
  dhcp_pcb_refcount--;
 800f8c0:	4b09      	ldr	r3, [pc, #36]	; (800f8e8 <dhcp_dec_pcb_refcount+0x40>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	4b07      	ldr	r3, [pc, #28]	; (800f8e8 <dhcp_dec_pcb_refcount+0x40>)
 800f8ca:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f8cc:	4b06      	ldr	r3, [pc, #24]	; (800f8e8 <dhcp_dec_pcb_refcount+0x40>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d107      	bne.n	800f8e4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f8d4:	4b08      	ldr	r3, [pc, #32]	; (800f8f8 <dhcp_dec_pcb_refcount+0x50>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7ff ff09 	bl	800f6f0 <udp_remove>
    dhcp_pcb = NULL;
 800f8de:	4b06      	ldr	r3, [pc, #24]	; (800f8f8 <dhcp_dec_pcb_refcount+0x50>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	601a      	str	r2, [r3, #0]
  }
}
 800f8e4:	bf00      	nop
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	20010984 	.word	0x20010984
 800f8ec:	080173d4 	.word	0x080173d4
 800f8f0:	0801745c 	.word	0x0801745c
 800f8f4:	08017434 	.word	0x08017434
 800f8f8:	20010980 	.word	0x20010980

0800f8fc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f908:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f90a:	210c      	movs	r1, #12
 800f90c:	68f8      	ldr	r0, [r7, #12]
 800f90e:	f001 f855 	bl	80109bc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f912:	4b06      	ldr	r3, [pc, #24]	; (800f92c <dhcp_handle_nak+0x30>)
 800f914:	4a05      	ldr	r2, [pc, #20]	; (800f92c <dhcp_handle_nak+0x30>)
 800f916:	4905      	ldr	r1, [pc, #20]	; (800f92c <dhcp_handle_nak+0x30>)
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7f9 f829 	bl	8008970 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fc48 	bl	80101b4 <dhcp_discover>
}
 800f924:	bf00      	nop
 800f926:	3710      	adds	r7, #16
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	08017f7c 	.word	0x08017f7c

0800f930 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f93e:	2108      	movs	r1, #8
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f001 f83b 	bl	80109bc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	331c      	adds	r3, #28
 800f94a:	2200      	movs	r2, #0
 800f94c:	4619      	mov	r1, r3
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f002 fb3c 	bl	8011fcc <etharp_query>
 800f954:	4603      	mov	r3, r0
 800f956:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	799b      	ldrb	r3, [r3, #6]
 800f95c:	2bff      	cmp	r3, #255	; 0xff
 800f95e:	d005      	beq.n	800f96c <dhcp_check+0x3c>
    dhcp->tries++;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	799b      	ldrb	r3, [r3, #6]
 800f964:	3301      	adds	r3, #1
 800f966:	b2da      	uxtb	r2, r3
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f96c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f970:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f972:	893b      	ldrh	r3, [r7, #8]
 800f974:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f978:	4a06      	ldr	r2, [pc, #24]	; (800f994 <dhcp_check+0x64>)
 800f97a:	fb82 1203 	smull	r1, r2, r2, r3
 800f97e:	1152      	asrs	r2, r2, #5
 800f980:	17db      	asrs	r3, r3, #31
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	b29a      	uxth	r2, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	10624dd3 	.word	0x10624dd3

0800f998 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f9a8:	4b0c      	ldr	r3, [pc, #48]	; (800f9dc <dhcp_handle_offer+0x44>)
 800f9aa:	789b      	ldrb	r3, [r3, #2]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d011      	beq.n	800f9d4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f9b6:	4b0a      	ldr	r3, [pc, #40]	; (800f9e0 <dhcp_handle_offer+0x48>)
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7f8 f8fd 	bl	8007bba <lwip_htonl>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	691a      	ldr	r2, [r3, #16]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f808 	bl	800f9e4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f9d4:	bf00      	nop
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	20010978 	.word	0x20010978
 800f9e0:	20010958 	.word	0x20010958

0800f9e4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f9e4:	b5b0      	push	{r4, r5, r7, lr}
 800f9e6:	b08a      	sub	sp, #40	; 0x28
 800f9e8:	af02      	add	r7, sp, #8
 800f9ea:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d109      	bne.n	800fa06 <dhcp_select+0x22>
 800f9f2:	4b71      	ldr	r3, [pc, #452]	; (800fbb8 <dhcp_select+0x1d4>)
 800f9f4:	f240 1277 	movw	r2, #375	; 0x177
 800f9f8:	4970      	ldr	r1, [pc, #448]	; (800fbbc <dhcp_select+0x1d8>)
 800f9fa:	4871      	ldr	r0, [pc, #452]	; (800fbc0 <dhcp_select+0x1dc>)
 800f9fc:	f004 fb6a 	bl	80140d4 <iprintf>
 800fa00:	f06f 030f 	mvn.w	r3, #15
 800fa04:	e0d3      	b.n	800fbae <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d109      	bne.n	800fa26 <dhcp_select+0x42>
 800fa12:	4b69      	ldr	r3, [pc, #420]	; (800fbb8 <dhcp_select+0x1d4>)
 800fa14:	f240 1279 	movw	r2, #377	; 0x179
 800fa18:	496a      	ldr	r1, [pc, #424]	; (800fbc4 <dhcp_select+0x1e0>)
 800fa1a:	4869      	ldr	r0, [pc, #420]	; (800fbc0 <dhcp_select+0x1dc>)
 800fa1c:	f004 fb5a 	bl	80140d4 <iprintf>
 800fa20:	f06f 0305 	mvn.w	r3, #5
 800fa24:	e0c3      	b.n	800fbae <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fa26:	2101      	movs	r1, #1
 800fa28:	69b8      	ldr	r0, [r7, #24]
 800fa2a:	f000 ffc7 	bl	80109bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fa2e:	f107 030c 	add.w	r3, r7, #12
 800fa32:	2203      	movs	r2, #3
 800fa34:	69b9      	ldr	r1, [r7, #24]
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f001 fc4c 	bl	80112d4 <dhcp_create_msg>
 800fa3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f000 8085 	beq.w	800fb50 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fa4c:	89b8      	ldrh	r0, [r7, #12]
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa54:	2302      	movs	r3, #2
 800fa56:	2239      	movs	r2, #57	; 0x39
 800fa58:	f000 ffca 	bl	80109f0 <dhcp_option>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fa60:	89b8      	ldrh	r0, [r7, #12]
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f001 f819 	bl	8010aa4 <dhcp_option_short>
 800fa72:	4603      	mov	r3, r0
 800fa74:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fa76:	89b8      	ldrh	r0, [r7, #12]
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa7e:	2304      	movs	r3, #4
 800fa80:	2232      	movs	r2, #50	; 0x32
 800fa82:	f000 ffb5 	bl	80109f0 <dhcp_option>
 800fa86:	4603      	mov	r3, r0
 800fa88:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fa8a:	89bc      	ldrh	r4, [r7, #12]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	69db      	ldr	r3, [r3, #28]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7f8 f88f 	bl	8007bba <lwip_htonl>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	461a      	mov	r2, r3
 800faa0:	4629      	mov	r1, r5
 800faa2:	4620      	mov	r0, r4
 800faa4:	f001 f830 	bl	8010b08 <dhcp_option_long>
 800faa8:	4603      	mov	r3, r0
 800faaa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800faac:	89b8      	ldrh	r0, [r7, #12]
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fab4:	2304      	movs	r3, #4
 800fab6:	2236      	movs	r2, #54	; 0x36
 800fab8:	f000 ff9a 	bl	80109f0 <dhcp_option>
 800fabc:	4603      	mov	r3, r0
 800fabe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fac0:	89bc      	ldrh	r4, [r7, #12]
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	699b      	ldr	r3, [r3, #24]
 800facc:	4618      	mov	r0, r3
 800face:	f7f8 f874 	bl	8007bba <lwip_htonl>
 800fad2:	4603      	mov	r3, r0
 800fad4:	461a      	mov	r2, r3
 800fad6:	4629      	mov	r1, r5
 800fad8:	4620      	mov	r0, r4
 800fada:	f001 f815 	bl	8010b08 <dhcp_option_long>
 800fade:	4603      	mov	r3, r0
 800fae0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fae2:	89b8      	ldrh	r0, [r7, #12]
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800faea:	2303      	movs	r3, #3
 800faec:	2237      	movs	r2, #55	; 0x37
 800faee:	f000 ff7f 	bl	80109f0 <dhcp_option>
 800faf2:	4603      	mov	r3, r0
 800faf4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800faf6:	2300      	movs	r3, #0
 800faf8:	77bb      	strb	r3, [r7, #30]
 800fafa:	e00e      	b.n	800fb1a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fafc:	89b8      	ldrh	r0, [r7, #12]
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb04:	7fbb      	ldrb	r3, [r7, #30]
 800fb06:	4a30      	ldr	r2, [pc, #192]	; (800fbc8 <dhcp_select+0x1e4>)
 800fb08:	5cd3      	ldrb	r3, [r2, r3]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	f000 ffa4 	bl	8010a58 <dhcp_option_byte>
 800fb10:	4603      	mov	r3, r0
 800fb12:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb14:	7fbb      	ldrb	r3, [r7, #30]
 800fb16:	3301      	adds	r3, #1
 800fb18:	77bb      	strb	r3, [r7, #30]
 800fb1a:	7fbb      	ldrb	r3, [r7, #30]
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	d9ed      	bls.n	800fafc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fb20:	89b8      	ldrh	r0, [r7, #12]
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	33f0      	adds	r3, #240	; 0xf0
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	f001 fca9 	bl	8011480 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fb2e:	4b27      	ldr	r3, [pc, #156]	; (800fbcc <dhcp_select+0x1e8>)
 800fb30:	6818      	ldr	r0, [r3, #0]
 800fb32:	4b27      	ldr	r3, [pc, #156]	; (800fbd0 <dhcp_select+0x1ec>)
 800fb34:	9301      	str	r3, [sp, #4]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	2343      	movs	r3, #67	; 0x43
 800fb3c:	4a25      	ldr	r2, [pc, #148]	; (800fbd4 <dhcp_select+0x1f0>)
 800fb3e:	6979      	ldr	r1, [r7, #20]
 800fb40:	f7ff fbda 	bl	800f2f8 <udp_sendto_if_src>
 800fb44:	4603      	mov	r3, r0
 800fb46:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fb48:	6978      	ldr	r0, [r7, #20]
 800fb4a:	f7f9 fc1f 	bl	800938c <pbuf_free>
 800fb4e:	e001      	b.n	800fb54 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fb50:	23ff      	movs	r3, #255	; 0xff
 800fb52:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	799b      	ldrb	r3, [r3, #6]
 800fb58:	2bff      	cmp	r3, #255	; 0xff
 800fb5a:	d005      	beq.n	800fb68 <dhcp_select+0x184>
    dhcp->tries++;
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	799b      	ldrb	r3, [r3, #6]
 800fb60:	3301      	adds	r3, #1
 800fb62:	b2da      	uxtb	r2, r3
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fb68:	69bb      	ldr	r3, [r7, #24]
 800fb6a:	799b      	ldrb	r3, [r3, #6]
 800fb6c:	2b05      	cmp	r3, #5
 800fb6e:	d80d      	bhi.n	800fb8c <dhcp_select+0x1a8>
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	799b      	ldrb	r3, [r3, #6]
 800fb74:	461a      	mov	r2, r3
 800fb76:	2301      	movs	r3, #1
 800fb78:	4093      	lsls	r3, r2
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	0152      	lsls	r2, r2, #5
 800fb80:	1ad2      	subs	r2, r2, r3
 800fb82:	0092      	lsls	r2, r2, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	e001      	b.n	800fb90 <dhcp_select+0x1ac>
 800fb8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fb90:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fb92:	89fb      	ldrh	r3, [r7, #14]
 800fb94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb98:	4a0f      	ldr	r2, [pc, #60]	; (800fbd8 <dhcp_select+0x1f4>)
 800fb9a:	fb82 1203 	smull	r1, r2, r2, r3
 800fb9e:	1152      	asrs	r2, r2, #5
 800fba0:	17db      	asrs	r3, r3, #31
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fbaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3720      	adds	r7, #32
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bdb0      	pop	{r4, r5, r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	080173d4 	.word	0x080173d4
 800fbbc:	08017480 	.word	0x08017480
 800fbc0:	08017434 	.word	0x08017434
 800fbc4:	0801749c 	.word	0x0801749c
 800fbc8:	20000030 	.word	0x20000030
 800fbcc:	20010980 	.word	0x20010980
 800fbd0:	08017f7c 	.word	0x08017f7c
 800fbd4:	08017f80 	.word	0x08017f80
 800fbd8:	10624dd3 	.word	0x10624dd3

0800fbdc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fbe2:	4b27      	ldr	r3, [pc, #156]	; (800fc80 <dhcp_coarse_tmr+0xa4>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	607b      	str	r3, [r7, #4]
 800fbe8:	e042      	b.n	800fc70 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbee:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d039      	beq.n	800fc6a <dhcp_coarse_tmr+0x8e>
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	795b      	ldrb	r3, [r3, #5]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d035      	beq.n	800fc6a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	8a9b      	ldrh	r3, [r3, #20]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d012      	beq.n	800fc2c <dhcp_coarse_tmr+0x50>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	8a5b      	ldrh	r3, [r3, #18]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	825a      	strh	r2, [r3, #18]
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	8a5a      	ldrh	r2, [r3, #18]
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	8a9b      	ldrh	r3, [r3, #20]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d106      	bne.n	800fc2c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fe32 	bl	8010888 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 f969 	bl	800fefc <dhcp_start>
 800fc2a:	e01e      	b.n	800fc6a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	8a1b      	ldrh	r3, [r3, #16]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00b      	beq.n	800fc4c <dhcp_coarse_tmr+0x70>
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	8a1b      	ldrh	r3, [r3, #16]
 800fc38:	1e5a      	subs	r2, r3, #1
 800fc3a:	b291      	uxth	r1, r2
 800fc3c:	683a      	ldr	r2, [r7, #0]
 800fc3e:	8211      	strh	r1, [r2, #16]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d103      	bne.n	800fc4c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 f8c6 	bl	800fdd6 <dhcp_t2_timeout>
 800fc4a:	e00e      	b.n	800fc6a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	89db      	ldrh	r3, [r3, #14]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d00a      	beq.n	800fc6a <dhcp_coarse_tmr+0x8e>
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	89db      	ldrh	r3, [r3, #14]
 800fc58:	1e5a      	subs	r2, r3, #1
 800fc5a:	b291      	uxth	r1, r2
 800fc5c:	683a      	ldr	r2, [r7, #0]
 800fc5e:	81d1      	strh	r1, [r2, #14]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d102      	bne.n	800fc6a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f888 	bl	800fd7a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	607b      	str	r3, [r7, #4]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1b9      	bne.n	800fbea <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fc76:	bf00      	nop
 800fc78:	bf00      	nop
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	200108ec 	.word	0x200108ec

0800fc84 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fc8a:	4b16      	ldr	r3, [pc, #88]	; (800fce4 <dhcp_fine_tmr+0x60>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	607b      	str	r3, [r7, #4]
 800fc90:	e020      	b.n	800fcd4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d017      	beq.n	800fcce <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	891b      	ldrh	r3, [r3, #8]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d906      	bls.n	800fcb4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	891b      	ldrh	r3, [r3, #8]
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	811a      	strh	r2, [r3, #8]
 800fcb2:	e00c      	b.n	800fcce <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	891b      	ldrh	r3, [r3, #8]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d108      	bne.n	800fcce <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	891b      	ldrh	r3, [r3, #8]
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	b29a      	uxth	r2, r3
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f80d 	bl	800fce8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	607b      	str	r3, [r7, #4]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1db      	bne.n	800fc92 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fcda:	bf00      	nop
 800fcdc:	bf00      	nop
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	200108ec 	.word	0x200108ec

0800fce8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	795b      	ldrb	r3, [r3, #5]
 800fcfa:	2b0c      	cmp	r3, #12
 800fcfc:	d003      	beq.n	800fd06 <dhcp_timeout+0x1e>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	795b      	ldrb	r3, [r3, #5]
 800fd02:	2b06      	cmp	r3, #6
 800fd04:	d103      	bne.n	800fd0e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fa54 	bl	80101b4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fd0c:	e031      	b.n	800fd72 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	795b      	ldrb	r3, [r3, #5]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d10e      	bne.n	800fd34 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	799b      	ldrb	r3, [r3, #6]
 800fd1a:	2b05      	cmp	r3, #5
 800fd1c:	d803      	bhi.n	800fd26 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff fe60 	bl	800f9e4 <dhcp_select>
}
 800fd24:	e025      	b.n	800fd72 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fdae 	bl	8010888 <dhcp_release_and_stop>
      dhcp_start(netif);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f8e5 	bl	800fefc <dhcp_start>
}
 800fd32:	e01e      	b.n	800fd72 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	795b      	ldrb	r3, [r3, #5]
 800fd38:	2b08      	cmp	r3, #8
 800fd3a:	d10b      	bne.n	800fd54 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	799b      	ldrb	r3, [r3, #6]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d803      	bhi.n	800fd4c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7ff fdf3 	bl	800f930 <dhcp_check>
}
 800fd4a:	e012      	b.n	800fd72 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fad3 	bl	80102f8 <dhcp_bind>
}
 800fd52:	e00e      	b.n	800fd72 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	795b      	ldrb	r3, [r3, #5]
 800fd58:	2b03      	cmp	r3, #3
 800fd5a:	d10a      	bne.n	800fd72 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	799b      	ldrb	r3, [r3, #6]
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d803      	bhi.n	800fd6c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 fcd9 	bl	801071c <dhcp_reboot>
}
 800fd6a:	e002      	b.n	800fd72 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fa21 	bl	80101b4 <dhcp_discover>
}
 800fd72:	bf00      	nop
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd86:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	795b      	ldrb	r3, [r3, #5]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d007      	beq.n	800fda0 <dhcp_t1_timeout+0x26>
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	795b      	ldrb	r3, [r3, #5]
 800fd94:	2b0a      	cmp	r3, #10
 800fd96:	d003      	beq.n	800fda0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fd9c:	2b05      	cmp	r3, #5
 800fd9e:	d116      	bne.n	800fdce <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fb83 	bl	80104ac <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	899b      	ldrh	r3, [r3, #12]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	8a5b      	ldrh	r3, [r3, #18]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	dd0b      	ble.n	800fdce <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	8a5b      	ldrh	r3, [r3, #18]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	0fda      	lsrs	r2, r3, #31
 800fdc4:	4413      	add	r3, r2
 800fdc6:	105b      	asrs	r3, r3, #1
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800fdce:	bf00      	nop
 800fdd0:	3710      	adds	r7, #16
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}

0800fdd6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b084      	sub	sp, #16
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	795b      	ldrb	r3, [r3, #5]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d00b      	beq.n	800fe04 <dhcp_t2_timeout+0x2e>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	795b      	ldrb	r3, [r3, #5]
 800fdf0:	2b0a      	cmp	r3, #10
 800fdf2:	d007      	beq.n	800fe04 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fdf8:	2b05      	cmp	r3, #5
 800fdfa:	d003      	beq.n	800fe04 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	795b      	ldrb	r3, [r3, #5]
 800fe00:	2b04      	cmp	r3, #4
 800fe02:	d116      	bne.n	800fe32 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 fbed 	bl	80105e4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	8a9b      	ldrh	r3, [r3, #20]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	8a5b      	ldrh	r3, [r3, #18]
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	dd0b      	ble.n	800fe32 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	8a9b      	ldrh	r3, [r3, #20]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	8a5b      	ldrh	r3, [r3, #18]
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	0fda      	lsrs	r2, r3, #31
 800fe28:	4413      	add	r3, r2
 800fe2a:	105b      	asrs	r3, r3, #1
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
	...

0800fe3c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800fe58:	4b26      	ldr	r3, [pc, #152]	; (800fef4 <dhcp_handle_ack+0xb8>)
 800fe5a:	78db      	ldrb	r3, [r3, #3]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d003      	beq.n	800fe68 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800fe60:	4b25      	ldr	r3, [pc, #148]	; (800fef8 <dhcp_handle_ack+0xbc>)
 800fe62:	68da      	ldr	r2, [r3, #12]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800fe68:	4b22      	ldr	r3, [pc, #136]	; (800fef4 <dhcp_handle_ack+0xb8>)
 800fe6a:	791b      	ldrb	r3, [r3, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d004      	beq.n	800fe7a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800fe70:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <dhcp_handle_ack+0xbc>)
 800fe72:	691a      	ldr	r2, [r3, #16]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	62da      	str	r2, [r3, #44]	; 0x2c
 800fe78:	e004      	b.n	800fe84 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe7e:	085a      	lsrs	r2, r3, #1
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800fe84:	4b1b      	ldr	r3, [pc, #108]	; (800fef4 <dhcp_handle_ack+0xb8>)
 800fe86:	795b      	ldrb	r3, [r3, #5]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d004      	beq.n	800fe96 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800fe8c:	4b1a      	ldr	r3, [pc, #104]	; (800fef8 <dhcp_handle_ack+0xbc>)
 800fe8e:	695a      	ldr	r2, [r3, #20]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	631a      	str	r2, [r3, #48]	; 0x30
 800fe94:	e007      	b.n	800fea6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	00db      	lsls	r3, r3, #3
 800fe9e:	1a9b      	subs	r3, r3, r2
 800fea0:	08da      	lsrs	r2, r3, #3
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	691a      	ldr	r2, [r3, #16]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800feae:	4b11      	ldr	r3, [pc, #68]	; (800fef4 <dhcp_handle_ack+0xb8>)
 800feb0:	799b      	ldrb	r3, [r3, #6]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00b      	beq.n	800fece <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800feb6:	4b10      	ldr	r3, [pc, #64]	; (800fef8 <dhcp_handle_ack+0xbc>)
 800feb8:	699b      	ldr	r3, [r3, #24]
 800feba:	4618      	mov	r0, r3
 800febc:	f7f7 fe7d 	bl	8007bba <lwip_htonl>
 800fec0:	4602      	mov	r2, r0
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2201      	movs	r2, #1
 800feca:	71da      	strb	r2, [r3, #7]
 800fecc:	e002      	b.n	800fed4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2200      	movs	r2, #0
 800fed2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800fed4:	4b07      	ldr	r3, [pc, #28]	; (800fef4 <dhcp_handle_ack+0xb8>)
 800fed6:	79db      	ldrb	r3, [r3, #7]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d007      	beq.n	800feec <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800fedc:	4b06      	ldr	r3, [pc, #24]	; (800fef8 <dhcp_handle_ack+0xbc>)
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f7 fe6a 	bl	8007bba <lwip_htonl>
 800fee6:	4602      	mov	r2, r0
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800feec:	bf00      	nop
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	20010978 	.word	0x20010978
 800fef8:	20010958 	.word	0x20010958

0800fefc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d109      	bne.n	800ff1e <dhcp_start+0x22>
 800ff0a:	4b37      	ldr	r3, [pc, #220]	; (800ffe8 <dhcp_start+0xec>)
 800ff0c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ff10:	4936      	ldr	r1, [pc, #216]	; (800ffec <dhcp_start+0xf0>)
 800ff12:	4837      	ldr	r0, [pc, #220]	; (800fff0 <dhcp_start+0xf4>)
 800ff14:	f004 f8de 	bl	80140d4 <iprintf>
 800ff18:	f06f 030f 	mvn.w	r3, #15
 800ff1c:	e060      	b.n	800ffe0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff24:	f003 0301 	and.w	r3, r3, #1
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d109      	bne.n	800ff40 <dhcp_start+0x44>
 800ff2c:	4b2e      	ldr	r3, [pc, #184]	; (800ffe8 <dhcp_start+0xec>)
 800ff2e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ff32:	4930      	ldr	r1, [pc, #192]	; (800fff4 <dhcp_start+0xf8>)
 800ff34:	482e      	ldr	r0, [pc, #184]	; (800fff0 <dhcp_start+0xf4>)
 800ff36:	f004 f8cd 	bl	80140d4 <iprintf>
 800ff3a:	f06f 030f 	mvn.w	r3, #15
 800ff3e:	e04f      	b.n	800ffe0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff44:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff4a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ff4e:	d202      	bcs.n	800ff56 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ff50:	f04f 33ff 	mov.w	r3, #4294967295
 800ff54:	e044      	b.n	800ffe0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d10d      	bne.n	800ff78 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ff5c:	2034      	movs	r0, #52	; 0x34
 800ff5e:	f7f8 f94b 	bl	80081f8 <mem_malloc>
 800ff62:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d102      	bne.n	800ff70 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ff6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff6e:	e037      	b.n	800ffe0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	625a      	str	r2, [r3, #36]	; 0x24
 800ff76:	e005      	b.n	800ff84 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	791b      	ldrb	r3, [r3, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ff80:	f7ff fc92 	bl	800f8a8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ff84:	2234      	movs	r2, #52	; 0x34
 800ff86:	2100      	movs	r1, #0
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f004 f806 	bl	8013f9a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ff8e:	f7ff fc39 	bl	800f804 <dhcp_inc_pcb_refcount>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <dhcp_start+0xa2>
    return ERR_MEM;
 800ff98:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9c:	e020      	b.n	800ffe0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ffaa:	f003 0304 	and.w	r3, r3, #4
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d105      	bne.n	800ffbe <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ffb2:	2102      	movs	r1, #2
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f000 fd01 	bl	80109bc <dhcp_set_state>
    return ERR_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	e010      	b.n	800ffe0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 f8f8 	bl	80101b4 <dhcp_discover>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ffc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d005      	beq.n	800ffdc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fc59 	bl	8010888 <dhcp_release_and_stop>
    return ERR_MEM;
 800ffd6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffda:	e001      	b.n	800ffe0 <dhcp_start+0xe4>
  }
  return result;
 800ffdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3710      	adds	r7, #16
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	080173d4 	.word	0x080173d4
 800ffec:	080174b8 	.word	0x080174b8
 800fff0:	08017434 	.word	0x08017434
 800fff4:	080174fc 	.word	0x080174fc

0800fff8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010004:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d025      	beq.n	8010058 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	795b      	ldrb	r3, [r3, #5]
 8010010:	2b0a      	cmp	r3, #10
 8010012:	d008      	beq.n	8010026 <dhcp_network_changed+0x2e>
 8010014:	2b0a      	cmp	r3, #10
 8010016:	dc0d      	bgt.n	8010034 <dhcp_network_changed+0x3c>
 8010018:	2b00      	cmp	r3, #0
 801001a:	d01f      	beq.n	801005c <dhcp_network_changed+0x64>
 801001c:	2b00      	cmp	r3, #0
 801001e:	db09      	blt.n	8010034 <dhcp_network_changed+0x3c>
 8010020:	3b03      	subs	r3, #3
 8010022:	2b02      	cmp	r3, #2
 8010024:	d806      	bhi.n	8010034 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2200      	movs	r2, #0
 801002a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 fb75 	bl	801071c <dhcp_reboot>
      break;
 8010032:	e014      	b.n	801005e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	795b      	ldrb	r3, [r3, #5]
 8010038:	2b0c      	cmp	r3, #12
 801003a:	d906      	bls.n	801004a <dhcp_network_changed+0x52>
 801003c:	4b09      	ldr	r3, [pc, #36]	; (8010064 <dhcp_network_changed+0x6c>)
 801003e:	f240 326d 	movw	r2, #877	; 0x36d
 8010042:	4909      	ldr	r1, [pc, #36]	; (8010068 <dhcp_network_changed+0x70>)
 8010044:	4809      	ldr	r0, [pc, #36]	; (801006c <dhcp_network_changed+0x74>)
 8010046:	f004 f845 	bl	80140d4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 f8af 	bl	80101b4 <dhcp_discover>
      break;
 8010056:	e002      	b.n	801005e <dhcp_network_changed+0x66>
    return;
 8010058:	bf00      	nop
 801005a:	e000      	b.n	801005e <dhcp_network_changed+0x66>
      break;
 801005c:	bf00      	nop
  }
}
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	080173d4 	.word	0x080173d4
 8010068:	08017520 	.word	0x08017520
 801006c:	08017434 	.word	0x08017434

08010070 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d107      	bne.n	8010090 <dhcp_arp_reply+0x20>
 8010080:	4b0e      	ldr	r3, [pc, #56]	; (80100bc <dhcp_arp_reply+0x4c>)
 8010082:	f240 328b 	movw	r2, #907	; 0x38b
 8010086:	490e      	ldr	r1, [pc, #56]	; (80100c0 <dhcp_arp_reply+0x50>)
 8010088:	480e      	ldr	r0, [pc, #56]	; (80100c4 <dhcp_arp_reply+0x54>)
 801008a:	f004 f823 	bl	80140d4 <iprintf>
 801008e:	e012      	b.n	80100b6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010094:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00c      	beq.n	80100b6 <dhcp_arp_reply+0x46>
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	795b      	ldrb	r3, [r3, #5]
 80100a0:	2b08      	cmp	r3, #8
 80100a2:	d108      	bne.n	80100b6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	69db      	ldr	r3, [r3, #28]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d102      	bne.n	80100b6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f809 	bl	80100c8 <dhcp_decline>
    }
  }
}
 80100b6:	3710      	adds	r7, #16
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	080173d4 	.word	0x080173d4
 80100c0:	080174b8 	.word	0x080174b8
 80100c4:	08017434 	.word	0x08017434

080100c8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80100c8:	b5b0      	push	{r4, r5, r7, lr}
 80100ca:	b08a      	sub	sp, #40	; 0x28
 80100cc:	af02      	add	r7, sp, #8
 80100ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80100d6:	210c      	movs	r1, #12
 80100d8:	69b8      	ldr	r0, [r7, #24]
 80100da:	f000 fc6f 	bl	80109bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80100de:	f107 030c 	add.w	r3, r7, #12
 80100e2:	2204      	movs	r2, #4
 80100e4:	69b9      	ldr	r1, [r7, #24]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f001 f8f4 	bl	80112d4 <dhcp_create_msg>
 80100ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d035      	beq.n	8010160 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80100fa:	89b8      	ldrh	r0, [r7, #12]
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010102:	2304      	movs	r3, #4
 8010104:	2232      	movs	r2, #50	; 0x32
 8010106:	f000 fc73 	bl	80109f0 <dhcp_option>
 801010a:	4603      	mov	r3, r0
 801010c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801010e:	89bc      	ldrh	r4, [r7, #12]
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	4618      	mov	r0, r3
 801011c:	f7f7 fd4d 	bl	8007bba <lwip_htonl>
 8010120:	4603      	mov	r3, r0
 8010122:	461a      	mov	r2, r3
 8010124:	4629      	mov	r1, r5
 8010126:	4620      	mov	r0, r4
 8010128:	f000 fcee 	bl	8010b08 <dhcp_option_long>
 801012c:	4603      	mov	r3, r0
 801012e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010130:	89b8      	ldrh	r0, [r7, #12]
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	33f0      	adds	r3, #240	; 0xf0
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	4619      	mov	r1, r3
 801013a:	f001 f9a1 	bl	8011480 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801013e:	4b19      	ldr	r3, [pc, #100]	; (80101a4 <dhcp_decline+0xdc>)
 8010140:	6818      	ldr	r0, [r3, #0]
 8010142:	4b19      	ldr	r3, [pc, #100]	; (80101a8 <dhcp_decline+0xe0>)
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	2343      	movs	r3, #67	; 0x43
 801014c:	4a17      	ldr	r2, [pc, #92]	; (80101ac <dhcp_decline+0xe4>)
 801014e:	6979      	ldr	r1, [r7, #20]
 8010150:	f7ff f8d2 	bl	800f2f8 <udp_sendto_if_src>
 8010154:	4603      	mov	r3, r0
 8010156:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010158:	6978      	ldr	r0, [r7, #20]
 801015a:	f7f9 f917 	bl	800938c <pbuf_free>
 801015e:	e001      	b.n	8010164 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010160:	23ff      	movs	r3, #255	; 0xff
 8010162:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	799b      	ldrb	r3, [r3, #6]
 8010168:	2bff      	cmp	r3, #255	; 0xff
 801016a:	d005      	beq.n	8010178 <dhcp_decline+0xb0>
    dhcp->tries++;
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	799b      	ldrb	r3, [r3, #6]
 8010170:	3301      	adds	r3, #1
 8010172:	b2da      	uxtb	r2, r3
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010178:	f242 7310 	movw	r3, #10000	; 0x2710
 801017c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801017e:	89fb      	ldrh	r3, [r7, #14]
 8010180:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010184:	4a0a      	ldr	r2, [pc, #40]	; (80101b0 <dhcp_decline+0xe8>)
 8010186:	fb82 1203 	smull	r1, r2, r2, r3
 801018a:	1152      	asrs	r2, r2, #5
 801018c:	17db      	asrs	r3, r3, #31
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	b29a      	uxth	r2, r3
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010196:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3720      	adds	r7, #32
 801019e:	46bd      	mov	sp, r7
 80101a0:	bdb0      	pop	{r4, r5, r7, pc}
 80101a2:	bf00      	nop
 80101a4:	20010980 	.word	0x20010980
 80101a8:	08017f7c 	.word	0x08017f7c
 80101ac:	08017f80 	.word	0x08017f80
 80101b0:	10624dd3 	.word	0x10624dd3

080101b4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b08a      	sub	sp, #40	; 0x28
 80101b8:	af02      	add	r7, sp, #8
 80101ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	2200      	movs	r2, #0
 80101ca:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80101cc:	2106      	movs	r1, #6
 80101ce:	69b8      	ldr	r0, [r7, #24]
 80101d0:	f000 fbf4 	bl	80109bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80101d4:	f107 0308 	add.w	r3, r7, #8
 80101d8:	2201      	movs	r2, #1
 80101da:	69b9      	ldr	r1, [r7, #24]
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f001 f879 	bl	80112d4 <dhcp_create_msg>
 80101e2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d04b      	beq.n	8010282 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80101f0:	8938      	ldrh	r0, [r7, #8]
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80101f8:	2302      	movs	r3, #2
 80101fa:	2239      	movs	r2, #57	; 0x39
 80101fc:	f000 fbf8 	bl	80109f0 <dhcp_option>
 8010200:	4603      	mov	r3, r0
 8010202:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010204:	8938      	ldrh	r0, [r7, #8]
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010210:	461a      	mov	r2, r3
 8010212:	f000 fc47 	bl	8010aa4 <dhcp_option_short>
 8010216:	4603      	mov	r3, r0
 8010218:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801021a:	8938      	ldrh	r0, [r7, #8]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010222:	2303      	movs	r3, #3
 8010224:	2237      	movs	r2, #55	; 0x37
 8010226:	f000 fbe3 	bl	80109f0 <dhcp_option>
 801022a:	4603      	mov	r3, r0
 801022c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801022e:	2300      	movs	r3, #0
 8010230:	77fb      	strb	r3, [r7, #31]
 8010232:	e00e      	b.n	8010252 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010234:	8938      	ldrh	r0, [r7, #8]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801023c:	7ffb      	ldrb	r3, [r7, #31]
 801023e:	4a29      	ldr	r2, [pc, #164]	; (80102e4 <dhcp_discover+0x130>)
 8010240:	5cd3      	ldrb	r3, [r2, r3]
 8010242:	461a      	mov	r2, r3
 8010244:	f000 fc08 	bl	8010a58 <dhcp_option_byte>
 8010248:	4603      	mov	r3, r0
 801024a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801024c:	7ffb      	ldrb	r3, [r7, #31]
 801024e:	3301      	adds	r3, #1
 8010250:	77fb      	strb	r3, [r7, #31]
 8010252:	7ffb      	ldrb	r3, [r7, #31]
 8010254:	2b02      	cmp	r3, #2
 8010256:	d9ed      	bls.n	8010234 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010258:	8938      	ldrh	r0, [r7, #8]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	33f0      	adds	r3, #240	; 0xf0
 801025e:	693a      	ldr	r2, [r7, #16]
 8010260:	4619      	mov	r1, r3
 8010262:	f001 f90d 	bl	8011480 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010266:	4b20      	ldr	r3, [pc, #128]	; (80102e8 <dhcp_discover+0x134>)
 8010268:	6818      	ldr	r0, [r3, #0]
 801026a:	4b20      	ldr	r3, [pc, #128]	; (80102ec <dhcp_discover+0x138>)
 801026c:	9301      	str	r3, [sp, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	2343      	movs	r3, #67	; 0x43
 8010274:	4a1e      	ldr	r2, [pc, #120]	; (80102f0 <dhcp_discover+0x13c>)
 8010276:	6939      	ldr	r1, [r7, #16]
 8010278:	f7ff f83e 	bl	800f2f8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801027c:	6938      	ldr	r0, [r7, #16]
 801027e:	f7f9 f885 	bl	800938c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	799b      	ldrb	r3, [r3, #6]
 8010286:	2bff      	cmp	r3, #255	; 0xff
 8010288:	d005      	beq.n	8010296 <dhcp_discover+0xe2>
    dhcp->tries++;
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	799b      	ldrb	r3, [r3, #6]
 801028e:	3301      	adds	r3, #1
 8010290:	b2da      	uxtb	r2, r3
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	799b      	ldrb	r3, [r3, #6]
 801029a:	2b05      	cmp	r3, #5
 801029c:	d80d      	bhi.n	80102ba <dhcp_discover+0x106>
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	799b      	ldrb	r3, [r3, #6]
 80102a2:	461a      	mov	r2, r3
 80102a4:	2301      	movs	r3, #1
 80102a6:	4093      	lsls	r3, r2
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	461a      	mov	r2, r3
 80102ac:	0152      	lsls	r2, r2, #5
 80102ae:	1ad2      	subs	r2, r2, r3
 80102b0:	0092      	lsls	r2, r2, #2
 80102b2:	4413      	add	r3, r2
 80102b4:	00db      	lsls	r3, r3, #3
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	e001      	b.n	80102be <dhcp_discover+0x10a>
 80102ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80102be:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80102c0:	897b      	ldrh	r3, [r7, #10]
 80102c2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80102c6:	4a0b      	ldr	r2, [pc, #44]	; (80102f4 <dhcp_discover+0x140>)
 80102c8:	fb82 1203 	smull	r1, r2, r2, r3
 80102cc:	1152      	asrs	r2, r2, #5
 80102ce:	17db      	asrs	r3, r3, #31
 80102d0:	1ad3      	subs	r3, r2, r3
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80102d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3720      	adds	r7, #32
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	20000030 	.word	0x20000030
 80102e8:	20010980 	.word	0x20010980
 80102ec:	08017f7c 	.word	0x08017f7c
 80102f0:	08017f80 	.word	0x08017f80
 80102f4:	10624dd3 	.word	0x10624dd3

080102f8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b088      	sub	sp, #32
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d107      	bne.n	8010316 <dhcp_bind+0x1e>
 8010306:	4b64      	ldr	r3, [pc, #400]	; (8010498 <dhcp_bind+0x1a0>)
 8010308:	f240 4215 	movw	r2, #1045	; 0x415
 801030c:	4963      	ldr	r1, [pc, #396]	; (801049c <dhcp_bind+0x1a4>)
 801030e:	4864      	ldr	r0, [pc, #400]	; (80104a0 <dhcp_bind+0x1a8>)
 8010310:	f003 fee0 	bl	80140d4 <iprintf>
 8010314:	e0bc      	b.n	8010490 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d107      	bne.n	8010332 <dhcp_bind+0x3a>
 8010322:	4b5d      	ldr	r3, [pc, #372]	; (8010498 <dhcp_bind+0x1a0>)
 8010324:	f240 4217 	movw	r2, #1047	; 0x417
 8010328:	495e      	ldr	r1, [pc, #376]	; (80104a4 <dhcp_bind+0x1ac>)
 801032a:	485d      	ldr	r0, [pc, #372]	; (80104a0 <dhcp_bind+0x1a8>)
 801032c:	f003 fed2 	bl	80140d4 <iprintf>
 8010330:	e0ae      	b.n	8010490 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	2200      	movs	r2, #0
 8010336:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801033c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010340:	d019      	beq.n	8010376 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010346:	331e      	adds	r3, #30
 8010348:	4a57      	ldr	r2, [pc, #348]	; (80104a8 <dhcp_bind+0x1b0>)
 801034a:	fba2 2303 	umull	r2, r3, r2, r3
 801034e:	095b      	lsrs	r3, r3, #5
 8010350:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010358:	d302      	bcc.n	8010360 <dhcp_bind+0x68>
      timeout = 0xffff;
 801035a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801035e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	b29a      	uxth	r2, r3
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	8a9b      	ldrh	r3, [r3, #20]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d102      	bne.n	8010376 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	2201      	movs	r2, #1
 8010374:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037e:	d01d      	beq.n	80103bc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010384:	331e      	adds	r3, #30
 8010386:	4a48      	ldr	r2, [pc, #288]	; (80104a8 <dhcp_bind+0x1b0>)
 8010388:	fba2 2303 	umull	r2, r3, r2, r3
 801038c:	095b      	lsrs	r3, r3, #5
 801038e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010396:	d302      	bcc.n	801039e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801039c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	895b      	ldrh	r3, [r3, #10]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d102      	bne.n	80103b4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	2201      	movs	r2, #1
 80103b2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	895a      	ldrh	r2, [r3, #10]
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c4:	d01d      	beq.n	8010402 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ca:	331e      	adds	r3, #30
 80103cc:	4a36      	ldr	r2, [pc, #216]	; (80104a8 <dhcp_bind+0x1b0>)
 80103ce:	fba2 2303 	umull	r2, r3, r2, r3
 80103d2:	095b      	lsrs	r3, r3, #5
 80103d4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103dc:	d302      	bcc.n	80103e4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80103de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103e2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	899b      	ldrh	r3, [r3, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d102      	bne.n	80103fa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	2201      	movs	r2, #1
 80103f8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	899a      	ldrh	r2, [r3, #12]
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	895a      	ldrh	r2, [r3, #10]
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	899b      	ldrh	r3, [r3, #12]
 801040a:	429a      	cmp	r2, r3
 801040c:	d306      	bcc.n	801041c <dhcp_bind+0x124>
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	899b      	ldrh	r3, [r3, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d002      	beq.n	801041c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	2200      	movs	r2, #0
 801041a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	79db      	ldrb	r3, [r3, #7]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d003      	beq.n	801042c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	6a1b      	ldr	r3, [r3, #32]
 8010428:	613b      	str	r3, [r7, #16]
 801042a:	e014      	b.n	8010456 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	331c      	adds	r3, #28
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010438:	2b00      	cmp	r3, #0
 801043a:	db02      	blt.n	8010442 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801043c:	23ff      	movs	r3, #255	; 0xff
 801043e:	613b      	str	r3, [r7, #16]
 8010440:	e009      	b.n	8010456 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	2bbf      	cmp	r3, #191	; 0xbf
 8010446:	d903      	bls.n	8010450 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010448:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801044c:	613b      	str	r3, [r7, #16]
 801044e:	e002      	b.n	8010456 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010454:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d108      	bne.n	8010474 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	69da      	ldr	r2, [r3, #28]
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	4013      	ands	r3, r2
 801046a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010472:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010474:	210a      	movs	r1, #10
 8010476:	69b8      	ldr	r0, [r7, #24]
 8010478:	f000 faa0 	bl	80109bc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	f103 011c 	add.w	r1, r3, #28
 8010482:	f107 030c 	add.w	r3, r7, #12
 8010486:	f107 0210 	add.w	r2, r7, #16
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7f8 fa70 	bl	8008970 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010490:	3720      	adds	r7, #32
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	080173d4 	.word	0x080173d4
 801049c:	08017534 	.word	0x08017534
 80104a0:	08017434 	.word	0x08017434
 80104a4:	08017550 	.word	0x08017550
 80104a8:	88888889 	.word	0x88888889

080104ac <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b08a      	sub	sp, #40	; 0x28
 80104b0:	af02      	add	r7, sp, #8
 80104b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80104ba:	2105      	movs	r1, #5
 80104bc:	69b8      	ldr	r0, [r7, #24]
 80104be:	f000 fa7d 	bl	80109bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80104c2:	f107 030c 	add.w	r3, r7, #12
 80104c6:	2203      	movs	r2, #3
 80104c8:	69b9      	ldr	r1, [r7, #24]
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 ff02 	bl	80112d4 <dhcp_create_msg>
 80104d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d04e      	beq.n	8010576 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80104de:	89b8      	ldrh	r0, [r7, #12]
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104e6:	2302      	movs	r3, #2
 80104e8:	2239      	movs	r2, #57	; 0x39
 80104ea:	f000 fa81 	bl	80109f0 <dhcp_option>
 80104ee:	4603      	mov	r3, r0
 80104f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80104f2:	89b8      	ldrh	r0, [r7, #12]
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104fe:	461a      	mov	r2, r3
 8010500:	f000 fad0 	bl	8010aa4 <dhcp_option_short>
 8010504:	4603      	mov	r3, r0
 8010506:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010508:	89b8      	ldrh	r0, [r7, #12]
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010510:	2303      	movs	r3, #3
 8010512:	2237      	movs	r2, #55	; 0x37
 8010514:	f000 fa6c 	bl	80109f0 <dhcp_option>
 8010518:	4603      	mov	r3, r0
 801051a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801051c:	2300      	movs	r3, #0
 801051e:	77bb      	strb	r3, [r7, #30]
 8010520:	e00e      	b.n	8010540 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010522:	89b8      	ldrh	r0, [r7, #12]
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801052a:	7fbb      	ldrb	r3, [r7, #30]
 801052c:	4a2a      	ldr	r2, [pc, #168]	; (80105d8 <dhcp_renew+0x12c>)
 801052e:	5cd3      	ldrb	r3, [r2, r3]
 8010530:	461a      	mov	r2, r3
 8010532:	f000 fa91 	bl	8010a58 <dhcp_option_byte>
 8010536:	4603      	mov	r3, r0
 8010538:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801053a:	7fbb      	ldrb	r3, [r7, #30]
 801053c:	3301      	adds	r3, #1
 801053e:	77bb      	strb	r3, [r7, #30]
 8010540:	7fbb      	ldrb	r3, [r7, #30]
 8010542:	2b02      	cmp	r3, #2
 8010544:	d9ed      	bls.n	8010522 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010546:	89b8      	ldrh	r0, [r7, #12]
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	33f0      	adds	r3, #240	; 0xf0
 801054c:	697a      	ldr	r2, [r7, #20]
 801054e:	4619      	mov	r1, r3
 8010550:	f000 ff96 	bl	8011480 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010554:	4b21      	ldr	r3, [pc, #132]	; (80105dc <dhcp_renew+0x130>)
 8010556:	6818      	ldr	r0, [r3, #0]
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	f103 0218 	add.w	r2, r3, #24
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	2343      	movs	r3, #67	; 0x43
 8010564:	6979      	ldr	r1, [r7, #20]
 8010566:	f7fe fe53 	bl	800f210 <udp_sendto_if>
 801056a:	4603      	mov	r3, r0
 801056c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801056e:	6978      	ldr	r0, [r7, #20]
 8010570:	f7f8 ff0c 	bl	800938c <pbuf_free>
 8010574:	e001      	b.n	801057a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010576:	23ff      	movs	r3, #255	; 0xff
 8010578:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	799b      	ldrb	r3, [r3, #6]
 801057e:	2bff      	cmp	r3, #255	; 0xff
 8010580:	d005      	beq.n	801058e <dhcp_renew+0xe2>
    dhcp->tries++;
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	799b      	ldrb	r3, [r3, #6]
 8010586:	3301      	adds	r3, #1
 8010588:	b2da      	uxtb	r2, r3
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	799b      	ldrb	r3, [r3, #6]
 8010592:	2b09      	cmp	r3, #9
 8010594:	d80a      	bhi.n	80105ac <dhcp_renew+0x100>
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	799b      	ldrb	r3, [r3, #6]
 801059a:	b29b      	uxth	r3, r3
 801059c:	461a      	mov	r2, r3
 801059e:	0152      	lsls	r2, r2, #5
 80105a0:	1ad2      	subs	r2, r2, r3
 80105a2:	0092      	lsls	r2, r2, #2
 80105a4:	4413      	add	r3, r2
 80105a6:	011b      	lsls	r3, r3, #4
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	e001      	b.n	80105b0 <dhcp_renew+0x104>
 80105ac:	f644 6320 	movw	r3, #20000	; 0x4e20
 80105b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80105b2:	89fb      	ldrh	r3, [r7, #14]
 80105b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80105b8:	4a09      	ldr	r2, [pc, #36]	; (80105e0 <dhcp_renew+0x134>)
 80105ba:	fb82 1203 	smull	r1, r2, r2, r3
 80105be:	1152      	asrs	r2, r2, #5
 80105c0:	17db      	asrs	r3, r3, #31
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80105ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3720      	adds	r7, #32
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	20000030 	.word	0x20000030
 80105dc:	20010980 	.word	0x20010980
 80105e0:	10624dd3 	.word	0x10624dd3

080105e4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b08a      	sub	sp, #40	; 0x28
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80105f2:	2104      	movs	r1, #4
 80105f4:	69b8      	ldr	r0, [r7, #24]
 80105f6:	f000 f9e1 	bl	80109bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80105fa:	f107 030c 	add.w	r3, r7, #12
 80105fe:	2203      	movs	r2, #3
 8010600:	69b9      	ldr	r1, [r7, #24]
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fe66 	bl	80112d4 <dhcp_create_msg>
 8010608:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d04c      	beq.n	80106aa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010616:	89b8      	ldrh	r0, [r7, #12]
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801061e:	2302      	movs	r3, #2
 8010620:	2239      	movs	r2, #57	; 0x39
 8010622:	f000 f9e5 	bl	80109f0 <dhcp_option>
 8010626:	4603      	mov	r3, r0
 8010628:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801062a:	89b8      	ldrh	r0, [r7, #12]
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010636:	461a      	mov	r2, r3
 8010638:	f000 fa34 	bl	8010aa4 <dhcp_option_short>
 801063c:	4603      	mov	r3, r0
 801063e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010640:	89b8      	ldrh	r0, [r7, #12]
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010648:	2303      	movs	r3, #3
 801064a:	2237      	movs	r2, #55	; 0x37
 801064c:	f000 f9d0 	bl	80109f0 <dhcp_option>
 8010650:	4603      	mov	r3, r0
 8010652:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010654:	2300      	movs	r3, #0
 8010656:	77bb      	strb	r3, [r7, #30]
 8010658:	e00e      	b.n	8010678 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801065a:	89b8      	ldrh	r0, [r7, #12]
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010662:	7fbb      	ldrb	r3, [r7, #30]
 8010664:	4a29      	ldr	r2, [pc, #164]	; (801070c <dhcp_rebind+0x128>)
 8010666:	5cd3      	ldrb	r3, [r2, r3]
 8010668:	461a      	mov	r2, r3
 801066a:	f000 f9f5 	bl	8010a58 <dhcp_option_byte>
 801066e:	4603      	mov	r3, r0
 8010670:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010672:	7fbb      	ldrb	r3, [r7, #30]
 8010674:	3301      	adds	r3, #1
 8010676:	77bb      	strb	r3, [r7, #30]
 8010678:	7fbb      	ldrb	r3, [r7, #30]
 801067a:	2b02      	cmp	r3, #2
 801067c:	d9ed      	bls.n	801065a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801067e:	89b8      	ldrh	r0, [r7, #12]
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	33f0      	adds	r3, #240	; 0xf0
 8010684:	697a      	ldr	r2, [r7, #20]
 8010686:	4619      	mov	r1, r3
 8010688:	f000 fefa 	bl	8011480 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801068c:	4b20      	ldr	r3, [pc, #128]	; (8010710 <dhcp_rebind+0x12c>)
 801068e:	6818      	ldr	r0, [r3, #0]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	2343      	movs	r3, #67	; 0x43
 8010696:	4a1f      	ldr	r2, [pc, #124]	; (8010714 <dhcp_rebind+0x130>)
 8010698:	6979      	ldr	r1, [r7, #20]
 801069a:	f7fe fdb9 	bl	800f210 <udp_sendto_if>
 801069e:	4603      	mov	r3, r0
 80106a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80106a2:	6978      	ldr	r0, [r7, #20]
 80106a4:	f7f8 fe72 	bl	800938c <pbuf_free>
 80106a8:	e001      	b.n	80106ae <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80106aa:	23ff      	movs	r3, #255	; 0xff
 80106ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	799b      	ldrb	r3, [r3, #6]
 80106b2:	2bff      	cmp	r3, #255	; 0xff
 80106b4:	d005      	beq.n	80106c2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	799b      	ldrb	r3, [r3, #6]
 80106ba:	3301      	adds	r3, #1
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	799b      	ldrb	r3, [r3, #6]
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	d80a      	bhi.n	80106e0 <dhcp_rebind+0xfc>
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	799b      	ldrb	r3, [r3, #6]
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	461a      	mov	r2, r3
 80106d2:	0152      	lsls	r2, r2, #5
 80106d4:	1ad2      	subs	r2, r2, r3
 80106d6:	0092      	lsls	r2, r2, #2
 80106d8:	4413      	add	r3, r2
 80106da:	00db      	lsls	r3, r3, #3
 80106dc:	b29b      	uxth	r3, r3
 80106de:	e001      	b.n	80106e4 <dhcp_rebind+0x100>
 80106e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80106e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80106e6:	89fb      	ldrh	r3, [r7, #14]
 80106e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80106ec:	4a0a      	ldr	r2, [pc, #40]	; (8010718 <dhcp_rebind+0x134>)
 80106ee:	fb82 1203 	smull	r1, r2, r2, r3
 80106f2:	1152      	asrs	r2, r2, #5
 80106f4:	17db      	asrs	r3, r3, #31
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80106fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3720      	adds	r7, #32
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	20000030 	.word	0x20000030
 8010710:	20010980 	.word	0x20010980
 8010714:	08017f80 	.word	0x08017f80
 8010718:	10624dd3 	.word	0x10624dd3

0801071c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801071c:	b5b0      	push	{r4, r5, r7, lr}
 801071e:	b08a      	sub	sp, #40	; 0x28
 8010720:	af02      	add	r7, sp, #8
 8010722:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010728:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801072a:	2103      	movs	r1, #3
 801072c:	69b8      	ldr	r0, [r7, #24]
 801072e:	f000 f945 	bl	80109bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010732:	f107 030c 	add.w	r3, r7, #12
 8010736:	2203      	movs	r2, #3
 8010738:	69b9      	ldr	r1, [r7, #24]
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 fdca 	bl	80112d4 <dhcp_create_msg>
 8010740:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d066      	beq.n	8010816 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801074e:	89b8      	ldrh	r0, [r7, #12]
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010756:	2302      	movs	r3, #2
 8010758:	2239      	movs	r2, #57	; 0x39
 801075a:	f000 f949 	bl	80109f0 <dhcp_option>
 801075e:	4603      	mov	r3, r0
 8010760:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010762:	89b8      	ldrh	r0, [r7, #12]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	33f0      	adds	r3, #240	; 0xf0
 8010768:	f44f 7210 	mov.w	r2, #576	; 0x240
 801076c:	4619      	mov	r1, r3
 801076e:	f000 f999 	bl	8010aa4 <dhcp_option_short>
 8010772:	4603      	mov	r3, r0
 8010774:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010776:	89b8      	ldrh	r0, [r7, #12]
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801077e:	2304      	movs	r3, #4
 8010780:	2232      	movs	r2, #50	; 0x32
 8010782:	f000 f935 	bl	80109f0 <dhcp_option>
 8010786:	4603      	mov	r3, r0
 8010788:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801078a:	89bc      	ldrh	r4, [r7, #12]
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	69db      	ldr	r3, [r3, #28]
 8010796:	4618      	mov	r0, r3
 8010798:	f7f7 fa0f 	bl	8007bba <lwip_htonl>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	4629      	mov	r1, r5
 80107a2:	4620      	mov	r0, r4
 80107a4:	f000 f9b0 	bl	8010b08 <dhcp_option_long>
 80107a8:	4603      	mov	r3, r0
 80107aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80107ac:	89b8      	ldrh	r0, [r7, #12]
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107b4:	2303      	movs	r3, #3
 80107b6:	2237      	movs	r2, #55	; 0x37
 80107b8:	f000 f91a 	bl	80109f0 <dhcp_option>
 80107bc:	4603      	mov	r3, r0
 80107be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107c0:	2300      	movs	r3, #0
 80107c2:	77bb      	strb	r3, [r7, #30]
 80107c4:	e00e      	b.n	80107e4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80107c6:	89b8      	ldrh	r0, [r7, #12]
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107ce:	7fbb      	ldrb	r3, [r7, #30]
 80107d0:	4a29      	ldr	r2, [pc, #164]	; (8010878 <dhcp_reboot+0x15c>)
 80107d2:	5cd3      	ldrb	r3, [r2, r3]
 80107d4:	461a      	mov	r2, r3
 80107d6:	f000 f93f 	bl	8010a58 <dhcp_option_byte>
 80107da:	4603      	mov	r3, r0
 80107dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107de:	7fbb      	ldrb	r3, [r7, #30]
 80107e0:	3301      	adds	r3, #1
 80107e2:	77bb      	strb	r3, [r7, #30]
 80107e4:	7fbb      	ldrb	r3, [r7, #30]
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d9ed      	bls.n	80107c6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107ea:	89b8      	ldrh	r0, [r7, #12]
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	33f0      	adds	r3, #240	; 0xf0
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	4619      	mov	r1, r3
 80107f4:	f000 fe44 	bl	8011480 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107f8:	4b20      	ldr	r3, [pc, #128]	; (801087c <dhcp_reboot+0x160>)
 80107fa:	6818      	ldr	r0, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	2343      	movs	r3, #67	; 0x43
 8010802:	4a1f      	ldr	r2, [pc, #124]	; (8010880 <dhcp_reboot+0x164>)
 8010804:	6979      	ldr	r1, [r7, #20]
 8010806:	f7fe fd03 	bl	800f210 <udp_sendto_if>
 801080a:	4603      	mov	r3, r0
 801080c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801080e:	6978      	ldr	r0, [r7, #20]
 8010810:	f7f8 fdbc 	bl	800938c <pbuf_free>
 8010814:	e001      	b.n	801081a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010816:	23ff      	movs	r3, #255	; 0xff
 8010818:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	799b      	ldrb	r3, [r3, #6]
 801081e:	2bff      	cmp	r3, #255	; 0xff
 8010820:	d005      	beq.n	801082e <dhcp_reboot+0x112>
    dhcp->tries++;
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	799b      	ldrb	r3, [r3, #6]
 8010826:	3301      	adds	r3, #1
 8010828:	b2da      	uxtb	r2, r3
 801082a:	69bb      	ldr	r3, [r7, #24]
 801082c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	799b      	ldrb	r3, [r3, #6]
 8010832:	2b09      	cmp	r3, #9
 8010834:	d80a      	bhi.n	801084c <dhcp_reboot+0x130>
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	799b      	ldrb	r3, [r3, #6]
 801083a:	b29b      	uxth	r3, r3
 801083c:	461a      	mov	r2, r3
 801083e:	0152      	lsls	r2, r2, #5
 8010840:	1ad2      	subs	r2, r2, r3
 8010842:	0092      	lsls	r2, r2, #2
 8010844:	4413      	add	r3, r2
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	b29b      	uxth	r3, r3
 801084a:	e001      	b.n	8010850 <dhcp_reboot+0x134>
 801084c:	f242 7310 	movw	r3, #10000	; 0x2710
 8010850:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010852:	89fb      	ldrh	r3, [r7, #14]
 8010854:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010858:	4a0a      	ldr	r2, [pc, #40]	; (8010884 <dhcp_reboot+0x168>)
 801085a:	fb82 1203 	smull	r1, r2, r2, r3
 801085e:	1152      	asrs	r2, r2, #5
 8010860:	17db      	asrs	r3, r3, #31
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	b29a      	uxth	r2, r3
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801086a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3720      	adds	r7, #32
 8010872:	46bd      	mov	sp, r7
 8010874:	bdb0      	pop	{r4, r5, r7, pc}
 8010876:	bf00      	nop
 8010878:	20000030 	.word	0x20000030
 801087c:	20010980 	.word	0x20010980
 8010880:	08017f80 	.word	0x08017f80
 8010884:	10624dd3 	.word	0x10624dd3

08010888 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010888:	b5b0      	push	{r4, r5, r7, lr}
 801088a:	b08a      	sub	sp, #40	; 0x28
 801088c:	af02      	add	r7, sp, #8
 801088e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010894:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	2b00      	cmp	r3, #0
 801089a:	f000 8084 	beq.w	80109a6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	795b      	ldrb	r3, [r3, #5]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 8081 	beq.w	80109aa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	699b      	ldr	r3, [r3, #24]
 80108ac:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	2200      	movs	r2, #0
 80108b2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	2200      	movs	r2, #0
 80108b8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80108ba:	69fb      	ldr	r3, [r7, #28]
 80108bc:	2200      	movs	r2, #0
 80108be:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	2200      	movs	r2, #0
 80108c4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80108c6:	69fb      	ldr	r3, [r7, #28]
 80108c8:	2200      	movs	r2, #0
 80108ca:	631a      	str	r2, [r3, #48]	; 0x30
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	2200      	movs	r2, #0
 80108e0:	829a      	strh	r2, [r3, #20]
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	8a9a      	ldrh	r2, [r3, #20]
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	825a      	strh	r2, [r3, #18]
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	8a5a      	ldrh	r2, [r3, #18]
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	821a      	strh	r2, [r3, #16]
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	8a1a      	ldrh	r2, [r3, #16]
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f000 fdee 	bl	80114dc <dhcp_supplied_address>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d03b      	beq.n	801097e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010906:	f107 030e 	add.w	r3, r7, #14
 801090a:	2207      	movs	r2, #7
 801090c:	69f9      	ldr	r1, [r7, #28]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fce0 	bl	80112d4 <dhcp_create_msg>
 8010914:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d030      	beq.n	801097e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010922:	89f8      	ldrh	r0, [r7, #14]
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801092a:	2304      	movs	r3, #4
 801092c:	2236      	movs	r2, #54	; 0x36
 801092e:	f000 f85f 	bl	80109f0 <dhcp_option>
 8010932:	4603      	mov	r3, r0
 8010934:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010936:	89fc      	ldrh	r4, [r7, #14]
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	4618      	mov	r0, r3
 8010942:	f7f7 f93a 	bl	8007bba <lwip_htonl>
 8010946:	4603      	mov	r3, r0
 8010948:	461a      	mov	r2, r3
 801094a:	4629      	mov	r1, r5
 801094c:	4620      	mov	r0, r4
 801094e:	f000 f8db 	bl	8010b08 <dhcp_option_long>
 8010952:	4603      	mov	r3, r0
 8010954:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010956:	89f8      	ldrh	r0, [r7, #14]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	33f0      	adds	r3, #240	; 0xf0
 801095c:	69ba      	ldr	r2, [r7, #24]
 801095e:	4619      	mov	r1, r3
 8010960:	f000 fd8e 	bl	8011480 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010964:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <dhcp_release_and_stop+0x12c>)
 8010966:	6818      	ldr	r0, [r3, #0]
 8010968:	f107 0210 	add.w	r2, r7, #16
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	2343      	movs	r3, #67	; 0x43
 8010972:	69b9      	ldr	r1, [r7, #24]
 8010974:	f7fe fc4c 	bl	800f210 <udp_sendto_if>
      pbuf_free(p_out);
 8010978:	69b8      	ldr	r0, [r7, #24]
 801097a:	f7f8 fd07 	bl	800938c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801097e:	4b0e      	ldr	r3, [pc, #56]	; (80109b8 <dhcp_release_and_stop+0x130>)
 8010980:	4a0d      	ldr	r2, [pc, #52]	; (80109b8 <dhcp_release_and_stop+0x130>)
 8010982:	490d      	ldr	r1, [pc, #52]	; (80109b8 <dhcp_release_and_stop+0x130>)
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7f7 fff3 	bl	8008970 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801098a:	2100      	movs	r1, #0
 801098c:	69f8      	ldr	r0, [r7, #28]
 801098e:	f000 f815 	bl	80109bc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	791b      	ldrb	r3, [r3, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d008      	beq.n	80109ac <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801099a:	f7fe ff85 	bl	800f8a8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	2200      	movs	r2, #0
 80109a2:	711a      	strb	r2, [r3, #4]
 80109a4:	e002      	b.n	80109ac <dhcp_release_and_stop+0x124>
    return;
 80109a6:	bf00      	nop
 80109a8:	e000      	b.n	80109ac <dhcp_release_and_stop+0x124>
    return;
 80109aa:	bf00      	nop
  }
}
 80109ac:	3720      	adds	r7, #32
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bdb0      	pop	{r4, r5, r7, pc}
 80109b2:	bf00      	nop
 80109b4:	20010980 	.word	0x20010980
 80109b8:	08017f7c 	.word	0x08017f7c

080109bc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	460b      	mov	r3, r1
 80109c6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	795b      	ldrb	r3, [r3, #5]
 80109cc:	78fa      	ldrb	r2, [r7, #3]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d008      	beq.n	80109e4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	78fa      	ldrb	r2, [r7, #3]
 80109d6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	811a      	strh	r2, [r3, #8]
  }
}
 80109e4:	bf00      	nop
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6039      	str	r1, [r7, #0]
 80109f8:	4611      	mov	r1, r2
 80109fa:	461a      	mov	r2, r3
 80109fc:	4603      	mov	r3, r0
 80109fe:	80fb      	strh	r3, [r7, #6]
 8010a00:	460b      	mov	r3, r1
 8010a02:	717b      	strb	r3, [r7, #5]
 8010a04:	4613      	mov	r3, r2
 8010a06:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010a08:	88fa      	ldrh	r2, [r7, #6]
 8010a0a:	793b      	ldrb	r3, [r7, #4]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	3302      	adds	r3, #2
 8010a10:	2b44      	cmp	r3, #68	; 0x44
 8010a12:	d906      	bls.n	8010a22 <dhcp_option+0x32>
 8010a14:	4b0d      	ldr	r3, [pc, #52]	; (8010a4c <dhcp_option+0x5c>)
 8010a16:	f240 529a 	movw	r2, #1434	; 0x59a
 8010a1a:	490d      	ldr	r1, [pc, #52]	; (8010a50 <dhcp_option+0x60>)
 8010a1c:	480d      	ldr	r0, [pc, #52]	; (8010a54 <dhcp_option+0x64>)
 8010a1e:	f003 fb59 	bl	80140d4 <iprintf>
  options[options_out_len++] = option_type;
 8010a22:	88fb      	ldrh	r3, [r7, #6]
 8010a24:	1c5a      	adds	r2, r3, #1
 8010a26:	80fa      	strh	r2, [r7, #6]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	797a      	ldrb	r2, [r7, #5]
 8010a30:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010a32:	88fb      	ldrh	r3, [r7, #6]
 8010a34:	1c5a      	adds	r2, r3, #1
 8010a36:	80fa      	strh	r2, [r7, #6]
 8010a38:	461a      	mov	r2, r3
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	793a      	ldrb	r2, [r7, #4]
 8010a40:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a42:	88fb      	ldrh	r3, [r7, #6]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	080173d4 	.word	0x080173d4
 8010a50:	08017568 	.word	0x08017568
 8010a54:	08017434 	.word	0x08017434

08010a58 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	80fb      	strh	r3, [r7, #6]
 8010a64:	4613      	mov	r3, r2
 8010a66:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010a68:	88fb      	ldrh	r3, [r7, #6]
 8010a6a:	2b43      	cmp	r3, #67	; 0x43
 8010a6c:	d906      	bls.n	8010a7c <dhcp_option_byte+0x24>
 8010a6e:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <dhcp_option_byte+0x40>)
 8010a70:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010a74:	4909      	ldr	r1, [pc, #36]	; (8010a9c <dhcp_option_byte+0x44>)
 8010a76:	480a      	ldr	r0, [pc, #40]	; (8010aa0 <dhcp_option_byte+0x48>)
 8010a78:	f003 fb2c 	bl	80140d4 <iprintf>
  options[options_out_len++] = value;
 8010a7c:	88fb      	ldrh	r3, [r7, #6]
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	80fa      	strh	r2, [r7, #6]
 8010a82:	461a      	mov	r2, r3
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	4413      	add	r3, r2
 8010a88:	797a      	ldrb	r2, [r7, #5]
 8010a8a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a8c:	88fb      	ldrh	r3, [r7, #6]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	080173d4 	.word	0x080173d4
 8010a9c:	080175ac 	.word	0x080175ac
 8010aa0:	08017434 	.word	0x08017434

08010aa4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	4603      	mov	r3, r0
 8010aac:	6039      	str	r1, [r7, #0]
 8010aae:	80fb      	strh	r3, [r7, #6]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010ab4:	88fb      	ldrh	r3, [r7, #6]
 8010ab6:	3302      	adds	r3, #2
 8010ab8:	2b44      	cmp	r3, #68	; 0x44
 8010aba:	d906      	bls.n	8010aca <dhcp_option_short+0x26>
 8010abc:	4b0f      	ldr	r3, [pc, #60]	; (8010afc <dhcp_option_short+0x58>)
 8010abe:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010ac2:	490f      	ldr	r1, [pc, #60]	; (8010b00 <dhcp_option_short+0x5c>)
 8010ac4:	480f      	ldr	r0, [pc, #60]	; (8010b04 <dhcp_option_short+0x60>)
 8010ac6:	f003 fb05 	bl	80140d4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010aca:	88bb      	ldrh	r3, [r7, #4]
 8010acc:	0a1b      	lsrs	r3, r3, #8
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	88fb      	ldrh	r3, [r7, #6]
 8010ad2:	1c59      	adds	r1, r3, #1
 8010ad4:	80f9      	strh	r1, [r7, #6]
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	440b      	add	r3, r1
 8010adc:	b2d2      	uxtb	r2, r2
 8010ade:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010ae0:	88fb      	ldrh	r3, [r7, #6]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	80fa      	strh	r2, [r7, #6]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	4413      	add	r3, r2
 8010aec:	88ba      	ldrh	r2, [r7, #4]
 8010aee:	b2d2      	uxtb	r2, r2
 8010af0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010af2:	88fb      	ldrh	r3, [r7, #6]
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	080173d4 	.word	0x080173d4
 8010b00:	080175e4 	.word	0x080175e4
 8010b04:	08017434 	.word	0x08017434

08010b08 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	4603      	mov	r3, r0
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	607a      	str	r2, [r7, #4]
 8010b14:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010b16:	89fb      	ldrh	r3, [r7, #14]
 8010b18:	3304      	adds	r3, #4
 8010b1a:	2b44      	cmp	r3, #68	; 0x44
 8010b1c:	d906      	bls.n	8010b2c <dhcp_option_long+0x24>
 8010b1e:	4b19      	ldr	r3, [pc, #100]	; (8010b84 <dhcp_option_long+0x7c>)
 8010b20:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010b24:	4918      	ldr	r1, [pc, #96]	; (8010b88 <dhcp_option_long+0x80>)
 8010b26:	4819      	ldr	r0, [pc, #100]	; (8010b8c <dhcp_option_long+0x84>)
 8010b28:	f003 fad4 	bl	80140d4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	0e1a      	lsrs	r2, r3, #24
 8010b30:	89fb      	ldrh	r3, [r7, #14]
 8010b32:	1c59      	adds	r1, r3, #1
 8010b34:	81f9      	strh	r1, [r7, #14]
 8010b36:	4619      	mov	r1, r3
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	440b      	add	r3, r1
 8010b3c:	b2d2      	uxtb	r2, r2
 8010b3e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	0c1a      	lsrs	r2, r3, #16
 8010b44:	89fb      	ldrh	r3, [r7, #14]
 8010b46:	1c59      	adds	r1, r3, #1
 8010b48:	81f9      	strh	r1, [r7, #14]
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	440b      	add	r3, r1
 8010b50:	b2d2      	uxtb	r2, r2
 8010b52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	0a1a      	lsrs	r2, r3, #8
 8010b58:	89fb      	ldrh	r3, [r7, #14]
 8010b5a:	1c59      	adds	r1, r3, #1
 8010b5c:	81f9      	strh	r1, [r7, #14]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	440b      	add	r3, r1
 8010b64:	b2d2      	uxtb	r2, r2
 8010b66:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010b68:	89fb      	ldrh	r3, [r7, #14]
 8010b6a:	1c5a      	adds	r2, r3, #1
 8010b6c:	81fa      	strh	r2, [r7, #14]
 8010b6e:	461a      	mov	r2, r3
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	4413      	add	r3, r2
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	b2d2      	uxtb	r2, r2
 8010b78:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b7a:	89fb      	ldrh	r3, [r7, #14]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	080173d4 	.word	0x080173d4
 8010b88:	08017620 	.word	0x08017620
 8010b8c:	08017434 	.word	0x08017434

08010b90 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b090      	sub	sp, #64	; 0x40
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010ba2:	2208      	movs	r2, #8
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	48b5      	ldr	r0, [pc, #724]	; (8010e7c <dhcp_parse_reply+0x2ec>)
 8010ba8:	f003 f9f7 	bl	8013f9a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	895b      	ldrh	r3, [r3, #10]
 8010bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8010bb2:	d802      	bhi.n	8010bba <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010bb4:	f06f 0301 	mvn.w	r3, #1
 8010bb8:	e2a7      	b.n	801110a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010bc0:	23f0      	movs	r3, #240	; 0xf0
 8010bc2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	891b      	ldrh	r3, [r3, #8]
 8010bc8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010bce:	e00c      	b.n	8010bea <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd2:	895b      	ldrh	r3, [r3, #10]
 8010bd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	895b      	ldrh	r3, [r3, #10]
 8010bde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d004      	beq.n	8010bfa <dhcp_parse_reply+0x6a>
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf2:	895b      	ldrh	r3, [r3, #10]
 8010bf4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d2ea      	bcs.n	8010bd0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d102      	bne.n	8010c06 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010c00:	f06f 0301 	mvn.w	r3, #1
 8010c04:	e281      	b.n	801110a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010c06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010c08:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010c0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010c0c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010c14:	e239      	b.n	801108a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010c16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c1a:	4413      	add	r3, r2
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010c26:	f04f 33ff 	mov.w	r3, #4294967295
 8010c2a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010c2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c2e:	3302      	adds	r3, #2
 8010c30:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010c32:	8bfa      	ldrh	r2, [r7, #30]
 8010c34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d202      	bcs.n	8010c40 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010c3a:	f06f 0301 	mvn.w	r3, #1
 8010c3e:	e264      	b.n	801110a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010c40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c42:	3301      	adds	r3, #1
 8010c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c46:	8952      	ldrh	r2, [r2, #10]
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	da07      	bge.n	8010c5c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010c4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010c4e:	3301      	adds	r3, #1
 8010c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c52:	4413      	add	r3, r2
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c5a:	e00b      	b.n	8010c74 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d004      	beq.n	8010c6e <dhcp_parse_reply+0xde>
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	e000      	b.n	8010c70 <dhcp_parse_reply+0xe0>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010c7c:	7dfb      	ldrb	r3, [r7, #23]
 8010c7e:	2b3b      	cmp	r3, #59	; 0x3b
 8010c80:	f200 812c 	bhi.w	8010edc <dhcp_parse_reply+0x34c>
 8010c84:	a201      	add	r2, pc, #4	; (adr r2, 8010c8c <dhcp_parse_reply+0xfc>)
 8010c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c8a:	bf00      	nop
 8010c8c:	08010d7d 	.word	0x08010d7d
 8010c90:	08010d8d 	.word	0x08010d8d
 8010c94:	08010edd 	.word	0x08010edd
 8010c98:	08010daf 	.word	0x08010daf
 8010c9c:	08010edd 	.word	0x08010edd
 8010ca0:	08010edd 	.word	0x08010edd
 8010ca4:	08010edd 	.word	0x08010edd
 8010ca8:	08010edd 	.word	0x08010edd
 8010cac:	08010edd 	.word	0x08010edd
 8010cb0:	08010edd 	.word	0x08010edd
 8010cb4:	08010edd 	.word	0x08010edd
 8010cb8:	08010edd 	.word	0x08010edd
 8010cbc:	08010edd 	.word	0x08010edd
 8010cc0:	08010edd 	.word	0x08010edd
 8010cc4:	08010edd 	.word	0x08010edd
 8010cc8:	08010edd 	.word	0x08010edd
 8010ccc:	08010edd 	.word	0x08010edd
 8010cd0:	08010edd 	.word	0x08010edd
 8010cd4:	08010edd 	.word	0x08010edd
 8010cd8:	08010edd 	.word	0x08010edd
 8010cdc:	08010edd 	.word	0x08010edd
 8010ce0:	08010edd 	.word	0x08010edd
 8010ce4:	08010edd 	.word	0x08010edd
 8010ce8:	08010edd 	.word	0x08010edd
 8010cec:	08010edd 	.word	0x08010edd
 8010cf0:	08010edd 	.word	0x08010edd
 8010cf4:	08010edd 	.word	0x08010edd
 8010cf8:	08010edd 	.word	0x08010edd
 8010cfc:	08010edd 	.word	0x08010edd
 8010d00:	08010edd 	.word	0x08010edd
 8010d04:	08010edd 	.word	0x08010edd
 8010d08:	08010edd 	.word	0x08010edd
 8010d0c:	08010edd 	.word	0x08010edd
 8010d10:	08010edd 	.word	0x08010edd
 8010d14:	08010edd 	.word	0x08010edd
 8010d18:	08010edd 	.word	0x08010edd
 8010d1c:	08010edd 	.word	0x08010edd
 8010d20:	08010edd 	.word	0x08010edd
 8010d24:	08010edd 	.word	0x08010edd
 8010d28:	08010edd 	.word	0x08010edd
 8010d2c:	08010edd 	.word	0x08010edd
 8010d30:	08010edd 	.word	0x08010edd
 8010d34:	08010edd 	.word	0x08010edd
 8010d38:	08010edd 	.word	0x08010edd
 8010d3c:	08010edd 	.word	0x08010edd
 8010d40:	08010edd 	.word	0x08010edd
 8010d44:	08010edd 	.word	0x08010edd
 8010d48:	08010edd 	.word	0x08010edd
 8010d4c:	08010edd 	.word	0x08010edd
 8010d50:	08010edd 	.word	0x08010edd
 8010d54:	08010edd 	.word	0x08010edd
 8010d58:	08010ddb 	.word	0x08010ddb
 8010d5c:	08010dfd 	.word	0x08010dfd
 8010d60:	08010e39 	.word	0x08010e39
 8010d64:	08010e5b 	.word	0x08010e5b
 8010d68:	08010edd 	.word	0x08010edd
 8010d6c:	08010edd 	.word	0x08010edd
 8010d70:	08010edd 	.word	0x08010edd
 8010d74:	08010e99 	.word	0x08010e99
 8010d78:	08010ebb 	.word	0x08010ebb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010d8a:	e0ab      	b.n	8010ee4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d90:	2b04      	cmp	r3, #4
 8010d92:	d009      	beq.n	8010da8 <dhcp_parse_reply+0x218>
 8010d94:	4b3a      	ldr	r3, [pc, #232]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010d96:	f240 622e 	movw	r2, #1582	; 0x62e
 8010d9a:	493a      	ldr	r1, [pc, #232]	; (8010e84 <dhcp_parse_reply+0x2f4>)
 8010d9c:	483a      	ldr	r0, [pc, #232]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010d9e:	f003 f999 	bl	80140d4 <iprintf>
 8010da2:	f06f 0305 	mvn.w	r3, #5
 8010da6:	e1b0      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010da8:	2306      	movs	r3, #6
 8010daa:	623b      	str	r3, [r7, #32]
        break;
 8010dac:	e09a      	b.n	8010ee4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010dae:	2304      	movs	r3, #4
 8010db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010db4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d209      	bcs.n	8010dd4 <dhcp_parse_reply+0x244>
 8010dc0:	4b2f      	ldr	r3, [pc, #188]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010dc2:	f240 6233 	movw	r2, #1587	; 0x633
 8010dc6:	4931      	ldr	r1, [pc, #196]	; (8010e8c <dhcp_parse_reply+0x2fc>)
 8010dc8:	482f      	ldr	r0, [pc, #188]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010dca:	f003 f983 	bl	80140d4 <iprintf>
 8010dce:	f06f 0305 	mvn.w	r3, #5
 8010dd2:	e19a      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010dd4:	2307      	movs	r3, #7
 8010dd6:	623b      	str	r3, [r7, #32]
        break;
 8010dd8:	e084      	b.n	8010ee4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dde:	2b04      	cmp	r3, #4
 8010de0:	d009      	beq.n	8010df6 <dhcp_parse_reply+0x266>
 8010de2:	4b27      	ldr	r3, [pc, #156]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010de4:	f240 6241 	movw	r2, #1601	; 0x641
 8010de8:	4926      	ldr	r1, [pc, #152]	; (8010e84 <dhcp_parse_reply+0x2f4>)
 8010dea:	4827      	ldr	r0, [pc, #156]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010dec:	f003 f972 	bl	80140d4 <iprintf>
 8010df0:	f06f 0305 	mvn.w	r3, #5
 8010df4:	e189      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010df6:	2303      	movs	r3, #3
 8010df8:	623b      	str	r3, [r7, #32]
        break;
 8010dfa:	e073      	b.n	8010ee4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d009      	beq.n	8010e18 <dhcp_parse_reply+0x288>
 8010e04:	4b1e      	ldr	r3, [pc, #120]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010e06:	f240 624f 	movw	r2, #1615	; 0x64f
 8010e0a:	4921      	ldr	r1, [pc, #132]	; (8010e90 <dhcp_parse_reply+0x300>)
 8010e0c:	481e      	ldr	r0, [pc, #120]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010e0e:	f003 f961 	bl	80140d4 <iprintf>
 8010e12:	f06f 0305 	mvn.w	r3, #5
 8010e16:	e178      	b.n	801110a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010e18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e1a:	2bf0      	cmp	r3, #240	; 0xf0
 8010e1c:	d009      	beq.n	8010e32 <dhcp_parse_reply+0x2a2>
 8010e1e:	4b18      	ldr	r3, [pc, #96]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010e20:	f240 6251 	movw	r2, #1617	; 0x651
 8010e24:	491b      	ldr	r1, [pc, #108]	; (8010e94 <dhcp_parse_reply+0x304>)
 8010e26:	4818      	ldr	r0, [pc, #96]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010e28:	f003 f954 	bl	80140d4 <iprintf>
 8010e2c:	f06f 0305 	mvn.w	r3, #5
 8010e30:	e16b      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010e32:	2300      	movs	r3, #0
 8010e34:	623b      	str	r3, [r7, #32]
        break;
 8010e36:	e055      	b.n	8010ee4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d009      	beq.n	8010e54 <dhcp_parse_reply+0x2c4>
 8010e40:	4b0f      	ldr	r3, [pc, #60]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010e42:	f240 6255 	movw	r2, #1621	; 0x655
 8010e46:	4912      	ldr	r1, [pc, #72]	; (8010e90 <dhcp_parse_reply+0x300>)
 8010e48:	480f      	ldr	r0, [pc, #60]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010e4a:	f003 f943 	bl	80140d4 <iprintf>
 8010e4e:	f06f 0305 	mvn.w	r3, #5
 8010e52:	e15a      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010e54:	2301      	movs	r3, #1
 8010e56:	623b      	str	r3, [r7, #32]
        break;
 8010e58:	e044      	b.n	8010ee4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e5e:	2b04      	cmp	r3, #4
 8010e60:	d009      	beq.n	8010e76 <dhcp_parse_reply+0x2e6>
 8010e62:	4b07      	ldr	r3, [pc, #28]	; (8010e80 <dhcp_parse_reply+0x2f0>)
 8010e64:	f240 6259 	movw	r2, #1625	; 0x659
 8010e68:	4906      	ldr	r1, [pc, #24]	; (8010e84 <dhcp_parse_reply+0x2f4>)
 8010e6a:	4807      	ldr	r0, [pc, #28]	; (8010e88 <dhcp_parse_reply+0x2f8>)
 8010e6c:	f003 f932 	bl	80140d4 <iprintf>
 8010e70:	f06f 0305 	mvn.w	r3, #5
 8010e74:	e149      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010e76:	2302      	movs	r3, #2
 8010e78:	623b      	str	r3, [r7, #32]
        break;
 8010e7a:	e033      	b.n	8010ee4 <dhcp_parse_reply+0x354>
 8010e7c:	20010978 	.word	0x20010978
 8010e80:	080173d4 	.word	0x080173d4
 8010e84:	0801765c 	.word	0x0801765c
 8010e88:	08017434 	.word	0x08017434
 8010e8c:	08017668 	.word	0x08017668
 8010e90:	0801767c 	.word	0x0801767c
 8010e94:	08017688 	.word	0x08017688
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e9c:	2b04      	cmp	r3, #4
 8010e9e:	d009      	beq.n	8010eb4 <dhcp_parse_reply+0x324>
 8010ea0:	4b9c      	ldr	r3, [pc, #624]	; (8011114 <dhcp_parse_reply+0x584>)
 8010ea2:	f240 625d 	movw	r2, #1629	; 0x65d
 8010ea6:	499c      	ldr	r1, [pc, #624]	; (8011118 <dhcp_parse_reply+0x588>)
 8010ea8:	489c      	ldr	r0, [pc, #624]	; (801111c <dhcp_parse_reply+0x58c>)
 8010eaa:	f003 f913 	bl	80140d4 <iprintf>
 8010eae:	f06f 0305 	mvn.w	r3, #5
 8010eb2:	e12a      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010eb4:	2304      	movs	r3, #4
 8010eb6:	623b      	str	r3, [r7, #32]
        break;
 8010eb8:	e014      	b.n	8010ee4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ebe:	2b04      	cmp	r3, #4
 8010ec0:	d009      	beq.n	8010ed6 <dhcp_parse_reply+0x346>
 8010ec2:	4b94      	ldr	r3, [pc, #592]	; (8011114 <dhcp_parse_reply+0x584>)
 8010ec4:	f240 6261 	movw	r2, #1633	; 0x661
 8010ec8:	4993      	ldr	r1, [pc, #588]	; (8011118 <dhcp_parse_reply+0x588>)
 8010eca:	4894      	ldr	r0, [pc, #592]	; (801111c <dhcp_parse_reply+0x58c>)
 8010ecc:	f003 f902 	bl	80140d4 <iprintf>
 8010ed0:	f06f 0305 	mvn.w	r3, #5
 8010ed4:	e119      	b.n	801110a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010ed6:	2305      	movs	r3, #5
 8010ed8:	623b      	str	r3, [r7, #32]
        break;
 8010eda:	e003      	b.n	8010ee4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010ee2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d103      	bne.n	8010ef2 <dhcp_parse_reply+0x362>
      offset++;
 8010eea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010eec:	3301      	adds	r3, #1
 8010eee:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010ef0:	e0a1      	b.n	8011036 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010ef2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ef8:	4413      	add	r3, r2
 8010efa:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010efe:	4293      	cmp	r3, r2
 8010f00:	dd02      	ble.n	8010f08 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010f02:	f06f 0301 	mvn.w	r3, #1
 8010f06:	e100      	b.n	801110a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8010f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f0c:	b29a      	uxth	r2, r3
 8010f0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f10:	4413      	add	r3, r2
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	3302      	adds	r3, #2
 8010f16:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8010f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f000 808a 	beq.w	8011036 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010f26:	6a3b      	ldr	r3, [r7, #32]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	db02      	blt.n	8010f32 <dhcp_parse_reply+0x3a2>
 8010f2c:	6a3b      	ldr	r3, [r7, #32]
 8010f2e:	2b07      	cmp	r3, #7
 8010f30:	dd06      	ble.n	8010f40 <dhcp_parse_reply+0x3b0>
 8010f32:	4b78      	ldr	r3, [pc, #480]	; (8011114 <dhcp_parse_reply+0x584>)
 8010f34:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8010f38:	4979      	ldr	r1, [pc, #484]	; (8011120 <dhcp_parse_reply+0x590>)
 8010f3a:	4878      	ldr	r0, [pc, #480]	; (801111c <dhcp_parse_reply+0x58c>)
 8010f3c:	f003 f8ca 	bl	80140d4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010f40:	4a78      	ldr	r2, [pc, #480]	; (8011124 <dhcp_parse_reply+0x594>)
 8010f42:	6a3b      	ldr	r3, [r7, #32]
 8010f44:	4413      	add	r3, r2
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d174      	bne.n	8011036 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8010f4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	bf28      	it	cs
 8010f54:	2304      	movcs	r3, #4
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010f5a:	8bfb      	ldrh	r3, [r7, #30]
 8010f5c:	8aba      	ldrh	r2, [r7, #20]
 8010f5e:	f107 0108 	add.w	r1, r7, #8
 8010f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f64:	f7f8 fc18 	bl	8009798 <pbuf_copy_partial>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	8abb      	ldrh	r3, [r7, #20]
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d002      	beq.n	8010f78 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8010f72:	f06f 0301 	mvn.w	r3, #1
 8010f76:	e0c8      	b.n	801110a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8010f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f7c:	2b04      	cmp	r3, #4
 8010f7e:	d933      	bls.n	8010fe8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010f80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f84:	f003 0303 	and.w	r3, r3, #3
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d009      	beq.n	8010fa2 <dhcp_parse_reply+0x412>
 8010f8e:	4b61      	ldr	r3, [pc, #388]	; (8011114 <dhcp_parse_reply+0x584>)
 8010f90:	f240 6281 	movw	r2, #1665	; 0x681
 8010f94:	4964      	ldr	r1, [pc, #400]	; (8011128 <dhcp_parse_reply+0x598>)
 8010f96:	4861      	ldr	r0, [pc, #388]	; (801111c <dhcp_parse_reply+0x58c>)
 8010f98:	f003 f89c 	bl	80140d4 <iprintf>
 8010f9c:	f06f 0305 	mvn.w	r3, #5
 8010fa0:	e0b3      	b.n	801110a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010fa2:	4a60      	ldr	r2, [pc, #384]	; (8011124 <dhcp_parse_reply+0x594>)
 8010fa4:	6a3b      	ldr	r3, [r7, #32]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	2201      	movs	r2, #1
 8010faa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7f6 fe03 	bl	8007bba <lwip_htonl>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	495d      	ldr	r1, [pc, #372]	; (801112c <dhcp_parse_reply+0x59c>)
 8010fb8:	6a3b      	ldr	r3, [r7, #32]
 8010fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010fbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010fc2:	3b04      	subs	r3, #4
 8010fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8010fc8:	8bfb      	ldrh	r3, [r7, #30]
 8010fca:	3304      	adds	r3, #4
 8010fcc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010fce:	8a7a      	ldrh	r2, [r7, #18]
 8010fd0:	8bfb      	ldrh	r3, [r7, #30]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d202      	bcs.n	8010fdc <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8010fd6:	f06f 0301 	mvn.w	r3, #1
 8010fda:	e096      	b.n	801110a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8010fdc:	8a7b      	ldrh	r3, [r7, #18]
 8010fde:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8010fe6:	e79e      	b.n	8010f26 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8010fe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010fec:	2b04      	cmp	r3, #4
 8010fee:	d106      	bne.n	8010ffe <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7f6 fde1 	bl	8007bba <lwip_htonl>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	60bb      	str	r3, [r7, #8]
 8010ffc:	e011      	b.n	8011022 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011002:	2b01      	cmp	r3, #1
 8011004:	d009      	beq.n	801101a <dhcp_parse_reply+0x48a>
 8011006:	4b43      	ldr	r3, [pc, #268]	; (8011114 <dhcp_parse_reply+0x584>)
 8011008:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801100c:	4948      	ldr	r1, [pc, #288]	; (8011130 <dhcp_parse_reply+0x5a0>)
 801100e:	4843      	ldr	r0, [pc, #268]	; (801111c <dhcp_parse_reply+0x58c>)
 8011010:	f003 f860 	bl	80140d4 <iprintf>
 8011014:	f06f 0305 	mvn.w	r3, #5
 8011018:	e077      	b.n	801110a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801101a:	f107 0308 	add.w	r3, r7, #8
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8011022:	4a40      	ldr	r2, [pc, #256]	; (8011124 <dhcp_parse_reply+0x594>)
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	4413      	add	r3, r2
 8011028:	2201      	movs	r2, #1
 801102a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801102c:	68ba      	ldr	r2, [r7, #8]
 801102e:	493f      	ldr	r1, [pc, #252]	; (801112c <dhcp_parse_reply+0x59c>)
 8011030:	6a3b      	ldr	r3, [r7, #32]
 8011032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	895b      	ldrh	r3, [r3, #10]
 801103a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801103c:	429a      	cmp	r2, r3
 801103e:	d324      	bcc.n	801108a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8011040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011042:	895b      	ldrh	r3, [r3, #10]
 8011044:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104c:	895b      	ldrh	r3, [r3, #10]
 801104e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8011054:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011056:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011058:	429a      	cmp	r2, r3
 801105a:	d213      	bcs.n	8011084 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011064:	2b00      	cmp	r3, #0
 8011066:	d109      	bne.n	801107c <dhcp_parse_reply+0x4ec>
 8011068:	4b2a      	ldr	r3, [pc, #168]	; (8011114 <dhcp_parse_reply+0x584>)
 801106a:	f240 629d 	movw	r2, #1693	; 0x69d
 801106e:	4931      	ldr	r1, [pc, #196]	; (8011134 <dhcp_parse_reply+0x5a4>)
 8011070:	482a      	ldr	r0, [pc, #168]	; (801111c <dhcp_parse_reply+0x58c>)
 8011072:	f003 f82f 	bl	80140d4 <iprintf>
 8011076:	f06f 0305 	mvn.w	r3, #5
 801107a:	e046      	b.n	801110a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011082:	e002      	b.n	801108a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011084:	f06f 0301 	mvn.w	r3, #1
 8011088:	e03f      	b.n	801110a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00a      	beq.n	80110a6 <dhcp_parse_reply+0x516>
 8011090:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011092:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011094:	429a      	cmp	r2, r3
 8011096:	d206      	bcs.n	80110a6 <dhcp_parse_reply+0x516>
 8011098:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801109a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801109c:	4413      	add	r3, r2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2bff      	cmp	r3, #255	; 0xff
 80110a2:	f47f adb8 	bne.w	8010c16 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80110a6:	4b1f      	ldr	r3, [pc, #124]	; (8011124 <dhcp_parse_reply+0x594>)
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d018      	beq.n	80110e0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80110ae:	4b1f      	ldr	r3, [pc, #124]	; (801112c <dhcp_parse_reply+0x59c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80110b4:	4b1b      	ldr	r3, [pc, #108]	; (8011124 <dhcp_parse_reply+0x594>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d102      	bne.n	80110c6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80110c0:	2301      	movs	r3, #1
 80110c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110c4:	e00c      	b.n	80110e0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d102      	bne.n	80110d2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80110cc:	2301      	movs	r3, #1
 80110ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80110d0:	e006      	b.n	80110e0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2b03      	cmp	r3, #3
 80110d6:	d103      	bne.n	80110e0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80110d8:	2301      	movs	r3, #1
 80110da:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80110dc:	2301      	movs	r3, #1
 80110de:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80110e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80110ea:	236c      	movs	r3, #108	; 0x6c
 80110ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80110ee:	23ec      	movs	r3, #236	; 0xec
 80110f0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80110f2:	e56a      	b.n	8010bca <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80110f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d006      	beq.n	8011108 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80110fe:	232c      	movs	r3, #44	; 0x2c
 8011100:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8011102:	236c      	movs	r3, #108	; 0x6c
 8011104:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8011106:	e560      	b.n	8010bca <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3740      	adds	r7, #64	; 0x40
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	080173d4 	.word	0x080173d4
 8011118:	0801765c 	.word	0x0801765c
 801111c:	08017434 	.word	0x08017434
 8011120:	080176a0 	.word	0x080176a0
 8011124:	20010978 	.word	0x20010978
 8011128:	080176b4 	.word	0x080176b4
 801112c:	20010958 	.word	0x20010958
 8011130:	080176cc 	.word	0x080176cc
 8011134:	080176e0 	.word	0x080176e0

08011138 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b08a      	sub	sp, #40	; 0x28
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
 8011144:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011146:	4b60      	ldr	r3, [pc, #384]	; (80112c8 <dhcp_recv+0x190>)
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801114c:	6a3b      	ldr	r3, [r7, #32]
 801114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011150:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 809d 	beq.w	801129a <dhcp_recv+0x162>
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	791b      	ldrb	r3, [r3, #4]
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 8098 	beq.w	801129a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	895b      	ldrh	r3, [r3, #10]
 801116e:	2b2b      	cmp	r3, #43	; 0x2b
 8011170:	f240 8095 	bls.w	801129e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	2b02      	cmp	r3, #2
 801117a:	f040 8092 	bne.w	80112a2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801117e:	2300      	movs	r3, #0
 8011180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011184:	e012      	b.n	80111ac <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801118a:	6a3a      	ldr	r2, [r7, #32]
 801118c:	4413      	add	r3, r2
 801118e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011196:	69b9      	ldr	r1, [r7, #24]
 8011198:	440b      	add	r3, r1
 801119a:	7f1b      	ldrb	r3, [r3, #28]
 801119c:	429a      	cmp	r2, r3
 801119e:	f040 8082 	bne.w	80112a6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80111a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a6:	3301      	adds	r3, #1
 80111a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111ac:	6a3b      	ldr	r3, [r7, #32]
 80111ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d203      	bcs.n	80111c2 <dhcp_recv+0x8a>
 80111ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111be:	2b05      	cmp	r3, #5
 80111c0:	d9e1      	bls.n	8011186 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7f6 fcf7 	bl	8007bba <lwip_htonl>
 80111cc:	4602      	mov	r2, r0
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d169      	bne.n	80112aa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80111d6:	69f9      	ldr	r1, [r7, #28]
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7ff fcd9 	bl	8010b90 <dhcp_parse_reply>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d164      	bne.n	80112ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80111e4:	4b39      	ldr	r3, [pc, #228]	; (80112cc <dhcp_recv+0x194>)
 80111e6:	785b      	ldrb	r3, [r3, #1]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d062      	beq.n	80112b2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80111f2:	4b37      	ldr	r3, [pc, #220]	; (80112d0 <dhcp_recv+0x198>)
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80111f8:	7cfb      	ldrb	r3, [r7, #19]
 80111fa:	2b05      	cmp	r3, #5
 80111fc:	d12a      	bne.n	8011254 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	795b      	ldrb	r3, [r3, #5]
 8011202:	2b01      	cmp	r3, #1
 8011204:	d112      	bne.n	801122c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011206:	6979      	ldr	r1, [r7, #20]
 8011208:	6a38      	ldr	r0, [r7, #32]
 801120a:	f7fe fe17 	bl	800fe3c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801120e:	6a3b      	ldr	r3, [r7, #32]
 8011210:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011214:	f003 0308 	and.w	r3, r3, #8
 8011218:	2b00      	cmp	r3, #0
 801121a:	d003      	beq.n	8011224 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801121c:	6a38      	ldr	r0, [r7, #32]
 801121e:	f7fe fb87 	bl	800f930 <dhcp_check>
 8011222:	e049      	b.n	80112b8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011224:	6a38      	ldr	r0, [r7, #32]
 8011226:	f7ff f867 	bl	80102f8 <dhcp_bind>
 801122a:	e045      	b.n	80112b8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	795b      	ldrb	r3, [r3, #5]
 8011230:	2b03      	cmp	r3, #3
 8011232:	d007      	beq.n	8011244 <dhcp_recv+0x10c>
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	795b      	ldrb	r3, [r3, #5]
 8011238:	2b04      	cmp	r3, #4
 801123a:	d003      	beq.n	8011244 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011240:	2b05      	cmp	r3, #5
 8011242:	d139      	bne.n	80112b8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8011244:	6979      	ldr	r1, [r7, #20]
 8011246:	6a38      	ldr	r0, [r7, #32]
 8011248:	f7fe fdf8 	bl	800fe3c <dhcp_handle_ack>
      dhcp_bind(netif);
 801124c:	6a38      	ldr	r0, [r7, #32]
 801124e:	f7ff f853 	bl	80102f8 <dhcp_bind>
 8011252:	e031      	b.n	80112b8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011254:	7cfb      	ldrb	r3, [r7, #19]
 8011256:	2b06      	cmp	r3, #6
 8011258:	d113      	bne.n	8011282 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801125e:	2b03      	cmp	r3, #3
 8011260:	d00b      	beq.n	801127a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	795b      	ldrb	r3, [r3, #5]
 8011266:	2b01      	cmp	r3, #1
 8011268:	d007      	beq.n	801127a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801126e:	2b04      	cmp	r3, #4
 8011270:	d003      	beq.n	801127a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	795b      	ldrb	r3, [r3, #5]
 8011276:	2b05      	cmp	r3, #5
 8011278:	d103      	bne.n	8011282 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801127a:	6a38      	ldr	r0, [r7, #32]
 801127c:	f7fe fb3e 	bl	800f8fc <dhcp_handle_nak>
 8011280:	e01a      	b.n	80112b8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011282:	7cfb      	ldrb	r3, [r7, #19]
 8011284:	2b02      	cmp	r3, #2
 8011286:	d116      	bne.n	80112b6 <dhcp_recv+0x17e>
 8011288:	69fb      	ldr	r3, [r7, #28]
 801128a:	795b      	ldrb	r3, [r3, #5]
 801128c:	2b06      	cmp	r3, #6
 801128e:	d112      	bne.n	80112b6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011290:	6979      	ldr	r1, [r7, #20]
 8011292:	6a38      	ldr	r0, [r7, #32]
 8011294:	f7fe fb80 	bl	800f998 <dhcp_handle_offer>
 8011298:	e00e      	b.n	80112b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801129a:	bf00      	nop
 801129c:	e00c      	b.n	80112b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801129e:	bf00      	nop
 80112a0:	e00a      	b.n	80112b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112a2:	bf00      	nop
 80112a4:	e008      	b.n	80112b8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80112a6:	bf00      	nop
 80112a8:	e006      	b.n	80112b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112aa:	bf00      	nop
 80112ac:	e004      	b.n	80112b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112ae:	bf00      	nop
 80112b0:	e002      	b.n	80112b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80112b2:	bf00      	nop
 80112b4:	e000      	b.n	80112b8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80112b6:	bf00      	nop
  pbuf_free(p);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f7f8 f867 	bl	800938c <pbuf_free>
}
 80112be:	bf00      	nop
 80112c0:	3728      	adds	r7, #40	; 0x28
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	2000d184 	.word	0x2000d184
 80112cc:	20010978 	.word	0x20010978
 80112d0:	20010958 	.word	0x20010958

080112d4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b088      	sub	sp, #32
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	603b      	str	r3, [r7, #0]
 80112e0:	4613      	mov	r3, r2
 80112e2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d108      	bne.n	80112fc <dhcp_create_msg+0x28>
 80112ea:	4b5f      	ldr	r3, [pc, #380]	; (8011468 <dhcp_create_msg+0x194>)
 80112ec:	f240 7269 	movw	r2, #1897	; 0x769
 80112f0:	495e      	ldr	r1, [pc, #376]	; (801146c <dhcp_create_msg+0x198>)
 80112f2:	485f      	ldr	r0, [pc, #380]	; (8011470 <dhcp_create_msg+0x19c>)
 80112f4:	f002 feee 	bl	80140d4 <iprintf>
 80112f8:	2300      	movs	r3, #0
 80112fa:	e0b1      	b.n	8011460 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d108      	bne.n	8011314 <dhcp_create_msg+0x40>
 8011302:	4b59      	ldr	r3, [pc, #356]	; (8011468 <dhcp_create_msg+0x194>)
 8011304:	f240 726a 	movw	r2, #1898	; 0x76a
 8011308:	495a      	ldr	r1, [pc, #360]	; (8011474 <dhcp_create_msg+0x1a0>)
 801130a:	4859      	ldr	r0, [pc, #356]	; (8011470 <dhcp_create_msg+0x19c>)
 801130c:	f002 fee2 	bl	80140d4 <iprintf>
 8011310:	2300      	movs	r3, #0
 8011312:	e0a5      	b.n	8011460 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011314:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011318:	f44f 719a 	mov.w	r1, #308	; 0x134
 801131c:	2036      	movs	r0, #54	; 0x36
 801131e:	f7f7 fd51 	bl	8008dc4 <pbuf_alloc>
 8011322:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d101      	bne.n	801132e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801132a:	2300      	movs	r3, #0
 801132c:	e098      	b.n	8011460 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801132e:	69bb      	ldr	r3, [r7, #24]
 8011330:	895b      	ldrh	r3, [r3, #10]
 8011332:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8011336:	d206      	bcs.n	8011346 <dhcp_create_msg+0x72>
 8011338:	4b4b      	ldr	r3, [pc, #300]	; (8011468 <dhcp_create_msg+0x194>)
 801133a:	f240 7271 	movw	r2, #1905	; 0x771
 801133e:	494e      	ldr	r1, [pc, #312]	; (8011478 <dhcp_create_msg+0x1a4>)
 8011340:	484b      	ldr	r0, [pc, #300]	; (8011470 <dhcp_create_msg+0x19c>)
 8011342:	f002 fec7 	bl	80140d4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011346:	79fb      	ldrb	r3, [r7, #7]
 8011348:	2b03      	cmp	r3, #3
 801134a:	d103      	bne.n	8011354 <dhcp_create_msg+0x80>
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	795b      	ldrb	r3, [r3, #5]
 8011350:	2b03      	cmp	r3, #3
 8011352:	d10d      	bne.n	8011370 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	799b      	ldrb	r3, [r3, #6]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d105      	bne.n	8011368 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801135c:	f002 fed2 	bl	8014104 <rand>
 8011360:	4603      	mov	r3, r0
 8011362:	461a      	mov	r2, r3
 8011364:	4b45      	ldr	r3, [pc, #276]	; (801147c <dhcp_create_msg+0x1a8>)
 8011366:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011368:	4b44      	ldr	r3, [pc, #272]	; (801147c <dhcp_create_msg+0x1a8>)
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011376:	f44f 729a 	mov.w	r2, #308	; 0x134
 801137a:	2100      	movs	r1, #0
 801137c:	6978      	ldr	r0, [r7, #20]
 801137e:	f002 fe0c 	bl	8013f9a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	2201      	movs	r2, #1
 8011386:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	2201      	movs	r2, #1
 801138c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4618      	mov	r0, r3
 801139e:	f7f6 fc0c 	bl	8007bba <lwip_htonl>
 80113a2:	4602      	mov	r2, r0
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	2b08      	cmp	r3, #8
 80113ac:	d010      	beq.n	80113d0 <dhcp_create_msg+0xfc>
 80113ae:	79fb      	ldrb	r3, [r7, #7]
 80113b0:	2b04      	cmp	r3, #4
 80113b2:	d00d      	beq.n	80113d0 <dhcp_create_msg+0xfc>
 80113b4:	79fb      	ldrb	r3, [r7, #7]
 80113b6:	2b07      	cmp	r3, #7
 80113b8:	d00a      	beq.n	80113d0 <dhcp_create_msg+0xfc>
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	2b03      	cmp	r3, #3
 80113be:	d10c      	bne.n	80113da <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80113c4:	2b05      	cmp	r3, #5
 80113c6:	d003      	beq.n	80113d0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	795b      	ldrb	r3, [r3, #5]
 80113cc:	2b04      	cmp	r3, #4
 80113ce:	d104      	bne.n	80113da <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	3304      	adds	r3, #4
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113da:	2300      	movs	r3, #0
 80113dc:	83fb      	strh	r3, [r7, #30]
 80113de:	e00c      	b.n	80113fa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80113e0:	8bfa      	ldrh	r2, [r7, #30]
 80113e2:	8bfb      	ldrh	r3, [r7, #30]
 80113e4:	68f9      	ldr	r1, [r7, #12]
 80113e6:	440a      	add	r2, r1
 80113e8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80113ec:	697a      	ldr	r2, [r7, #20]
 80113ee:	4413      	add	r3, r2
 80113f0:	460a      	mov	r2, r1
 80113f2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113f4:	8bfb      	ldrh	r3, [r7, #30]
 80113f6:	3301      	adds	r3, #1
 80113f8:	83fb      	strh	r3, [r7, #30]
 80113fa:	8bfb      	ldrh	r3, [r7, #30]
 80113fc:	2b05      	cmp	r3, #5
 80113fe:	d9ef      	bls.n	80113e0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	2200      	movs	r2, #0
 8011404:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011408:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801140c:	2200      	movs	r2, #0
 801140e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8011412:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8011416:	2200      	movs	r2, #0
 8011418:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801141c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8011420:	2200      	movs	r2, #0
 8011422:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011426:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011430:	2301      	movs	r3, #1
 8011432:	2235      	movs	r2, #53	; 0x35
 8011434:	2000      	movs	r0, #0
 8011436:	f7ff fadb 	bl	80109f0 <dhcp_option>
 801143a:	4603      	mov	r3, r0
 801143c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011444:	79fa      	ldrb	r2, [r7, #7]
 8011446:	8a7b      	ldrh	r3, [r7, #18]
 8011448:	4618      	mov	r0, r3
 801144a:	f7ff fb05 	bl	8010a58 <dhcp_option_byte>
 801144e:	4603      	mov	r3, r0
 8011450:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	8a7a      	ldrh	r2, [r7, #18]
 801145c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801145e:	69bb      	ldr	r3, [r7, #24]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3720      	adds	r7, #32
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	080173d4 	.word	0x080173d4
 801146c:	080176f4 	.word	0x080176f4
 8011470:	08017434 	.word	0x08017434
 8011474:	08017714 	.word	0x08017714
 8011478:	08017734 	.word	0x08017734
 801147c:	20010988 	.word	0x20010988

08011480 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	4603      	mov	r3, r0
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
 801148c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801148e:	89fb      	ldrh	r3, [r7, #14]
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	81fa      	strh	r2, [r7, #14]
 8011494:	461a      	mov	r2, r3
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	4413      	add	r3, r2
 801149a:	22ff      	movs	r2, #255	; 0xff
 801149c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801149e:	e007      	b.n	80114b0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80114a0:	89fb      	ldrh	r3, [r7, #14]
 80114a2:	1c5a      	adds	r2, r3, #1
 80114a4:	81fa      	strh	r2, [r7, #14]
 80114a6:	461a      	mov	r2, r3
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	4413      	add	r3, r2
 80114ac:	2200      	movs	r2, #0
 80114ae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80114b0:	89fb      	ldrh	r3, [r7, #14]
 80114b2:	2b43      	cmp	r3, #67	; 0x43
 80114b4:	d904      	bls.n	80114c0 <dhcp_option_trailer+0x40>
 80114b6:	89fb      	ldrh	r3, [r7, #14]
 80114b8:	f003 0303 	and.w	r3, r3, #3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <dhcp_option_trailer+0x46>
 80114c0:	89fb      	ldrh	r3, [r7, #14]
 80114c2:	2b43      	cmp	r3, #67	; 0x43
 80114c4:	d9ec      	bls.n	80114a0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80114c6:	89fb      	ldrh	r3, [r7, #14]
 80114c8:	33f0      	adds	r3, #240	; 0xf0
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	4619      	mov	r1, r3
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f7f7 fdd6 	bl	8009080 <pbuf_realloc>
}
 80114d4:	bf00      	nop
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d017      	beq.n	801151a <dhcp_supplied_address+0x3e>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d013      	beq.n	801151a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	795b      	ldrb	r3, [r3, #5]
 80114fc:	2b0a      	cmp	r3, #10
 80114fe:	d007      	beq.n	8011510 <dhcp_supplied_address+0x34>
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	795b      	ldrb	r3, [r3, #5]
 8011504:	2b05      	cmp	r3, #5
 8011506:	d003      	beq.n	8011510 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801150c:	2b04      	cmp	r3, #4
 801150e:	d101      	bne.n	8011514 <dhcp_supplied_address+0x38>
 8011510:	2301      	movs	r3, #1
 8011512:	e000      	b.n	8011516 <dhcp_supplied_address+0x3a>
 8011514:	2300      	movs	r3, #0
 8011516:	b2db      	uxtb	r3, r3
 8011518:	e000      	b.n	801151c <dhcp_supplied_address+0x40>
  }
  return 0;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3714      	adds	r7, #20
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr

08011528 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011530:	4915      	ldr	r1, [pc, #84]	; (8011588 <etharp_free_entry+0x60>)
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	4613      	mov	r3, r2
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	4413      	add	r3, r2
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	440b      	add	r3, r1
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d013      	beq.n	801156c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011544:	4910      	ldr	r1, [pc, #64]	; (8011588 <etharp_free_entry+0x60>)
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	4613      	mov	r3, r2
 801154a:	005b      	lsls	r3, r3, #1
 801154c:	4413      	add	r3, r2
 801154e:	00db      	lsls	r3, r3, #3
 8011550:	440b      	add	r3, r1
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	4618      	mov	r0, r3
 8011556:	f7f7 ff19 	bl	800938c <pbuf_free>
    arp_table[i].q = NULL;
 801155a:	490b      	ldr	r1, [pc, #44]	; (8011588 <etharp_free_entry+0x60>)
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	4613      	mov	r3, r2
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	4413      	add	r3, r2
 8011564:	00db      	lsls	r3, r3, #3
 8011566:	440b      	add	r3, r1
 8011568:	2200      	movs	r2, #0
 801156a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801156c:	4906      	ldr	r1, [pc, #24]	; (8011588 <etharp_free_entry+0x60>)
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	4613      	mov	r3, r2
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	4413      	add	r3, r2
 8011576:	00db      	lsls	r3, r3, #3
 8011578:	440b      	add	r3, r1
 801157a:	3314      	adds	r3, #20
 801157c:	2200      	movs	r2, #0
 801157e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011580:	bf00      	nop
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	2001098c 	.word	0x2001098c

0801158c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011592:	2300      	movs	r3, #0
 8011594:	607b      	str	r3, [r7, #4]
 8011596:	e096      	b.n	80116c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011598:	494f      	ldr	r1, [pc, #316]	; (80116d8 <etharp_tmr+0x14c>)
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	4613      	mov	r3, r2
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	4413      	add	r3, r2
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	440b      	add	r3, r1
 80115a6:	3314      	adds	r3, #20
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80115ac:	78fb      	ldrb	r3, [r7, #3]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f000 8086 	beq.w	80116c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80115b4:	4948      	ldr	r1, [pc, #288]	; (80116d8 <etharp_tmr+0x14c>)
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	4613      	mov	r3, r2
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	4413      	add	r3, r2
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	440b      	add	r3, r1
 80115c2:	3312      	adds	r3, #18
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	3301      	adds	r3, #1
 80115c8:	b298      	uxth	r0, r3
 80115ca:	4943      	ldr	r1, [pc, #268]	; (80116d8 <etharp_tmr+0x14c>)
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	4613      	mov	r3, r2
 80115d0:	005b      	lsls	r3, r3, #1
 80115d2:	4413      	add	r3, r2
 80115d4:	00db      	lsls	r3, r3, #3
 80115d6:	440b      	add	r3, r1
 80115d8:	3312      	adds	r3, #18
 80115da:	4602      	mov	r2, r0
 80115dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80115de:	493e      	ldr	r1, [pc, #248]	; (80116d8 <etharp_tmr+0x14c>)
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	4613      	mov	r3, r2
 80115e4:	005b      	lsls	r3, r3, #1
 80115e6:	4413      	add	r3, r2
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	440b      	add	r3, r1
 80115ec:	3312      	adds	r3, #18
 80115ee:	881b      	ldrh	r3, [r3, #0]
 80115f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80115f4:	d215      	bcs.n	8011622 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80115f6:	4938      	ldr	r1, [pc, #224]	; (80116d8 <etharp_tmr+0x14c>)
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	4613      	mov	r3, r2
 80115fc:	005b      	lsls	r3, r3, #1
 80115fe:	4413      	add	r3, r2
 8011600:	00db      	lsls	r3, r3, #3
 8011602:	440b      	add	r3, r1
 8011604:	3314      	adds	r3, #20
 8011606:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011608:	2b01      	cmp	r3, #1
 801160a:	d10e      	bne.n	801162a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801160c:	4932      	ldr	r1, [pc, #200]	; (80116d8 <etharp_tmr+0x14c>)
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	4613      	mov	r3, r2
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	4413      	add	r3, r2
 8011616:	00db      	lsls	r3, r3, #3
 8011618:	440b      	add	r3, r1
 801161a:	3312      	adds	r3, #18
 801161c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801161e:	2b04      	cmp	r3, #4
 8011620:	d903      	bls.n	801162a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7ff ff80 	bl	8011528 <etharp_free_entry>
 8011628:	e04a      	b.n	80116c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801162a:	492b      	ldr	r1, [pc, #172]	; (80116d8 <etharp_tmr+0x14c>)
 801162c:	687a      	ldr	r2, [r7, #4]
 801162e:	4613      	mov	r3, r2
 8011630:	005b      	lsls	r3, r3, #1
 8011632:	4413      	add	r3, r2
 8011634:	00db      	lsls	r3, r3, #3
 8011636:	440b      	add	r3, r1
 8011638:	3314      	adds	r3, #20
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	2b03      	cmp	r3, #3
 801163e:	d10a      	bne.n	8011656 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011640:	4925      	ldr	r1, [pc, #148]	; (80116d8 <etharp_tmr+0x14c>)
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	4613      	mov	r3, r2
 8011646:	005b      	lsls	r3, r3, #1
 8011648:	4413      	add	r3, r2
 801164a:	00db      	lsls	r3, r3, #3
 801164c:	440b      	add	r3, r1
 801164e:	3314      	adds	r3, #20
 8011650:	2204      	movs	r2, #4
 8011652:	701a      	strb	r2, [r3, #0]
 8011654:	e034      	b.n	80116c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011656:	4920      	ldr	r1, [pc, #128]	; (80116d8 <etharp_tmr+0x14c>)
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	4613      	mov	r3, r2
 801165c:	005b      	lsls	r3, r3, #1
 801165e:	4413      	add	r3, r2
 8011660:	00db      	lsls	r3, r3, #3
 8011662:	440b      	add	r3, r1
 8011664:	3314      	adds	r3, #20
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	2b04      	cmp	r3, #4
 801166a:	d10a      	bne.n	8011682 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801166c:	491a      	ldr	r1, [pc, #104]	; (80116d8 <etharp_tmr+0x14c>)
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	4613      	mov	r3, r2
 8011672:	005b      	lsls	r3, r3, #1
 8011674:	4413      	add	r3, r2
 8011676:	00db      	lsls	r3, r3, #3
 8011678:	440b      	add	r3, r1
 801167a:	3314      	adds	r3, #20
 801167c:	2202      	movs	r2, #2
 801167e:	701a      	strb	r2, [r3, #0]
 8011680:	e01e      	b.n	80116c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011682:	4915      	ldr	r1, [pc, #84]	; (80116d8 <etharp_tmr+0x14c>)
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	4613      	mov	r3, r2
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	4413      	add	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	440b      	add	r3, r1
 8011690:	3314      	adds	r3, #20
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	2b01      	cmp	r3, #1
 8011696:	d113      	bne.n	80116c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011698:	490f      	ldr	r1, [pc, #60]	; (80116d8 <etharp_tmr+0x14c>)
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	4613      	mov	r3, r2
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	4413      	add	r3, r2
 80116a2:	00db      	lsls	r3, r3, #3
 80116a4:	440b      	add	r3, r1
 80116a6:	3308      	adds	r3, #8
 80116a8:	6818      	ldr	r0, [r3, #0]
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	4613      	mov	r3, r2
 80116ae:	005b      	lsls	r3, r3, #1
 80116b0:	4413      	add	r3, r2
 80116b2:	00db      	lsls	r3, r3, #3
 80116b4:	4a08      	ldr	r2, [pc, #32]	; (80116d8 <etharp_tmr+0x14c>)
 80116b6:	4413      	add	r3, r2
 80116b8:	3304      	adds	r3, #4
 80116ba:	4619      	mov	r1, r3
 80116bc:	f000 fe72 	bl	80123a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	3301      	adds	r3, #1
 80116c4:	607b      	str	r3, [r7, #4]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b09      	cmp	r3, #9
 80116ca:	f77f af65 	ble.w	8011598 <etharp_tmr+0xc>
      }
    }
  }
}
 80116ce:	bf00      	nop
 80116d0:	bf00      	nop
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	2001098c 	.word	0x2001098c

080116dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b08a      	sub	sp, #40	; 0x28
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	460b      	mov	r3, r1
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80116ea:	230a      	movs	r3, #10
 80116ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80116ee:	230a      	movs	r3, #10
 80116f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80116f2:	230a      	movs	r3, #10
 80116f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80116fa:	230a      	movs	r3, #10
 80116fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80116fe:	2300      	movs	r3, #0
 8011700:	83bb      	strh	r3, [r7, #28]
 8011702:	2300      	movs	r3, #0
 8011704:	837b      	strh	r3, [r7, #26]
 8011706:	2300      	movs	r3, #0
 8011708:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801170a:	2300      	movs	r3, #0
 801170c:	843b      	strh	r3, [r7, #32]
 801170e:	e0ae      	b.n	801186e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011714:	49a6      	ldr	r1, [pc, #664]	; (80119b0 <etharp_find_entry+0x2d4>)
 8011716:	4613      	mov	r3, r2
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	4413      	add	r3, r2
 801171c:	00db      	lsls	r3, r3, #3
 801171e:	440b      	add	r3, r1
 8011720:	3314      	adds	r3, #20
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011726:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801172a:	2b0a      	cmp	r3, #10
 801172c:	d105      	bne.n	801173a <etharp_find_entry+0x5e>
 801172e:	7dfb      	ldrb	r3, [r7, #23]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d102      	bne.n	801173a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011734:	8c3b      	ldrh	r3, [r7, #32]
 8011736:	847b      	strh	r3, [r7, #34]	; 0x22
 8011738:	e095      	b.n	8011866 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801173a:	7dfb      	ldrb	r3, [r7, #23]
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 8092 	beq.w	8011866 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011742:	7dfb      	ldrb	r3, [r7, #23]
 8011744:	2b01      	cmp	r3, #1
 8011746:	d009      	beq.n	801175c <etharp_find_entry+0x80>
 8011748:	7dfb      	ldrb	r3, [r7, #23]
 801174a:	2b01      	cmp	r3, #1
 801174c:	d806      	bhi.n	801175c <etharp_find_entry+0x80>
 801174e:	4b99      	ldr	r3, [pc, #612]	; (80119b4 <etharp_find_entry+0x2d8>)
 8011750:	f240 1223 	movw	r2, #291	; 0x123
 8011754:	4998      	ldr	r1, [pc, #608]	; (80119b8 <etharp_find_entry+0x2dc>)
 8011756:	4899      	ldr	r0, [pc, #612]	; (80119bc <etharp_find_entry+0x2e0>)
 8011758:	f002 fcbc 	bl	80140d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d020      	beq.n	80117a4 <etharp_find_entry+0xc8>
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	6819      	ldr	r1, [r3, #0]
 8011766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801176a:	4891      	ldr	r0, [pc, #580]	; (80119b0 <etharp_find_entry+0x2d4>)
 801176c:	4613      	mov	r3, r2
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	4413      	add	r3, r2
 8011772:	00db      	lsls	r3, r3, #3
 8011774:	4403      	add	r3, r0
 8011776:	3304      	adds	r3, #4
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4299      	cmp	r1, r3
 801177c:	d112      	bne.n	80117a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d00c      	beq.n	801179e <etharp_find_entry+0xc2>
 8011784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011788:	4989      	ldr	r1, [pc, #548]	; (80119b0 <etharp_find_entry+0x2d4>)
 801178a:	4613      	mov	r3, r2
 801178c:	005b      	lsls	r3, r3, #1
 801178e:	4413      	add	r3, r2
 8011790:	00db      	lsls	r3, r3, #3
 8011792:	440b      	add	r3, r1
 8011794:	3308      	adds	r3, #8
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	429a      	cmp	r2, r3
 801179c:	d102      	bne.n	80117a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801179e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80117a2:	e100      	b.n	80119a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80117a4:	7dfb      	ldrb	r3, [r7, #23]
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d140      	bne.n	801182c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80117aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117ae:	4980      	ldr	r1, [pc, #512]	; (80119b0 <etharp_find_entry+0x2d4>)
 80117b0:	4613      	mov	r3, r2
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	4413      	add	r3, r2
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	440b      	add	r3, r1
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d01a      	beq.n	80117f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80117c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117c4:	497a      	ldr	r1, [pc, #488]	; (80119b0 <etharp_find_entry+0x2d4>)
 80117c6:	4613      	mov	r3, r2
 80117c8:	005b      	lsls	r3, r3, #1
 80117ca:	4413      	add	r3, r2
 80117cc:	00db      	lsls	r3, r3, #3
 80117ce:	440b      	add	r3, r1
 80117d0:	3312      	adds	r3, #18
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	8bba      	ldrh	r2, [r7, #28]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d845      	bhi.n	8011866 <etharp_find_entry+0x18a>
            old_queue = i;
 80117da:	8c3b      	ldrh	r3, [r7, #32]
 80117dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80117de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117e2:	4973      	ldr	r1, [pc, #460]	; (80119b0 <etharp_find_entry+0x2d4>)
 80117e4:	4613      	mov	r3, r2
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	4413      	add	r3, r2
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	440b      	add	r3, r1
 80117ee:	3312      	adds	r3, #18
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	83bb      	strh	r3, [r7, #28]
 80117f4:	e037      	b.n	8011866 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80117f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117fa:	496d      	ldr	r1, [pc, #436]	; (80119b0 <etharp_find_entry+0x2d4>)
 80117fc:	4613      	mov	r3, r2
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	4413      	add	r3, r2
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	440b      	add	r3, r1
 8011806:	3312      	adds	r3, #18
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	8b7a      	ldrh	r2, [r7, #26]
 801180c:	429a      	cmp	r2, r3
 801180e:	d82a      	bhi.n	8011866 <etharp_find_entry+0x18a>
            old_pending = i;
 8011810:	8c3b      	ldrh	r3, [r7, #32]
 8011812:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011818:	4965      	ldr	r1, [pc, #404]	; (80119b0 <etharp_find_entry+0x2d4>)
 801181a:	4613      	mov	r3, r2
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	4413      	add	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	440b      	add	r3, r1
 8011824:	3312      	adds	r3, #18
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	837b      	strh	r3, [r7, #26]
 801182a:	e01c      	b.n	8011866 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801182c:	7dfb      	ldrb	r3, [r7, #23]
 801182e:	2b01      	cmp	r3, #1
 8011830:	d919      	bls.n	8011866 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011836:	495e      	ldr	r1, [pc, #376]	; (80119b0 <etharp_find_entry+0x2d4>)
 8011838:	4613      	mov	r3, r2
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	4413      	add	r3, r2
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	440b      	add	r3, r1
 8011842:	3312      	adds	r3, #18
 8011844:	881b      	ldrh	r3, [r3, #0]
 8011846:	8b3a      	ldrh	r2, [r7, #24]
 8011848:	429a      	cmp	r2, r3
 801184a:	d80c      	bhi.n	8011866 <etharp_find_entry+0x18a>
            old_stable = i;
 801184c:	8c3b      	ldrh	r3, [r7, #32]
 801184e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011854:	4956      	ldr	r1, [pc, #344]	; (80119b0 <etharp_find_entry+0x2d4>)
 8011856:	4613      	mov	r3, r2
 8011858:	005b      	lsls	r3, r3, #1
 801185a:	4413      	add	r3, r2
 801185c:	00db      	lsls	r3, r3, #3
 801185e:	440b      	add	r3, r1
 8011860:	3312      	adds	r3, #18
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011866:	8c3b      	ldrh	r3, [r7, #32]
 8011868:	3301      	adds	r3, #1
 801186a:	b29b      	uxth	r3, r3
 801186c:	843b      	strh	r3, [r7, #32]
 801186e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011872:	2b09      	cmp	r3, #9
 8011874:	f77f af4c 	ble.w	8011710 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011878:	7afb      	ldrb	r3, [r7, #11]
 801187a:	f003 0302 	and.w	r3, r3, #2
 801187e:	2b00      	cmp	r3, #0
 8011880:	d108      	bne.n	8011894 <etharp_find_entry+0x1b8>
 8011882:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011886:	2b0a      	cmp	r3, #10
 8011888:	d107      	bne.n	801189a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801188a:	7afb      	ldrb	r3, [r7, #11]
 801188c:	f003 0301 	and.w	r3, r3, #1
 8011890:	2b00      	cmp	r3, #0
 8011892:	d102      	bne.n	801189a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011894:	f04f 33ff 	mov.w	r3, #4294967295
 8011898:	e085      	b.n	80119a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801189a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801189e:	2b09      	cmp	r3, #9
 80118a0:	dc02      	bgt.n	80118a8 <etharp_find_entry+0x1cc>
    i = empty;
 80118a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118a4:	843b      	strh	r3, [r7, #32]
 80118a6:	e039      	b.n	801191c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80118a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80118ac:	2b09      	cmp	r3, #9
 80118ae:	dc14      	bgt.n	80118da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80118b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80118b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118b8:	493d      	ldr	r1, [pc, #244]	; (80119b0 <etharp_find_entry+0x2d4>)
 80118ba:	4613      	mov	r3, r2
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	4413      	add	r3, r2
 80118c0:	00db      	lsls	r3, r3, #3
 80118c2:	440b      	add	r3, r1
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d018      	beq.n	80118fc <etharp_find_entry+0x220>
 80118ca:	4b3a      	ldr	r3, [pc, #232]	; (80119b4 <etharp_find_entry+0x2d8>)
 80118cc:	f240 126d 	movw	r2, #365	; 0x16d
 80118d0:	493b      	ldr	r1, [pc, #236]	; (80119c0 <etharp_find_entry+0x2e4>)
 80118d2:	483a      	ldr	r0, [pc, #232]	; (80119bc <etharp_find_entry+0x2e0>)
 80118d4:	f002 fbfe 	bl	80140d4 <iprintf>
 80118d8:	e010      	b.n	80118fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80118da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80118de:	2b09      	cmp	r3, #9
 80118e0:	dc02      	bgt.n	80118e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80118e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118e4:	843b      	strh	r3, [r7, #32]
 80118e6:	e009      	b.n	80118fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80118e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80118ec:	2b09      	cmp	r3, #9
 80118ee:	dc02      	bgt.n	80118f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80118f0:	8bfb      	ldrh	r3, [r7, #30]
 80118f2:	843b      	strh	r3, [r7, #32]
 80118f4:	e002      	b.n	80118fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80118f6:	f04f 33ff 	mov.w	r3, #4294967295
 80118fa:	e054      	b.n	80119a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80118fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011900:	2b09      	cmp	r3, #9
 8011902:	dd06      	ble.n	8011912 <etharp_find_entry+0x236>
 8011904:	4b2b      	ldr	r3, [pc, #172]	; (80119b4 <etharp_find_entry+0x2d8>)
 8011906:	f240 127f 	movw	r2, #383	; 0x17f
 801190a:	492e      	ldr	r1, [pc, #184]	; (80119c4 <etharp_find_entry+0x2e8>)
 801190c:	482b      	ldr	r0, [pc, #172]	; (80119bc <etharp_find_entry+0x2e0>)
 801190e:	f002 fbe1 	bl	80140d4 <iprintf>
    etharp_free_entry(i);
 8011912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011916:	4618      	mov	r0, r3
 8011918:	f7ff fe06 	bl	8011528 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801191c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011920:	2b09      	cmp	r3, #9
 8011922:	dd06      	ble.n	8011932 <etharp_find_entry+0x256>
 8011924:	4b23      	ldr	r3, [pc, #140]	; (80119b4 <etharp_find_entry+0x2d8>)
 8011926:	f240 1283 	movw	r2, #387	; 0x183
 801192a:	4926      	ldr	r1, [pc, #152]	; (80119c4 <etharp_find_entry+0x2e8>)
 801192c:	4823      	ldr	r0, [pc, #140]	; (80119bc <etharp_find_entry+0x2e0>)
 801192e:	f002 fbd1 	bl	80140d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011932:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011936:	491e      	ldr	r1, [pc, #120]	; (80119b0 <etharp_find_entry+0x2d4>)
 8011938:	4613      	mov	r3, r2
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	4413      	add	r3, r2
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	440b      	add	r3, r1
 8011942:	3314      	adds	r3, #20
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d006      	beq.n	8011958 <etharp_find_entry+0x27c>
 801194a:	4b1a      	ldr	r3, [pc, #104]	; (80119b4 <etharp_find_entry+0x2d8>)
 801194c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011950:	491d      	ldr	r1, [pc, #116]	; (80119c8 <etharp_find_entry+0x2ec>)
 8011952:	481a      	ldr	r0, [pc, #104]	; (80119bc <etharp_find_entry+0x2e0>)
 8011954:	f002 fbbe 	bl	80140d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d00b      	beq.n	8011976 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801195e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6819      	ldr	r1, [r3, #0]
 8011966:	4812      	ldr	r0, [pc, #72]	; (80119b0 <etharp_find_entry+0x2d4>)
 8011968:	4613      	mov	r3, r2
 801196a:	005b      	lsls	r3, r3, #1
 801196c:	4413      	add	r3, r2
 801196e:	00db      	lsls	r3, r3, #3
 8011970:	4403      	add	r3, r0
 8011972:	3304      	adds	r3, #4
 8011974:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801197a:	490d      	ldr	r1, [pc, #52]	; (80119b0 <etharp_find_entry+0x2d4>)
 801197c:	4613      	mov	r3, r2
 801197e:	005b      	lsls	r3, r3, #1
 8011980:	4413      	add	r3, r2
 8011982:	00db      	lsls	r3, r3, #3
 8011984:	440b      	add	r3, r1
 8011986:	3312      	adds	r3, #18
 8011988:	2200      	movs	r2, #0
 801198a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801198c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011990:	4907      	ldr	r1, [pc, #28]	; (80119b0 <etharp_find_entry+0x2d4>)
 8011992:	4613      	mov	r3, r2
 8011994:	005b      	lsls	r3, r3, #1
 8011996:	4413      	add	r3, r2
 8011998:	00db      	lsls	r3, r3, #3
 801199a:	440b      	add	r3, r1
 801199c:	3308      	adds	r3, #8
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80119a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3728      	adds	r7, #40	; 0x28
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	2001098c 	.word	0x2001098c
 80119b4:	08017774 	.word	0x08017774
 80119b8:	080177ac 	.word	0x080177ac
 80119bc:	080177ec 	.word	0x080177ec
 80119c0:	08017814 	.word	0x08017814
 80119c4:	0801782c 	.word	0x0801782c
 80119c8:	08017840 	.word	0x08017840

080119cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b088      	sub	sp, #32
 80119d0:	af02      	add	r7, sp, #8
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119e0:	2b06      	cmp	r3, #6
 80119e2:	d006      	beq.n	80119f2 <etharp_update_arp_entry+0x26>
 80119e4:	4b48      	ldr	r3, [pc, #288]	; (8011b08 <etharp_update_arp_entry+0x13c>)
 80119e6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80119ea:	4948      	ldr	r1, [pc, #288]	; (8011b0c <etharp_update_arp_entry+0x140>)
 80119ec:	4848      	ldr	r0, [pc, #288]	; (8011b10 <etharp_update_arp_entry+0x144>)
 80119ee:	f002 fb71 	bl	80140d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d012      	beq.n	8011a1e <etharp_update_arp_entry+0x52>
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00e      	beq.n	8011a1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	68f9      	ldr	r1, [r7, #12]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f001 f920 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8011a0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d105      	bne.n	8011a1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a1a:	2be0      	cmp	r3, #224	; 0xe0
 8011a1c:	d102      	bne.n	8011a24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011a1e:	f06f 030f 	mvn.w	r3, #15
 8011a22:	e06c      	b.n	8011afe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011a24:	78fb      	ldrb	r3, [r7, #3]
 8011a26:	68fa      	ldr	r2, [r7, #12]
 8011a28:	4619      	mov	r1, r3
 8011a2a:	68b8      	ldr	r0, [r7, #8]
 8011a2c:	f7ff fe56 	bl	80116dc <etharp_find_entry>
 8011a30:	4603      	mov	r3, r0
 8011a32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	da02      	bge.n	8011a42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011a3c:	8afb      	ldrh	r3, [r7, #22]
 8011a3e:	b25b      	sxtb	r3, r3
 8011a40:	e05d      	b.n	8011afe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011a42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a46:	4933      	ldr	r1, [pc, #204]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011a48:	4613      	mov	r3, r2
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	4413      	add	r3, r2
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	3314      	adds	r3, #20
 8011a54:	2202      	movs	r2, #2
 8011a56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011a58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a5c:	492d      	ldr	r1, [pc, #180]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011a5e:	4613      	mov	r3, r2
 8011a60:	005b      	lsls	r3, r3, #1
 8011a62:	4413      	add	r3, r2
 8011a64:	00db      	lsls	r3, r3, #3
 8011a66:	440b      	add	r3, r1
 8011a68:	3308      	adds	r3, #8
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011a6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a72:	4613      	mov	r3, r2
 8011a74:	005b      	lsls	r3, r3, #1
 8011a76:	4413      	add	r3, r2
 8011a78:	00db      	lsls	r3, r3, #3
 8011a7a:	3308      	adds	r3, #8
 8011a7c:	4a25      	ldr	r2, [pc, #148]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011a7e:	4413      	add	r3, r2
 8011a80:	3304      	adds	r3, #4
 8011a82:	2206      	movs	r2, #6
 8011a84:	6879      	ldr	r1, [r7, #4]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f002 fa79 	bl	8013f7e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011a8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a90:	4920      	ldr	r1, [pc, #128]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011a92:	4613      	mov	r3, r2
 8011a94:	005b      	lsls	r3, r3, #1
 8011a96:	4413      	add	r3, r2
 8011a98:	00db      	lsls	r3, r3, #3
 8011a9a:	440b      	add	r3, r1
 8011a9c:	3312      	adds	r3, #18
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011aa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011aa6:	491b      	ldr	r1, [pc, #108]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	4413      	add	r3, r2
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	440b      	add	r3, r1
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d021      	beq.n	8011afc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011abc:	4915      	ldr	r1, [pc, #84]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011abe:	4613      	mov	r3, r2
 8011ac0:	005b      	lsls	r3, r3, #1
 8011ac2:	4413      	add	r3, r2
 8011ac4:	00db      	lsls	r3, r3, #3
 8011ac6:	440b      	add	r3, r1
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011acc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ad0:	4910      	ldr	r1, [pc, #64]	; (8011b14 <etharp_update_arp_entry+0x148>)
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	4413      	add	r3, r2
 8011ad8:	00db      	lsls	r3, r3, #3
 8011ada:	440b      	add	r3, r1
 8011adc:	2200      	movs	r2, #0
 8011ade:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6939      	ldr	r1, [r7, #16]
 8011af0:	68f8      	ldr	r0, [r7, #12]
 8011af2:	f001 ffb9 	bl	8013a68 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011af6:	6938      	ldr	r0, [r7, #16]
 8011af8:	f7f7 fc48 	bl	800938c <pbuf_free>
  }
  return ERR_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	08017774 	.word	0x08017774
 8011b0c:	0801786c 	.word	0x0801786c
 8011b10:	080177ec 	.word	0x080177ec
 8011b14:	2001098c 	.word	0x2001098c

08011b18 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b20:	2300      	movs	r3, #0
 8011b22:	60fb      	str	r3, [r7, #12]
 8011b24:	e01e      	b.n	8011b64 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011b26:	4913      	ldr	r1, [pc, #76]	; (8011b74 <etharp_cleanup_netif+0x5c>)
 8011b28:	68fa      	ldr	r2, [r7, #12]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	005b      	lsls	r3, r3, #1
 8011b2e:	4413      	add	r3, r2
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	440b      	add	r3, r1
 8011b34:	3314      	adds	r3, #20
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011b3a:	7afb      	ldrb	r3, [r7, #11]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d00e      	beq.n	8011b5e <etharp_cleanup_netif+0x46>
 8011b40:	490c      	ldr	r1, [pc, #48]	; (8011b74 <etharp_cleanup_netif+0x5c>)
 8011b42:	68fa      	ldr	r2, [r7, #12]
 8011b44:	4613      	mov	r3, r2
 8011b46:	005b      	lsls	r3, r3, #1
 8011b48:	4413      	add	r3, r2
 8011b4a:	00db      	lsls	r3, r3, #3
 8011b4c:	440b      	add	r3, r1
 8011b4e:	3308      	adds	r3, #8
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d102      	bne.n	8011b5e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f7ff fce5 	bl	8011528 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	3301      	adds	r3, #1
 8011b62:	60fb      	str	r3, [r7, #12]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2b09      	cmp	r3, #9
 8011b68:	dddd      	ble.n	8011b26 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011b6a:	bf00      	nop
 8011b6c:	bf00      	nop
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	2001098c 	.word	0x2001098c

08011b78 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011b78:	b5b0      	push	{r4, r5, r7, lr}
 8011b7a:	b08a      	sub	sp, #40	; 0x28
 8011b7c:	af04      	add	r7, sp, #16
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d107      	bne.n	8011b98 <etharp_input+0x20>
 8011b88:	4b3f      	ldr	r3, [pc, #252]	; (8011c88 <etharp_input+0x110>)
 8011b8a:	f240 228a 	movw	r2, #650	; 0x28a
 8011b8e:	493f      	ldr	r1, [pc, #252]	; (8011c8c <etharp_input+0x114>)
 8011b90:	483f      	ldr	r0, [pc, #252]	; (8011c90 <etharp_input+0x118>)
 8011b92:	f002 fa9f 	bl	80140d4 <iprintf>
 8011b96:	e074      	b.n	8011c82 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	881b      	ldrh	r3, [r3, #0]
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ba8:	d10c      	bne.n	8011bc4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011bae:	2b06      	cmp	r3, #6
 8011bb0:	d108      	bne.n	8011bc4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011bb6:	2b04      	cmp	r3, #4
 8011bb8:	d104      	bne.n	8011bc4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	885b      	ldrh	r3, [r3, #2]
 8011bbe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011bc0:	2b08      	cmp	r3, #8
 8011bc2:	d003      	beq.n	8011bcc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7f7 fbe1 	bl	800938c <pbuf_free>
    return;
 8011bca:	e05a      	b.n	8011c82 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	330e      	adds	r3, #14
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	3318      	adds	r3, #24
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	3304      	adds	r3, #4
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d102      	bne.n	8011bec <etharp_input+0x74>
    for_us = 0;
 8011be6:	2300      	movs	r3, #0
 8011be8:	75fb      	strb	r3, [r7, #23]
 8011bea:	e009      	b.n	8011c00 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	3304      	adds	r3, #4
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	bf0c      	ite	eq
 8011bf8:	2301      	moveq	r3, #1
 8011bfa:	2300      	movne	r3, #0
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	f103 0208 	add.w	r2, r3, #8
 8011c06:	7dfb      	ldrb	r3, [r7, #23]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d001      	beq.n	8011c10 <etharp_input+0x98>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e000      	b.n	8011c12 <etharp_input+0x9a>
 8011c10:	2302      	movs	r3, #2
 8011c12:	f107 010c 	add.w	r1, r7, #12
 8011c16:	6838      	ldr	r0, [r7, #0]
 8011c18:	f7ff fed8 	bl	80119cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	88db      	ldrh	r3, [r3, #6]
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c26:	d003      	beq.n	8011c30 <etharp_input+0xb8>
 8011c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c2c:	d01e      	beq.n	8011c6c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011c2e:	e025      	b.n	8011c7c <etharp_input+0x104>
      if (for_us) {
 8011c30:	7dfb      	ldrb	r3, [r7, #23]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d021      	beq.n	8011c7a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011c4c:	693a      	ldr	r2, [r7, #16]
 8011c4e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011c50:	2102      	movs	r1, #2
 8011c52:	9103      	str	r1, [sp, #12]
 8011c54:	f107 010c 	add.w	r1, r7, #12
 8011c58:	9102      	str	r1, [sp, #8]
 8011c5a:	9201      	str	r2, [sp, #4]
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	462b      	mov	r3, r5
 8011c60:	4622      	mov	r2, r4
 8011c62:	4601      	mov	r1, r0
 8011c64:	6838      	ldr	r0, [r7, #0]
 8011c66:	f000 faef 	bl	8012248 <etharp_raw>
      break;
 8011c6a:	e006      	b.n	8011c7a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011c6c:	f107 030c 	add.w	r3, r7, #12
 8011c70:	4619      	mov	r1, r3
 8011c72:	6838      	ldr	r0, [r7, #0]
 8011c74:	f7fe f9fc 	bl	8010070 <dhcp_arp_reply>
      break;
 8011c78:	e000      	b.n	8011c7c <etharp_input+0x104>
      break;
 8011c7a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7f7 fb85 	bl	800938c <pbuf_free>
}
 8011c82:	3718      	adds	r7, #24
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bdb0      	pop	{r4, r5, r7, pc}
 8011c88:	08017774 	.word	0x08017774
 8011c8c:	080178c4 	.word	0x080178c4
 8011c90:	080177ec 	.word	0x080177ec

08011c94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b086      	sub	sp, #24
 8011c98:	af02      	add	r7, sp, #8
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011ca2:	79fa      	ldrb	r2, [r7, #7]
 8011ca4:	4944      	ldr	r1, [pc, #272]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	005b      	lsls	r3, r3, #1
 8011caa:	4413      	add	r3, r2
 8011cac:	00db      	lsls	r3, r3, #3
 8011cae:	440b      	add	r3, r1
 8011cb0:	3314      	adds	r3, #20
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d806      	bhi.n	8011cc6 <etharp_output_to_arp_index+0x32>
 8011cb8:	4b40      	ldr	r3, [pc, #256]	; (8011dbc <etharp_output_to_arp_index+0x128>)
 8011cba:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011cbe:	4940      	ldr	r1, [pc, #256]	; (8011dc0 <etharp_output_to_arp_index+0x12c>)
 8011cc0:	4840      	ldr	r0, [pc, #256]	; (8011dc4 <etharp_output_to_arp_index+0x130>)
 8011cc2:	f002 fa07 	bl	80140d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011cc6:	79fa      	ldrb	r2, [r7, #7]
 8011cc8:	493b      	ldr	r1, [pc, #236]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011cca:	4613      	mov	r3, r2
 8011ccc:	005b      	lsls	r3, r3, #1
 8011cce:	4413      	add	r3, r2
 8011cd0:	00db      	lsls	r3, r3, #3
 8011cd2:	440b      	add	r3, r1
 8011cd4:	3314      	adds	r3, #20
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	d153      	bne.n	8011d84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011cdc:	79fa      	ldrb	r2, [r7, #7]
 8011cde:	4936      	ldr	r1, [pc, #216]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	005b      	lsls	r3, r3, #1
 8011ce4:	4413      	add	r3, r2
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	440b      	add	r3, r1
 8011cea:	3312      	adds	r3, #18
 8011cec:	881b      	ldrh	r3, [r3, #0]
 8011cee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011cf2:	d919      	bls.n	8011d28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011cf4:	79fa      	ldrb	r2, [r7, #7]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	4413      	add	r3, r2
 8011cfc:	00db      	lsls	r3, r3, #3
 8011cfe:	4a2e      	ldr	r2, [pc, #184]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d00:	4413      	add	r3, r2
 8011d02:	3304      	adds	r3, #4
 8011d04:	4619      	mov	r1, r3
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	f000 fb4c 	bl	80123a4 <etharp_request>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d138      	bne.n	8011d84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d12:	79fa      	ldrb	r2, [r7, #7]
 8011d14:	4928      	ldr	r1, [pc, #160]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d16:	4613      	mov	r3, r2
 8011d18:	005b      	lsls	r3, r3, #1
 8011d1a:	4413      	add	r3, r2
 8011d1c:	00db      	lsls	r3, r3, #3
 8011d1e:	440b      	add	r3, r1
 8011d20:	3314      	adds	r3, #20
 8011d22:	2203      	movs	r2, #3
 8011d24:	701a      	strb	r2, [r3, #0]
 8011d26:	e02d      	b.n	8011d84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011d28:	79fa      	ldrb	r2, [r7, #7]
 8011d2a:	4923      	ldr	r1, [pc, #140]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	005b      	lsls	r3, r3, #1
 8011d30:	4413      	add	r3, r2
 8011d32:	00db      	lsls	r3, r3, #3
 8011d34:	440b      	add	r3, r1
 8011d36:	3312      	adds	r3, #18
 8011d38:	881b      	ldrh	r3, [r3, #0]
 8011d3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011d3e:	d321      	bcc.n	8011d84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011d40:	79fa      	ldrb	r2, [r7, #7]
 8011d42:	4613      	mov	r3, r2
 8011d44:	005b      	lsls	r3, r3, #1
 8011d46:	4413      	add	r3, r2
 8011d48:	00db      	lsls	r3, r3, #3
 8011d4a:	4a1b      	ldr	r2, [pc, #108]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d4c:	4413      	add	r3, r2
 8011d4e:	1d19      	adds	r1, r3, #4
 8011d50:	79fa      	ldrb	r2, [r7, #7]
 8011d52:	4613      	mov	r3, r2
 8011d54:	005b      	lsls	r3, r3, #1
 8011d56:	4413      	add	r3, r2
 8011d58:	00db      	lsls	r3, r3, #3
 8011d5a:	3308      	adds	r3, #8
 8011d5c:	4a16      	ldr	r2, [pc, #88]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d5e:	4413      	add	r3, r2
 8011d60:	3304      	adds	r3, #4
 8011d62:	461a      	mov	r2, r3
 8011d64:	68f8      	ldr	r0, [r7, #12]
 8011d66:	f000 fafb 	bl	8012360 <etharp_request_dst>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d109      	bne.n	8011d84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d70:	79fa      	ldrb	r2, [r7, #7]
 8011d72:	4911      	ldr	r1, [pc, #68]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d74:	4613      	mov	r3, r2
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	4413      	add	r3, r2
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	440b      	add	r3, r1
 8011d7e:	3314      	adds	r3, #20
 8011d80:	2203      	movs	r2, #3
 8011d82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011d8a:	79fa      	ldrb	r2, [r7, #7]
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	005b      	lsls	r3, r3, #1
 8011d90:	4413      	add	r3, r2
 8011d92:	00db      	lsls	r3, r3, #3
 8011d94:	3308      	adds	r3, #8
 8011d96:	4a08      	ldr	r2, [pc, #32]	; (8011db8 <etharp_output_to_arp_index+0x124>)
 8011d98:	4413      	add	r3, r2
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011da0:	9200      	str	r2, [sp, #0]
 8011da2:	460a      	mov	r2, r1
 8011da4:	68b9      	ldr	r1, [r7, #8]
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f001 fe5e 	bl	8013a68 <ethernet_output>
 8011dac:	4603      	mov	r3, r0
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	2001098c 	.word	0x2001098c
 8011dbc:	08017774 	.word	0x08017774
 8011dc0:	080178e4 	.word	0x080178e4
 8011dc4:	080177ec 	.word	0x080177ec

08011dc8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b08a      	sub	sp, #40	; 0x28
 8011dcc:	af02      	add	r7, sp, #8
 8011dce:	60f8      	str	r0, [r7, #12]
 8011dd0:	60b9      	str	r1, [r7, #8]
 8011dd2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d106      	bne.n	8011dec <etharp_output+0x24>
 8011dde:	4b73      	ldr	r3, [pc, #460]	; (8011fac <etharp_output+0x1e4>)
 8011de0:	f240 321e 	movw	r2, #798	; 0x31e
 8011de4:	4972      	ldr	r1, [pc, #456]	; (8011fb0 <etharp_output+0x1e8>)
 8011de6:	4873      	ldr	r0, [pc, #460]	; (8011fb4 <etharp_output+0x1ec>)
 8011de8:	f002 f974 	bl	80140d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d106      	bne.n	8011e00 <etharp_output+0x38>
 8011df2:	4b6e      	ldr	r3, [pc, #440]	; (8011fac <etharp_output+0x1e4>)
 8011df4:	f240 321f 	movw	r2, #799	; 0x31f
 8011df8:	496f      	ldr	r1, [pc, #444]	; (8011fb8 <etharp_output+0x1f0>)
 8011dfa:	486e      	ldr	r0, [pc, #440]	; (8011fb4 <etharp_output+0x1ec>)
 8011dfc:	f002 f96a 	bl	80140d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d106      	bne.n	8011e14 <etharp_output+0x4c>
 8011e06:	4b69      	ldr	r3, [pc, #420]	; (8011fac <etharp_output+0x1e4>)
 8011e08:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011e0c:	496b      	ldr	r1, [pc, #428]	; (8011fbc <etharp_output+0x1f4>)
 8011e0e:	4869      	ldr	r0, [pc, #420]	; (8011fb4 <etharp_output+0x1ec>)
 8011e10:	f002 f960 	bl	80140d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	68f9      	ldr	r1, [r7, #12]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f000 ff16 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d002      	beq.n	8011e2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011e26:	4b66      	ldr	r3, [pc, #408]	; (8011fc0 <etharp_output+0x1f8>)
 8011e28:	61fb      	str	r3, [r7, #28]
 8011e2a:	e0af      	b.n	8011f8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e34:	2be0      	cmp	r3, #224	; 0xe0
 8011e36:	d118      	bne.n	8011e6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011e38:	2301      	movs	r3, #1
 8011e3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011e40:	235e      	movs	r3, #94	; 0x5e
 8011e42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3301      	adds	r3, #1
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	3302      	adds	r3, #2
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	3303      	adds	r3, #3
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011e62:	f107 0310 	add.w	r3, r7, #16
 8011e66:	61fb      	str	r3, [r7, #28]
 8011e68:	e090      	b.n	8011f8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	3304      	adds	r3, #4
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	405a      	eors	r2, r3
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	3308      	adds	r3, #8
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4013      	ands	r3, r2
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d012      	beq.n	8011ea8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011e88:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d00b      	beq.n	8011ea8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	330c      	adds	r3, #12
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d003      	beq.n	8011ea2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	330c      	adds	r3, #12
 8011e9e:	61bb      	str	r3, [r7, #24]
 8011ea0:	e002      	b.n	8011ea8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011ea2:	f06f 0303 	mvn.w	r3, #3
 8011ea6:	e07d      	b.n	8011fa4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011ea8:	4b46      	ldr	r3, [pc, #280]	; (8011fc4 <etharp_output+0x1fc>)
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	4619      	mov	r1, r3
 8011eae:	4a46      	ldr	r2, [pc, #280]	; (8011fc8 <etharp_output+0x200>)
 8011eb0:	460b      	mov	r3, r1
 8011eb2:	005b      	lsls	r3, r3, #1
 8011eb4:	440b      	add	r3, r1
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	4413      	add	r3, r2
 8011eba:	3314      	adds	r3, #20
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d925      	bls.n	8011f0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011ec2:	4b40      	ldr	r3, [pc, #256]	; (8011fc4 <etharp_output+0x1fc>)
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	4a3f      	ldr	r2, [pc, #252]	; (8011fc8 <etharp_output+0x200>)
 8011eca:	460b      	mov	r3, r1
 8011ecc:	005b      	lsls	r3, r3, #1
 8011ece:	440b      	add	r3, r1
 8011ed0:	00db      	lsls	r3, r3, #3
 8011ed2:	4413      	add	r3, r2
 8011ed4:	3308      	adds	r3, #8
 8011ed6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011ed8:	68fa      	ldr	r2, [r7, #12]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d117      	bne.n	8011f0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	4b38      	ldr	r3, [pc, #224]	; (8011fc4 <etharp_output+0x1fc>)
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	4937      	ldr	r1, [pc, #220]	; (8011fc8 <etharp_output+0x200>)
 8011eea:	4603      	mov	r3, r0
 8011eec:	005b      	lsls	r3, r3, #1
 8011eee:	4403      	add	r3, r0
 8011ef0:	00db      	lsls	r3, r3, #3
 8011ef2:	440b      	add	r3, r1
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d108      	bne.n	8011f0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011efc:	4b31      	ldr	r3, [pc, #196]	; (8011fc4 <etharp_output+0x1fc>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	461a      	mov	r2, r3
 8011f02:	68b9      	ldr	r1, [r7, #8]
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f7ff fec5 	bl	8011c94 <etharp_output_to_arp_index>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	e04a      	b.n	8011fa4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f0e:	2300      	movs	r3, #0
 8011f10:	75fb      	strb	r3, [r7, #23]
 8011f12:	e031      	b.n	8011f78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f14:	7dfa      	ldrb	r2, [r7, #23]
 8011f16:	492c      	ldr	r1, [pc, #176]	; (8011fc8 <etharp_output+0x200>)
 8011f18:	4613      	mov	r3, r2
 8011f1a:	005b      	lsls	r3, r3, #1
 8011f1c:	4413      	add	r3, r2
 8011f1e:	00db      	lsls	r3, r3, #3
 8011f20:	440b      	add	r3, r1
 8011f22:	3314      	adds	r3, #20
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d923      	bls.n	8011f72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011f2a:	7dfa      	ldrb	r2, [r7, #23]
 8011f2c:	4926      	ldr	r1, [pc, #152]	; (8011fc8 <etharp_output+0x200>)
 8011f2e:	4613      	mov	r3, r2
 8011f30:	005b      	lsls	r3, r3, #1
 8011f32:	4413      	add	r3, r2
 8011f34:	00db      	lsls	r3, r3, #3
 8011f36:	440b      	add	r3, r1
 8011f38:	3308      	adds	r3, #8
 8011f3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f3c:	68fa      	ldr	r2, [r7, #12]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d117      	bne.n	8011f72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	6819      	ldr	r1, [r3, #0]
 8011f46:	7dfa      	ldrb	r2, [r7, #23]
 8011f48:	481f      	ldr	r0, [pc, #124]	; (8011fc8 <etharp_output+0x200>)
 8011f4a:	4613      	mov	r3, r2
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	4413      	add	r3, r2
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	4403      	add	r3, r0
 8011f54:	3304      	adds	r3, #4
 8011f56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011f58:	4299      	cmp	r1, r3
 8011f5a:	d10a      	bne.n	8011f72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011f5c:	4a19      	ldr	r2, [pc, #100]	; (8011fc4 <etharp_output+0x1fc>)
 8011f5e:	7dfb      	ldrb	r3, [r7, #23]
 8011f60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
 8011f64:	461a      	mov	r2, r3
 8011f66:	68b9      	ldr	r1, [r7, #8]
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f7ff fe93 	bl	8011c94 <etharp_output_to_arp_index>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	e018      	b.n	8011fa4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f72:	7dfb      	ldrb	r3, [r7, #23]
 8011f74:	3301      	adds	r3, #1
 8011f76:	75fb      	strb	r3, [r7, #23]
 8011f78:	7dfb      	ldrb	r3, [r7, #23]
 8011f7a:	2b09      	cmp	r3, #9
 8011f7c:	d9ca      	bls.n	8011f14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011f7e:	68ba      	ldr	r2, [r7, #8]
 8011f80:	69b9      	ldr	r1, [r7, #24]
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f000 f822 	bl	8011fcc <etharp_query>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	e00b      	b.n	8011fa4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	68b9      	ldr	r1, [r7, #8]
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f001 fd63 	bl	8013a68 <ethernet_output>
 8011fa2:	4603      	mov	r3, r0
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3720      	adds	r7, #32
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	08017774 	.word	0x08017774
 8011fb0:	080178c4 	.word	0x080178c4
 8011fb4:	080177ec 	.word	0x080177ec
 8011fb8:	08017914 	.word	0x08017914
 8011fbc:	080178b4 	.word	0x080178b4
 8011fc0:	08017f84 	.word	0x08017f84
 8011fc4:	20010a7c 	.word	0x20010a7c
 8011fc8:	2001098c 	.word	0x2001098c

08011fcc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b08c      	sub	sp, #48	; 0x30
 8011fd0:	af02      	add	r7, sp, #8
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	332a      	adds	r3, #42	; 0x2a
 8011fdc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011fde:	23ff      	movs	r3, #255	; 0xff
 8011fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	68f9      	ldr	r1, [r7, #12]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f000 fe2c 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d10c      	bne.n	8012014 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012002:	2be0      	cmp	r3, #224	; 0xe0
 8012004:	d006      	beq.n	8012014 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d003      	beq.n	8012014 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d102      	bne.n	801201a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012014:	f06f 030f 	mvn.w	r3, #15
 8012018:	e101      	b.n	801221e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	2101      	movs	r1, #1
 801201e:	68b8      	ldr	r0, [r7, #8]
 8012020:	f7ff fb5c 	bl	80116dc <etharp_find_entry>
 8012024:	4603      	mov	r3, r0
 8012026:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012028:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801202c:	2b00      	cmp	r3, #0
 801202e:	da02      	bge.n	8012036 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012030:	8a7b      	ldrh	r3, [r7, #18]
 8012032:	b25b      	sxtb	r3, r3
 8012034:	e0f3      	b.n	801221e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012036:	8a7b      	ldrh	r3, [r7, #18]
 8012038:	2b7e      	cmp	r3, #126	; 0x7e
 801203a:	d906      	bls.n	801204a <etharp_query+0x7e>
 801203c:	4b7a      	ldr	r3, [pc, #488]	; (8012228 <etharp_query+0x25c>)
 801203e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012042:	497a      	ldr	r1, [pc, #488]	; (801222c <etharp_query+0x260>)
 8012044:	487a      	ldr	r0, [pc, #488]	; (8012230 <etharp_query+0x264>)
 8012046:	f002 f845 	bl	80140d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801204a:	8a7b      	ldrh	r3, [r7, #18]
 801204c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801204e:	7c7a      	ldrb	r2, [r7, #17]
 8012050:	4978      	ldr	r1, [pc, #480]	; (8012234 <etharp_query+0x268>)
 8012052:	4613      	mov	r3, r2
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	4413      	add	r3, r2
 8012058:	00db      	lsls	r3, r3, #3
 801205a:	440b      	add	r3, r1
 801205c:	3314      	adds	r3, #20
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d115      	bne.n	8012090 <etharp_query+0xc4>
    is_new_entry = 1;
 8012064:	2301      	movs	r3, #1
 8012066:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012068:	7c7a      	ldrb	r2, [r7, #17]
 801206a:	4972      	ldr	r1, [pc, #456]	; (8012234 <etharp_query+0x268>)
 801206c:	4613      	mov	r3, r2
 801206e:	005b      	lsls	r3, r3, #1
 8012070:	4413      	add	r3, r2
 8012072:	00db      	lsls	r3, r3, #3
 8012074:	440b      	add	r3, r1
 8012076:	3314      	adds	r3, #20
 8012078:	2201      	movs	r2, #1
 801207a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801207c:	7c7a      	ldrb	r2, [r7, #17]
 801207e:	496d      	ldr	r1, [pc, #436]	; (8012234 <etharp_query+0x268>)
 8012080:	4613      	mov	r3, r2
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	4413      	add	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	440b      	add	r3, r1
 801208a:	3308      	adds	r3, #8
 801208c:	68fa      	ldr	r2, [r7, #12]
 801208e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012090:	7c7a      	ldrb	r2, [r7, #17]
 8012092:	4968      	ldr	r1, [pc, #416]	; (8012234 <etharp_query+0x268>)
 8012094:	4613      	mov	r3, r2
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	4413      	add	r3, r2
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	440b      	add	r3, r1
 801209e:	3314      	adds	r3, #20
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d011      	beq.n	80120ca <etharp_query+0xfe>
 80120a6:	7c7a      	ldrb	r2, [r7, #17]
 80120a8:	4962      	ldr	r1, [pc, #392]	; (8012234 <etharp_query+0x268>)
 80120aa:	4613      	mov	r3, r2
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	4413      	add	r3, r2
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	440b      	add	r3, r1
 80120b4:	3314      	adds	r3, #20
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d806      	bhi.n	80120ca <etharp_query+0xfe>
 80120bc:	4b5a      	ldr	r3, [pc, #360]	; (8012228 <etharp_query+0x25c>)
 80120be:	f240 32cd 	movw	r2, #973	; 0x3cd
 80120c2:	495d      	ldr	r1, [pc, #372]	; (8012238 <etharp_query+0x26c>)
 80120c4:	485a      	ldr	r0, [pc, #360]	; (8012230 <etharp_query+0x264>)
 80120c6:	f002 f805 	bl	80140d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d102      	bne.n	80120d6 <etharp_query+0x10a>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d10c      	bne.n	80120f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80120d6:	68b9      	ldr	r1, [r7, #8]
 80120d8:	68f8      	ldr	r0, [r7, #12]
 80120da:	f000 f963 	bl	80123a4 <etharp_request>
 80120de:	4603      	mov	r3, r0
 80120e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d102      	bne.n	80120f0 <etharp_query+0x124>
      return result;
 80120ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120ee:	e096      	b.n	801221e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d106      	bne.n	8012104 <etharp_query+0x138>
 80120f6:	4b4c      	ldr	r3, [pc, #304]	; (8012228 <etharp_query+0x25c>)
 80120f8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80120fc:	494f      	ldr	r1, [pc, #316]	; (801223c <etharp_query+0x270>)
 80120fe:	484c      	ldr	r0, [pc, #304]	; (8012230 <etharp_query+0x264>)
 8012100:	f001 ffe8 	bl	80140d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012104:	7c7a      	ldrb	r2, [r7, #17]
 8012106:	494b      	ldr	r1, [pc, #300]	; (8012234 <etharp_query+0x268>)
 8012108:	4613      	mov	r3, r2
 801210a:	005b      	lsls	r3, r3, #1
 801210c:	4413      	add	r3, r2
 801210e:	00db      	lsls	r3, r3, #3
 8012110:	440b      	add	r3, r1
 8012112:	3314      	adds	r3, #20
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	2b01      	cmp	r3, #1
 8012118:	d917      	bls.n	801214a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801211a:	4a49      	ldr	r2, [pc, #292]	; (8012240 <etharp_query+0x274>)
 801211c:	7c7b      	ldrb	r3, [r7, #17]
 801211e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012120:	7c7a      	ldrb	r2, [r7, #17]
 8012122:	4613      	mov	r3, r2
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	4413      	add	r3, r2
 8012128:	00db      	lsls	r3, r3, #3
 801212a:	3308      	adds	r3, #8
 801212c:	4a41      	ldr	r2, [pc, #260]	; (8012234 <etharp_query+0x268>)
 801212e:	4413      	add	r3, r2
 8012130:	3304      	adds	r3, #4
 8012132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012136:	9200      	str	r2, [sp, #0]
 8012138:	697a      	ldr	r2, [r7, #20]
 801213a:	6879      	ldr	r1, [r7, #4]
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	f001 fc93 	bl	8013a68 <ethernet_output>
 8012142:	4603      	mov	r3, r0
 8012144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012148:	e067      	b.n	801221a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801214a:	7c7a      	ldrb	r2, [r7, #17]
 801214c:	4939      	ldr	r1, [pc, #228]	; (8012234 <etharp_query+0x268>)
 801214e:	4613      	mov	r3, r2
 8012150:	005b      	lsls	r3, r3, #1
 8012152:	4413      	add	r3, r2
 8012154:	00db      	lsls	r3, r3, #3
 8012156:	440b      	add	r3, r1
 8012158:	3314      	adds	r3, #20
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d15c      	bne.n	801221a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012160:	2300      	movs	r3, #0
 8012162:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012168:	e01c      	b.n	80121a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	895a      	ldrh	r2, [r3, #10]
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	891b      	ldrh	r3, [r3, #8]
 8012172:	429a      	cmp	r2, r3
 8012174:	d10a      	bne.n	801218c <etharp_query+0x1c0>
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d006      	beq.n	801218c <etharp_query+0x1c0>
 801217e:	4b2a      	ldr	r3, [pc, #168]	; (8012228 <etharp_query+0x25c>)
 8012180:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012184:	492f      	ldr	r1, [pc, #188]	; (8012244 <etharp_query+0x278>)
 8012186:	482a      	ldr	r0, [pc, #168]	; (8012230 <etharp_query+0x264>)
 8012188:	f001 ffa4 	bl	80140d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	7b1b      	ldrb	r3, [r3, #12]
 8012190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012194:	2b00      	cmp	r3, #0
 8012196:	d002      	beq.n	801219e <etharp_query+0x1d2>
        copy_needed = 1;
 8012198:	2301      	movs	r3, #1
 801219a:	61bb      	str	r3, [r7, #24]
        break;
 801219c:	e005      	b.n	80121aa <etharp_query+0x1de>
      }
      p = p->next;
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d1df      	bne.n	801216a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80121aa:	69bb      	ldr	r3, [r7, #24]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d007      	beq.n	80121c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80121b6:	200e      	movs	r0, #14
 80121b8:	f7f7 fb60 	bl	800987c <pbuf_clone>
 80121bc:	61f8      	str	r0, [r7, #28]
 80121be:	e004      	b.n	80121ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80121c4:	69f8      	ldr	r0, [r7, #28]
 80121c6:	f7f7 f987 	bl	80094d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d021      	beq.n	8012214 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80121d0:	7c7a      	ldrb	r2, [r7, #17]
 80121d2:	4918      	ldr	r1, [pc, #96]	; (8012234 <etharp_query+0x268>)
 80121d4:	4613      	mov	r3, r2
 80121d6:	005b      	lsls	r3, r3, #1
 80121d8:	4413      	add	r3, r2
 80121da:	00db      	lsls	r3, r3, #3
 80121dc:	440b      	add	r3, r1
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00a      	beq.n	80121fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80121e4:	7c7a      	ldrb	r2, [r7, #17]
 80121e6:	4913      	ldr	r1, [pc, #76]	; (8012234 <etharp_query+0x268>)
 80121e8:	4613      	mov	r3, r2
 80121ea:	005b      	lsls	r3, r3, #1
 80121ec:	4413      	add	r3, r2
 80121ee:	00db      	lsls	r3, r3, #3
 80121f0:	440b      	add	r3, r1
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f7 f8c9 	bl	800938c <pbuf_free>
      }
      arp_table[i].q = p;
 80121fa:	7c7a      	ldrb	r2, [r7, #17]
 80121fc:	490d      	ldr	r1, [pc, #52]	; (8012234 <etharp_query+0x268>)
 80121fe:	4613      	mov	r3, r2
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	4413      	add	r3, r2
 8012204:	00db      	lsls	r3, r3, #3
 8012206:	440b      	add	r3, r1
 8012208:	69fa      	ldr	r2, [r7, #28]
 801220a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012212:	e002      	b.n	801221a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012214:	23ff      	movs	r3, #255	; 0xff
 8012216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801221a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801221e:	4618      	mov	r0, r3
 8012220:	3728      	adds	r7, #40	; 0x28
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	08017774 	.word	0x08017774
 801222c:	08017920 	.word	0x08017920
 8012230:	080177ec 	.word	0x080177ec
 8012234:	2001098c 	.word	0x2001098c
 8012238:	08017930 	.word	0x08017930
 801223c:	08017914 	.word	0x08017914
 8012240:	20010a7c 	.word	0x20010a7c
 8012244:	08017958 	.word	0x08017958

08012248 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b08a      	sub	sp, #40	; 0x28
 801224c:	af02      	add	r7, sp, #8
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
 8012254:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012256:	2300      	movs	r3, #0
 8012258:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d106      	bne.n	801226e <etharp_raw+0x26>
 8012260:	4b3a      	ldr	r3, [pc, #232]	; (801234c <etharp_raw+0x104>)
 8012262:	f240 4257 	movw	r2, #1111	; 0x457
 8012266:	493a      	ldr	r1, [pc, #232]	; (8012350 <etharp_raw+0x108>)
 8012268:	483a      	ldr	r0, [pc, #232]	; (8012354 <etharp_raw+0x10c>)
 801226a:	f001 ff33 	bl	80140d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801226e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012272:	211c      	movs	r1, #28
 8012274:	200e      	movs	r0, #14
 8012276:	f7f6 fda5 	bl	8008dc4 <pbuf_alloc>
 801227a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d102      	bne.n	8012288 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012282:	f04f 33ff 	mov.w	r3, #4294967295
 8012286:	e05d      	b.n	8012344 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	895b      	ldrh	r3, [r3, #10]
 801228c:	2b1b      	cmp	r3, #27
 801228e:	d806      	bhi.n	801229e <etharp_raw+0x56>
 8012290:	4b2e      	ldr	r3, [pc, #184]	; (801234c <etharp_raw+0x104>)
 8012292:	f240 4262 	movw	r2, #1122	; 0x462
 8012296:	4930      	ldr	r1, [pc, #192]	; (8012358 <etharp_raw+0x110>)
 8012298:	482e      	ldr	r0, [pc, #184]	; (8012354 <etharp_raw+0x10c>)
 801229a:	f001 ff1b 	bl	80140d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80122a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7f5 fc72 	bl	8007b90 <lwip_htons>
 80122ac:	4603      	mov	r3, r0
 80122ae:	461a      	mov	r2, r3
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122ba:	2b06      	cmp	r3, #6
 80122bc:	d006      	beq.n	80122cc <etharp_raw+0x84>
 80122be:	4b23      	ldr	r3, [pc, #140]	; (801234c <etharp_raw+0x104>)
 80122c0:	f240 4269 	movw	r2, #1129	; 0x469
 80122c4:	4925      	ldr	r1, [pc, #148]	; (801235c <etharp_raw+0x114>)
 80122c6:	4823      	ldr	r0, [pc, #140]	; (8012354 <etharp_raw+0x10c>)
 80122c8:	f001 ff04 	bl	80140d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	3308      	adds	r3, #8
 80122d0:	2206      	movs	r2, #6
 80122d2:	6839      	ldr	r1, [r7, #0]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f001 fe52 	bl	8013f7e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	3312      	adds	r3, #18
 80122de:	2206      	movs	r2, #6
 80122e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80122e2:	4618      	mov	r0, r3
 80122e4:	f001 fe4b 	bl	8013f7e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	330e      	adds	r3, #14
 80122ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122ee:	6812      	ldr	r2, [r2, #0]
 80122f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	3318      	adds	r3, #24
 80122f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122f8:	6812      	ldr	r2, [r2, #0]
 80122fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	2200      	movs	r2, #0
 8012300:	701a      	strb	r2, [r3, #0]
 8012302:	2200      	movs	r2, #0
 8012304:	f042 0201 	orr.w	r2, r2, #1
 8012308:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	2200      	movs	r2, #0
 801230e:	f042 0208 	orr.w	r2, r2, #8
 8012312:	709a      	strb	r2, [r3, #2]
 8012314:	2200      	movs	r2, #0
 8012316:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	2206      	movs	r2, #6
 801231c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	2204      	movs	r2, #4
 8012322:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012324:	f640 0306 	movw	r3, #2054	; 0x806
 8012328:	9300      	str	r3, [sp, #0]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	69b9      	ldr	r1, [r7, #24]
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f001 fb99 	bl	8013a68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012336:	69b8      	ldr	r0, [r7, #24]
 8012338:	f7f7 f828 	bl	800938c <pbuf_free>
  p = NULL;
 801233c:	2300      	movs	r3, #0
 801233e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012340:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012344:	4618      	mov	r0, r3
 8012346:	3720      	adds	r7, #32
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	08017774 	.word	0x08017774
 8012350:	080178c4 	.word	0x080178c4
 8012354:	080177ec 	.word	0x080177ec
 8012358:	08017974 	.word	0x08017974
 801235c:	080179a8 	.word	0x080179a8

08012360 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b088      	sub	sp, #32
 8012364:	af04      	add	r7, sp, #16
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801237c:	2201      	movs	r2, #1
 801237e:	9203      	str	r2, [sp, #12]
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	9202      	str	r2, [sp, #8]
 8012384:	4a06      	ldr	r2, [pc, #24]	; (80123a0 <etharp_request_dst+0x40>)
 8012386:	9201      	str	r2, [sp, #4]
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	4603      	mov	r3, r0
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f7ff ff5a 	bl	8012248 <etharp_raw>
 8012394:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012396:	4618      	mov	r0, r3
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	08017f8c 	.word	0x08017f8c

080123a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80123ae:	4a05      	ldr	r2, [pc, #20]	; (80123c4 <etharp_request+0x20>)
 80123b0:	6839      	ldr	r1, [r7, #0]
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff ffd4 	bl	8012360 <etharp_request_dst>
 80123b8:	4603      	mov	r3, r0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	08017f84 	.word	0x08017f84

080123c8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b08e      	sub	sp, #56	; 0x38
 80123cc:	af04      	add	r7, sp, #16
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80123d2:	4b79      	ldr	r3, [pc, #484]	; (80125b8 <icmp_input+0x1f0>)
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80123d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	f003 030f 	and.w	r3, r3, #15
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80123e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123ea:	2b13      	cmp	r3, #19
 80123ec:	f240 80cd 	bls.w	801258a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	895b      	ldrh	r3, [r3, #10]
 80123f4:	2b03      	cmp	r3, #3
 80123f6:	f240 80ca 	bls.w	801258e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012404:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 80b7 	beq.w	801257c <icmp_input+0x1b4>
 801240e:	2b08      	cmp	r3, #8
 8012410:	f040 80b7 	bne.w	8012582 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012414:	4b69      	ldr	r3, [pc, #420]	; (80125bc <icmp_input+0x1f4>)
 8012416:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012418:	4b67      	ldr	r3, [pc, #412]	; (80125b8 <icmp_input+0x1f0>)
 801241a:	695b      	ldr	r3, [r3, #20]
 801241c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012420:	2be0      	cmp	r3, #224	; 0xe0
 8012422:	f000 80bb 	beq.w	801259c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012426:	4b64      	ldr	r3, [pc, #400]	; (80125b8 <icmp_input+0x1f0>)
 8012428:	695b      	ldr	r3, [r3, #20]
 801242a:	4a63      	ldr	r2, [pc, #396]	; (80125b8 <icmp_input+0x1f0>)
 801242c:	6812      	ldr	r2, [r2, #0]
 801242e:	4611      	mov	r1, r2
 8012430:	4618      	mov	r0, r3
 8012432:	f000 fc0b 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	f040 80b1 	bne.w	80125a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	891b      	ldrh	r3, [r3, #8]
 8012442:	2b07      	cmp	r3, #7
 8012444:	f240 80a5 	bls.w	8012592 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801244a:	330e      	adds	r3, #14
 801244c:	4619      	mov	r1, r3
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f7f6 ff06 	bl	8009260 <pbuf_add_header>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d04b      	beq.n	80124f2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	891a      	ldrh	r2, [r3, #8]
 801245e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012460:	4413      	add	r3, r2
 8012462:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	891b      	ldrh	r3, [r3, #8]
 8012468:	8b7a      	ldrh	r2, [r7, #26]
 801246a:	429a      	cmp	r2, r3
 801246c:	f0c0 809a 	bcc.w	80125a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012470:	8b7b      	ldrh	r3, [r7, #26]
 8012472:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012476:	4619      	mov	r1, r3
 8012478:	200e      	movs	r0, #14
 801247a:	f7f6 fca3 	bl	8008dc4 <pbuf_alloc>
 801247e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	2b00      	cmp	r3, #0
 8012484:	f000 8090 	beq.w	80125a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	895b      	ldrh	r3, [r3, #10]
 801248c:	461a      	mov	r2, r3
 801248e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012490:	3308      	adds	r3, #8
 8012492:	429a      	cmp	r2, r3
 8012494:	d203      	bcs.n	801249e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012496:	6978      	ldr	r0, [r7, #20]
 8012498:	f7f6 ff78 	bl	800938c <pbuf_free>
          goto icmperr;
 801249c:	e085      	b.n	80125aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80124a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124a6:	4618      	mov	r0, r3
 80124a8:	f001 fd69 	bl	8013f7e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80124ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124ae:	4619      	mov	r1, r3
 80124b0:	6978      	ldr	r0, [r7, #20]
 80124b2:	f7f6 fee5 	bl	8009280 <pbuf_remove_header>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d009      	beq.n	80124d0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80124bc:	4b40      	ldr	r3, [pc, #256]	; (80125c0 <icmp_input+0x1f8>)
 80124be:	22b6      	movs	r2, #182	; 0xb6
 80124c0:	4940      	ldr	r1, [pc, #256]	; (80125c4 <icmp_input+0x1fc>)
 80124c2:	4841      	ldr	r0, [pc, #260]	; (80125c8 <icmp_input+0x200>)
 80124c4:	f001 fe06 	bl	80140d4 <iprintf>
          pbuf_free(r);
 80124c8:	6978      	ldr	r0, [r7, #20]
 80124ca:	f7f6 ff5f 	bl	800938c <pbuf_free>
          goto icmperr;
 80124ce:	e06c      	b.n	80125aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	6978      	ldr	r0, [r7, #20]
 80124d4:	f7f7 f88e 	bl	80095f4 <pbuf_copy>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d003      	beq.n	80124e6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80124de:	6978      	ldr	r0, [r7, #20]
 80124e0:	f7f6 ff54 	bl	800938c <pbuf_free>
          goto icmperr;
 80124e4:	e061      	b.n	80125aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7f6 ff50 	bl	800938c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	607b      	str	r3, [r7, #4]
 80124f0:	e00f      	b.n	8012512 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80124f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124f4:	330e      	adds	r3, #14
 80124f6:	4619      	mov	r1, r3
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7f6 fec1 	bl	8009280 <pbuf_remove_header>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d006      	beq.n	8012512 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012504:	4b2e      	ldr	r3, [pc, #184]	; (80125c0 <icmp_input+0x1f8>)
 8012506:	22c7      	movs	r2, #199	; 0xc7
 8012508:	4930      	ldr	r1, [pc, #192]	; (80125cc <icmp_input+0x204>)
 801250a:	482f      	ldr	r0, [pc, #188]	; (80125c8 <icmp_input+0x200>)
 801250c:	f001 fde2 	bl	80140d4 <iprintf>
          goto icmperr;
 8012510:	e04b      	b.n	80125aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801251a:	4619      	mov	r1, r3
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7f6 fe9f 	bl	8009260 <pbuf_add_header>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d12b      	bne.n	8012580 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801252e:	69fb      	ldr	r3, [r7, #28]
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012536:	4b20      	ldr	r3, [pc, #128]	; (80125b8 <icmp_input+0x1f0>)
 8012538:	691a      	ldr	r2, [r3, #16]
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	2200      	movs	r2, #0
 8012542:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	2200      	movs	r2, #0
 8012548:	709a      	strb	r2, [r3, #2]
 801254a:	2200      	movs	r2, #0
 801254c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	22ff      	movs	r2, #255	; 0xff
 8012552:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2200      	movs	r2, #0
 8012558:	729a      	strb	r2, [r3, #10]
 801255a:	2200      	movs	r2, #0
 801255c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	9302      	str	r3, [sp, #8]
 8012562:	2301      	movs	r3, #1
 8012564:	9301      	str	r3, [sp, #4]
 8012566:	2300      	movs	r3, #0
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	23ff      	movs	r3, #255	; 0xff
 801256c:	2200      	movs	r2, #0
 801256e:	69f9      	ldr	r1, [r7, #28]
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fa93 	bl	8012a9c <ip4_output_if>
 8012576:	4603      	mov	r3, r0
 8012578:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801257a:	e001      	b.n	8012580 <icmp_input+0x1b8>
      break;
 801257c:	bf00      	nop
 801257e:	e000      	b.n	8012582 <icmp_input+0x1ba>
      break;
 8012580:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7f6 ff02 	bl	800938c <pbuf_free>
  return;
 8012588:	e013      	b.n	80125b2 <icmp_input+0x1ea>
    goto lenerr;
 801258a:	bf00      	nop
 801258c:	e002      	b.n	8012594 <icmp_input+0x1cc>
    goto lenerr;
 801258e:	bf00      	nop
 8012590:	e000      	b.n	8012594 <icmp_input+0x1cc>
        goto lenerr;
 8012592:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f7f6 fef9 	bl	800938c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801259a:	e00a      	b.n	80125b2 <icmp_input+0x1ea>
        goto icmperr;
 801259c:	bf00      	nop
 801259e:	e004      	b.n	80125aa <icmp_input+0x1e2>
        goto icmperr;
 80125a0:	bf00      	nop
 80125a2:	e002      	b.n	80125aa <icmp_input+0x1e2>
          goto icmperr;
 80125a4:	bf00      	nop
 80125a6:	e000      	b.n	80125aa <icmp_input+0x1e2>
          goto icmperr;
 80125a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7f6 feee 	bl	800938c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80125b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80125b2:	3728      	adds	r7, #40	; 0x28
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	2000d184 	.word	0x2000d184
 80125bc:	2000d198 	.word	0x2000d198
 80125c0:	080179ec 	.word	0x080179ec
 80125c4:	08017a24 	.word	0x08017a24
 80125c8:	08017a5c 	.word	0x08017a5c
 80125cc:	08017a84 	.word	0x08017a84

080125d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	460b      	mov	r3, r1
 80125da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80125dc:	78fb      	ldrb	r3, [r7, #3]
 80125de:	461a      	mov	r2, r3
 80125e0:	2103      	movs	r1, #3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 f814 	bl	8012610 <icmp_send_response>
}
 80125e8:	bf00      	nop
 80125ea:	3708      	adds	r7, #8
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	460b      	mov	r3, r1
 80125fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80125fc:	78fb      	ldrb	r3, [r7, #3]
 80125fe:	461a      	mov	r2, r3
 8012600:	210b      	movs	r1, #11
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f000 f804 	bl	8012610 <icmp_send_response>
}
 8012608:	bf00      	nop
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b08c      	sub	sp, #48	; 0x30
 8012614:	af04      	add	r7, sp, #16
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
 801261c:	4613      	mov	r3, r2
 801261e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012620:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012624:	2124      	movs	r1, #36	; 0x24
 8012626:	2022      	movs	r0, #34	; 0x22
 8012628:	f7f6 fbcc 	bl	8008dc4 <pbuf_alloc>
 801262c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d04c      	beq.n	80126ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	895b      	ldrh	r3, [r3, #10]
 8012638:	2b23      	cmp	r3, #35	; 0x23
 801263a:	d806      	bhi.n	801264a <icmp_send_response+0x3a>
 801263c:	4b26      	ldr	r3, [pc, #152]	; (80126d8 <icmp_send_response+0xc8>)
 801263e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012642:	4926      	ldr	r1, [pc, #152]	; (80126dc <icmp_send_response+0xcc>)
 8012644:	4826      	ldr	r0, [pc, #152]	; (80126e0 <icmp_send_response+0xd0>)
 8012646:	f001 fd45 	bl	80140d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012650:	69fb      	ldr	r3, [r7, #28]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	78fa      	ldrb	r2, [r7, #3]
 801265a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	78ba      	ldrb	r2, [r7, #2]
 8012660:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2200      	movs	r2, #0
 8012666:	711a      	strb	r2, [r3, #4]
 8012668:	2200      	movs	r2, #0
 801266a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	2200      	movs	r2, #0
 8012670:	719a      	strb	r2, [r3, #6]
 8012672:	2200      	movs	r2, #0
 8012674:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	f103 0008 	add.w	r0, r3, #8
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	221c      	movs	r2, #28
 8012684:	4619      	mov	r1, r3
 8012686:	f001 fc7a 	bl	8013f7e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012690:	f107 030c 	add.w	r3, r7, #12
 8012694:	4618      	mov	r0, r3
 8012696:	f000 f825 	bl	80126e4 <ip4_route>
 801269a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d011      	beq.n	80126c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	2200      	movs	r2, #0
 80126a6:	709a      	strb	r2, [r3, #2]
 80126a8:	2200      	movs	r2, #0
 80126aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80126ac:	f107 020c 	add.w	r2, r7, #12
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	9302      	str	r3, [sp, #8]
 80126b4:	2301      	movs	r3, #1
 80126b6:	9301      	str	r3, [sp, #4]
 80126b8:	2300      	movs	r3, #0
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	23ff      	movs	r3, #255	; 0xff
 80126be:	2100      	movs	r1, #0
 80126c0:	69f8      	ldr	r0, [r7, #28]
 80126c2:	f000 f9eb 	bl	8012a9c <ip4_output_if>
  }
  pbuf_free(q);
 80126c6:	69f8      	ldr	r0, [r7, #28]
 80126c8:	f7f6 fe60 	bl	800938c <pbuf_free>
 80126cc:	e000      	b.n	80126d0 <icmp_send_response+0xc0>
    return;
 80126ce:	bf00      	nop
}
 80126d0:	3720      	adds	r7, #32
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	080179ec 	.word	0x080179ec
 80126dc:	08017ab8 	.word	0x08017ab8
 80126e0:	08017a5c 	.word	0x08017a5c

080126e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b085      	sub	sp, #20
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80126ec:	4b33      	ldr	r3, [pc, #204]	; (80127bc <ip4_route+0xd8>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	60fb      	str	r3, [r7, #12]
 80126f2:	e036      	b.n	8012762 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	2b00      	cmp	r3, #0
 8012702:	d02b      	beq.n	801275c <ip4_route+0x78>
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801270a:	089b      	lsrs	r3, r3, #2
 801270c:	f003 0301 	and.w	r3, r3, #1
 8012710:	b2db      	uxtb	r3, r3
 8012712:	2b00      	cmp	r3, #0
 8012714:	d022      	beq.n	801275c <ip4_route+0x78>
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	3304      	adds	r3, #4
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d01d      	beq.n	801275c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	3304      	adds	r3, #4
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	405a      	eors	r2, r3
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	3308      	adds	r3, #8
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4013      	ands	r3, r2
 8012734:	2b00      	cmp	r3, #0
 8012736:	d101      	bne.n	801273c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	e038      	b.n	80127ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012742:	f003 0302 	and.w	r3, r3, #2
 8012746:	2b00      	cmp	r3, #0
 8012748:	d108      	bne.n	801275c <ip4_route+0x78>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	330c      	adds	r3, #12
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	429a      	cmp	r2, r3
 8012756:	d101      	bne.n	801275c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	e028      	b.n	80127ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	60fb      	str	r3, [r7, #12]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d1c5      	bne.n	80126f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012768:	4b15      	ldr	r3, [pc, #84]	; (80127c0 <ip4_route+0xdc>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d01a      	beq.n	80127a6 <ip4_route+0xc2>
 8012770:	4b13      	ldr	r3, [pc, #76]	; (80127c0 <ip4_route+0xdc>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	2b00      	cmp	r3, #0
 801277e:	d012      	beq.n	80127a6 <ip4_route+0xc2>
 8012780:	4b0f      	ldr	r3, [pc, #60]	; (80127c0 <ip4_route+0xdc>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012788:	f003 0304 	and.w	r3, r3, #4
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00a      	beq.n	80127a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012790:	4b0b      	ldr	r3, [pc, #44]	; (80127c0 <ip4_route+0xdc>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3304      	adds	r3, #4
 8012796:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012798:	2b00      	cmp	r3, #0
 801279a:	d004      	beq.n	80127a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	2b7f      	cmp	r3, #127	; 0x7f
 80127a4:	d101      	bne.n	80127aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	e001      	b.n	80127ae <ip4_route+0xca>
  }

  return netif_default;
 80127aa:	4b05      	ldr	r3, [pc, #20]	; (80127c0 <ip4_route+0xdc>)
 80127ac:	681b      	ldr	r3, [r3, #0]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3714      	adds	r7, #20
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	200108ec 	.word	0x200108ec
 80127c0:	200108f0 	.word	0x200108f0

080127c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127d2:	f003 0301 	and.w	r3, r3, #1
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d016      	beq.n	801280a <ip4_input_accept+0x46>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	3304      	adds	r3, #4
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d011      	beq.n	801280a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80127e6:	4b0b      	ldr	r3, [pc, #44]	; (8012814 <ip4_input_accept+0x50>)
 80127e8:	695a      	ldr	r2, [r3, #20]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	3304      	adds	r3, #4
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d008      	beq.n	8012806 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80127f4:	4b07      	ldr	r3, [pc, #28]	; (8012814 <ip4_input_accept+0x50>)
 80127f6:	695b      	ldr	r3, [r3, #20]
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 fa26 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8012800:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012802:	2b00      	cmp	r3, #0
 8012804:	d001      	beq.n	801280a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012806:	2301      	movs	r3, #1
 8012808:	e000      	b.n	801280c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801280a:	2300      	movs	r3, #0
}
 801280c:	4618      	mov	r0, r3
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}
 8012814:	2000d184 	.word	0x2000d184

08012818 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b088      	sub	sp, #32
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012822:	2301      	movs	r3, #1
 8012824:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	091b      	lsrs	r3, r3, #4
 8012832:	b2db      	uxtb	r3, r3
 8012834:	2b04      	cmp	r3, #4
 8012836:	d004      	beq.n	8012842 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f7f6 fda7 	bl	800938c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801283e:	2300      	movs	r3, #0
 8012840:	e123      	b.n	8012a8a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	f003 030f 	and.w	r3, r3, #15
 801284a:	b2db      	uxtb	r3, r3
 801284c:	009b      	lsls	r3, r3, #2
 801284e:	b2db      	uxtb	r3, r3
 8012850:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	885b      	ldrh	r3, [r3, #2]
 8012856:	b29b      	uxth	r3, r3
 8012858:	4618      	mov	r0, r3
 801285a:	f7f5 f999 	bl	8007b90 <lwip_htons>
 801285e:	4603      	mov	r3, r0
 8012860:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	891b      	ldrh	r3, [r3, #8]
 8012866:	8a3a      	ldrh	r2, [r7, #16]
 8012868:	429a      	cmp	r2, r3
 801286a:	d204      	bcs.n	8012876 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801286c:	8a3b      	ldrh	r3, [r7, #16]
 801286e:	4619      	mov	r1, r3
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7f6 fc05 	bl	8009080 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	895b      	ldrh	r3, [r3, #10]
 801287a:	8a7a      	ldrh	r2, [r7, #18]
 801287c:	429a      	cmp	r2, r3
 801287e:	d807      	bhi.n	8012890 <ip4_input+0x78>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	891b      	ldrh	r3, [r3, #8]
 8012884:	8a3a      	ldrh	r2, [r7, #16]
 8012886:	429a      	cmp	r2, r3
 8012888:	d802      	bhi.n	8012890 <ip4_input+0x78>
 801288a:	8a7b      	ldrh	r3, [r7, #18]
 801288c:	2b13      	cmp	r3, #19
 801288e:	d804      	bhi.n	801289a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f7f6 fd7b 	bl	800938c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012896:	2300      	movs	r3, #0
 8012898:	e0f7      	b.n	8012a8a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	691b      	ldr	r3, [r3, #16]
 801289e:	4a7d      	ldr	r2, [pc, #500]	; (8012a94 <ip4_input+0x27c>)
 80128a0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	68db      	ldr	r3, [r3, #12]
 80128a6:	4a7b      	ldr	r2, [pc, #492]	; (8012a94 <ip4_input+0x27c>)
 80128a8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80128aa:	4b7a      	ldr	r3, [pc, #488]	; (8012a94 <ip4_input+0x27c>)
 80128ac:	695b      	ldr	r3, [r3, #20]
 80128ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128b2:	2be0      	cmp	r3, #224	; 0xe0
 80128b4:	d112      	bne.n	80128dc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128bc:	f003 0301 	and.w	r3, r3, #1
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d007      	beq.n	80128d6 <ip4_input+0xbe>
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	3304      	adds	r3, #4
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <ip4_input+0xbe>
      netif = inp;
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	61bb      	str	r3, [r7, #24]
 80128d4:	e02a      	b.n	801292c <ip4_input+0x114>
    } else {
      netif = NULL;
 80128d6:	2300      	movs	r3, #0
 80128d8:	61bb      	str	r3, [r7, #24]
 80128da:	e027      	b.n	801292c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80128dc:	6838      	ldr	r0, [r7, #0]
 80128de:	f7ff ff71 	bl	80127c4 <ip4_input_accept>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d002      	beq.n	80128ee <ip4_input+0xd6>
      netif = inp;
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	61bb      	str	r3, [r7, #24]
 80128ec:	e01e      	b.n	801292c <ip4_input+0x114>
    } else {
      netif = NULL;
 80128ee:	2300      	movs	r3, #0
 80128f0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80128f2:	4b68      	ldr	r3, [pc, #416]	; (8012a94 <ip4_input+0x27c>)
 80128f4:	695b      	ldr	r3, [r3, #20]
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	2b7f      	cmp	r3, #127	; 0x7f
 80128fa:	d017      	beq.n	801292c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80128fc:	4b66      	ldr	r3, [pc, #408]	; (8012a98 <ip4_input+0x280>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	61bb      	str	r3, [r7, #24]
 8012902:	e00e      	b.n	8012922 <ip4_input+0x10a>
          if (netif == inp) {
 8012904:	69ba      	ldr	r2, [r7, #24]
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	429a      	cmp	r2, r3
 801290a:	d006      	beq.n	801291a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801290c:	69b8      	ldr	r0, [r7, #24]
 801290e:	f7ff ff59 	bl	80127c4 <ip4_input_accept>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d108      	bne.n	801292a <ip4_input+0x112>
 8012918:	e000      	b.n	801291c <ip4_input+0x104>
            continue;
 801291a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	61bb      	str	r3, [r7, #24]
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d1ed      	bne.n	8012904 <ip4_input+0xec>
 8012928:	e000      	b.n	801292c <ip4_input+0x114>
            break;
 801292a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d111      	bne.n	8012956 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	7a5b      	ldrb	r3, [r3, #9]
 8012936:	2b11      	cmp	r3, #17
 8012938:	d10d      	bne.n	8012956 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801293a:	8a7b      	ldrh	r3, [r7, #18]
 801293c:	69fa      	ldr	r2, [r7, #28]
 801293e:	4413      	add	r3, r2
 8012940:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	885b      	ldrh	r3, [r3, #2]
 8012946:	b29b      	uxth	r3, r3
 8012948:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801294c:	d103      	bne.n	8012956 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d017      	beq.n	801298c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801295c:	4b4d      	ldr	r3, [pc, #308]	; (8012a94 <ip4_input+0x27c>)
 801295e:	691b      	ldr	r3, [r3, #16]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d013      	beq.n	801298c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012964:	4b4b      	ldr	r3, [pc, #300]	; (8012a94 <ip4_input+0x27c>)
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	4618      	mov	r0, r3
 801296c:	f000 f96e 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8012970:	4603      	mov	r3, r0
 8012972:	2b00      	cmp	r3, #0
 8012974:	d105      	bne.n	8012982 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012976:	4b47      	ldr	r3, [pc, #284]	; (8012a94 <ip4_input+0x27c>)
 8012978:	691b      	ldr	r3, [r3, #16]
 801297a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801297e:	2be0      	cmp	r3, #224	; 0xe0
 8012980:	d104      	bne.n	801298c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7f6 fd02 	bl	800938c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012988:	2300      	movs	r3, #0
 801298a:	e07e      	b.n	8012a8a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d104      	bne.n	801299c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7f6 fcfa 	bl	800938c <pbuf_free>
    return ERR_OK;
 8012998:	2300      	movs	r3, #0
 801299a:	e076      	b.n	8012a8a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	88db      	ldrh	r3, [r3, #6]
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	461a      	mov	r2, r3
 80129a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80129a8:	4013      	ands	r3, r2
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00b      	beq.n	80129c6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 fc92 	bl	80132d8 <ip4_reass>
 80129b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d101      	bne.n	80129c0 <ip4_input+0x1a8>
      return ERR_OK;
 80129bc:	2300      	movs	r3, #0
 80129be:	e064      	b.n	8012a8a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80129c6:	4a33      	ldr	r2, [pc, #204]	; (8012a94 <ip4_input+0x27c>)
 80129c8:	69bb      	ldr	r3, [r7, #24]
 80129ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80129cc:	4a31      	ldr	r2, [pc, #196]	; (8012a94 <ip4_input+0x27c>)
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80129d2:	4a30      	ldr	r2, [pc, #192]	; (8012a94 <ip4_input+0x27c>)
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	f003 030f 	and.w	r3, r3, #15
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	009b      	lsls	r3, r3, #2
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	4b2a      	ldr	r3, [pc, #168]	; (8012a94 <ip4_input+0x27c>)
 80129ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80129ec:	8a7b      	ldrh	r3, [r7, #18]
 80129ee:	4619      	mov	r1, r3
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7f6 fc45 	bl	8009280 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80129f6:	69fb      	ldr	r3, [r7, #28]
 80129f8:	7a5b      	ldrb	r3, [r3, #9]
 80129fa:	2b11      	cmp	r3, #17
 80129fc:	d006      	beq.n	8012a0c <ip4_input+0x1f4>
 80129fe:	2b11      	cmp	r3, #17
 8012a00:	dc13      	bgt.n	8012a2a <ip4_input+0x212>
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d00c      	beq.n	8012a20 <ip4_input+0x208>
 8012a06:	2b06      	cmp	r3, #6
 8012a08:	d005      	beq.n	8012a16 <ip4_input+0x1fe>
 8012a0a:	e00e      	b.n	8012a2a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012a0c:	6839      	ldr	r1, [r7, #0]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7fc faea 	bl	800efe8 <udp_input>
        break;
 8012a14:	e026      	b.n	8012a64 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012a16:	6839      	ldr	r1, [r7, #0]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7f8 fafb 	bl	800b014 <tcp_input>
        break;
 8012a1e:	e021      	b.n	8012a64 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7ff fcd0 	bl	80123c8 <icmp_input>
        break;
 8012a28:	e01c      	b.n	8012a64 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012a2a:	4b1a      	ldr	r3, [pc, #104]	; (8012a94 <ip4_input+0x27c>)
 8012a2c:	695b      	ldr	r3, [r3, #20]
 8012a2e:	69b9      	ldr	r1, [r7, #24]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f000 f90b 	bl	8012c4c <ip4_addr_isbroadcast_u32>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d10f      	bne.n	8012a5c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a3c:	4b15      	ldr	r3, [pc, #84]	; (8012a94 <ip4_input+0x27c>)
 8012a3e:	695b      	ldr	r3, [r3, #20]
 8012a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012a44:	2be0      	cmp	r3, #224	; 0xe0
 8012a46:	d009      	beq.n	8012a5c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012a48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7f6 fc89 	bl	8009366 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012a54:	2102      	movs	r1, #2
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7ff fdba 	bl	80125d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f7f6 fc95 	bl	800938c <pbuf_free>
        break;
 8012a62:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012a64:	4b0b      	ldr	r3, [pc, #44]	; (8012a94 <ip4_input+0x27c>)
 8012a66:	2200      	movs	r2, #0
 8012a68:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012a6a:	4b0a      	ldr	r3, [pc, #40]	; (8012a94 <ip4_input+0x27c>)
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012a70:	4b08      	ldr	r3, [pc, #32]	; (8012a94 <ip4_input+0x27c>)
 8012a72:	2200      	movs	r2, #0
 8012a74:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012a76:	4b07      	ldr	r3, [pc, #28]	; (8012a94 <ip4_input+0x27c>)
 8012a78:	2200      	movs	r2, #0
 8012a7a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012a7c:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <ip4_input+0x27c>)
 8012a7e:	2200      	movs	r2, #0
 8012a80:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012a82:	4b04      	ldr	r3, [pc, #16]	; (8012a94 <ip4_input+0x27c>)
 8012a84:	2200      	movs	r2, #0
 8012a86:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012a88:	2300      	movs	r3, #0
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3720      	adds	r7, #32
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	2000d184 	.word	0x2000d184
 8012a98:	200108ec 	.word	0x200108ec

08012a9c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b08a      	sub	sp, #40	; 0x28
 8012aa0:	af04      	add	r7, sp, #16
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
 8012aa8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d009      	beq.n	8012ac8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d003      	beq.n	8012ac2 <ip4_output_if+0x26>
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d102      	bne.n	8012ac8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac4:	3304      	adds	r3, #4
 8012ac6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012ac8:	78fa      	ldrb	r2, [r7, #3]
 8012aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012acc:	9302      	str	r3, [sp, #8]
 8012ace:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ad2:	9301      	str	r3, [sp, #4]
 8012ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ad8:	9300      	str	r3, [sp, #0]
 8012ada:	4613      	mov	r3, r2
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	6979      	ldr	r1, [r7, #20]
 8012ae0:	68f8      	ldr	r0, [r7, #12]
 8012ae2:	f000 f805 	bl	8012af0 <ip4_output_if_src>
 8012ae6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3718      	adds	r7, #24
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b088      	sub	sp, #32
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	607a      	str	r2, [r7, #4]
 8012afc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	7b9b      	ldrb	r3, [r3, #14]
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d006      	beq.n	8012b14 <ip4_output_if_src+0x24>
 8012b06:	4b4b      	ldr	r3, [pc, #300]	; (8012c34 <ip4_output_if_src+0x144>)
 8012b08:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012b0c:	494a      	ldr	r1, [pc, #296]	; (8012c38 <ip4_output_if_src+0x148>)
 8012b0e:	484b      	ldr	r0, [pc, #300]	; (8012c3c <ip4_output_if_src+0x14c>)
 8012b10:	f001 fae0 	bl	80140d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d060      	beq.n	8012bdc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012b1a:	2314      	movs	r3, #20
 8012b1c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012b1e:	2114      	movs	r1, #20
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f7f6 fb9d 	bl	8009260 <pbuf_add_header>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d002      	beq.n	8012b32 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012b2c:	f06f 0301 	mvn.w	r3, #1
 8012b30:	e07c      	b.n	8012c2c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	895b      	ldrh	r3, [r3, #10]
 8012b3c:	2b13      	cmp	r3, #19
 8012b3e:	d806      	bhi.n	8012b4e <ip4_output_if_src+0x5e>
 8012b40:	4b3c      	ldr	r3, [pc, #240]	; (8012c34 <ip4_output_if_src+0x144>)
 8012b42:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012b46:	493e      	ldr	r1, [pc, #248]	; (8012c40 <ip4_output_if_src+0x150>)
 8012b48:	483c      	ldr	r0, [pc, #240]	; (8012c3c <ip4_output_if_src+0x14c>)
 8012b4a:	f001 fac3 	bl	80140d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	78fa      	ldrb	r2, [r7, #3]
 8012b52:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012b54:	69fb      	ldr	r3, [r7, #28]
 8012b56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012b5a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012b64:	8b7b      	ldrh	r3, [r7, #26]
 8012b66:	089b      	lsrs	r3, r3, #2
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b70:	b2da      	uxtb	r2, r3
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012b7c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	891b      	ldrh	r3, [r3, #8]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7f5 f804 	bl	8007b90 <lwip_htons>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	2200      	movs	r2, #0
 8012b94:	719a      	strb	r2, [r3, #6]
 8012b96:	2200      	movs	r2, #0
 8012b98:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012b9a:	4b2a      	ldr	r3, [pc, #168]	; (8012c44 <ip4_output_if_src+0x154>)
 8012b9c:	881b      	ldrh	r3, [r3, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7f4 fff6 	bl	8007b90 <lwip_htons>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012bac:	4b25      	ldr	r3, [pc, #148]	; (8012c44 <ip4_output_if_src+0x154>)
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	4b23      	ldr	r3, [pc, #140]	; (8012c44 <ip4_output_if_src+0x154>)
 8012bb6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d104      	bne.n	8012bc8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012bbe:	4b22      	ldr	r3, [pc, #136]	; (8012c48 <ip4_output_if_src+0x158>)
 8012bc0:	681a      	ldr	r2, [r3, #0]
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	60da      	str	r2, [r3, #12]
 8012bc6:	e003      	b.n	8012bd0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	729a      	strb	r2, [r3, #10]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	72da      	strb	r2, [r3, #11]
 8012bda:	e00f      	b.n	8012bfc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	895b      	ldrh	r3, [r3, #10]
 8012be0:	2b13      	cmp	r3, #19
 8012be2:	d802      	bhi.n	8012bea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012be4:	f06f 0301 	mvn.w	r3, #1
 8012be8:	e020      	b.n	8012c2c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	691b      	ldr	r3, [r3, #16]
 8012bf4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012bf6:	f107 0314 	add.w	r3, r7, #20
 8012bfa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d00c      	beq.n	8012c1e <ip4_output_if_src+0x12e>
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	891a      	ldrh	r2, [r3, #8]
 8012c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d906      	bls.n	8012c1e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f000 fd53 	bl	80136c0 <ip4_frag>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	e006      	b.n	8012c2c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c20:	695b      	ldr	r3, [r3, #20]
 8012c22:	687a      	ldr	r2, [r7, #4]
 8012c24:	68f9      	ldr	r1, [r7, #12]
 8012c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c28:	4798      	blx	r3
 8012c2a:	4603      	mov	r3, r0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3720      	adds	r7, #32
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	08017ae4 	.word	0x08017ae4
 8012c38:	08017b18 	.word	0x08017b18
 8012c3c:	08017b24 	.word	0x08017b24
 8012c40:	08017b4c 	.word	0x08017b4c
 8012c44:	20010a7e 	.word	0x20010a7e
 8012c48:	08017f7c 	.word	0x08017f7c

08012c4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b085      	sub	sp, #20
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c60:	d002      	beq.n	8012c68 <ip4_addr_isbroadcast_u32+0x1c>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d101      	bne.n	8012c6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012c68:	2301      	movs	r3, #1
 8012c6a:	e02a      	b.n	8012cc2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012c72:	f003 0302 	and.w	r3, r3, #2
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d101      	bne.n	8012c7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	e021      	b.n	8012cc2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	3304      	adds	r3, #4
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d101      	bne.n	8012c8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	e019      	b.n	8012cc2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012c8e:	68fa      	ldr	r2, [r7, #12]
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	3304      	adds	r3, #4
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	405a      	eors	r2, r3
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	3308      	adds	r3, #8
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4013      	ands	r3, r2
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d10d      	bne.n	8012cc0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	3308      	adds	r3, #8
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	43da      	mvns	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	3308      	adds	r3, #8
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d101      	bne.n	8012cc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	e000      	b.n	8012cc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012cc0:	2300      	movs	r3, #0
  }
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr
	...

08012cd0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012cda:	4b12      	ldr	r3, [pc, #72]	; (8012d24 <ip_reass_tmr+0x54>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012ce0:	e018      	b.n	8012d14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	7fdb      	ldrb	r3, [r3, #31]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00b      	beq.n	8012d02 <ip_reass_tmr+0x32>
      r->timer--;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	7fdb      	ldrb	r3, [r3, #31]
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	b2da      	uxtb	r2, r3
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	60fb      	str	r3, [r7, #12]
 8012d00:	e008      	b.n	8012d14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012d0c:	68b9      	ldr	r1, [r7, #8]
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 f80a 	bl	8012d28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d1e3      	bne.n	8012ce2 <ip_reass_tmr+0x12>
    }
  }
}
 8012d1a:	bf00      	nop
 8012d1c:	bf00      	nop
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	20010a80 	.word	0x20010a80

08012d28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012d36:	683a      	ldr	r2, [r7, #0]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d105      	bne.n	8012d4a <ip_reass_free_complete_datagram+0x22>
 8012d3e:	4b45      	ldr	r3, [pc, #276]	; (8012e54 <ip_reass_free_complete_datagram+0x12c>)
 8012d40:	22ab      	movs	r2, #171	; 0xab
 8012d42:	4945      	ldr	r1, [pc, #276]	; (8012e58 <ip_reass_free_complete_datagram+0x130>)
 8012d44:	4845      	ldr	r0, [pc, #276]	; (8012e5c <ip_reass_free_complete_datagram+0x134>)
 8012d46:	f001 f9c5 	bl	80140d4 <iprintf>
  if (prev != NULL) {
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00a      	beq.n	8012d66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d005      	beq.n	8012d66 <ip_reass_free_complete_datagram+0x3e>
 8012d5a:	4b3e      	ldr	r3, [pc, #248]	; (8012e54 <ip_reass_free_complete_datagram+0x12c>)
 8012d5c:	22ad      	movs	r2, #173	; 0xad
 8012d5e:	4940      	ldr	r1, [pc, #256]	; (8012e60 <ip_reass_free_complete_datagram+0x138>)
 8012d60:	483e      	ldr	r0, [pc, #248]	; (8012e5c <ip_reass_free_complete_datagram+0x134>)
 8012d62:	f001 f9b7 	bl	80140d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	889b      	ldrh	r3, [r3, #4]
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d12a      	bne.n	8012dce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012d86:	69bb      	ldr	r3, [r7, #24]
 8012d88:	6858      	ldr	r0, [r3, #4]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	3308      	adds	r3, #8
 8012d8e:	2214      	movs	r2, #20
 8012d90:	4619      	mov	r1, r3
 8012d92:	f001 f8f4 	bl	8013f7e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012d96:	2101      	movs	r1, #1
 8012d98:	69b8      	ldr	r0, [r7, #24]
 8012d9a:	f7ff fc29 	bl	80125f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012d9e:	69b8      	ldr	r0, [r7, #24]
 8012da0:	f7f6 fb82 	bl	80094a8 <pbuf_clen>
 8012da4:	4603      	mov	r3, r0
 8012da6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012da8:	8bfa      	ldrh	r2, [r7, #30]
 8012daa:	8a7b      	ldrh	r3, [r7, #18]
 8012dac:	4413      	add	r3, r2
 8012dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012db2:	db05      	blt.n	8012dc0 <ip_reass_free_complete_datagram+0x98>
 8012db4:	4b27      	ldr	r3, [pc, #156]	; (8012e54 <ip_reass_free_complete_datagram+0x12c>)
 8012db6:	22bc      	movs	r2, #188	; 0xbc
 8012db8:	492a      	ldr	r1, [pc, #168]	; (8012e64 <ip_reass_free_complete_datagram+0x13c>)
 8012dba:	4828      	ldr	r0, [pc, #160]	; (8012e5c <ip_reass_free_complete_datagram+0x134>)
 8012dbc:	f001 f98a 	bl	80140d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012dc0:	8bfa      	ldrh	r2, [r7, #30]
 8012dc2:	8a7b      	ldrh	r3, [r7, #18]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012dc8:	69b8      	ldr	r0, [r7, #24]
 8012dca:	f7f6 fadf 	bl	800938c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	685b      	ldr	r3, [r3, #4]
 8012dd2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012dd4:	e01f      	b.n	8012e16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012de6:	68f8      	ldr	r0, [r7, #12]
 8012de8:	f7f6 fb5e 	bl	80094a8 <pbuf_clen>
 8012dec:	4603      	mov	r3, r0
 8012dee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012df0:	8bfa      	ldrh	r2, [r7, #30]
 8012df2:	8a7b      	ldrh	r3, [r7, #18]
 8012df4:	4413      	add	r3, r2
 8012df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dfa:	db05      	blt.n	8012e08 <ip_reass_free_complete_datagram+0xe0>
 8012dfc:	4b15      	ldr	r3, [pc, #84]	; (8012e54 <ip_reass_free_complete_datagram+0x12c>)
 8012dfe:	22cc      	movs	r2, #204	; 0xcc
 8012e00:	4918      	ldr	r1, [pc, #96]	; (8012e64 <ip_reass_free_complete_datagram+0x13c>)
 8012e02:	4816      	ldr	r0, [pc, #88]	; (8012e5c <ip_reass_free_complete_datagram+0x134>)
 8012e04:	f001 f966 	bl	80140d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012e08:	8bfa      	ldrh	r2, [r7, #30]
 8012e0a:	8a7b      	ldrh	r3, [r7, #18]
 8012e0c:	4413      	add	r3, r2
 8012e0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012e10:	68f8      	ldr	r0, [r7, #12]
 8012e12:	f7f6 fabb 	bl	800938c <pbuf_free>
  while (p != NULL) {
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d1dc      	bne.n	8012dd6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012e1c:	6839      	ldr	r1, [r7, #0]
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f000 f8c2 	bl	8012fa8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012e24:	4b10      	ldr	r3, [pc, #64]	; (8012e68 <ip_reass_free_complete_datagram+0x140>)
 8012e26:	881b      	ldrh	r3, [r3, #0]
 8012e28:	8bfa      	ldrh	r2, [r7, #30]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d905      	bls.n	8012e3a <ip_reass_free_complete_datagram+0x112>
 8012e2e:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <ip_reass_free_complete_datagram+0x12c>)
 8012e30:	22d2      	movs	r2, #210	; 0xd2
 8012e32:	490e      	ldr	r1, [pc, #56]	; (8012e6c <ip_reass_free_complete_datagram+0x144>)
 8012e34:	4809      	ldr	r0, [pc, #36]	; (8012e5c <ip_reass_free_complete_datagram+0x134>)
 8012e36:	f001 f94d 	bl	80140d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012e3a:	4b0b      	ldr	r3, [pc, #44]	; (8012e68 <ip_reass_free_complete_datagram+0x140>)
 8012e3c:	881a      	ldrh	r2, [r3, #0]
 8012e3e:	8bfb      	ldrh	r3, [r7, #30]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	4b08      	ldr	r3, [pc, #32]	; (8012e68 <ip_reass_free_complete_datagram+0x140>)
 8012e46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012e48:	8bfb      	ldrh	r3, [r7, #30]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3720      	adds	r7, #32
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	08017b7c 	.word	0x08017b7c
 8012e58:	08017bb8 	.word	0x08017bb8
 8012e5c:	08017bc4 	.word	0x08017bc4
 8012e60:	08017bec 	.word	0x08017bec
 8012e64:	08017c00 	.word	0x08017c00
 8012e68:	20010a84 	.word	0x20010a84
 8012e6c:	08017c20 	.word	0x08017c20

08012e70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b08a      	sub	sp, #40	; 0x28
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012e82:	2300      	movs	r3, #0
 8012e84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012e86:	2300      	movs	r3, #0
 8012e88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012e8e:	4b28      	ldr	r3, [pc, #160]	; (8012f30 <ip_reass_remove_oldest_datagram+0xc0>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012e94:	e030      	b.n	8012ef8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e98:	695a      	ldr	r2, [r3, #20]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d10c      	bne.n	8012ebc <ip_reass_remove_oldest_datagram+0x4c>
 8012ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea4:	699a      	ldr	r2, [r3, #24]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	691b      	ldr	r3, [r3, #16]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d106      	bne.n	8012ebc <ip_reass_remove_oldest_datagram+0x4c>
 8012eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb0:	899a      	ldrh	r2, [r3, #12]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	889b      	ldrh	r3, [r3, #4]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d014      	beq.n	8012ee6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012ec2:	6a3b      	ldr	r3, [r7, #32]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d104      	bne.n	8012ed2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	61bb      	str	r3, [r7, #24]
 8012ed0:	e009      	b.n	8012ee6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed4:	7fda      	ldrb	r2, [r3, #31]
 8012ed6:	6a3b      	ldr	r3, [r7, #32]
 8012ed8:	7fdb      	ldrb	r3, [r3, #31]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d803      	bhi.n	8012ee6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d1cb      	bne.n	8012e96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012efe:	6a3b      	ldr	r3, [r7, #32]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d008      	beq.n	8012f16 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012f04:	69b9      	ldr	r1, [r7, #24]
 8012f06:	6a38      	ldr	r0, [r7, #32]
 8012f08:	f7ff ff0e 	bl	8012d28 <ip_reass_free_complete_datagram>
 8012f0c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012f0e:	697a      	ldr	r2, [r7, #20]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	4413      	add	r3, r2
 8012f14:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012f16:	697a      	ldr	r2, [r7, #20]
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	da02      	bge.n	8012f24 <ip_reass_remove_oldest_datagram+0xb4>
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	dcac      	bgt.n	8012e7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012f24:	697b      	ldr	r3, [r7, #20]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3728      	adds	r7, #40	; 0x28
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	20010a80 	.word	0x20010a80

08012f34 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012f3e:	2004      	movs	r0, #4
 8012f40:	f7f5 fafe 	bl	8008540 <memp_malloc>
 8012f44:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d110      	bne.n	8012f6e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012f4c:	6839      	ldr	r1, [r7, #0]
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7ff ff8e 	bl	8012e70 <ip_reass_remove_oldest_datagram>
 8012f54:	4602      	mov	r2, r0
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	4293      	cmp	r3, r2
 8012f5a:	dc03      	bgt.n	8012f64 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012f5c:	2004      	movs	r0, #4
 8012f5e:	f7f5 faef 	bl	8008540 <memp_malloc>
 8012f62:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d101      	bne.n	8012f6e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	e016      	b.n	8012f9c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012f6e:	2220      	movs	r2, #32
 8012f70:	2100      	movs	r1, #0
 8012f72:	68f8      	ldr	r0, [r7, #12]
 8012f74:	f001 f811 	bl	8013f9a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	220f      	movs	r2, #15
 8012f7c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012f7e:	4b09      	ldr	r3, [pc, #36]	; (8012fa4 <ip_reass_enqueue_new_datagram+0x70>)
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012f86:	4a07      	ldr	r2, [pc, #28]	; (8012fa4 <ip_reass_enqueue_new_datagram+0x70>)
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	3308      	adds	r3, #8
 8012f90:	2214      	movs	r2, #20
 8012f92:	6879      	ldr	r1, [r7, #4]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 fff2 	bl	8013f7e <memcpy>
  return ipr;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3710      	adds	r7, #16
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	20010a80 	.word	0x20010a80

08012fa8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012fb2:	4b10      	ldr	r3, [pc, #64]	; (8012ff4 <ip_reass_dequeue_datagram+0x4c>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d104      	bne.n	8012fc6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	4a0c      	ldr	r2, [pc, #48]	; (8012ff4 <ip_reass_dequeue_datagram+0x4c>)
 8012fc2:	6013      	str	r3, [r2, #0]
 8012fc4:	e00d      	b.n	8012fe2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d106      	bne.n	8012fda <ip_reass_dequeue_datagram+0x32>
 8012fcc:	4b0a      	ldr	r3, [pc, #40]	; (8012ff8 <ip_reass_dequeue_datagram+0x50>)
 8012fce:	f240 1245 	movw	r2, #325	; 0x145
 8012fd2:	490a      	ldr	r1, [pc, #40]	; (8012ffc <ip_reass_dequeue_datagram+0x54>)
 8012fd4:	480a      	ldr	r0, [pc, #40]	; (8013000 <ip_reass_dequeue_datagram+0x58>)
 8012fd6:	f001 f87d 	bl	80140d4 <iprintf>
    prev->next = ipr->next;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	2004      	movs	r0, #4
 8012fe6:	f7f5 fb21 	bl	800862c <memp_free>
}
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	20010a80 	.word	0x20010a80
 8012ff8:	08017b7c 	.word	0x08017b7c
 8012ffc:	08017c44 	.word	0x08017c44
 8013000:	08017bc4 	.word	0x08017bc4

08013004 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b08c      	sub	sp, #48	; 0x30
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013010:	2300      	movs	r3, #0
 8013012:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013014:	2301      	movs	r3, #1
 8013016:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	885b      	ldrh	r3, [r3, #2]
 8013022:	b29b      	uxth	r3, r3
 8013024:	4618      	mov	r0, r3
 8013026:	f7f4 fdb3 	bl	8007b90 <lwip_htons>
 801302a:	4603      	mov	r3, r0
 801302c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	f003 030f 	and.w	r3, r3, #15
 8013036:	b2db      	uxtb	r3, r3
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801303c:	7e7b      	ldrb	r3, [r7, #25]
 801303e:	b29b      	uxth	r3, r3
 8013040:	8b7a      	ldrh	r2, [r7, #26]
 8013042:	429a      	cmp	r2, r3
 8013044:	d202      	bcs.n	801304c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013046:	f04f 33ff 	mov.w	r3, #4294967295
 801304a:	e135      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801304c:	7e7b      	ldrb	r3, [r7, #25]
 801304e:	b29b      	uxth	r3, r3
 8013050:	8b7a      	ldrh	r2, [r7, #26]
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	88db      	ldrh	r3, [r3, #6]
 801305a:	b29b      	uxth	r3, r3
 801305c:	4618      	mov	r0, r3
 801305e:	f7f4 fd97 	bl	8007b90 <lwip_htons>
 8013062:	4603      	mov	r3, r0
 8013064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013068:	b29b      	uxth	r3, r3
 801306a:	00db      	lsls	r3, r3, #3
 801306c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013076:	2200      	movs	r2, #0
 8013078:	701a      	strb	r2, [r3, #0]
 801307a:	2200      	movs	r2, #0
 801307c:	705a      	strb	r2, [r3, #1]
 801307e:	2200      	movs	r2, #0
 8013080:	709a      	strb	r2, [r3, #2]
 8013082:	2200      	movs	r2, #0
 8013084:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013088:	8afa      	ldrh	r2, [r7, #22]
 801308a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801308c:	8afa      	ldrh	r2, [r7, #22]
 801308e:	8b7b      	ldrh	r3, [r7, #26]
 8013090:	4413      	add	r3, r2
 8013092:	b29a      	uxth	r2, r3
 8013094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013096:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309a:	88db      	ldrh	r3, [r3, #6]
 801309c:	b29b      	uxth	r3, r3
 801309e:	8afa      	ldrh	r2, [r7, #22]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d902      	bls.n	80130aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80130a4:	f04f 33ff 	mov.w	r3, #4294967295
 80130a8:	e106      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	627b      	str	r3, [r7, #36]	; 0x24
 80130b0:	e068      	b.n	8013184 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80130b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ba:	889b      	ldrh	r3, [r3, #4]
 80130bc:	b29a      	uxth	r2, r3
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	889b      	ldrh	r3, [r3, #4]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d235      	bcs.n	8013134 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80130c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80130ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d020      	beq.n	8013116 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80130d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d6:	889b      	ldrh	r3, [r3, #4]
 80130d8:	b29a      	uxth	r2, r3
 80130da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130dc:	88db      	ldrh	r3, [r3, #6]
 80130de:	b29b      	uxth	r3, r3
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d307      	bcc.n	80130f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80130e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e6:	88db      	ldrh	r3, [r3, #6]
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	889b      	ldrh	r3, [r3, #4]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d902      	bls.n	80130fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80130f4:	f04f 33ff 	mov.w	r3, #4294967295
 80130f8:	e0de      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80130fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fc:	68ba      	ldr	r2, [r7, #8]
 80130fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013102:	88db      	ldrh	r3, [r3, #6]
 8013104:	b29a      	uxth	r2, r3
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	889b      	ldrh	r3, [r3, #4]
 801310a:	b29b      	uxth	r3, r3
 801310c:	429a      	cmp	r2, r3
 801310e:	d03d      	beq.n	801318c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013110:	2300      	movs	r3, #0
 8013112:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013114:	e03a      	b.n	801318c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	88db      	ldrh	r3, [r3, #6]
 801311a:	b29a      	uxth	r2, r3
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	889b      	ldrh	r3, [r3, #4]
 8013120:	b29b      	uxth	r3, r3
 8013122:	429a      	cmp	r2, r3
 8013124:	d902      	bls.n	801312c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013126:	f04f 33ff 	mov.w	r3, #4294967295
 801312a:	e0c5      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	68ba      	ldr	r2, [r7, #8]
 8013130:	605a      	str	r2, [r3, #4]
      break;
 8013132:	e02b      	b.n	801318c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	889b      	ldrh	r3, [r3, #4]
 8013138:	b29a      	uxth	r2, r3
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	889b      	ldrh	r3, [r3, #4]
 801313e:	b29b      	uxth	r3, r3
 8013140:	429a      	cmp	r2, r3
 8013142:	d102      	bne.n	801314a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013144:	f04f 33ff 	mov.w	r3, #4294967295
 8013148:	e0b6      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314c:	889b      	ldrh	r3, [r3, #4]
 801314e:	b29a      	uxth	r2, r3
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	88db      	ldrh	r3, [r3, #6]
 8013154:	b29b      	uxth	r3, r3
 8013156:	429a      	cmp	r2, r3
 8013158:	d202      	bcs.n	8013160 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801315a:	f04f 33ff 	mov.w	r3, #4294967295
 801315e:	e0ab      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013162:	2b00      	cmp	r3, #0
 8013164:	d009      	beq.n	801317a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013168:	88db      	ldrh	r3, [r3, #6]
 801316a:	b29a      	uxth	r2, r3
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	889b      	ldrh	r3, [r3, #4]
 8013170:	b29b      	uxth	r3, r3
 8013172:	429a      	cmp	r2, r3
 8013174:	d001      	beq.n	801317a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013176:	2300      	movs	r3, #0
 8013178:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	2b00      	cmp	r3, #0
 8013188:	d193      	bne.n	80130b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801318a:	e000      	b.n	801318e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801318c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013190:	2b00      	cmp	r3, #0
 8013192:	d12d      	bne.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	2b00      	cmp	r3, #0
 8013198:	d01c      	beq.n	80131d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	88db      	ldrh	r3, [r3, #6]
 801319e:	b29a      	uxth	r2, r3
 80131a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a2:	889b      	ldrh	r3, [r3, #4]
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d906      	bls.n	80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80131aa:	4b45      	ldr	r3, [pc, #276]	; (80132c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80131b0:	4944      	ldr	r1, [pc, #272]	; (80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80131b2:	4845      	ldr	r0, [pc, #276]	; (80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131b4:	f000 ff8e 	bl	80140d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80131b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ba:	68ba      	ldr	r2, [r7, #8]
 80131bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80131be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c0:	88db      	ldrh	r3, [r3, #6]
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c6:	889b      	ldrh	r3, [r3, #4]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d010      	beq.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80131ce:	2300      	movs	r3, #0
 80131d0:	623b      	str	r3, [r7, #32]
 80131d2:	e00d      	b.n	80131f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d006      	beq.n	80131ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80131dc:	4b38      	ldr	r3, [pc, #224]	; (80132c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80131e2:	493a      	ldr	r1, [pc, #232]	; (80132cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80131e4:	4838      	ldr	r0, [pc, #224]	; (80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131e6:	f000 ff75 	bl	80140d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	68ba      	ldr	r2, [r7, #8]
 80131ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d105      	bne.n	8013202 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	7f9b      	ldrb	r3, [r3, #30]
 80131fa:	f003 0301 	and.w	r3, r3, #1
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d059      	beq.n	80132b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013202:	6a3b      	ldr	r3, [r7, #32]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d04f      	beq.n	80132a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d006      	beq.n	801321e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	889b      	ldrh	r3, [r3, #4]
 8013218:	b29b      	uxth	r3, r3
 801321a:	2b00      	cmp	r3, #0
 801321c:	d002      	beq.n	8013224 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	623b      	str	r3, [r7, #32]
 8013222:	e041      	b.n	80132a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013226:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801322e:	e012      	b.n	8013256 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013238:	88db      	ldrh	r3, [r3, #6]
 801323a:	b29a      	uxth	r2, r3
 801323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323e:	889b      	ldrh	r3, [r3, #4]
 8013240:	b29b      	uxth	r3, r3
 8013242:	429a      	cmp	r2, r3
 8013244:	d002      	beq.n	801324c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013246:	2300      	movs	r3, #0
 8013248:	623b      	str	r3, [r7, #32]
            break;
 801324a:	e007      	b.n	801325c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1e9      	bne.n	8013230 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d022      	beq.n	80132a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d106      	bne.n	8013278 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801326a:	4b15      	ldr	r3, [pc, #84]	; (80132c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801326c:	f240 12df 	movw	r2, #479	; 0x1df
 8013270:	4917      	ldr	r1, [pc, #92]	; (80132d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013272:	4815      	ldr	r0, [pc, #84]	; (80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013274:	f000 ff2e 	bl	80140d4 <iprintf>
          LWIP_ASSERT("sanity check",
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013280:	429a      	cmp	r2, r3
 8013282:	d106      	bne.n	8013292 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013284:	4b0e      	ldr	r3, [pc, #56]	; (80132c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013286:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801328a:	4911      	ldr	r1, [pc, #68]	; (80132d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801328c:	480e      	ldr	r0, [pc, #56]	; (80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801328e:	f000 ff21 	bl	80140d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d006      	beq.n	80132a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801329a:	4b09      	ldr	r3, [pc, #36]	; (80132c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801329c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80132a0:	490c      	ldr	r1, [pc, #48]	; (80132d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80132a2:	4809      	ldr	r0, [pc, #36]	; (80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80132a4:	f000 ff16 	bl	80140d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	bf14      	ite	ne
 80132ae:	2301      	movne	r3, #1
 80132b0:	2300      	moveq	r3, #0
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	e000      	b.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3730      	adds	r7, #48	; 0x30
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	08017b7c 	.word	0x08017b7c
 80132c4:	08017c60 	.word	0x08017c60
 80132c8:	08017bc4 	.word	0x08017bc4
 80132cc:	08017c80 	.word	0x08017c80
 80132d0:	08017cb8 	.word	0x08017cb8
 80132d4:	08017cc8 	.word	0x08017cc8

080132d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08e      	sub	sp, #56	; 0x38
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80132e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	f003 030f 	and.w	r3, r3, #15
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	2b14      	cmp	r3, #20
 80132f6:	f040 8171 	bne.w	80135dc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80132fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fc:	88db      	ldrh	r3, [r3, #6]
 80132fe:	b29b      	uxth	r3, r3
 8013300:	4618      	mov	r0, r3
 8013302:	f7f4 fc45 	bl	8007b90 <lwip_htons>
 8013306:	4603      	mov	r3, r0
 8013308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801330c:	b29b      	uxth	r3, r3
 801330e:	00db      	lsls	r3, r3, #3
 8013310:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013314:	885b      	ldrh	r3, [r3, #2]
 8013316:	b29b      	uxth	r3, r3
 8013318:	4618      	mov	r0, r3
 801331a:	f7f4 fc39 	bl	8007b90 <lwip_htons>
 801331e:	4603      	mov	r3, r0
 8013320:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	f003 030f 	and.w	r3, r3, #15
 801332a:	b2db      	uxtb	r3, r3
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013336:	b29b      	uxth	r3, r3
 8013338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801333a:	429a      	cmp	r2, r3
 801333c:	f0c0 8150 	bcc.w	80135e0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013344:	b29b      	uxth	r3, r3
 8013346:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7f6 f8ab 	bl	80094a8 <pbuf_clen>
 8013352:	4603      	mov	r3, r0
 8013354:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013356:	4b8c      	ldr	r3, [pc, #560]	; (8013588 <ip4_reass+0x2b0>)
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	461a      	mov	r2, r3
 801335c:	8c3b      	ldrh	r3, [r7, #32]
 801335e:	4413      	add	r3, r2
 8013360:	2b0a      	cmp	r3, #10
 8013362:	dd10      	ble.n	8013386 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013364:	8c3b      	ldrh	r3, [r7, #32]
 8013366:	4619      	mov	r1, r3
 8013368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801336a:	f7ff fd81 	bl	8012e70 <ip_reass_remove_oldest_datagram>
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	f000 8137 	beq.w	80135e4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013376:	4b84      	ldr	r3, [pc, #528]	; (8013588 <ip4_reass+0x2b0>)
 8013378:	881b      	ldrh	r3, [r3, #0]
 801337a:	461a      	mov	r2, r3
 801337c:	8c3b      	ldrh	r3, [r7, #32]
 801337e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013380:	2b0a      	cmp	r3, #10
 8013382:	f300 812f 	bgt.w	80135e4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013386:	4b81      	ldr	r3, [pc, #516]	; (801358c <ip4_reass+0x2b4>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	633b      	str	r3, [r7, #48]	; 0x30
 801338c:	e015      	b.n	80133ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013390:	695a      	ldr	r2, [r3, #20]
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	429a      	cmp	r2, r3
 8013398:	d10c      	bne.n	80133b4 <ip4_reass+0xdc>
 801339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801339c:	699a      	ldr	r2, [r3, #24]
 801339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a0:	691b      	ldr	r3, [r3, #16]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d106      	bne.n	80133b4 <ip4_reass+0xdc>
 80133a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a8:	899a      	ldrh	r2, [r3, #12]
 80133aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ac:	889b      	ldrh	r3, [r3, #4]
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d006      	beq.n	80133c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80133b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	633b      	str	r3, [r7, #48]	; 0x30
 80133ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d1e6      	bne.n	801338e <ip4_reass+0xb6>
 80133c0:	e000      	b.n	80133c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80133c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80133c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d109      	bne.n	80133de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80133ca:	8c3b      	ldrh	r3, [r7, #32]
 80133cc:	4619      	mov	r1, r3
 80133ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133d0:	f7ff fdb0 	bl	8012f34 <ip_reass_enqueue_new_datagram>
 80133d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80133d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d11c      	bne.n	8013416 <ip4_reass+0x13e>
      goto nullreturn;
 80133dc:	e105      	b.n	80135ea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80133de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e0:	88db      	ldrh	r3, [r3, #6]
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f4 fbd3 	bl	8007b90 <lwip_htons>
 80133ea:	4603      	mov	r3, r0
 80133ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d110      	bne.n	8013416 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	89db      	ldrh	r3, [r3, #14]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7f4 fbc9 	bl	8007b90 <lwip_htons>
 80133fe:	4603      	mov	r3, r0
 8013400:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013404:	2b00      	cmp	r3, #0
 8013406:	d006      	beq.n	8013416 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340a:	3308      	adds	r3, #8
 801340c:	2214      	movs	r2, #20
 801340e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013410:	4618      	mov	r0, r3
 8013412:	f000 fdb4 	bl	8013f7e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013418:	88db      	ldrh	r3, [r3, #6]
 801341a:	b29b      	uxth	r3, r3
 801341c:	f003 0320 	and.w	r3, r3, #32
 8013420:	2b00      	cmp	r3, #0
 8013422:	bf0c      	ite	eq
 8013424:	2301      	moveq	r3, #1
 8013426:	2300      	movne	r3, #0
 8013428:	b2db      	uxtb	r3, r3
 801342a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d00e      	beq.n	8013450 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013432:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013436:	4413      	add	r3, r2
 8013438:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801343a:	8b7a      	ldrh	r2, [r7, #26]
 801343c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801343e:	429a      	cmp	r2, r3
 8013440:	f0c0 80a0 	bcc.w	8013584 <ip4_reass+0x2ac>
 8013444:	8b7b      	ldrh	r3, [r7, #26]
 8013446:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801344a:	4293      	cmp	r3, r2
 801344c:	f200 809a 	bhi.w	8013584 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013450:	69fa      	ldr	r2, [r7, #28]
 8013452:	6879      	ldr	r1, [r7, #4]
 8013454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013456:	f7ff fdd5 	bl	8013004 <ip_reass_chain_frag_into_datagram_and_validate>
 801345a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013462:	f000 809b 	beq.w	801359c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013466:	4b48      	ldr	r3, [pc, #288]	; (8013588 <ip4_reass+0x2b0>)
 8013468:	881a      	ldrh	r2, [r3, #0]
 801346a:	8c3b      	ldrh	r3, [r7, #32]
 801346c:	4413      	add	r3, r2
 801346e:	b29a      	uxth	r2, r3
 8013470:	4b45      	ldr	r3, [pc, #276]	; (8013588 <ip4_reass+0x2b0>)
 8013472:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013474:	69fb      	ldr	r3, [r7, #28]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d00d      	beq.n	8013496 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801347a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801347c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801347e:	4413      	add	r3, r2
 8013480:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013484:	8a7a      	ldrh	r2, [r7, #18]
 8013486:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348a:	7f9b      	ldrb	r3, [r3, #30]
 801348c:	f043 0301 	orr.w	r3, r3, #1
 8013490:	b2da      	uxtb	r2, r3
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	2b01      	cmp	r3, #1
 801349a:	d171      	bne.n	8013580 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801349e:	8b9b      	ldrh	r3, [r3, #28]
 80134a0:	3314      	adds	r3, #20
 80134a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80134a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80134ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80134b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b8:	3308      	adds	r3, #8
 80134ba:	2214      	movs	r2, #20
 80134bc:	4619      	mov	r1, r3
 80134be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134c0:	f000 fd5d 	bl	8013f7e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80134c4:	8a3b      	ldrh	r3, [r7, #16]
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7f4 fb62 	bl	8007b90 <lwip_htons>
 80134cc:	4603      	mov	r3, r0
 80134ce:	461a      	mov	r2, r3
 80134d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80134d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d6:	2200      	movs	r2, #0
 80134d8:	719a      	strb	r2, [r3, #6]
 80134da:	2200      	movs	r2, #0
 80134dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80134de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e0:	2200      	movs	r2, #0
 80134e2:	729a      	strb	r2, [r3, #10]
 80134e4:	2200      	movs	r2, #0
 80134e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80134e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80134ee:	e00d      	b.n	801350c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80134f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80134f6:	2114      	movs	r1, #20
 80134f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80134fa:	f7f5 fec1 	bl	8009280 <pbuf_remove_header>
      pbuf_cat(p, r);
 80134fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7f6 f811 	bl	8009528 <pbuf_cat>
      r = iprh->next_pbuf;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1ee      	bne.n	80134f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013512:	4b1e      	ldr	r3, [pc, #120]	; (801358c <ip4_reass+0x2b4>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013518:	429a      	cmp	r2, r3
 801351a:	d102      	bne.n	8013522 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801351c:	2300      	movs	r3, #0
 801351e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013520:	e010      	b.n	8013544 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013522:	4b1a      	ldr	r3, [pc, #104]	; (801358c <ip4_reass+0x2b4>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013528:	e007      	b.n	801353a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013530:	429a      	cmp	r2, r3
 8013532:	d006      	beq.n	8013542 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	62fb      	str	r3, [r7, #44]	; 0x2c
 801353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1f4      	bne.n	801352a <ip4_reass+0x252>
 8013540:	e000      	b.n	8013544 <ip4_reass+0x26c>
          break;
 8013542:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013548:	f7ff fd2e 	bl	8012fa8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f7f5 ffab 	bl	80094a8 <pbuf_clen>
 8013552:	4603      	mov	r3, r0
 8013554:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013556:	4b0c      	ldr	r3, [pc, #48]	; (8013588 <ip4_reass+0x2b0>)
 8013558:	881b      	ldrh	r3, [r3, #0]
 801355a:	8c3a      	ldrh	r2, [r7, #32]
 801355c:	429a      	cmp	r2, r3
 801355e:	d906      	bls.n	801356e <ip4_reass+0x296>
 8013560:	4b0b      	ldr	r3, [pc, #44]	; (8013590 <ip4_reass+0x2b8>)
 8013562:	f240 229b 	movw	r2, #667	; 0x29b
 8013566:	490b      	ldr	r1, [pc, #44]	; (8013594 <ip4_reass+0x2bc>)
 8013568:	480b      	ldr	r0, [pc, #44]	; (8013598 <ip4_reass+0x2c0>)
 801356a:	f000 fdb3 	bl	80140d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801356e:	4b06      	ldr	r3, [pc, #24]	; (8013588 <ip4_reass+0x2b0>)
 8013570:	881a      	ldrh	r2, [r3, #0]
 8013572:	8c3b      	ldrh	r3, [r7, #32]
 8013574:	1ad3      	subs	r3, r2, r3
 8013576:	b29a      	uxth	r2, r3
 8013578:	4b03      	ldr	r3, [pc, #12]	; (8013588 <ip4_reass+0x2b0>)
 801357a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	e038      	b.n	80135f2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013580:	2300      	movs	r3, #0
 8013582:	e036      	b.n	80135f2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013584:	bf00      	nop
 8013586:	e00a      	b.n	801359e <ip4_reass+0x2c6>
 8013588:	20010a84 	.word	0x20010a84
 801358c:	20010a80 	.word	0x20010a80
 8013590:	08017b7c 	.word	0x08017b7c
 8013594:	08017cec 	.word	0x08017cec
 8013598:	08017bc4 	.word	0x08017bc4
    goto nullreturn_ipr;
 801359c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d106      	bne.n	80135b2 <ip4_reass+0x2da>
 80135a4:	4b15      	ldr	r3, [pc, #84]	; (80135fc <ip4_reass+0x324>)
 80135a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80135aa:	4915      	ldr	r1, [pc, #84]	; (8013600 <ip4_reass+0x328>)
 80135ac:	4815      	ldr	r0, [pc, #84]	; (8013604 <ip4_reass+0x32c>)
 80135ae:	f000 fd91 	bl	80140d4 <iprintf>
  if (ipr->p == NULL) {
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d116      	bne.n	80135e8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80135ba:	4b13      	ldr	r3, [pc, #76]	; (8013608 <ip4_reass+0x330>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d006      	beq.n	80135d2 <ip4_reass+0x2fa>
 80135c4:	4b0d      	ldr	r3, [pc, #52]	; (80135fc <ip4_reass+0x324>)
 80135c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80135ca:	4910      	ldr	r1, [pc, #64]	; (801360c <ip4_reass+0x334>)
 80135cc:	480d      	ldr	r0, [pc, #52]	; (8013604 <ip4_reass+0x32c>)
 80135ce:	f000 fd81 	bl	80140d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80135d2:	2100      	movs	r1, #0
 80135d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d6:	f7ff fce7 	bl	8012fa8 <ip_reass_dequeue_datagram>
 80135da:	e006      	b.n	80135ea <ip4_reass+0x312>
    goto nullreturn;
 80135dc:	bf00      	nop
 80135de:	e004      	b.n	80135ea <ip4_reass+0x312>
    goto nullreturn;
 80135e0:	bf00      	nop
 80135e2:	e002      	b.n	80135ea <ip4_reass+0x312>
      goto nullreturn;
 80135e4:	bf00      	nop
 80135e6:	e000      	b.n	80135ea <ip4_reass+0x312>
  }

nullreturn:
 80135e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7f5 fece 	bl	800938c <pbuf_free>
  return NULL;
 80135f0:	2300      	movs	r3, #0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3738      	adds	r7, #56	; 0x38
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	08017b7c 	.word	0x08017b7c
 8013600:	08017d08 	.word	0x08017d08
 8013604:	08017bc4 	.word	0x08017bc4
 8013608:	20010a80 	.word	0x20010a80
 801360c:	08017d14 	.word	0x08017d14

08013610 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013614:	2005      	movs	r0, #5
 8013616:	f7f4 ff93 	bl	8008540 <memp_malloc>
 801361a:	4603      	mov	r3, r0
}
 801361c:	4618      	mov	r0, r3
 801361e:	bd80      	pop	{r7, pc}

08013620 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d106      	bne.n	801363c <ip_frag_free_pbuf_custom_ref+0x1c>
 801362e:	4b07      	ldr	r3, [pc, #28]	; (801364c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013630:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013634:	4906      	ldr	r1, [pc, #24]	; (8013650 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013636:	4807      	ldr	r0, [pc, #28]	; (8013654 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013638:	f000 fd4c 	bl	80140d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801363c:	6879      	ldr	r1, [r7, #4]
 801363e:	2005      	movs	r0, #5
 8013640:	f7f4 fff4 	bl	800862c <memp_free>
}
 8013644:	bf00      	nop
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	08017b7c 	.word	0x08017b7c
 8013650:	08017d34 	.word	0x08017d34
 8013654:	08017bc4 	.word	0x08017bc4

08013658 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d106      	bne.n	8013678 <ipfrag_free_pbuf_custom+0x20>
 801366a:	4b11      	ldr	r3, [pc, #68]	; (80136b0 <ipfrag_free_pbuf_custom+0x58>)
 801366c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013670:	4910      	ldr	r1, [pc, #64]	; (80136b4 <ipfrag_free_pbuf_custom+0x5c>)
 8013672:	4811      	ldr	r0, [pc, #68]	; (80136b8 <ipfrag_free_pbuf_custom+0x60>)
 8013674:	f000 fd2e 	bl	80140d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013678:	68fa      	ldr	r2, [r7, #12]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	429a      	cmp	r2, r3
 801367e:	d006      	beq.n	801368e <ipfrag_free_pbuf_custom+0x36>
 8013680:	4b0b      	ldr	r3, [pc, #44]	; (80136b0 <ipfrag_free_pbuf_custom+0x58>)
 8013682:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013686:	490d      	ldr	r1, [pc, #52]	; (80136bc <ipfrag_free_pbuf_custom+0x64>)
 8013688:	480b      	ldr	r0, [pc, #44]	; (80136b8 <ipfrag_free_pbuf_custom+0x60>)
 801368a:	f000 fd23 	bl	80140d4 <iprintf>
  if (pcr->original != NULL) {
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	695b      	ldr	r3, [r3, #20]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d004      	beq.n	80136a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	695b      	ldr	r3, [r3, #20]
 801369a:	4618      	mov	r0, r3
 801369c:	f7f5 fe76 	bl	800938c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80136a0:	68f8      	ldr	r0, [r7, #12]
 80136a2:	f7ff ffbd 	bl	8013620 <ip_frag_free_pbuf_custom_ref>
}
 80136a6:	bf00      	nop
 80136a8:	3710      	adds	r7, #16
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	08017b7c 	.word	0x08017b7c
 80136b4:	08017d40 	.word	0x08017d40
 80136b8:	08017bc4 	.word	0x08017bc4
 80136bc:	08017d4c 	.word	0x08017d4c

080136c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b094      	sub	sp, #80	; 0x50
 80136c4:	af02      	add	r7, sp, #8
 80136c6:	60f8      	str	r0, [r7, #12]
 80136c8:	60b9      	str	r1, [r7, #8]
 80136ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80136cc:	2300      	movs	r3, #0
 80136ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136d6:	3b14      	subs	r3, #20
 80136d8:	2b00      	cmp	r3, #0
 80136da:	da00      	bge.n	80136de <ip4_frag+0x1e>
 80136dc:	3307      	adds	r3, #7
 80136de:	10db      	asrs	r3, r3, #3
 80136e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80136e2:	2314      	movs	r3, #20
 80136e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80136ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80136f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 030f 	and.w	r3, r3, #15
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	2b14      	cmp	r3, #20
 8013700:	d002      	beq.n	8013708 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013702:	f06f 0305 	mvn.w	r3, #5
 8013706:	e110      	b.n	801392a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	895b      	ldrh	r3, [r3, #10]
 801370c:	2b13      	cmp	r3, #19
 801370e:	d809      	bhi.n	8013724 <ip4_frag+0x64>
 8013710:	4b88      	ldr	r3, [pc, #544]	; (8013934 <ip4_frag+0x274>)
 8013712:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013716:	4988      	ldr	r1, [pc, #544]	; (8013938 <ip4_frag+0x278>)
 8013718:	4888      	ldr	r0, [pc, #544]	; (801393c <ip4_frag+0x27c>)
 801371a:	f000 fcdb 	bl	80140d4 <iprintf>
 801371e:	f06f 0305 	mvn.w	r3, #5
 8013722:	e102      	b.n	801392a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013726:	88db      	ldrh	r3, [r3, #6]
 8013728:	b29b      	uxth	r3, r3
 801372a:	4618      	mov	r0, r3
 801372c:	f7f4 fa30 	bl	8007b90 <lwip_htons>
 8013730:	4603      	mov	r3, r0
 8013732:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013734:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013736:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801373a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801373e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013744:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	891b      	ldrh	r3, [r3, #8]
 801374a:	3b14      	subs	r3, #20
 801374c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013750:	e0e1      	b.n	8013916 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013752:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013754:	00db      	lsls	r3, r3, #3
 8013756:	b29b      	uxth	r3, r3
 8013758:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801375c:	4293      	cmp	r3, r2
 801375e:	bf28      	it	cs
 8013760:	4613      	movcs	r3, r2
 8013762:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013764:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013768:	2114      	movs	r1, #20
 801376a:	200e      	movs	r0, #14
 801376c:	f7f5 fb2a 	bl	8008dc4 <pbuf_alloc>
 8013770:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013774:	2b00      	cmp	r3, #0
 8013776:	f000 80d5 	beq.w	8013924 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377c:	895b      	ldrh	r3, [r3, #10]
 801377e:	2b13      	cmp	r3, #19
 8013780:	d806      	bhi.n	8013790 <ip4_frag+0xd0>
 8013782:	4b6c      	ldr	r3, [pc, #432]	; (8013934 <ip4_frag+0x274>)
 8013784:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013788:	496d      	ldr	r1, [pc, #436]	; (8013940 <ip4_frag+0x280>)
 801378a:	486c      	ldr	r0, [pc, #432]	; (801393c <ip4_frag+0x27c>)
 801378c:	f000 fca2 	bl	80140d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	2214      	movs	r2, #20
 8013796:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013798:	4618      	mov	r0, r3
 801379a:	f000 fbf0 	bl	8013f7e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80137a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80137aa:	e064      	b.n	8013876 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	895a      	ldrh	r2, [r3, #10]
 80137b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137b2:	1ad3      	subs	r3, r2, r3
 80137b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	895b      	ldrh	r3, [r3, #10]
 80137ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80137bc:	429a      	cmp	r2, r3
 80137be:	d906      	bls.n	80137ce <ip4_frag+0x10e>
 80137c0:	4b5c      	ldr	r3, [pc, #368]	; (8013934 <ip4_frag+0x274>)
 80137c2:	f240 322d 	movw	r2, #813	; 0x32d
 80137c6:	495f      	ldr	r1, [pc, #380]	; (8013944 <ip4_frag+0x284>)
 80137c8:	485c      	ldr	r0, [pc, #368]	; (801393c <ip4_frag+0x27c>)
 80137ca:	f000 fc83 	bl	80140d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80137ce:	8bfa      	ldrh	r2, [r7, #30]
 80137d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80137d4:	4293      	cmp	r3, r2
 80137d6:	bf28      	it	cs
 80137d8:	4613      	movcs	r3, r2
 80137da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80137de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d105      	bne.n	80137f2 <ip4_frag+0x132>
        poff = 0;
 80137e6:	2300      	movs	r3, #0
 80137e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	60fb      	str	r3, [r7, #12]
        continue;
 80137f0:	e041      	b.n	8013876 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80137f2:	f7ff ff0d 	bl	8013610 <ip_frag_alloc_pbuf_custom_ref>
 80137f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80137f8:	69bb      	ldr	r3, [r7, #24]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d103      	bne.n	8013806 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80137fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013800:	f7f5 fdc4 	bl	800938c <pbuf_free>
        goto memerr;
 8013804:	e08f      	b.n	8013926 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013806:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801380c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801380e:	4413      	add	r3, r2
 8013810:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013814:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013818:	9201      	str	r2, [sp, #4]
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	4603      	mov	r3, r0
 801381e:	2241      	movs	r2, #65	; 0x41
 8013820:	2000      	movs	r0, #0
 8013822:	f7f5 fbf9 	bl	8009018 <pbuf_alloced_custom>
 8013826:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d106      	bne.n	801383c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801382e:	69b8      	ldr	r0, [r7, #24]
 8013830:	f7ff fef6 	bl	8013620 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013836:	f7f5 fda9 	bl	800938c <pbuf_free>
        goto memerr;
 801383a:	e074      	b.n	8013926 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f7f5 fe4b 	bl	80094d8 <pbuf_ref>
      pcr->original = p;
 8013842:	69bb      	ldr	r3, [r7, #24]
 8013844:	68fa      	ldr	r2, [r7, #12]
 8013846:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	4a3f      	ldr	r2, [pc, #252]	; (8013948 <ip4_frag+0x288>)
 801384c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801384e:	6979      	ldr	r1, [r7, #20]
 8013850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013852:	f7f5 fe69 	bl	8009528 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013856:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801385a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801385e:	1ad3      	subs	r3, r2, r3
 8013860:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013864:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013868:	2b00      	cmp	r3, #0
 801386a:	d004      	beq.n	8013876 <ip4_frag+0x1b6>
        poff = 0;
 801386c:	2300      	movs	r3, #0
 801386e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013876:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801387a:	2b00      	cmp	r3, #0
 801387c:	d196      	bne.n	80137ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801387e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013880:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013884:	4413      	add	r3, r2
 8013886:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801388c:	f1a3 0213 	sub.w	r2, r3, #19
 8013890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013894:	429a      	cmp	r2, r3
 8013896:	bfcc      	ite	gt
 8013898:	2301      	movgt	r3, #1
 801389a:	2300      	movle	r3, #0
 801389c:	b2db      	uxtb	r3, r3
 801389e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80138a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80138aa:	6a3b      	ldr	r3, [r7, #32]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <ip4_frag+0x1f6>
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d003      	beq.n	80138be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80138b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80138bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80138be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7f4 f965 	bl	8007b90 <lwip_htons>
 80138c6:	4603      	mov	r3, r0
 80138c8:	461a      	mov	r2, r3
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80138ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80138d0:	3314      	adds	r3, #20
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7f4 f95b 	bl	8007b90 <lwip_htons>
 80138da:	4603      	mov	r3, r0
 80138dc:	461a      	mov	r2, r3
 80138de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80138e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e4:	2200      	movs	r2, #0
 80138e6:	729a      	strb	r2, [r3, #10]
 80138e8:	2200      	movs	r2, #0
 80138ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	695b      	ldr	r3, [r3, #20]
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80138f4:	68b8      	ldr	r0, [r7, #8]
 80138f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80138f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138fa:	f7f5 fd47 	bl	800938c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80138fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013904:	1ad3      	subs	r3, r2, r3
 8013906:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801390a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801390e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013910:	4413      	add	r3, r2
 8013912:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013916:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801391a:	2b00      	cmp	r3, #0
 801391c:	f47f af19 	bne.w	8013752 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	e002      	b.n	801392a <ip4_frag+0x26a>
      goto memerr;
 8013924:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013926:	f04f 33ff 	mov.w	r3, #4294967295
}
 801392a:	4618      	mov	r0, r3
 801392c:	3748      	adds	r7, #72	; 0x48
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	08017b7c 	.word	0x08017b7c
 8013938:	08017d58 	.word	0x08017d58
 801393c:	08017bc4 	.word	0x08017bc4
 8013940:	08017d74 	.word	0x08017d74
 8013944:	08017d94 	.word	0x08017d94
 8013948:	08013659 	.word	0x08013659

0801394c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013956:	230e      	movs	r3, #14
 8013958:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	895b      	ldrh	r3, [r3, #10]
 801395e:	2b0e      	cmp	r3, #14
 8013960:	d96e      	bls.n	8013a40 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	7bdb      	ldrb	r3, [r3, #15]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d106      	bne.n	8013978 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013970:	3301      	adds	r3, #1
 8013972:	b2da      	uxtb	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	7b1a      	ldrb	r2, [r3, #12]
 8013982:	7b5b      	ldrb	r3, [r3, #13]
 8013984:	021b      	lsls	r3, r3, #8
 8013986:	4313      	orrs	r3, r2
 8013988:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	f003 0301 	and.w	r3, r3, #1
 8013992:	2b00      	cmp	r3, #0
 8013994:	d023      	beq.n	80139de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b01      	cmp	r3, #1
 801399c:	d10f      	bne.n	80139be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	785b      	ldrb	r3, [r3, #1]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d11b      	bne.n	80139de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80139aa:	2b5e      	cmp	r3, #94	; 0x5e
 80139ac:	d117      	bne.n	80139de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	7b5b      	ldrb	r3, [r3, #13]
 80139b2:	f043 0310 	orr.w	r3, r3, #16
 80139b6:	b2da      	uxtb	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	735a      	strb	r2, [r3, #13]
 80139bc:	e00f      	b.n	80139de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	2206      	movs	r2, #6
 80139c2:	4928      	ldr	r1, [pc, #160]	; (8013a64 <ethernet_input+0x118>)
 80139c4:	4618      	mov	r0, r3
 80139c6:	f000 faca 	bl	8013f5e <memcmp>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d106      	bne.n	80139de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	7b5b      	ldrb	r3, [r3, #13]
 80139d4:	f043 0308 	orr.w	r3, r3, #8
 80139d8:	b2da      	uxtb	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80139de:	89fb      	ldrh	r3, [r7, #14]
 80139e0:	2b08      	cmp	r3, #8
 80139e2:	d003      	beq.n	80139ec <ethernet_input+0xa0>
 80139e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80139e8:	d014      	beq.n	8013a14 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80139ea:	e032      	b.n	8013a52 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139f2:	f003 0308 	and.w	r3, r3, #8
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d024      	beq.n	8013a44 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80139fa:	8afb      	ldrh	r3, [r7, #22]
 80139fc:	4619      	mov	r1, r3
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7f5 fc3e 	bl	8009280 <pbuf_remove_header>
 8013a04:	4603      	mov	r3, r0
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d11e      	bne.n	8013a48 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013a0a:	6839      	ldr	r1, [r7, #0]
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f7fe ff03 	bl	8012818 <ip4_input>
      break;
 8013a12:	e013      	b.n	8013a3c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a1a:	f003 0308 	and.w	r3, r3, #8
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d014      	beq.n	8013a4c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013a22:	8afb      	ldrh	r3, [r7, #22]
 8013a24:	4619      	mov	r1, r3
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f7f5 fc2a 	bl	8009280 <pbuf_remove_header>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d10e      	bne.n	8013a50 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013a32:	6839      	ldr	r1, [r7, #0]
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f7fe f89f 	bl	8011b78 <etharp_input>
      break;
 8013a3a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	e00c      	b.n	8013a5a <ethernet_input+0x10e>
    goto free_and_return;
 8013a40:	bf00      	nop
 8013a42:	e006      	b.n	8013a52 <ethernet_input+0x106>
        goto free_and_return;
 8013a44:	bf00      	nop
 8013a46:	e004      	b.n	8013a52 <ethernet_input+0x106>
        goto free_and_return;
 8013a48:	bf00      	nop
 8013a4a:	e002      	b.n	8013a52 <ethernet_input+0x106>
        goto free_and_return;
 8013a4c:	bf00      	nop
 8013a4e:	e000      	b.n	8013a52 <ethernet_input+0x106>
        goto free_and_return;
 8013a50:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7f5 fc9a 	bl	800938c <pbuf_free>
  return ERR_OK;
 8013a58:	2300      	movs	r3, #0
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3718      	adds	r7, #24
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	08017f84 	.word	0x08017f84

08013a68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
 8013a74:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013a76:	8c3b      	ldrh	r3, [r7, #32]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7f4 f889 	bl	8007b90 <lwip_htons>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013a82:	210e      	movs	r1, #14
 8013a84:	68b8      	ldr	r0, [r7, #8]
 8013a86:	f7f5 fbeb 	bl	8009260 <pbuf_add_header>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d125      	bne.n	8013adc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	8afa      	ldrh	r2, [r7, #22]
 8013a9a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	2206      	movs	r2, #6
 8013aa0:	6839      	ldr	r1, [r7, #0]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f000 fa6b 	bl	8013f7e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	3306      	adds	r3, #6
 8013aac:	2206      	movs	r2, #6
 8013aae:	6879      	ldr	r1, [r7, #4]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f000 fa64 	bl	8013f7e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013abc:	2b06      	cmp	r3, #6
 8013abe:	d006      	beq.n	8013ace <ethernet_output+0x66>
 8013ac0:	4b0a      	ldr	r3, [pc, #40]	; (8013aec <ethernet_output+0x84>)
 8013ac2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013ac6:	490a      	ldr	r1, [pc, #40]	; (8013af0 <ethernet_output+0x88>)
 8013ac8:	480a      	ldr	r0, [pc, #40]	; (8013af4 <ethernet_output+0x8c>)
 8013aca:	f000 fb03 	bl	80140d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	699b      	ldr	r3, [r3, #24]
 8013ad2:	68b9      	ldr	r1, [r7, #8]
 8013ad4:	68f8      	ldr	r0, [r7, #12]
 8013ad6:	4798      	blx	r3
 8013ad8:	4603      	mov	r3, r0
 8013ada:	e002      	b.n	8013ae2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013adc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013ade:	f06f 0301 	mvn.w	r3, #1
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	08017da4 	.word	0x08017da4
 8013af0:	08017ddc 	.word	0x08017ddc
 8013af4:	08017e10 	.word	0x08017e10

08013af8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b086      	sub	sp, #24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	60bb      	str	r3, [r7, #8]
 8013b06:	2304      	movs	r3, #4
 8013b08:	60fb      	str	r3, [r7, #12]
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	613b      	str	r3, [r7, #16]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013b12:	f107 0308 	add.w	r3, r7, #8
 8013b16:	2100      	movs	r1, #0
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7f1 f959 	bl	8004dd0 <osMessageCreate>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d102      	bne.n	8013b32 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b30:	e000      	b.n	8013b34 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3718      	adds	r7, #24
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	6839      	ldr	r1, [r7, #0]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7f1 f966 	bl	8004e20 <osMessagePut>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d102      	bne.n	8013b60 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	73fb      	strb	r3, [r7, #15]
 8013b5e:	e001      	b.n	8013b64 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013b60:	23ff      	movs	r3, #255	; 0xff
 8013b62:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b08c      	sub	sp, #48	; 0x30
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	61f8      	str	r0, [r7, #28]
 8013b78:	61b9      	str	r1, [r7, #24]
 8013b7a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013b7c:	f7f0 ff98 	bl	8004ab0 <osKernelSysTick>
 8013b80:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d017      	beq.n	8013bb8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013b88:	69fb      	ldr	r3, [r7, #28]
 8013b8a:	6819      	ldr	r1, [r3, #0]
 8013b8c:	f107 0320 	add.w	r3, r7, #32
 8013b90:	697a      	ldr	r2, [r7, #20]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f1 f984 	bl	8004ea0 <osMessageGet>

    if(event.status == osEventMessage)
 8013b98:	6a3b      	ldr	r3, [r7, #32]
 8013b9a:	2b10      	cmp	r3, #16
 8013b9c:	d109      	bne.n	8013bb2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013ba6:	f7f0 ff83 	bl	8004ab0 <osKernelSysTick>
 8013baa:	4602      	mov	r2, r0
 8013bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	e019      	b.n	8013be6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb6:	e016      	b.n	8013be6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013bb8:	69fb      	ldr	r3, [r7, #28]
 8013bba:	6819      	ldr	r1, [r3, #0]
 8013bbc:	463b      	mov	r3, r7
 8013bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7f1 f96c 	bl	8004ea0 <osMessageGet>
 8013bc8:	f107 0320 	add.w	r3, r7, #32
 8013bcc:	463a      	mov	r2, r7
 8013bce:	ca07      	ldmia	r2, {r0, r1, r2}
 8013bd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013bdc:	f7f0 ff68 	bl	8004ab0 <osKernelSysTick>
 8013be0:	4602      	mov	r2, r0
 8013be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3730      	adds	r7, #48	; 0x30
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}

08013bee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013bee:	b480      	push	{r7}
 8013bf0:	b083      	sub	sp, #12
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d101      	bne.n	8013c02 <sys_mbox_valid+0x14>
    return 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	e000      	b.n	8013c04 <sys_mbox_valid+0x16>
  else
    return 1;
 8013c02:	2301      	movs	r3, #1
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013c14:	4803      	ldr	r0, [pc, #12]	; (8013c24 <sys_init+0x14>)
 8013c16:	f7f0 ffbb 	bl	8004b90 <osMutexCreate>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	4a02      	ldr	r2, [pc, #8]	; (8013c28 <sys_init+0x18>)
 8013c1e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013c20:	bf00      	nop
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	08017f94 	.word	0x08017f94
 8013c28:	20010a88 	.word	0x20010a88

08013c2c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013c34:	2300      	movs	r3, #0
 8013c36:	60bb      	str	r3, [r7, #8]
 8013c38:	2300      	movs	r3, #0
 8013c3a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013c3c:	f107 0308 	add.w	r3, r7, #8
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7f0 ffa5 	bl	8004b90 <osMutexCreate>
 8013c46:	4602      	mov	r2, r0
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d102      	bne.n	8013c5a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013c54:	f04f 33ff 	mov.w	r3, #4294967295
 8013c58:	e000      	b.n	8013c5c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013c5a:	2300      	movs	r3, #0
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	f04f 31ff 	mov.w	r1, #4294967295
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f0 ffa3 	bl	8004bc0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013c7a:	bf00      	nop
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013c82:	b580      	push	{r7, lr}
 8013c84:	b082      	sub	sp, #8
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7f0 ffe4 	bl	8004c5c <osMutexRelease>
}
 8013c94:	bf00      	nop
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b08c      	sub	sp, #48	; 0x30
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	60b9      	str	r1, [r7, #8]
 8013ca6:	607a      	str	r2, [r7, #4]
 8013ca8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013caa:	f107 0314 	add.w	r3, r7, #20
 8013cae:	2200      	movs	r2, #0
 8013cb0:	601a      	str	r2, [r3, #0]
 8013cb2:	605a      	str	r2, [r3, #4]
 8013cb4:	609a      	str	r2, [r3, #8]
 8013cb6:	60da      	str	r2, [r3, #12]
 8013cb8:	611a      	str	r2, [r3, #16]
 8013cba:	615a      	str	r2, [r3, #20]
 8013cbc:	619a      	str	r2, [r3, #24]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	617b      	str	r3, [r7, #20]
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	61bb      	str	r3, [r7, #24]
 8013cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc8:	b21b      	sxth	r3, r3
 8013cca:	83bb      	strh	r3, [r7, #28]
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013cd0:	f107 0314 	add.w	r3, r7, #20
 8013cd4:	6879      	ldr	r1, [r7, #4]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f0 fefa 	bl	8004ad0 <osThreadCreate>
 8013cdc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	3730      	adds	r7, #48	; 0x30
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
	...

08013ce8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013cec:	4b04      	ldr	r3, [pc, #16]	; (8013d00 <sys_arch_protect+0x18>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7f0 ff63 	bl	8004bc0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013cfa:	2301      	movs	r3, #1
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	20010a88 	.word	0x20010a88

08013d04 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013d0c:	4b04      	ldr	r3, [pc, #16]	; (8013d20 <sys_arch_unprotect+0x1c>)
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7f0 ffa3 	bl	8004c5c <osMutexRelease>
}
 8013d16:	bf00      	nop
 8013d18:	3708      	adds	r7, #8
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20010a88 	.word	0x20010a88

08013d24 <std>:
 8013d24:	2300      	movs	r3, #0
 8013d26:	b510      	push	{r4, lr}
 8013d28:	4604      	mov	r4, r0
 8013d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8013d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d32:	6083      	str	r3, [r0, #8]
 8013d34:	8181      	strh	r1, [r0, #12]
 8013d36:	6643      	str	r3, [r0, #100]	; 0x64
 8013d38:	81c2      	strh	r2, [r0, #14]
 8013d3a:	6183      	str	r3, [r0, #24]
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	2208      	movs	r2, #8
 8013d40:	305c      	adds	r0, #92	; 0x5c
 8013d42:	f000 f92a 	bl	8013f9a <memset>
 8013d46:	4b05      	ldr	r3, [pc, #20]	; (8013d5c <std+0x38>)
 8013d48:	6263      	str	r3, [r4, #36]	; 0x24
 8013d4a:	4b05      	ldr	r3, [pc, #20]	; (8013d60 <std+0x3c>)
 8013d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d4e:	4b05      	ldr	r3, [pc, #20]	; (8013d64 <std+0x40>)
 8013d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d52:	4b05      	ldr	r3, [pc, #20]	; (8013d68 <std+0x44>)
 8013d54:	6224      	str	r4, [r4, #32]
 8013d56:	6323      	str	r3, [r4, #48]	; 0x30
 8013d58:	bd10      	pop	{r4, pc}
 8013d5a:	bf00      	nop
 8013d5c:	08014275 	.word	0x08014275
 8013d60:	08014297 	.word	0x08014297
 8013d64:	080142cf 	.word	0x080142cf
 8013d68:	080142f3 	.word	0x080142f3

08013d6c <_cleanup_r>:
 8013d6c:	4901      	ldr	r1, [pc, #4]	; (8013d74 <_cleanup_r+0x8>)
 8013d6e:	f000 b8af 	b.w	8013ed0 <_fwalk_reent>
 8013d72:	bf00      	nop
 8013d74:	08014489 	.word	0x08014489

08013d78 <__sfmoreglue>:
 8013d78:	b570      	push	{r4, r5, r6, lr}
 8013d7a:	2268      	movs	r2, #104	; 0x68
 8013d7c:	1e4d      	subs	r5, r1, #1
 8013d7e:	4355      	muls	r5, r2
 8013d80:	460e      	mov	r6, r1
 8013d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d86:	f000 f931 	bl	8013fec <_malloc_r>
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	b140      	cbz	r0, 8013da0 <__sfmoreglue+0x28>
 8013d8e:	2100      	movs	r1, #0
 8013d90:	e9c0 1600 	strd	r1, r6, [r0]
 8013d94:	300c      	adds	r0, #12
 8013d96:	60a0      	str	r0, [r4, #8]
 8013d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d9c:	f000 f8fd 	bl	8013f9a <memset>
 8013da0:	4620      	mov	r0, r4
 8013da2:	bd70      	pop	{r4, r5, r6, pc}

08013da4 <__sfp_lock_acquire>:
 8013da4:	4801      	ldr	r0, [pc, #4]	; (8013dac <__sfp_lock_acquire+0x8>)
 8013da6:	f000 b8d8 	b.w	8013f5a <__retarget_lock_acquire_recursive>
 8013daa:	bf00      	nop
 8013dac:	20010a8d 	.word	0x20010a8d

08013db0 <__sfp_lock_release>:
 8013db0:	4801      	ldr	r0, [pc, #4]	; (8013db8 <__sfp_lock_release+0x8>)
 8013db2:	f000 b8d3 	b.w	8013f5c <__retarget_lock_release_recursive>
 8013db6:	bf00      	nop
 8013db8:	20010a8d 	.word	0x20010a8d

08013dbc <__sinit_lock_acquire>:
 8013dbc:	4801      	ldr	r0, [pc, #4]	; (8013dc4 <__sinit_lock_acquire+0x8>)
 8013dbe:	f000 b8cc 	b.w	8013f5a <__retarget_lock_acquire_recursive>
 8013dc2:	bf00      	nop
 8013dc4:	20010a8e 	.word	0x20010a8e

08013dc8 <__sinit_lock_release>:
 8013dc8:	4801      	ldr	r0, [pc, #4]	; (8013dd0 <__sinit_lock_release+0x8>)
 8013dca:	f000 b8c7 	b.w	8013f5c <__retarget_lock_release_recursive>
 8013dce:	bf00      	nop
 8013dd0:	20010a8e 	.word	0x20010a8e

08013dd4 <__sinit>:
 8013dd4:	b510      	push	{r4, lr}
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	f7ff fff0 	bl	8013dbc <__sinit_lock_acquire>
 8013ddc:	69a3      	ldr	r3, [r4, #24]
 8013dde:	b11b      	cbz	r3, 8013de8 <__sinit+0x14>
 8013de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013de4:	f7ff bff0 	b.w	8013dc8 <__sinit_lock_release>
 8013de8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013dec:	6523      	str	r3, [r4, #80]	; 0x50
 8013dee:	4b13      	ldr	r3, [pc, #76]	; (8013e3c <__sinit+0x68>)
 8013df0:	4a13      	ldr	r2, [pc, #76]	; (8013e40 <__sinit+0x6c>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8013df6:	42a3      	cmp	r3, r4
 8013df8:	bf04      	itt	eq
 8013dfa:	2301      	moveq	r3, #1
 8013dfc:	61a3      	streq	r3, [r4, #24]
 8013dfe:	4620      	mov	r0, r4
 8013e00:	f000 f820 	bl	8013e44 <__sfp>
 8013e04:	6060      	str	r0, [r4, #4]
 8013e06:	4620      	mov	r0, r4
 8013e08:	f000 f81c 	bl	8013e44 <__sfp>
 8013e0c:	60a0      	str	r0, [r4, #8]
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f000 f818 	bl	8013e44 <__sfp>
 8013e14:	2200      	movs	r2, #0
 8013e16:	60e0      	str	r0, [r4, #12]
 8013e18:	2104      	movs	r1, #4
 8013e1a:	6860      	ldr	r0, [r4, #4]
 8013e1c:	f7ff ff82 	bl	8013d24 <std>
 8013e20:	68a0      	ldr	r0, [r4, #8]
 8013e22:	2201      	movs	r2, #1
 8013e24:	2109      	movs	r1, #9
 8013e26:	f7ff ff7d 	bl	8013d24 <std>
 8013e2a:	68e0      	ldr	r0, [r4, #12]
 8013e2c:	2202      	movs	r2, #2
 8013e2e:	2112      	movs	r1, #18
 8013e30:	f7ff ff78 	bl	8013d24 <std>
 8013e34:	2301      	movs	r3, #1
 8013e36:	61a3      	str	r3, [r4, #24]
 8013e38:	e7d2      	b.n	8013de0 <__sinit+0xc>
 8013e3a:	bf00      	nop
 8013e3c:	08017ffc 	.word	0x08017ffc
 8013e40:	08013d6d 	.word	0x08013d6d

08013e44 <__sfp>:
 8013e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e46:	4607      	mov	r7, r0
 8013e48:	f7ff ffac 	bl	8013da4 <__sfp_lock_acquire>
 8013e4c:	4b1e      	ldr	r3, [pc, #120]	; (8013ec8 <__sfp+0x84>)
 8013e4e:	681e      	ldr	r6, [r3, #0]
 8013e50:	69b3      	ldr	r3, [r6, #24]
 8013e52:	b913      	cbnz	r3, 8013e5a <__sfp+0x16>
 8013e54:	4630      	mov	r0, r6
 8013e56:	f7ff ffbd 	bl	8013dd4 <__sinit>
 8013e5a:	3648      	adds	r6, #72	; 0x48
 8013e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	d503      	bpl.n	8013e6c <__sfp+0x28>
 8013e64:	6833      	ldr	r3, [r6, #0]
 8013e66:	b30b      	cbz	r3, 8013eac <__sfp+0x68>
 8013e68:	6836      	ldr	r6, [r6, #0]
 8013e6a:	e7f7      	b.n	8013e5c <__sfp+0x18>
 8013e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e70:	b9d5      	cbnz	r5, 8013ea8 <__sfp+0x64>
 8013e72:	4b16      	ldr	r3, [pc, #88]	; (8013ecc <__sfp+0x88>)
 8013e74:	60e3      	str	r3, [r4, #12]
 8013e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e7a:	6665      	str	r5, [r4, #100]	; 0x64
 8013e7c:	f000 f86c 	bl	8013f58 <__retarget_lock_init_recursive>
 8013e80:	f7ff ff96 	bl	8013db0 <__sfp_lock_release>
 8013e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e8c:	6025      	str	r5, [r4, #0]
 8013e8e:	61a5      	str	r5, [r4, #24]
 8013e90:	2208      	movs	r2, #8
 8013e92:	4629      	mov	r1, r5
 8013e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e98:	f000 f87f 	bl	8013f9a <memset>
 8013e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea8:	3468      	adds	r4, #104	; 0x68
 8013eaa:	e7d9      	b.n	8013e60 <__sfp+0x1c>
 8013eac:	2104      	movs	r1, #4
 8013eae:	4638      	mov	r0, r7
 8013eb0:	f7ff ff62 	bl	8013d78 <__sfmoreglue>
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	6030      	str	r0, [r6, #0]
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d1d5      	bne.n	8013e68 <__sfp+0x24>
 8013ebc:	f7ff ff78 	bl	8013db0 <__sfp_lock_release>
 8013ec0:	230c      	movs	r3, #12
 8013ec2:	603b      	str	r3, [r7, #0]
 8013ec4:	e7ee      	b.n	8013ea4 <__sfp+0x60>
 8013ec6:	bf00      	nop
 8013ec8:	08017ffc 	.word	0x08017ffc
 8013ecc:	ffff0001 	.word	0xffff0001

08013ed0 <_fwalk_reent>:
 8013ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ed4:	4606      	mov	r6, r0
 8013ed6:	4688      	mov	r8, r1
 8013ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013edc:	2700      	movs	r7, #0
 8013ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8013ee6:	d505      	bpl.n	8013ef4 <_fwalk_reent+0x24>
 8013ee8:	6824      	ldr	r4, [r4, #0]
 8013eea:	2c00      	cmp	r4, #0
 8013eec:	d1f7      	bne.n	8013ede <_fwalk_reent+0xe>
 8013eee:	4638      	mov	r0, r7
 8013ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ef4:	89ab      	ldrh	r3, [r5, #12]
 8013ef6:	2b01      	cmp	r3, #1
 8013ef8:	d907      	bls.n	8013f0a <_fwalk_reent+0x3a>
 8013efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013efe:	3301      	adds	r3, #1
 8013f00:	d003      	beq.n	8013f0a <_fwalk_reent+0x3a>
 8013f02:	4629      	mov	r1, r5
 8013f04:	4630      	mov	r0, r6
 8013f06:	47c0      	blx	r8
 8013f08:	4307      	orrs	r7, r0
 8013f0a:	3568      	adds	r5, #104	; 0x68
 8013f0c:	e7e9      	b.n	8013ee2 <_fwalk_reent+0x12>
	...

08013f10 <__libc_init_array>:
 8013f10:	b570      	push	{r4, r5, r6, lr}
 8013f12:	4d0d      	ldr	r5, [pc, #52]	; (8013f48 <__libc_init_array+0x38>)
 8013f14:	4c0d      	ldr	r4, [pc, #52]	; (8013f4c <__libc_init_array+0x3c>)
 8013f16:	1b64      	subs	r4, r4, r5
 8013f18:	10a4      	asrs	r4, r4, #2
 8013f1a:	2600      	movs	r6, #0
 8013f1c:	42a6      	cmp	r6, r4
 8013f1e:	d109      	bne.n	8013f34 <__libc_init_array+0x24>
 8013f20:	4d0b      	ldr	r5, [pc, #44]	; (8013f50 <__libc_init_array+0x40>)
 8013f22:	4c0c      	ldr	r4, [pc, #48]	; (8013f54 <__libc_init_array+0x44>)
 8013f24:	f001 f802 	bl	8014f2c <_init>
 8013f28:	1b64      	subs	r4, r4, r5
 8013f2a:	10a4      	asrs	r4, r4, #2
 8013f2c:	2600      	movs	r6, #0
 8013f2e:	42a6      	cmp	r6, r4
 8013f30:	d105      	bne.n	8013f3e <__libc_init_array+0x2e>
 8013f32:	bd70      	pop	{r4, r5, r6, pc}
 8013f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f38:	4798      	blx	r3
 8013f3a:	3601      	adds	r6, #1
 8013f3c:	e7ee      	b.n	8013f1c <__libc_init_array+0xc>
 8013f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f42:	4798      	blx	r3
 8013f44:	3601      	adds	r6, #1
 8013f46:	e7f2      	b.n	8013f2e <__libc_init_array+0x1e>
 8013f48:	080180ec 	.word	0x080180ec
 8013f4c:	080180ec 	.word	0x080180ec
 8013f50:	080180ec 	.word	0x080180ec
 8013f54:	080180f0 	.word	0x080180f0

08013f58 <__retarget_lock_init_recursive>:
 8013f58:	4770      	bx	lr

08013f5a <__retarget_lock_acquire_recursive>:
 8013f5a:	4770      	bx	lr

08013f5c <__retarget_lock_release_recursive>:
 8013f5c:	4770      	bx	lr

08013f5e <memcmp>:
 8013f5e:	b510      	push	{r4, lr}
 8013f60:	3901      	subs	r1, #1
 8013f62:	4402      	add	r2, r0
 8013f64:	4290      	cmp	r0, r2
 8013f66:	d101      	bne.n	8013f6c <memcmp+0xe>
 8013f68:	2000      	movs	r0, #0
 8013f6a:	e005      	b.n	8013f78 <memcmp+0x1a>
 8013f6c:	7803      	ldrb	r3, [r0, #0]
 8013f6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f72:	42a3      	cmp	r3, r4
 8013f74:	d001      	beq.n	8013f7a <memcmp+0x1c>
 8013f76:	1b18      	subs	r0, r3, r4
 8013f78:	bd10      	pop	{r4, pc}
 8013f7a:	3001      	adds	r0, #1
 8013f7c:	e7f2      	b.n	8013f64 <memcmp+0x6>

08013f7e <memcpy>:
 8013f7e:	440a      	add	r2, r1
 8013f80:	4291      	cmp	r1, r2
 8013f82:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f86:	d100      	bne.n	8013f8a <memcpy+0xc>
 8013f88:	4770      	bx	lr
 8013f8a:	b510      	push	{r4, lr}
 8013f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f94:	4291      	cmp	r1, r2
 8013f96:	d1f9      	bne.n	8013f8c <memcpy+0xe>
 8013f98:	bd10      	pop	{r4, pc}

08013f9a <memset>:
 8013f9a:	4402      	add	r2, r0
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d100      	bne.n	8013fa4 <memset+0xa>
 8013fa2:	4770      	bx	lr
 8013fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8013fa8:	e7f9      	b.n	8013f9e <memset+0x4>
	...

08013fac <sbrk_aligned>:
 8013fac:	b570      	push	{r4, r5, r6, lr}
 8013fae:	4e0e      	ldr	r6, [pc, #56]	; (8013fe8 <sbrk_aligned+0x3c>)
 8013fb0:	460c      	mov	r4, r1
 8013fb2:	6831      	ldr	r1, [r6, #0]
 8013fb4:	4605      	mov	r5, r0
 8013fb6:	b911      	cbnz	r1, 8013fbe <sbrk_aligned+0x12>
 8013fb8:	f000 f94c 	bl	8014254 <_sbrk_r>
 8013fbc:	6030      	str	r0, [r6, #0]
 8013fbe:	4621      	mov	r1, r4
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f000 f947 	bl	8014254 <_sbrk_r>
 8013fc6:	1c43      	adds	r3, r0, #1
 8013fc8:	d00a      	beq.n	8013fe0 <sbrk_aligned+0x34>
 8013fca:	1cc4      	adds	r4, r0, #3
 8013fcc:	f024 0403 	bic.w	r4, r4, #3
 8013fd0:	42a0      	cmp	r0, r4
 8013fd2:	d007      	beq.n	8013fe4 <sbrk_aligned+0x38>
 8013fd4:	1a21      	subs	r1, r4, r0
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	f000 f93c 	bl	8014254 <_sbrk_r>
 8013fdc:	3001      	adds	r0, #1
 8013fde:	d101      	bne.n	8013fe4 <sbrk_aligned+0x38>
 8013fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	bd70      	pop	{r4, r5, r6, pc}
 8013fe8:	20010a94 	.word	0x20010a94

08013fec <_malloc_r>:
 8013fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	1ccd      	adds	r5, r1, #3
 8013ff2:	f025 0503 	bic.w	r5, r5, #3
 8013ff6:	3508      	adds	r5, #8
 8013ff8:	2d0c      	cmp	r5, #12
 8013ffa:	bf38      	it	cc
 8013ffc:	250c      	movcc	r5, #12
 8013ffe:	2d00      	cmp	r5, #0
 8014000:	4607      	mov	r7, r0
 8014002:	db01      	blt.n	8014008 <_malloc_r+0x1c>
 8014004:	42a9      	cmp	r1, r5
 8014006:	d905      	bls.n	8014014 <_malloc_r+0x28>
 8014008:	230c      	movs	r3, #12
 801400a:	603b      	str	r3, [r7, #0]
 801400c:	2600      	movs	r6, #0
 801400e:	4630      	mov	r0, r6
 8014010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014014:	4e2e      	ldr	r6, [pc, #184]	; (80140d0 <_malloc_r+0xe4>)
 8014016:	f000 fa9f 	bl	8014558 <__malloc_lock>
 801401a:	6833      	ldr	r3, [r6, #0]
 801401c:	461c      	mov	r4, r3
 801401e:	bb34      	cbnz	r4, 801406e <_malloc_r+0x82>
 8014020:	4629      	mov	r1, r5
 8014022:	4638      	mov	r0, r7
 8014024:	f7ff ffc2 	bl	8013fac <sbrk_aligned>
 8014028:	1c43      	adds	r3, r0, #1
 801402a:	4604      	mov	r4, r0
 801402c:	d14d      	bne.n	80140ca <_malloc_r+0xde>
 801402e:	6834      	ldr	r4, [r6, #0]
 8014030:	4626      	mov	r6, r4
 8014032:	2e00      	cmp	r6, #0
 8014034:	d140      	bne.n	80140b8 <_malloc_r+0xcc>
 8014036:	6823      	ldr	r3, [r4, #0]
 8014038:	4631      	mov	r1, r6
 801403a:	4638      	mov	r0, r7
 801403c:	eb04 0803 	add.w	r8, r4, r3
 8014040:	f000 f908 	bl	8014254 <_sbrk_r>
 8014044:	4580      	cmp	r8, r0
 8014046:	d13a      	bne.n	80140be <_malloc_r+0xd2>
 8014048:	6821      	ldr	r1, [r4, #0]
 801404a:	3503      	adds	r5, #3
 801404c:	1a6d      	subs	r5, r5, r1
 801404e:	f025 0503 	bic.w	r5, r5, #3
 8014052:	3508      	adds	r5, #8
 8014054:	2d0c      	cmp	r5, #12
 8014056:	bf38      	it	cc
 8014058:	250c      	movcc	r5, #12
 801405a:	4629      	mov	r1, r5
 801405c:	4638      	mov	r0, r7
 801405e:	f7ff ffa5 	bl	8013fac <sbrk_aligned>
 8014062:	3001      	adds	r0, #1
 8014064:	d02b      	beq.n	80140be <_malloc_r+0xd2>
 8014066:	6823      	ldr	r3, [r4, #0]
 8014068:	442b      	add	r3, r5
 801406a:	6023      	str	r3, [r4, #0]
 801406c:	e00e      	b.n	801408c <_malloc_r+0xa0>
 801406e:	6822      	ldr	r2, [r4, #0]
 8014070:	1b52      	subs	r2, r2, r5
 8014072:	d41e      	bmi.n	80140b2 <_malloc_r+0xc6>
 8014074:	2a0b      	cmp	r2, #11
 8014076:	d916      	bls.n	80140a6 <_malloc_r+0xba>
 8014078:	1961      	adds	r1, r4, r5
 801407a:	42a3      	cmp	r3, r4
 801407c:	6025      	str	r5, [r4, #0]
 801407e:	bf18      	it	ne
 8014080:	6059      	strne	r1, [r3, #4]
 8014082:	6863      	ldr	r3, [r4, #4]
 8014084:	bf08      	it	eq
 8014086:	6031      	streq	r1, [r6, #0]
 8014088:	5162      	str	r2, [r4, r5]
 801408a:	604b      	str	r3, [r1, #4]
 801408c:	4638      	mov	r0, r7
 801408e:	f104 060b 	add.w	r6, r4, #11
 8014092:	f000 fa67 	bl	8014564 <__malloc_unlock>
 8014096:	f026 0607 	bic.w	r6, r6, #7
 801409a:	1d23      	adds	r3, r4, #4
 801409c:	1af2      	subs	r2, r6, r3
 801409e:	d0b6      	beq.n	801400e <_malloc_r+0x22>
 80140a0:	1b9b      	subs	r3, r3, r6
 80140a2:	50a3      	str	r3, [r4, r2]
 80140a4:	e7b3      	b.n	801400e <_malloc_r+0x22>
 80140a6:	6862      	ldr	r2, [r4, #4]
 80140a8:	42a3      	cmp	r3, r4
 80140aa:	bf0c      	ite	eq
 80140ac:	6032      	streq	r2, [r6, #0]
 80140ae:	605a      	strne	r2, [r3, #4]
 80140b0:	e7ec      	b.n	801408c <_malloc_r+0xa0>
 80140b2:	4623      	mov	r3, r4
 80140b4:	6864      	ldr	r4, [r4, #4]
 80140b6:	e7b2      	b.n	801401e <_malloc_r+0x32>
 80140b8:	4634      	mov	r4, r6
 80140ba:	6876      	ldr	r6, [r6, #4]
 80140bc:	e7b9      	b.n	8014032 <_malloc_r+0x46>
 80140be:	230c      	movs	r3, #12
 80140c0:	603b      	str	r3, [r7, #0]
 80140c2:	4638      	mov	r0, r7
 80140c4:	f000 fa4e 	bl	8014564 <__malloc_unlock>
 80140c8:	e7a1      	b.n	801400e <_malloc_r+0x22>
 80140ca:	6025      	str	r5, [r4, #0]
 80140cc:	e7de      	b.n	801408c <_malloc_r+0xa0>
 80140ce:	bf00      	nop
 80140d0:	20010a90 	.word	0x20010a90

080140d4 <iprintf>:
 80140d4:	b40f      	push	{r0, r1, r2, r3}
 80140d6:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <iprintf+0x2c>)
 80140d8:	b513      	push	{r0, r1, r4, lr}
 80140da:	681c      	ldr	r4, [r3, #0]
 80140dc:	b124      	cbz	r4, 80140e8 <iprintf+0x14>
 80140de:	69a3      	ldr	r3, [r4, #24]
 80140e0:	b913      	cbnz	r3, 80140e8 <iprintf+0x14>
 80140e2:	4620      	mov	r0, r4
 80140e4:	f7ff fe76 	bl	8013dd4 <__sinit>
 80140e8:	ab05      	add	r3, sp, #20
 80140ea:	9a04      	ldr	r2, [sp, #16]
 80140ec:	68a1      	ldr	r1, [r4, #8]
 80140ee:	9301      	str	r3, [sp, #4]
 80140f0:	4620      	mov	r0, r4
 80140f2:	f000 fab3 	bl	801465c <_vfiprintf_r>
 80140f6:	b002      	add	sp, #8
 80140f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140fc:	b004      	add	sp, #16
 80140fe:	4770      	bx	lr
 8014100:	20000034 	.word	0x20000034

08014104 <rand>:
 8014104:	4b16      	ldr	r3, [pc, #88]	; (8014160 <rand+0x5c>)
 8014106:	b510      	push	{r4, lr}
 8014108:	681c      	ldr	r4, [r3, #0]
 801410a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801410c:	b9b3      	cbnz	r3, 801413c <rand+0x38>
 801410e:	2018      	movs	r0, #24
 8014110:	f000 fa1a 	bl	8014548 <malloc>
 8014114:	63a0      	str	r0, [r4, #56]	; 0x38
 8014116:	b928      	cbnz	r0, 8014124 <rand+0x20>
 8014118:	4602      	mov	r2, r0
 801411a:	4b12      	ldr	r3, [pc, #72]	; (8014164 <rand+0x60>)
 801411c:	4812      	ldr	r0, [pc, #72]	; (8014168 <rand+0x64>)
 801411e:	214e      	movs	r1, #78	; 0x4e
 8014120:	f000 f8fe 	bl	8014320 <__assert_func>
 8014124:	4a11      	ldr	r2, [pc, #68]	; (801416c <rand+0x68>)
 8014126:	4b12      	ldr	r3, [pc, #72]	; (8014170 <rand+0x6c>)
 8014128:	e9c0 2300 	strd	r2, r3, [r0]
 801412c:	4b11      	ldr	r3, [pc, #68]	; (8014174 <rand+0x70>)
 801412e:	6083      	str	r3, [r0, #8]
 8014130:	230b      	movs	r3, #11
 8014132:	8183      	strh	r3, [r0, #12]
 8014134:	2201      	movs	r2, #1
 8014136:	2300      	movs	r3, #0
 8014138:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801413c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801413e:	4a0e      	ldr	r2, [pc, #56]	; (8014178 <rand+0x74>)
 8014140:	6920      	ldr	r0, [r4, #16]
 8014142:	6963      	ldr	r3, [r4, #20]
 8014144:	490d      	ldr	r1, [pc, #52]	; (801417c <rand+0x78>)
 8014146:	4342      	muls	r2, r0
 8014148:	fb01 2203 	mla	r2, r1, r3, r2
 801414c:	fba0 0101 	umull	r0, r1, r0, r1
 8014150:	1c43      	adds	r3, r0, #1
 8014152:	eb42 0001 	adc.w	r0, r2, r1
 8014156:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801415a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801415e:	bd10      	pop	{r4, pc}
 8014160:	20000034 	.word	0x20000034
 8014164:	08018000 	.word	0x08018000
 8014168:	08018017 	.word	0x08018017
 801416c:	abcd330e 	.word	0xabcd330e
 8014170:	e66d1234 	.word	0xe66d1234
 8014174:	0005deec 	.word	0x0005deec
 8014178:	5851f42d 	.word	0x5851f42d
 801417c:	4c957f2d 	.word	0x4c957f2d

08014180 <cleanup_glue>:
 8014180:	b538      	push	{r3, r4, r5, lr}
 8014182:	460c      	mov	r4, r1
 8014184:	6809      	ldr	r1, [r1, #0]
 8014186:	4605      	mov	r5, r0
 8014188:	b109      	cbz	r1, 801418e <cleanup_glue+0xe>
 801418a:	f7ff fff9 	bl	8014180 <cleanup_glue>
 801418e:	4621      	mov	r1, r4
 8014190:	4628      	mov	r0, r5
 8014192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014196:	f000 b9eb 	b.w	8014570 <_free_r>
	...

0801419c <_reclaim_reent>:
 801419c:	4b2c      	ldr	r3, [pc, #176]	; (8014250 <_reclaim_reent+0xb4>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	4283      	cmp	r3, r0
 80141a2:	b570      	push	{r4, r5, r6, lr}
 80141a4:	4604      	mov	r4, r0
 80141a6:	d051      	beq.n	801424c <_reclaim_reent+0xb0>
 80141a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80141aa:	b143      	cbz	r3, 80141be <_reclaim_reent+0x22>
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d14a      	bne.n	8014248 <_reclaim_reent+0xac>
 80141b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141b4:	6819      	ldr	r1, [r3, #0]
 80141b6:	b111      	cbz	r1, 80141be <_reclaim_reent+0x22>
 80141b8:	4620      	mov	r0, r4
 80141ba:	f000 f9d9 	bl	8014570 <_free_r>
 80141be:	6961      	ldr	r1, [r4, #20]
 80141c0:	b111      	cbz	r1, 80141c8 <_reclaim_reent+0x2c>
 80141c2:	4620      	mov	r0, r4
 80141c4:	f000 f9d4 	bl	8014570 <_free_r>
 80141c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80141ca:	b111      	cbz	r1, 80141d2 <_reclaim_reent+0x36>
 80141cc:	4620      	mov	r0, r4
 80141ce:	f000 f9cf 	bl	8014570 <_free_r>
 80141d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80141d4:	b111      	cbz	r1, 80141dc <_reclaim_reent+0x40>
 80141d6:	4620      	mov	r0, r4
 80141d8:	f000 f9ca 	bl	8014570 <_free_r>
 80141dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80141de:	b111      	cbz	r1, 80141e6 <_reclaim_reent+0x4a>
 80141e0:	4620      	mov	r0, r4
 80141e2:	f000 f9c5 	bl	8014570 <_free_r>
 80141e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80141e8:	b111      	cbz	r1, 80141f0 <_reclaim_reent+0x54>
 80141ea:	4620      	mov	r0, r4
 80141ec:	f000 f9c0 	bl	8014570 <_free_r>
 80141f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80141f2:	b111      	cbz	r1, 80141fa <_reclaim_reent+0x5e>
 80141f4:	4620      	mov	r0, r4
 80141f6:	f000 f9bb 	bl	8014570 <_free_r>
 80141fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80141fc:	b111      	cbz	r1, 8014204 <_reclaim_reent+0x68>
 80141fe:	4620      	mov	r0, r4
 8014200:	f000 f9b6 	bl	8014570 <_free_r>
 8014204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014206:	b111      	cbz	r1, 801420e <_reclaim_reent+0x72>
 8014208:	4620      	mov	r0, r4
 801420a:	f000 f9b1 	bl	8014570 <_free_r>
 801420e:	69a3      	ldr	r3, [r4, #24]
 8014210:	b1e3      	cbz	r3, 801424c <_reclaim_reent+0xb0>
 8014212:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014214:	4620      	mov	r0, r4
 8014216:	4798      	blx	r3
 8014218:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801421a:	b1b9      	cbz	r1, 801424c <_reclaim_reent+0xb0>
 801421c:	4620      	mov	r0, r4
 801421e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014222:	f7ff bfad 	b.w	8014180 <cleanup_glue>
 8014226:	5949      	ldr	r1, [r1, r5]
 8014228:	b941      	cbnz	r1, 801423c <_reclaim_reent+0xa0>
 801422a:	3504      	adds	r5, #4
 801422c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801422e:	2d80      	cmp	r5, #128	; 0x80
 8014230:	68d9      	ldr	r1, [r3, #12]
 8014232:	d1f8      	bne.n	8014226 <_reclaim_reent+0x8a>
 8014234:	4620      	mov	r0, r4
 8014236:	f000 f99b 	bl	8014570 <_free_r>
 801423a:	e7ba      	b.n	80141b2 <_reclaim_reent+0x16>
 801423c:	680e      	ldr	r6, [r1, #0]
 801423e:	4620      	mov	r0, r4
 8014240:	f000 f996 	bl	8014570 <_free_r>
 8014244:	4631      	mov	r1, r6
 8014246:	e7ef      	b.n	8014228 <_reclaim_reent+0x8c>
 8014248:	2500      	movs	r5, #0
 801424a:	e7ef      	b.n	801422c <_reclaim_reent+0x90>
 801424c:	bd70      	pop	{r4, r5, r6, pc}
 801424e:	bf00      	nop
 8014250:	20000034 	.word	0x20000034

08014254 <_sbrk_r>:
 8014254:	b538      	push	{r3, r4, r5, lr}
 8014256:	4d06      	ldr	r5, [pc, #24]	; (8014270 <_sbrk_r+0x1c>)
 8014258:	2300      	movs	r3, #0
 801425a:	4604      	mov	r4, r0
 801425c:	4608      	mov	r0, r1
 801425e:	602b      	str	r3, [r5, #0]
 8014260:	f7ec fd06 	bl	8000c70 <_sbrk>
 8014264:	1c43      	adds	r3, r0, #1
 8014266:	d102      	bne.n	801426e <_sbrk_r+0x1a>
 8014268:	682b      	ldr	r3, [r5, #0]
 801426a:	b103      	cbz	r3, 801426e <_sbrk_r+0x1a>
 801426c:	6023      	str	r3, [r4, #0]
 801426e:	bd38      	pop	{r3, r4, r5, pc}
 8014270:	20010a98 	.word	0x20010a98

08014274 <__sread>:
 8014274:	b510      	push	{r4, lr}
 8014276:	460c      	mov	r4, r1
 8014278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801427c:	f000 fcb2 	bl	8014be4 <_read_r>
 8014280:	2800      	cmp	r0, #0
 8014282:	bfab      	itete	ge
 8014284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014286:	89a3      	ldrhlt	r3, [r4, #12]
 8014288:	181b      	addge	r3, r3, r0
 801428a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801428e:	bfac      	ite	ge
 8014290:	6563      	strge	r3, [r4, #84]	; 0x54
 8014292:	81a3      	strhlt	r3, [r4, #12]
 8014294:	bd10      	pop	{r4, pc}

08014296 <__swrite>:
 8014296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801429a:	461f      	mov	r7, r3
 801429c:	898b      	ldrh	r3, [r1, #12]
 801429e:	05db      	lsls	r3, r3, #23
 80142a0:	4605      	mov	r5, r0
 80142a2:	460c      	mov	r4, r1
 80142a4:	4616      	mov	r6, r2
 80142a6:	d505      	bpl.n	80142b4 <__swrite+0x1e>
 80142a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ac:	2302      	movs	r3, #2
 80142ae:	2200      	movs	r2, #0
 80142b0:	f000 f938 	bl	8014524 <_lseek_r>
 80142b4:	89a3      	ldrh	r3, [r4, #12]
 80142b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80142be:	81a3      	strh	r3, [r4, #12]
 80142c0:	4632      	mov	r2, r6
 80142c2:	463b      	mov	r3, r7
 80142c4:	4628      	mov	r0, r5
 80142c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142ca:	f000 b817 	b.w	80142fc <_write_r>

080142ce <__sseek>:
 80142ce:	b510      	push	{r4, lr}
 80142d0:	460c      	mov	r4, r1
 80142d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142d6:	f000 f925 	bl	8014524 <_lseek_r>
 80142da:	1c43      	adds	r3, r0, #1
 80142dc:	89a3      	ldrh	r3, [r4, #12]
 80142de:	bf15      	itete	ne
 80142e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80142e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80142e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80142ea:	81a3      	strheq	r3, [r4, #12]
 80142ec:	bf18      	it	ne
 80142ee:	81a3      	strhne	r3, [r4, #12]
 80142f0:	bd10      	pop	{r4, pc}

080142f2 <__sclose>:
 80142f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142f6:	f000 b831 	b.w	801435c <_close_r>
	...

080142fc <_write_r>:
 80142fc:	b538      	push	{r3, r4, r5, lr}
 80142fe:	4d07      	ldr	r5, [pc, #28]	; (801431c <_write_r+0x20>)
 8014300:	4604      	mov	r4, r0
 8014302:	4608      	mov	r0, r1
 8014304:	4611      	mov	r1, r2
 8014306:	2200      	movs	r2, #0
 8014308:	602a      	str	r2, [r5, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	f7ec fc5f 	bl	8000bce <_write>
 8014310:	1c43      	adds	r3, r0, #1
 8014312:	d102      	bne.n	801431a <_write_r+0x1e>
 8014314:	682b      	ldr	r3, [r5, #0]
 8014316:	b103      	cbz	r3, 801431a <_write_r+0x1e>
 8014318:	6023      	str	r3, [r4, #0]
 801431a:	bd38      	pop	{r3, r4, r5, pc}
 801431c:	20010a98 	.word	0x20010a98

08014320 <__assert_func>:
 8014320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014322:	4614      	mov	r4, r2
 8014324:	461a      	mov	r2, r3
 8014326:	4b09      	ldr	r3, [pc, #36]	; (801434c <__assert_func+0x2c>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4605      	mov	r5, r0
 801432c:	68d8      	ldr	r0, [r3, #12]
 801432e:	b14c      	cbz	r4, 8014344 <__assert_func+0x24>
 8014330:	4b07      	ldr	r3, [pc, #28]	; (8014350 <__assert_func+0x30>)
 8014332:	9100      	str	r1, [sp, #0]
 8014334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014338:	4906      	ldr	r1, [pc, #24]	; (8014354 <__assert_func+0x34>)
 801433a:	462b      	mov	r3, r5
 801433c:	f000 f8e0 	bl	8014500 <fiprintf>
 8014340:	f000 fd22 	bl	8014d88 <abort>
 8014344:	4b04      	ldr	r3, [pc, #16]	; (8014358 <__assert_func+0x38>)
 8014346:	461c      	mov	r4, r3
 8014348:	e7f3      	b.n	8014332 <__assert_func+0x12>
 801434a:	bf00      	nop
 801434c:	20000034 	.word	0x20000034
 8014350:	08018072 	.word	0x08018072
 8014354:	0801807f 	.word	0x0801807f
 8014358:	080180ad 	.word	0x080180ad

0801435c <_close_r>:
 801435c:	b538      	push	{r3, r4, r5, lr}
 801435e:	4d06      	ldr	r5, [pc, #24]	; (8014378 <_close_r+0x1c>)
 8014360:	2300      	movs	r3, #0
 8014362:	4604      	mov	r4, r0
 8014364:	4608      	mov	r0, r1
 8014366:	602b      	str	r3, [r5, #0]
 8014368:	f7ec fc4d 	bl	8000c06 <_close>
 801436c:	1c43      	adds	r3, r0, #1
 801436e:	d102      	bne.n	8014376 <_close_r+0x1a>
 8014370:	682b      	ldr	r3, [r5, #0]
 8014372:	b103      	cbz	r3, 8014376 <_close_r+0x1a>
 8014374:	6023      	str	r3, [r4, #0]
 8014376:	bd38      	pop	{r3, r4, r5, pc}
 8014378:	20010a98 	.word	0x20010a98

0801437c <__sflush_r>:
 801437c:	898a      	ldrh	r2, [r1, #12]
 801437e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014382:	4605      	mov	r5, r0
 8014384:	0710      	lsls	r0, r2, #28
 8014386:	460c      	mov	r4, r1
 8014388:	d458      	bmi.n	801443c <__sflush_r+0xc0>
 801438a:	684b      	ldr	r3, [r1, #4]
 801438c:	2b00      	cmp	r3, #0
 801438e:	dc05      	bgt.n	801439c <__sflush_r+0x20>
 8014390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014392:	2b00      	cmp	r3, #0
 8014394:	dc02      	bgt.n	801439c <__sflush_r+0x20>
 8014396:	2000      	movs	r0, #0
 8014398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801439c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801439e:	2e00      	cmp	r6, #0
 80143a0:	d0f9      	beq.n	8014396 <__sflush_r+0x1a>
 80143a2:	2300      	movs	r3, #0
 80143a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80143a8:	682f      	ldr	r7, [r5, #0]
 80143aa:	602b      	str	r3, [r5, #0]
 80143ac:	d032      	beq.n	8014414 <__sflush_r+0x98>
 80143ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80143b0:	89a3      	ldrh	r3, [r4, #12]
 80143b2:	075a      	lsls	r2, r3, #29
 80143b4:	d505      	bpl.n	80143c2 <__sflush_r+0x46>
 80143b6:	6863      	ldr	r3, [r4, #4]
 80143b8:	1ac0      	subs	r0, r0, r3
 80143ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143bc:	b10b      	cbz	r3, 80143c2 <__sflush_r+0x46>
 80143be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143c0:	1ac0      	subs	r0, r0, r3
 80143c2:	2300      	movs	r3, #0
 80143c4:	4602      	mov	r2, r0
 80143c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143c8:	6a21      	ldr	r1, [r4, #32]
 80143ca:	4628      	mov	r0, r5
 80143cc:	47b0      	blx	r6
 80143ce:	1c43      	adds	r3, r0, #1
 80143d0:	89a3      	ldrh	r3, [r4, #12]
 80143d2:	d106      	bne.n	80143e2 <__sflush_r+0x66>
 80143d4:	6829      	ldr	r1, [r5, #0]
 80143d6:	291d      	cmp	r1, #29
 80143d8:	d82c      	bhi.n	8014434 <__sflush_r+0xb8>
 80143da:	4a2a      	ldr	r2, [pc, #168]	; (8014484 <__sflush_r+0x108>)
 80143dc:	40ca      	lsrs	r2, r1
 80143de:	07d6      	lsls	r6, r2, #31
 80143e0:	d528      	bpl.n	8014434 <__sflush_r+0xb8>
 80143e2:	2200      	movs	r2, #0
 80143e4:	6062      	str	r2, [r4, #4]
 80143e6:	04d9      	lsls	r1, r3, #19
 80143e8:	6922      	ldr	r2, [r4, #16]
 80143ea:	6022      	str	r2, [r4, #0]
 80143ec:	d504      	bpl.n	80143f8 <__sflush_r+0x7c>
 80143ee:	1c42      	adds	r2, r0, #1
 80143f0:	d101      	bne.n	80143f6 <__sflush_r+0x7a>
 80143f2:	682b      	ldr	r3, [r5, #0]
 80143f4:	b903      	cbnz	r3, 80143f8 <__sflush_r+0x7c>
 80143f6:	6560      	str	r0, [r4, #84]	; 0x54
 80143f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143fa:	602f      	str	r7, [r5, #0]
 80143fc:	2900      	cmp	r1, #0
 80143fe:	d0ca      	beq.n	8014396 <__sflush_r+0x1a>
 8014400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014404:	4299      	cmp	r1, r3
 8014406:	d002      	beq.n	801440e <__sflush_r+0x92>
 8014408:	4628      	mov	r0, r5
 801440a:	f000 f8b1 	bl	8014570 <_free_r>
 801440e:	2000      	movs	r0, #0
 8014410:	6360      	str	r0, [r4, #52]	; 0x34
 8014412:	e7c1      	b.n	8014398 <__sflush_r+0x1c>
 8014414:	6a21      	ldr	r1, [r4, #32]
 8014416:	2301      	movs	r3, #1
 8014418:	4628      	mov	r0, r5
 801441a:	47b0      	blx	r6
 801441c:	1c41      	adds	r1, r0, #1
 801441e:	d1c7      	bne.n	80143b0 <__sflush_r+0x34>
 8014420:	682b      	ldr	r3, [r5, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d0c4      	beq.n	80143b0 <__sflush_r+0x34>
 8014426:	2b1d      	cmp	r3, #29
 8014428:	d001      	beq.n	801442e <__sflush_r+0xb2>
 801442a:	2b16      	cmp	r3, #22
 801442c:	d101      	bne.n	8014432 <__sflush_r+0xb6>
 801442e:	602f      	str	r7, [r5, #0]
 8014430:	e7b1      	b.n	8014396 <__sflush_r+0x1a>
 8014432:	89a3      	ldrh	r3, [r4, #12]
 8014434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014438:	81a3      	strh	r3, [r4, #12]
 801443a:	e7ad      	b.n	8014398 <__sflush_r+0x1c>
 801443c:	690f      	ldr	r7, [r1, #16]
 801443e:	2f00      	cmp	r7, #0
 8014440:	d0a9      	beq.n	8014396 <__sflush_r+0x1a>
 8014442:	0793      	lsls	r3, r2, #30
 8014444:	680e      	ldr	r6, [r1, #0]
 8014446:	bf08      	it	eq
 8014448:	694b      	ldreq	r3, [r1, #20]
 801444a:	600f      	str	r7, [r1, #0]
 801444c:	bf18      	it	ne
 801444e:	2300      	movne	r3, #0
 8014450:	eba6 0807 	sub.w	r8, r6, r7
 8014454:	608b      	str	r3, [r1, #8]
 8014456:	f1b8 0f00 	cmp.w	r8, #0
 801445a:	dd9c      	ble.n	8014396 <__sflush_r+0x1a>
 801445c:	6a21      	ldr	r1, [r4, #32]
 801445e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014460:	4643      	mov	r3, r8
 8014462:	463a      	mov	r2, r7
 8014464:	4628      	mov	r0, r5
 8014466:	47b0      	blx	r6
 8014468:	2800      	cmp	r0, #0
 801446a:	dc06      	bgt.n	801447a <__sflush_r+0xfe>
 801446c:	89a3      	ldrh	r3, [r4, #12]
 801446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014472:	81a3      	strh	r3, [r4, #12]
 8014474:	f04f 30ff 	mov.w	r0, #4294967295
 8014478:	e78e      	b.n	8014398 <__sflush_r+0x1c>
 801447a:	4407      	add	r7, r0
 801447c:	eba8 0800 	sub.w	r8, r8, r0
 8014480:	e7e9      	b.n	8014456 <__sflush_r+0xda>
 8014482:	bf00      	nop
 8014484:	20400001 	.word	0x20400001

08014488 <_fflush_r>:
 8014488:	b538      	push	{r3, r4, r5, lr}
 801448a:	690b      	ldr	r3, [r1, #16]
 801448c:	4605      	mov	r5, r0
 801448e:	460c      	mov	r4, r1
 8014490:	b913      	cbnz	r3, 8014498 <_fflush_r+0x10>
 8014492:	2500      	movs	r5, #0
 8014494:	4628      	mov	r0, r5
 8014496:	bd38      	pop	{r3, r4, r5, pc}
 8014498:	b118      	cbz	r0, 80144a2 <_fflush_r+0x1a>
 801449a:	6983      	ldr	r3, [r0, #24]
 801449c:	b90b      	cbnz	r3, 80144a2 <_fflush_r+0x1a>
 801449e:	f7ff fc99 	bl	8013dd4 <__sinit>
 80144a2:	4b14      	ldr	r3, [pc, #80]	; (80144f4 <_fflush_r+0x6c>)
 80144a4:	429c      	cmp	r4, r3
 80144a6:	d11b      	bne.n	80144e0 <_fflush_r+0x58>
 80144a8:	686c      	ldr	r4, [r5, #4]
 80144aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d0ef      	beq.n	8014492 <_fflush_r+0xa>
 80144b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80144b4:	07d0      	lsls	r0, r2, #31
 80144b6:	d404      	bmi.n	80144c2 <_fflush_r+0x3a>
 80144b8:	0599      	lsls	r1, r3, #22
 80144ba:	d402      	bmi.n	80144c2 <_fflush_r+0x3a>
 80144bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144be:	f7ff fd4c 	bl	8013f5a <__retarget_lock_acquire_recursive>
 80144c2:	4628      	mov	r0, r5
 80144c4:	4621      	mov	r1, r4
 80144c6:	f7ff ff59 	bl	801437c <__sflush_r>
 80144ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144cc:	07da      	lsls	r2, r3, #31
 80144ce:	4605      	mov	r5, r0
 80144d0:	d4e0      	bmi.n	8014494 <_fflush_r+0xc>
 80144d2:	89a3      	ldrh	r3, [r4, #12]
 80144d4:	059b      	lsls	r3, r3, #22
 80144d6:	d4dd      	bmi.n	8014494 <_fflush_r+0xc>
 80144d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144da:	f7ff fd3f 	bl	8013f5c <__retarget_lock_release_recursive>
 80144de:	e7d9      	b.n	8014494 <_fflush_r+0xc>
 80144e0:	4b05      	ldr	r3, [pc, #20]	; (80144f8 <_fflush_r+0x70>)
 80144e2:	429c      	cmp	r4, r3
 80144e4:	d101      	bne.n	80144ea <_fflush_r+0x62>
 80144e6:	68ac      	ldr	r4, [r5, #8]
 80144e8:	e7df      	b.n	80144aa <_fflush_r+0x22>
 80144ea:	4b04      	ldr	r3, [pc, #16]	; (80144fc <_fflush_r+0x74>)
 80144ec:	429c      	cmp	r4, r3
 80144ee:	bf08      	it	eq
 80144f0:	68ec      	ldreq	r4, [r5, #12]
 80144f2:	e7da      	b.n	80144aa <_fflush_r+0x22>
 80144f4:	08017fbc 	.word	0x08017fbc
 80144f8:	08017fdc 	.word	0x08017fdc
 80144fc:	08017f9c 	.word	0x08017f9c

08014500 <fiprintf>:
 8014500:	b40e      	push	{r1, r2, r3}
 8014502:	b503      	push	{r0, r1, lr}
 8014504:	4601      	mov	r1, r0
 8014506:	ab03      	add	r3, sp, #12
 8014508:	4805      	ldr	r0, [pc, #20]	; (8014520 <fiprintf+0x20>)
 801450a:	f853 2b04 	ldr.w	r2, [r3], #4
 801450e:	6800      	ldr	r0, [r0, #0]
 8014510:	9301      	str	r3, [sp, #4]
 8014512:	f000 f8a3 	bl	801465c <_vfiprintf_r>
 8014516:	b002      	add	sp, #8
 8014518:	f85d eb04 	ldr.w	lr, [sp], #4
 801451c:	b003      	add	sp, #12
 801451e:	4770      	bx	lr
 8014520:	20000034 	.word	0x20000034

08014524 <_lseek_r>:
 8014524:	b538      	push	{r3, r4, r5, lr}
 8014526:	4d07      	ldr	r5, [pc, #28]	; (8014544 <_lseek_r+0x20>)
 8014528:	4604      	mov	r4, r0
 801452a:	4608      	mov	r0, r1
 801452c:	4611      	mov	r1, r2
 801452e:	2200      	movs	r2, #0
 8014530:	602a      	str	r2, [r5, #0]
 8014532:	461a      	mov	r2, r3
 8014534:	f7ec fb8e 	bl	8000c54 <_lseek>
 8014538:	1c43      	adds	r3, r0, #1
 801453a:	d102      	bne.n	8014542 <_lseek_r+0x1e>
 801453c:	682b      	ldr	r3, [r5, #0]
 801453e:	b103      	cbz	r3, 8014542 <_lseek_r+0x1e>
 8014540:	6023      	str	r3, [r4, #0]
 8014542:	bd38      	pop	{r3, r4, r5, pc}
 8014544:	20010a98 	.word	0x20010a98

08014548 <malloc>:
 8014548:	4b02      	ldr	r3, [pc, #8]	; (8014554 <malloc+0xc>)
 801454a:	4601      	mov	r1, r0
 801454c:	6818      	ldr	r0, [r3, #0]
 801454e:	f7ff bd4d 	b.w	8013fec <_malloc_r>
 8014552:	bf00      	nop
 8014554:	20000034 	.word	0x20000034

08014558 <__malloc_lock>:
 8014558:	4801      	ldr	r0, [pc, #4]	; (8014560 <__malloc_lock+0x8>)
 801455a:	f7ff bcfe 	b.w	8013f5a <__retarget_lock_acquire_recursive>
 801455e:	bf00      	nop
 8014560:	20010a8c 	.word	0x20010a8c

08014564 <__malloc_unlock>:
 8014564:	4801      	ldr	r0, [pc, #4]	; (801456c <__malloc_unlock+0x8>)
 8014566:	f7ff bcf9 	b.w	8013f5c <__retarget_lock_release_recursive>
 801456a:	bf00      	nop
 801456c:	20010a8c 	.word	0x20010a8c

08014570 <_free_r>:
 8014570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014572:	2900      	cmp	r1, #0
 8014574:	d044      	beq.n	8014600 <_free_r+0x90>
 8014576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801457a:	9001      	str	r0, [sp, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	f1a1 0404 	sub.w	r4, r1, #4
 8014582:	bfb8      	it	lt
 8014584:	18e4      	addlt	r4, r4, r3
 8014586:	f7ff ffe7 	bl	8014558 <__malloc_lock>
 801458a:	4a1e      	ldr	r2, [pc, #120]	; (8014604 <_free_r+0x94>)
 801458c:	9801      	ldr	r0, [sp, #4]
 801458e:	6813      	ldr	r3, [r2, #0]
 8014590:	b933      	cbnz	r3, 80145a0 <_free_r+0x30>
 8014592:	6063      	str	r3, [r4, #4]
 8014594:	6014      	str	r4, [r2, #0]
 8014596:	b003      	add	sp, #12
 8014598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801459c:	f7ff bfe2 	b.w	8014564 <__malloc_unlock>
 80145a0:	42a3      	cmp	r3, r4
 80145a2:	d908      	bls.n	80145b6 <_free_r+0x46>
 80145a4:	6825      	ldr	r5, [r4, #0]
 80145a6:	1961      	adds	r1, r4, r5
 80145a8:	428b      	cmp	r3, r1
 80145aa:	bf01      	itttt	eq
 80145ac:	6819      	ldreq	r1, [r3, #0]
 80145ae:	685b      	ldreq	r3, [r3, #4]
 80145b0:	1949      	addeq	r1, r1, r5
 80145b2:	6021      	streq	r1, [r4, #0]
 80145b4:	e7ed      	b.n	8014592 <_free_r+0x22>
 80145b6:	461a      	mov	r2, r3
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	b10b      	cbz	r3, 80145c0 <_free_r+0x50>
 80145bc:	42a3      	cmp	r3, r4
 80145be:	d9fa      	bls.n	80145b6 <_free_r+0x46>
 80145c0:	6811      	ldr	r1, [r2, #0]
 80145c2:	1855      	adds	r5, r2, r1
 80145c4:	42a5      	cmp	r5, r4
 80145c6:	d10b      	bne.n	80145e0 <_free_r+0x70>
 80145c8:	6824      	ldr	r4, [r4, #0]
 80145ca:	4421      	add	r1, r4
 80145cc:	1854      	adds	r4, r2, r1
 80145ce:	42a3      	cmp	r3, r4
 80145d0:	6011      	str	r1, [r2, #0]
 80145d2:	d1e0      	bne.n	8014596 <_free_r+0x26>
 80145d4:	681c      	ldr	r4, [r3, #0]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	6053      	str	r3, [r2, #4]
 80145da:	4421      	add	r1, r4
 80145dc:	6011      	str	r1, [r2, #0]
 80145de:	e7da      	b.n	8014596 <_free_r+0x26>
 80145e0:	d902      	bls.n	80145e8 <_free_r+0x78>
 80145e2:	230c      	movs	r3, #12
 80145e4:	6003      	str	r3, [r0, #0]
 80145e6:	e7d6      	b.n	8014596 <_free_r+0x26>
 80145e8:	6825      	ldr	r5, [r4, #0]
 80145ea:	1961      	adds	r1, r4, r5
 80145ec:	428b      	cmp	r3, r1
 80145ee:	bf04      	itt	eq
 80145f0:	6819      	ldreq	r1, [r3, #0]
 80145f2:	685b      	ldreq	r3, [r3, #4]
 80145f4:	6063      	str	r3, [r4, #4]
 80145f6:	bf04      	itt	eq
 80145f8:	1949      	addeq	r1, r1, r5
 80145fa:	6021      	streq	r1, [r4, #0]
 80145fc:	6054      	str	r4, [r2, #4]
 80145fe:	e7ca      	b.n	8014596 <_free_r+0x26>
 8014600:	b003      	add	sp, #12
 8014602:	bd30      	pop	{r4, r5, pc}
 8014604:	20010a90 	.word	0x20010a90

08014608 <__sfputc_r>:
 8014608:	6893      	ldr	r3, [r2, #8]
 801460a:	3b01      	subs	r3, #1
 801460c:	2b00      	cmp	r3, #0
 801460e:	b410      	push	{r4}
 8014610:	6093      	str	r3, [r2, #8]
 8014612:	da08      	bge.n	8014626 <__sfputc_r+0x1e>
 8014614:	6994      	ldr	r4, [r2, #24]
 8014616:	42a3      	cmp	r3, r4
 8014618:	db01      	blt.n	801461e <__sfputc_r+0x16>
 801461a:	290a      	cmp	r1, #10
 801461c:	d103      	bne.n	8014626 <__sfputc_r+0x1e>
 801461e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014622:	f000 baf1 	b.w	8014c08 <__swbuf_r>
 8014626:	6813      	ldr	r3, [r2, #0]
 8014628:	1c58      	adds	r0, r3, #1
 801462a:	6010      	str	r0, [r2, #0]
 801462c:	7019      	strb	r1, [r3, #0]
 801462e:	4608      	mov	r0, r1
 8014630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014634:	4770      	bx	lr

08014636 <__sfputs_r>:
 8014636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014638:	4606      	mov	r6, r0
 801463a:	460f      	mov	r7, r1
 801463c:	4614      	mov	r4, r2
 801463e:	18d5      	adds	r5, r2, r3
 8014640:	42ac      	cmp	r4, r5
 8014642:	d101      	bne.n	8014648 <__sfputs_r+0x12>
 8014644:	2000      	movs	r0, #0
 8014646:	e007      	b.n	8014658 <__sfputs_r+0x22>
 8014648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801464c:	463a      	mov	r2, r7
 801464e:	4630      	mov	r0, r6
 8014650:	f7ff ffda 	bl	8014608 <__sfputc_r>
 8014654:	1c43      	adds	r3, r0, #1
 8014656:	d1f3      	bne.n	8014640 <__sfputs_r+0xa>
 8014658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801465c <_vfiprintf_r>:
 801465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014660:	460d      	mov	r5, r1
 8014662:	b09d      	sub	sp, #116	; 0x74
 8014664:	4614      	mov	r4, r2
 8014666:	4698      	mov	r8, r3
 8014668:	4606      	mov	r6, r0
 801466a:	b118      	cbz	r0, 8014674 <_vfiprintf_r+0x18>
 801466c:	6983      	ldr	r3, [r0, #24]
 801466e:	b90b      	cbnz	r3, 8014674 <_vfiprintf_r+0x18>
 8014670:	f7ff fbb0 	bl	8013dd4 <__sinit>
 8014674:	4b89      	ldr	r3, [pc, #548]	; (801489c <_vfiprintf_r+0x240>)
 8014676:	429d      	cmp	r5, r3
 8014678:	d11b      	bne.n	80146b2 <_vfiprintf_r+0x56>
 801467a:	6875      	ldr	r5, [r6, #4]
 801467c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801467e:	07d9      	lsls	r1, r3, #31
 8014680:	d405      	bmi.n	801468e <_vfiprintf_r+0x32>
 8014682:	89ab      	ldrh	r3, [r5, #12]
 8014684:	059a      	lsls	r2, r3, #22
 8014686:	d402      	bmi.n	801468e <_vfiprintf_r+0x32>
 8014688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801468a:	f7ff fc66 	bl	8013f5a <__retarget_lock_acquire_recursive>
 801468e:	89ab      	ldrh	r3, [r5, #12]
 8014690:	071b      	lsls	r3, r3, #28
 8014692:	d501      	bpl.n	8014698 <_vfiprintf_r+0x3c>
 8014694:	692b      	ldr	r3, [r5, #16]
 8014696:	b9eb      	cbnz	r3, 80146d4 <_vfiprintf_r+0x78>
 8014698:	4629      	mov	r1, r5
 801469a:	4630      	mov	r0, r6
 801469c:	f000 fb06 	bl	8014cac <__swsetup_r>
 80146a0:	b1c0      	cbz	r0, 80146d4 <_vfiprintf_r+0x78>
 80146a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146a4:	07dc      	lsls	r4, r3, #31
 80146a6:	d50e      	bpl.n	80146c6 <_vfiprintf_r+0x6a>
 80146a8:	f04f 30ff 	mov.w	r0, #4294967295
 80146ac:	b01d      	add	sp, #116	; 0x74
 80146ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b2:	4b7b      	ldr	r3, [pc, #492]	; (80148a0 <_vfiprintf_r+0x244>)
 80146b4:	429d      	cmp	r5, r3
 80146b6:	d101      	bne.n	80146bc <_vfiprintf_r+0x60>
 80146b8:	68b5      	ldr	r5, [r6, #8]
 80146ba:	e7df      	b.n	801467c <_vfiprintf_r+0x20>
 80146bc:	4b79      	ldr	r3, [pc, #484]	; (80148a4 <_vfiprintf_r+0x248>)
 80146be:	429d      	cmp	r5, r3
 80146c0:	bf08      	it	eq
 80146c2:	68f5      	ldreq	r5, [r6, #12]
 80146c4:	e7da      	b.n	801467c <_vfiprintf_r+0x20>
 80146c6:	89ab      	ldrh	r3, [r5, #12]
 80146c8:	0598      	lsls	r0, r3, #22
 80146ca:	d4ed      	bmi.n	80146a8 <_vfiprintf_r+0x4c>
 80146cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146ce:	f7ff fc45 	bl	8013f5c <__retarget_lock_release_recursive>
 80146d2:	e7e9      	b.n	80146a8 <_vfiprintf_r+0x4c>
 80146d4:	2300      	movs	r3, #0
 80146d6:	9309      	str	r3, [sp, #36]	; 0x24
 80146d8:	2320      	movs	r3, #32
 80146da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146de:	f8cd 800c 	str.w	r8, [sp, #12]
 80146e2:	2330      	movs	r3, #48	; 0x30
 80146e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80148a8 <_vfiprintf_r+0x24c>
 80146e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146ec:	f04f 0901 	mov.w	r9, #1
 80146f0:	4623      	mov	r3, r4
 80146f2:	469a      	mov	sl, r3
 80146f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146f8:	b10a      	cbz	r2, 80146fe <_vfiprintf_r+0xa2>
 80146fa:	2a25      	cmp	r2, #37	; 0x25
 80146fc:	d1f9      	bne.n	80146f2 <_vfiprintf_r+0x96>
 80146fe:	ebba 0b04 	subs.w	fp, sl, r4
 8014702:	d00b      	beq.n	801471c <_vfiprintf_r+0xc0>
 8014704:	465b      	mov	r3, fp
 8014706:	4622      	mov	r2, r4
 8014708:	4629      	mov	r1, r5
 801470a:	4630      	mov	r0, r6
 801470c:	f7ff ff93 	bl	8014636 <__sfputs_r>
 8014710:	3001      	adds	r0, #1
 8014712:	f000 80aa 	beq.w	801486a <_vfiprintf_r+0x20e>
 8014716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014718:	445a      	add	r2, fp
 801471a:	9209      	str	r2, [sp, #36]	; 0x24
 801471c:	f89a 3000 	ldrb.w	r3, [sl]
 8014720:	2b00      	cmp	r3, #0
 8014722:	f000 80a2 	beq.w	801486a <_vfiprintf_r+0x20e>
 8014726:	2300      	movs	r3, #0
 8014728:	f04f 32ff 	mov.w	r2, #4294967295
 801472c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014730:	f10a 0a01 	add.w	sl, sl, #1
 8014734:	9304      	str	r3, [sp, #16]
 8014736:	9307      	str	r3, [sp, #28]
 8014738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801473c:	931a      	str	r3, [sp, #104]	; 0x68
 801473e:	4654      	mov	r4, sl
 8014740:	2205      	movs	r2, #5
 8014742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014746:	4858      	ldr	r0, [pc, #352]	; (80148a8 <_vfiprintf_r+0x24c>)
 8014748:	f7eb fd52 	bl	80001f0 <memchr>
 801474c:	9a04      	ldr	r2, [sp, #16]
 801474e:	b9d8      	cbnz	r0, 8014788 <_vfiprintf_r+0x12c>
 8014750:	06d1      	lsls	r1, r2, #27
 8014752:	bf44      	itt	mi
 8014754:	2320      	movmi	r3, #32
 8014756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801475a:	0713      	lsls	r3, r2, #28
 801475c:	bf44      	itt	mi
 801475e:	232b      	movmi	r3, #43	; 0x2b
 8014760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014764:	f89a 3000 	ldrb.w	r3, [sl]
 8014768:	2b2a      	cmp	r3, #42	; 0x2a
 801476a:	d015      	beq.n	8014798 <_vfiprintf_r+0x13c>
 801476c:	9a07      	ldr	r2, [sp, #28]
 801476e:	4654      	mov	r4, sl
 8014770:	2000      	movs	r0, #0
 8014772:	f04f 0c0a 	mov.w	ip, #10
 8014776:	4621      	mov	r1, r4
 8014778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801477c:	3b30      	subs	r3, #48	; 0x30
 801477e:	2b09      	cmp	r3, #9
 8014780:	d94e      	bls.n	8014820 <_vfiprintf_r+0x1c4>
 8014782:	b1b0      	cbz	r0, 80147b2 <_vfiprintf_r+0x156>
 8014784:	9207      	str	r2, [sp, #28]
 8014786:	e014      	b.n	80147b2 <_vfiprintf_r+0x156>
 8014788:	eba0 0308 	sub.w	r3, r0, r8
 801478c:	fa09 f303 	lsl.w	r3, r9, r3
 8014790:	4313      	orrs	r3, r2
 8014792:	9304      	str	r3, [sp, #16]
 8014794:	46a2      	mov	sl, r4
 8014796:	e7d2      	b.n	801473e <_vfiprintf_r+0xe2>
 8014798:	9b03      	ldr	r3, [sp, #12]
 801479a:	1d19      	adds	r1, r3, #4
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	9103      	str	r1, [sp, #12]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	bfbb      	ittet	lt
 80147a4:	425b      	neglt	r3, r3
 80147a6:	f042 0202 	orrlt.w	r2, r2, #2
 80147aa:	9307      	strge	r3, [sp, #28]
 80147ac:	9307      	strlt	r3, [sp, #28]
 80147ae:	bfb8      	it	lt
 80147b0:	9204      	strlt	r2, [sp, #16]
 80147b2:	7823      	ldrb	r3, [r4, #0]
 80147b4:	2b2e      	cmp	r3, #46	; 0x2e
 80147b6:	d10c      	bne.n	80147d2 <_vfiprintf_r+0x176>
 80147b8:	7863      	ldrb	r3, [r4, #1]
 80147ba:	2b2a      	cmp	r3, #42	; 0x2a
 80147bc:	d135      	bne.n	801482a <_vfiprintf_r+0x1ce>
 80147be:	9b03      	ldr	r3, [sp, #12]
 80147c0:	1d1a      	adds	r2, r3, #4
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	9203      	str	r2, [sp, #12]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	bfb8      	it	lt
 80147ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80147ce:	3402      	adds	r4, #2
 80147d0:	9305      	str	r3, [sp, #20]
 80147d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80148b8 <_vfiprintf_r+0x25c>
 80147d6:	7821      	ldrb	r1, [r4, #0]
 80147d8:	2203      	movs	r2, #3
 80147da:	4650      	mov	r0, sl
 80147dc:	f7eb fd08 	bl	80001f0 <memchr>
 80147e0:	b140      	cbz	r0, 80147f4 <_vfiprintf_r+0x198>
 80147e2:	2340      	movs	r3, #64	; 0x40
 80147e4:	eba0 000a 	sub.w	r0, r0, sl
 80147e8:	fa03 f000 	lsl.w	r0, r3, r0
 80147ec:	9b04      	ldr	r3, [sp, #16]
 80147ee:	4303      	orrs	r3, r0
 80147f0:	3401      	adds	r4, #1
 80147f2:	9304      	str	r3, [sp, #16]
 80147f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147f8:	482c      	ldr	r0, [pc, #176]	; (80148ac <_vfiprintf_r+0x250>)
 80147fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147fe:	2206      	movs	r2, #6
 8014800:	f7eb fcf6 	bl	80001f0 <memchr>
 8014804:	2800      	cmp	r0, #0
 8014806:	d03f      	beq.n	8014888 <_vfiprintf_r+0x22c>
 8014808:	4b29      	ldr	r3, [pc, #164]	; (80148b0 <_vfiprintf_r+0x254>)
 801480a:	bb1b      	cbnz	r3, 8014854 <_vfiprintf_r+0x1f8>
 801480c:	9b03      	ldr	r3, [sp, #12]
 801480e:	3307      	adds	r3, #7
 8014810:	f023 0307 	bic.w	r3, r3, #7
 8014814:	3308      	adds	r3, #8
 8014816:	9303      	str	r3, [sp, #12]
 8014818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801481a:	443b      	add	r3, r7
 801481c:	9309      	str	r3, [sp, #36]	; 0x24
 801481e:	e767      	b.n	80146f0 <_vfiprintf_r+0x94>
 8014820:	fb0c 3202 	mla	r2, ip, r2, r3
 8014824:	460c      	mov	r4, r1
 8014826:	2001      	movs	r0, #1
 8014828:	e7a5      	b.n	8014776 <_vfiprintf_r+0x11a>
 801482a:	2300      	movs	r3, #0
 801482c:	3401      	adds	r4, #1
 801482e:	9305      	str	r3, [sp, #20]
 8014830:	4619      	mov	r1, r3
 8014832:	f04f 0c0a 	mov.w	ip, #10
 8014836:	4620      	mov	r0, r4
 8014838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801483c:	3a30      	subs	r2, #48	; 0x30
 801483e:	2a09      	cmp	r2, #9
 8014840:	d903      	bls.n	801484a <_vfiprintf_r+0x1ee>
 8014842:	2b00      	cmp	r3, #0
 8014844:	d0c5      	beq.n	80147d2 <_vfiprintf_r+0x176>
 8014846:	9105      	str	r1, [sp, #20]
 8014848:	e7c3      	b.n	80147d2 <_vfiprintf_r+0x176>
 801484a:	fb0c 2101 	mla	r1, ip, r1, r2
 801484e:	4604      	mov	r4, r0
 8014850:	2301      	movs	r3, #1
 8014852:	e7f0      	b.n	8014836 <_vfiprintf_r+0x1da>
 8014854:	ab03      	add	r3, sp, #12
 8014856:	9300      	str	r3, [sp, #0]
 8014858:	462a      	mov	r2, r5
 801485a:	4b16      	ldr	r3, [pc, #88]	; (80148b4 <_vfiprintf_r+0x258>)
 801485c:	a904      	add	r1, sp, #16
 801485e:	4630      	mov	r0, r6
 8014860:	f3af 8000 	nop.w
 8014864:	4607      	mov	r7, r0
 8014866:	1c78      	adds	r0, r7, #1
 8014868:	d1d6      	bne.n	8014818 <_vfiprintf_r+0x1bc>
 801486a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801486c:	07d9      	lsls	r1, r3, #31
 801486e:	d405      	bmi.n	801487c <_vfiprintf_r+0x220>
 8014870:	89ab      	ldrh	r3, [r5, #12]
 8014872:	059a      	lsls	r2, r3, #22
 8014874:	d402      	bmi.n	801487c <_vfiprintf_r+0x220>
 8014876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014878:	f7ff fb70 	bl	8013f5c <__retarget_lock_release_recursive>
 801487c:	89ab      	ldrh	r3, [r5, #12]
 801487e:	065b      	lsls	r3, r3, #25
 8014880:	f53f af12 	bmi.w	80146a8 <_vfiprintf_r+0x4c>
 8014884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014886:	e711      	b.n	80146ac <_vfiprintf_r+0x50>
 8014888:	ab03      	add	r3, sp, #12
 801488a:	9300      	str	r3, [sp, #0]
 801488c:	462a      	mov	r2, r5
 801488e:	4b09      	ldr	r3, [pc, #36]	; (80148b4 <_vfiprintf_r+0x258>)
 8014890:	a904      	add	r1, sp, #16
 8014892:	4630      	mov	r0, r6
 8014894:	f000 f880 	bl	8014998 <_printf_i>
 8014898:	e7e4      	b.n	8014864 <_vfiprintf_r+0x208>
 801489a:	bf00      	nop
 801489c:	08017fbc 	.word	0x08017fbc
 80148a0:	08017fdc 	.word	0x08017fdc
 80148a4:	08017f9c 	.word	0x08017f9c
 80148a8:	080180ae 	.word	0x080180ae
 80148ac:	080180b8 	.word	0x080180b8
 80148b0:	00000000 	.word	0x00000000
 80148b4:	08014637 	.word	0x08014637
 80148b8:	080180b4 	.word	0x080180b4

080148bc <_printf_common>:
 80148bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148c0:	4616      	mov	r6, r2
 80148c2:	4699      	mov	r9, r3
 80148c4:	688a      	ldr	r2, [r1, #8]
 80148c6:	690b      	ldr	r3, [r1, #16]
 80148c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148cc:	4293      	cmp	r3, r2
 80148ce:	bfb8      	it	lt
 80148d0:	4613      	movlt	r3, r2
 80148d2:	6033      	str	r3, [r6, #0]
 80148d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148d8:	4607      	mov	r7, r0
 80148da:	460c      	mov	r4, r1
 80148dc:	b10a      	cbz	r2, 80148e2 <_printf_common+0x26>
 80148de:	3301      	adds	r3, #1
 80148e0:	6033      	str	r3, [r6, #0]
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	0699      	lsls	r1, r3, #26
 80148e6:	bf42      	ittt	mi
 80148e8:	6833      	ldrmi	r3, [r6, #0]
 80148ea:	3302      	addmi	r3, #2
 80148ec:	6033      	strmi	r3, [r6, #0]
 80148ee:	6825      	ldr	r5, [r4, #0]
 80148f0:	f015 0506 	ands.w	r5, r5, #6
 80148f4:	d106      	bne.n	8014904 <_printf_common+0x48>
 80148f6:	f104 0a19 	add.w	sl, r4, #25
 80148fa:	68e3      	ldr	r3, [r4, #12]
 80148fc:	6832      	ldr	r2, [r6, #0]
 80148fe:	1a9b      	subs	r3, r3, r2
 8014900:	42ab      	cmp	r3, r5
 8014902:	dc26      	bgt.n	8014952 <_printf_common+0x96>
 8014904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014908:	1e13      	subs	r3, r2, #0
 801490a:	6822      	ldr	r2, [r4, #0]
 801490c:	bf18      	it	ne
 801490e:	2301      	movne	r3, #1
 8014910:	0692      	lsls	r2, r2, #26
 8014912:	d42b      	bmi.n	801496c <_printf_common+0xb0>
 8014914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014918:	4649      	mov	r1, r9
 801491a:	4638      	mov	r0, r7
 801491c:	47c0      	blx	r8
 801491e:	3001      	adds	r0, #1
 8014920:	d01e      	beq.n	8014960 <_printf_common+0xa4>
 8014922:	6823      	ldr	r3, [r4, #0]
 8014924:	68e5      	ldr	r5, [r4, #12]
 8014926:	6832      	ldr	r2, [r6, #0]
 8014928:	f003 0306 	and.w	r3, r3, #6
 801492c:	2b04      	cmp	r3, #4
 801492e:	bf08      	it	eq
 8014930:	1aad      	subeq	r5, r5, r2
 8014932:	68a3      	ldr	r3, [r4, #8]
 8014934:	6922      	ldr	r2, [r4, #16]
 8014936:	bf0c      	ite	eq
 8014938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801493c:	2500      	movne	r5, #0
 801493e:	4293      	cmp	r3, r2
 8014940:	bfc4      	itt	gt
 8014942:	1a9b      	subgt	r3, r3, r2
 8014944:	18ed      	addgt	r5, r5, r3
 8014946:	2600      	movs	r6, #0
 8014948:	341a      	adds	r4, #26
 801494a:	42b5      	cmp	r5, r6
 801494c:	d11a      	bne.n	8014984 <_printf_common+0xc8>
 801494e:	2000      	movs	r0, #0
 8014950:	e008      	b.n	8014964 <_printf_common+0xa8>
 8014952:	2301      	movs	r3, #1
 8014954:	4652      	mov	r2, sl
 8014956:	4649      	mov	r1, r9
 8014958:	4638      	mov	r0, r7
 801495a:	47c0      	blx	r8
 801495c:	3001      	adds	r0, #1
 801495e:	d103      	bne.n	8014968 <_printf_common+0xac>
 8014960:	f04f 30ff 	mov.w	r0, #4294967295
 8014964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014968:	3501      	adds	r5, #1
 801496a:	e7c6      	b.n	80148fa <_printf_common+0x3e>
 801496c:	18e1      	adds	r1, r4, r3
 801496e:	1c5a      	adds	r2, r3, #1
 8014970:	2030      	movs	r0, #48	; 0x30
 8014972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014976:	4422      	add	r2, r4
 8014978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801497c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014980:	3302      	adds	r3, #2
 8014982:	e7c7      	b.n	8014914 <_printf_common+0x58>
 8014984:	2301      	movs	r3, #1
 8014986:	4622      	mov	r2, r4
 8014988:	4649      	mov	r1, r9
 801498a:	4638      	mov	r0, r7
 801498c:	47c0      	blx	r8
 801498e:	3001      	adds	r0, #1
 8014990:	d0e6      	beq.n	8014960 <_printf_common+0xa4>
 8014992:	3601      	adds	r6, #1
 8014994:	e7d9      	b.n	801494a <_printf_common+0x8e>
	...

08014998 <_printf_i>:
 8014998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801499c:	7e0f      	ldrb	r7, [r1, #24]
 801499e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80149a0:	2f78      	cmp	r7, #120	; 0x78
 80149a2:	4691      	mov	r9, r2
 80149a4:	4680      	mov	r8, r0
 80149a6:	460c      	mov	r4, r1
 80149a8:	469a      	mov	sl, r3
 80149aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80149ae:	d807      	bhi.n	80149c0 <_printf_i+0x28>
 80149b0:	2f62      	cmp	r7, #98	; 0x62
 80149b2:	d80a      	bhi.n	80149ca <_printf_i+0x32>
 80149b4:	2f00      	cmp	r7, #0
 80149b6:	f000 80d8 	beq.w	8014b6a <_printf_i+0x1d2>
 80149ba:	2f58      	cmp	r7, #88	; 0x58
 80149bc:	f000 80a3 	beq.w	8014b06 <_printf_i+0x16e>
 80149c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80149c8:	e03a      	b.n	8014a40 <_printf_i+0xa8>
 80149ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80149ce:	2b15      	cmp	r3, #21
 80149d0:	d8f6      	bhi.n	80149c0 <_printf_i+0x28>
 80149d2:	a101      	add	r1, pc, #4	; (adr r1, 80149d8 <_printf_i+0x40>)
 80149d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80149d8:	08014a31 	.word	0x08014a31
 80149dc:	08014a45 	.word	0x08014a45
 80149e0:	080149c1 	.word	0x080149c1
 80149e4:	080149c1 	.word	0x080149c1
 80149e8:	080149c1 	.word	0x080149c1
 80149ec:	080149c1 	.word	0x080149c1
 80149f0:	08014a45 	.word	0x08014a45
 80149f4:	080149c1 	.word	0x080149c1
 80149f8:	080149c1 	.word	0x080149c1
 80149fc:	080149c1 	.word	0x080149c1
 8014a00:	080149c1 	.word	0x080149c1
 8014a04:	08014b51 	.word	0x08014b51
 8014a08:	08014a75 	.word	0x08014a75
 8014a0c:	08014b33 	.word	0x08014b33
 8014a10:	080149c1 	.word	0x080149c1
 8014a14:	080149c1 	.word	0x080149c1
 8014a18:	08014b73 	.word	0x08014b73
 8014a1c:	080149c1 	.word	0x080149c1
 8014a20:	08014a75 	.word	0x08014a75
 8014a24:	080149c1 	.word	0x080149c1
 8014a28:	080149c1 	.word	0x080149c1
 8014a2c:	08014b3b 	.word	0x08014b3b
 8014a30:	682b      	ldr	r3, [r5, #0]
 8014a32:	1d1a      	adds	r2, r3, #4
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	602a      	str	r2, [r5, #0]
 8014a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a40:	2301      	movs	r3, #1
 8014a42:	e0a3      	b.n	8014b8c <_printf_i+0x1f4>
 8014a44:	6820      	ldr	r0, [r4, #0]
 8014a46:	6829      	ldr	r1, [r5, #0]
 8014a48:	0606      	lsls	r6, r0, #24
 8014a4a:	f101 0304 	add.w	r3, r1, #4
 8014a4e:	d50a      	bpl.n	8014a66 <_printf_i+0xce>
 8014a50:	680e      	ldr	r6, [r1, #0]
 8014a52:	602b      	str	r3, [r5, #0]
 8014a54:	2e00      	cmp	r6, #0
 8014a56:	da03      	bge.n	8014a60 <_printf_i+0xc8>
 8014a58:	232d      	movs	r3, #45	; 0x2d
 8014a5a:	4276      	negs	r6, r6
 8014a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a60:	485e      	ldr	r0, [pc, #376]	; (8014bdc <_printf_i+0x244>)
 8014a62:	230a      	movs	r3, #10
 8014a64:	e019      	b.n	8014a9a <_printf_i+0x102>
 8014a66:	680e      	ldr	r6, [r1, #0]
 8014a68:	602b      	str	r3, [r5, #0]
 8014a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a6e:	bf18      	it	ne
 8014a70:	b236      	sxthne	r6, r6
 8014a72:	e7ef      	b.n	8014a54 <_printf_i+0xbc>
 8014a74:	682b      	ldr	r3, [r5, #0]
 8014a76:	6820      	ldr	r0, [r4, #0]
 8014a78:	1d19      	adds	r1, r3, #4
 8014a7a:	6029      	str	r1, [r5, #0]
 8014a7c:	0601      	lsls	r1, r0, #24
 8014a7e:	d501      	bpl.n	8014a84 <_printf_i+0xec>
 8014a80:	681e      	ldr	r6, [r3, #0]
 8014a82:	e002      	b.n	8014a8a <_printf_i+0xf2>
 8014a84:	0646      	lsls	r6, r0, #25
 8014a86:	d5fb      	bpl.n	8014a80 <_printf_i+0xe8>
 8014a88:	881e      	ldrh	r6, [r3, #0]
 8014a8a:	4854      	ldr	r0, [pc, #336]	; (8014bdc <_printf_i+0x244>)
 8014a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8014a8e:	bf0c      	ite	eq
 8014a90:	2308      	moveq	r3, #8
 8014a92:	230a      	movne	r3, #10
 8014a94:	2100      	movs	r1, #0
 8014a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a9a:	6865      	ldr	r5, [r4, #4]
 8014a9c:	60a5      	str	r5, [r4, #8]
 8014a9e:	2d00      	cmp	r5, #0
 8014aa0:	bfa2      	ittt	ge
 8014aa2:	6821      	ldrge	r1, [r4, #0]
 8014aa4:	f021 0104 	bicge.w	r1, r1, #4
 8014aa8:	6021      	strge	r1, [r4, #0]
 8014aaa:	b90e      	cbnz	r6, 8014ab0 <_printf_i+0x118>
 8014aac:	2d00      	cmp	r5, #0
 8014aae:	d04d      	beq.n	8014b4c <_printf_i+0x1b4>
 8014ab0:	4615      	mov	r5, r2
 8014ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8014ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8014aba:	5dc7      	ldrb	r7, [r0, r7]
 8014abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014ac0:	4637      	mov	r7, r6
 8014ac2:	42bb      	cmp	r3, r7
 8014ac4:	460e      	mov	r6, r1
 8014ac6:	d9f4      	bls.n	8014ab2 <_printf_i+0x11a>
 8014ac8:	2b08      	cmp	r3, #8
 8014aca:	d10b      	bne.n	8014ae4 <_printf_i+0x14c>
 8014acc:	6823      	ldr	r3, [r4, #0]
 8014ace:	07de      	lsls	r6, r3, #31
 8014ad0:	d508      	bpl.n	8014ae4 <_printf_i+0x14c>
 8014ad2:	6923      	ldr	r3, [r4, #16]
 8014ad4:	6861      	ldr	r1, [r4, #4]
 8014ad6:	4299      	cmp	r1, r3
 8014ad8:	bfde      	ittt	le
 8014ada:	2330      	movle	r3, #48	; 0x30
 8014adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014ae4:	1b52      	subs	r2, r2, r5
 8014ae6:	6122      	str	r2, [r4, #16]
 8014ae8:	f8cd a000 	str.w	sl, [sp]
 8014aec:	464b      	mov	r3, r9
 8014aee:	aa03      	add	r2, sp, #12
 8014af0:	4621      	mov	r1, r4
 8014af2:	4640      	mov	r0, r8
 8014af4:	f7ff fee2 	bl	80148bc <_printf_common>
 8014af8:	3001      	adds	r0, #1
 8014afa:	d14c      	bne.n	8014b96 <_printf_i+0x1fe>
 8014afc:	f04f 30ff 	mov.w	r0, #4294967295
 8014b00:	b004      	add	sp, #16
 8014b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b06:	4835      	ldr	r0, [pc, #212]	; (8014bdc <_printf_i+0x244>)
 8014b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014b0c:	6829      	ldr	r1, [r5, #0]
 8014b0e:	6823      	ldr	r3, [r4, #0]
 8014b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8014b14:	6029      	str	r1, [r5, #0]
 8014b16:	061d      	lsls	r5, r3, #24
 8014b18:	d514      	bpl.n	8014b44 <_printf_i+0x1ac>
 8014b1a:	07df      	lsls	r7, r3, #31
 8014b1c:	bf44      	itt	mi
 8014b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8014b22:	6023      	strmi	r3, [r4, #0]
 8014b24:	b91e      	cbnz	r6, 8014b2e <_printf_i+0x196>
 8014b26:	6823      	ldr	r3, [r4, #0]
 8014b28:	f023 0320 	bic.w	r3, r3, #32
 8014b2c:	6023      	str	r3, [r4, #0]
 8014b2e:	2310      	movs	r3, #16
 8014b30:	e7b0      	b.n	8014a94 <_printf_i+0xfc>
 8014b32:	6823      	ldr	r3, [r4, #0]
 8014b34:	f043 0320 	orr.w	r3, r3, #32
 8014b38:	6023      	str	r3, [r4, #0]
 8014b3a:	2378      	movs	r3, #120	; 0x78
 8014b3c:	4828      	ldr	r0, [pc, #160]	; (8014be0 <_printf_i+0x248>)
 8014b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b42:	e7e3      	b.n	8014b0c <_printf_i+0x174>
 8014b44:	0659      	lsls	r1, r3, #25
 8014b46:	bf48      	it	mi
 8014b48:	b2b6      	uxthmi	r6, r6
 8014b4a:	e7e6      	b.n	8014b1a <_printf_i+0x182>
 8014b4c:	4615      	mov	r5, r2
 8014b4e:	e7bb      	b.n	8014ac8 <_printf_i+0x130>
 8014b50:	682b      	ldr	r3, [r5, #0]
 8014b52:	6826      	ldr	r6, [r4, #0]
 8014b54:	6961      	ldr	r1, [r4, #20]
 8014b56:	1d18      	adds	r0, r3, #4
 8014b58:	6028      	str	r0, [r5, #0]
 8014b5a:	0635      	lsls	r5, r6, #24
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	d501      	bpl.n	8014b64 <_printf_i+0x1cc>
 8014b60:	6019      	str	r1, [r3, #0]
 8014b62:	e002      	b.n	8014b6a <_printf_i+0x1d2>
 8014b64:	0670      	lsls	r0, r6, #25
 8014b66:	d5fb      	bpl.n	8014b60 <_printf_i+0x1c8>
 8014b68:	8019      	strh	r1, [r3, #0]
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	6123      	str	r3, [r4, #16]
 8014b6e:	4615      	mov	r5, r2
 8014b70:	e7ba      	b.n	8014ae8 <_printf_i+0x150>
 8014b72:	682b      	ldr	r3, [r5, #0]
 8014b74:	1d1a      	adds	r2, r3, #4
 8014b76:	602a      	str	r2, [r5, #0]
 8014b78:	681d      	ldr	r5, [r3, #0]
 8014b7a:	6862      	ldr	r2, [r4, #4]
 8014b7c:	2100      	movs	r1, #0
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f7eb fb36 	bl	80001f0 <memchr>
 8014b84:	b108      	cbz	r0, 8014b8a <_printf_i+0x1f2>
 8014b86:	1b40      	subs	r0, r0, r5
 8014b88:	6060      	str	r0, [r4, #4]
 8014b8a:	6863      	ldr	r3, [r4, #4]
 8014b8c:	6123      	str	r3, [r4, #16]
 8014b8e:	2300      	movs	r3, #0
 8014b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b94:	e7a8      	b.n	8014ae8 <_printf_i+0x150>
 8014b96:	6923      	ldr	r3, [r4, #16]
 8014b98:	462a      	mov	r2, r5
 8014b9a:	4649      	mov	r1, r9
 8014b9c:	4640      	mov	r0, r8
 8014b9e:	47d0      	blx	sl
 8014ba0:	3001      	adds	r0, #1
 8014ba2:	d0ab      	beq.n	8014afc <_printf_i+0x164>
 8014ba4:	6823      	ldr	r3, [r4, #0]
 8014ba6:	079b      	lsls	r3, r3, #30
 8014ba8:	d413      	bmi.n	8014bd2 <_printf_i+0x23a>
 8014baa:	68e0      	ldr	r0, [r4, #12]
 8014bac:	9b03      	ldr	r3, [sp, #12]
 8014bae:	4298      	cmp	r0, r3
 8014bb0:	bfb8      	it	lt
 8014bb2:	4618      	movlt	r0, r3
 8014bb4:	e7a4      	b.n	8014b00 <_printf_i+0x168>
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	4632      	mov	r2, r6
 8014bba:	4649      	mov	r1, r9
 8014bbc:	4640      	mov	r0, r8
 8014bbe:	47d0      	blx	sl
 8014bc0:	3001      	adds	r0, #1
 8014bc2:	d09b      	beq.n	8014afc <_printf_i+0x164>
 8014bc4:	3501      	adds	r5, #1
 8014bc6:	68e3      	ldr	r3, [r4, #12]
 8014bc8:	9903      	ldr	r1, [sp, #12]
 8014bca:	1a5b      	subs	r3, r3, r1
 8014bcc:	42ab      	cmp	r3, r5
 8014bce:	dcf2      	bgt.n	8014bb6 <_printf_i+0x21e>
 8014bd0:	e7eb      	b.n	8014baa <_printf_i+0x212>
 8014bd2:	2500      	movs	r5, #0
 8014bd4:	f104 0619 	add.w	r6, r4, #25
 8014bd8:	e7f5      	b.n	8014bc6 <_printf_i+0x22e>
 8014bda:	bf00      	nop
 8014bdc:	080180bf 	.word	0x080180bf
 8014be0:	080180d0 	.word	0x080180d0

08014be4 <_read_r>:
 8014be4:	b538      	push	{r3, r4, r5, lr}
 8014be6:	4d07      	ldr	r5, [pc, #28]	; (8014c04 <_read_r+0x20>)
 8014be8:	4604      	mov	r4, r0
 8014bea:	4608      	mov	r0, r1
 8014bec:	4611      	mov	r1, r2
 8014bee:	2200      	movs	r2, #0
 8014bf0:	602a      	str	r2, [r5, #0]
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	f7eb ffce 	bl	8000b94 <_read>
 8014bf8:	1c43      	adds	r3, r0, #1
 8014bfa:	d102      	bne.n	8014c02 <_read_r+0x1e>
 8014bfc:	682b      	ldr	r3, [r5, #0]
 8014bfe:	b103      	cbz	r3, 8014c02 <_read_r+0x1e>
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	bd38      	pop	{r3, r4, r5, pc}
 8014c04:	20010a98 	.word	0x20010a98

08014c08 <__swbuf_r>:
 8014c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c0a:	460e      	mov	r6, r1
 8014c0c:	4614      	mov	r4, r2
 8014c0e:	4605      	mov	r5, r0
 8014c10:	b118      	cbz	r0, 8014c1a <__swbuf_r+0x12>
 8014c12:	6983      	ldr	r3, [r0, #24]
 8014c14:	b90b      	cbnz	r3, 8014c1a <__swbuf_r+0x12>
 8014c16:	f7ff f8dd 	bl	8013dd4 <__sinit>
 8014c1a:	4b21      	ldr	r3, [pc, #132]	; (8014ca0 <__swbuf_r+0x98>)
 8014c1c:	429c      	cmp	r4, r3
 8014c1e:	d12b      	bne.n	8014c78 <__swbuf_r+0x70>
 8014c20:	686c      	ldr	r4, [r5, #4]
 8014c22:	69a3      	ldr	r3, [r4, #24]
 8014c24:	60a3      	str	r3, [r4, #8]
 8014c26:	89a3      	ldrh	r3, [r4, #12]
 8014c28:	071a      	lsls	r2, r3, #28
 8014c2a:	d52f      	bpl.n	8014c8c <__swbuf_r+0x84>
 8014c2c:	6923      	ldr	r3, [r4, #16]
 8014c2e:	b36b      	cbz	r3, 8014c8c <__swbuf_r+0x84>
 8014c30:	6923      	ldr	r3, [r4, #16]
 8014c32:	6820      	ldr	r0, [r4, #0]
 8014c34:	1ac0      	subs	r0, r0, r3
 8014c36:	6963      	ldr	r3, [r4, #20]
 8014c38:	b2f6      	uxtb	r6, r6
 8014c3a:	4283      	cmp	r3, r0
 8014c3c:	4637      	mov	r7, r6
 8014c3e:	dc04      	bgt.n	8014c4a <__swbuf_r+0x42>
 8014c40:	4621      	mov	r1, r4
 8014c42:	4628      	mov	r0, r5
 8014c44:	f7ff fc20 	bl	8014488 <_fflush_r>
 8014c48:	bb30      	cbnz	r0, 8014c98 <__swbuf_r+0x90>
 8014c4a:	68a3      	ldr	r3, [r4, #8]
 8014c4c:	3b01      	subs	r3, #1
 8014c4e:	60a3      	str	r3, [r4, #8]
 8014c50:	6823      	ldr	r3, [r4, #0]
 8014c52:	1c5a      	adds	r2, r3, #1
 8014c54:	6022      	str	r2, [r4, #0]
 8014c56:	701e      	strb	r6, [r3, #0]
 8014c58:	6963      	ldr	r3, [r4, #20]
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	4283      	cmp	r3, r0
 8014c5e:	d004      	beq.n	8014c6a <__swbuf_r+0x62>
 8014c60:	89a3      	ldrh	r3, [r4, #12]
 8014c62:	07db      	lsls	r3, r3, #31
 8014c64:	d506      	bpl.n	8014c74 <__swbuf_r+0x6c>
 8014c66:	2e0a      	cmp	r6, #10
 8014c68:	d104      	bne.n	8014c74 <__swbuf_r+0x6c>
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	f7ff fc0b 	bl	8014488 <_fflush_r>
 8014c72:	b988      	cbnz	r0, 8014c98 <__swbuf_r+0x90>
 8014c74:	4638      	mov	r0, r7
 8014c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c78:	4b0a      	ldr	r3, [pc, #40]	; (8014ca4 <__swbuf_r+0x9c>)
 8014c7a:	429c      	cmp	r4, r3
 8014c7c:	d101      	bne.n	8014c82 <__swbuf_r+0x7a>
 8014c7e:	68ac      	ldr	r4, [r5, #8]
 8014c80:	e7cf      	b.n	8014c22 <__swbuf_r+0x1a>
 8014c82:	4b09      	ldr	r3, [pc, #36]	; (8014ca8 <__swbuf_r+0xa0>)
 8014c84:	429c      	cmp	r4, r3
 8014c86:	bf08      	it	eq
 8014c88:	68ec      	ldreq	r4, [r5, #12]
 8014c8a:	e7ca      	b.n	8014c22 <__swbuf_r+0x1a>
 8014c8c:	4621      	mov	r1, r4
 8014c8e:	4628      	mov	r0, r5
 8014c90:	f000 f80c 	bl	8014cac <__swsetup_r>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d0cb      	beq.n	8014c30 <__swbuf_r+0x28>
 8014c98:	f04f 37ff 	mov.w	r7, #4294967295
 8014c9c:	e7ea      	b.n	8014c74 <__swbuf_r+0x6c>
 8014c9e:	bf00      	nop
 8014ca0:	08017fbc 	.word	0x08017fbc
 8014ca4:	08017fdc 	.word	0x08017fdc
 8014ca8:	08017f9c 	.word	0x08017f9c

08014cac <__swsetup_r>:
 8014cac:	4b32      	ldr	r3, [pc, #200]	; (8014d78 <__swsetup_r+0xcc>)
 8014cae:	b570      	push	{r4, r5, r6, lr}
 8014cb0:	681d      	ldr	r5, [r3, #0]
 8014cb2:	4606      	mov	r6, r0
 8014cb4:	460c      	mov	r4, r1
 8014cb6:	b125      	cbz	r5, 8014cc2 <__swsetup_r+0x16>
 8014cb8:	69ab      	ldr	r3, [r5, #24]
 8014cba:	b913      	cbnz	r3, 8014cc2 <__swsetup_r+0x16>
 8014cbc:	4628      	mov	r0, r5
 8014cbe:	f7ff f889 	bl	8013dd4 <__sinit>
 8014cc2:	4b2e      	ldr	r3, [pc, #184]	; (8014d7c <__swsetup_r+0xd0>)
 8014cc4:	429c      	cmp	r4, r3
 8014cc6:	d10f      	bne.n	8014ce8 <__swsetup_r+0x3c>
 8014cc8:	686c      	ldr	r4, [r5, #4]
 8014cca:	89a3      	ldrh	r3, [r4, #12]
 8014ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014cd0:	0719      	lsls	r1, r3, #28
 8014cd2:	d42c      	bmi.n	8014d2e <__swsetup_r+0x82>
 8014cd4:	06dd      	lsls	r5, r3, #27
 8014cd6:	d411      	bmi.n	8014cfc <__swsetup_r+0x50>
 8014cd8:	2309      	movs	r3, #9
 8014cda:	6033      	str	r3, [r6, #0]
 8014cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ce0:	81a3      	strh	r3, [r4, #12]
 8014ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce6:	e03e      	b.n	8014d66 <__swsetup_r+0xba>
 8014ce8:	4b25      	ldr	r3, [pc, #148]	; (8014d80 <__swsetup_r+0xd4>)
 8014cea:	429c      	cmp	r4, r3
 8014cec:	d101      	bne.n	8014cf2 <__swsetup_r+0x46>
 8014cee:	68ac      	ldr	r4, [r5, #8]
 8014cf0:	e7eb      	b.n	8014cca <__swsetup_r+0x1e>
 8014cf2:	4b24      	ldr	r3, [pc, #144]	; (8014d84 <__swsetup_r+0xd8>)
 8014cf4:	429c      	cmp	r4, r3
 8014cf6:	bf08      	it	eq
 8014cf8:	68ec      	ldreq	r4, [r5, #12]
 8014cfa:	e7e6      	b.n	8014cca <__swsetup_r+0x1e>
 8014cfc:	0758      	lsls	r0, r3, #29
 8014cfe:	d512      	bpl.n	8014d26 <__swsetup_r+0x7a>
 8014d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d02:	b141      	cbz	r1, 8014d16 <__swsetup_r+0x6a>
 8014d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d08:	4299      	cmp	r1, r3
 8014d0a:	d002      	beq.n	8014d12 <__swsetup_r+0x66>
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	f7ff fc2f 	bl	8014570 <_free_r>
 8014d12:	2300      	movs	r3, #0
 8014d14:	6363      	str	r3, [r4, #52]	; 0x34
 8014d16:	89a3      	ldrh	r3, [r4, #12]
 8014d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d1c:	81a3      	strh	r3, [r4, #12]
 8014d1e:	2300      	movs	r3, #0
 8014d20:	6063      	str	r3, [r4, #4]
 8014d22:	6923      	ldr	r3, [r4, #16]
 8014d24:	6023      	str	r3, [r4, #0]
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	f043 0308 	orr.w	r3, r3, #8
 8014d2c:	81a3      	strh	r3, [r4, #12]
 8014d2e:	6923      	ldr	r3, [r4, #16]
 8014d30:	b94b      	cbnz	r3, 8014d46 <__swsetup_r+0x9a>
 8014d32:	89a3      	ldrh	r3, [r4, #12]
 8014d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d3c:	d003      	beq.n	8014d46 <__swsetup_r+0x9a>
 8014d3e:	4621      	mov	r1, r4
 8014d40:	4630      	mov	r0, r6
 8014d42:	f000 f84d 	bl	8014de0 <__smakebuf_r>
 8014d46:	89a0      	ldrh	r0, [r4, #12]
 8014d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d4c:	f010 0301 	ands.w	r3, r0, #1
 8014d50:	d00a      	beq.n	8014d68 <__swsetup_r+0xbc>
 8014d52:	2300      	movs	r3, #0
 8014d54:	60a3      	str	r3, [r4, #8]
 8014d56:	6963      	ldr	r3, [r4, #20]
 8014d58:	425b      	negs	r3, r3
 8014d5a:	61a3      	str	r3, [r4, #24]
 8014d5c:	6923      	ldr	r3, [r4, #16]
 8014d5e:	b943      	cbnz	r3, 8014d72 <__swsetup_r+0xc6>
 8014d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d64:	d1ba      	bne.n	8014cdc <__swsetup_r+0x30>
 8014d66:	bd70      	pop	{r4, r5, r6, pc}
 8014d68:	0781      	lsls	r1, r0, #30
 8014d6a:	bf58      	it	pl
 8014d6c:	6963      	ldrpl	r3, [r4, #20]
 8014d6e:	60a3      	str	r3, [r4, #8]
 8014d70:	e7f4      	b.n	8014d5c <__swsetup_r+0xb0>
 8014d72:	2000      	movs	r0, #0
 8014d74:	e7f7      	b.n	8014d66 <__swsetup_r+0xba>
 8014d76:	bf00      	nop
 8014d78:	20000034 	.word	0x20000034
 8014d7c:	08017fbc 	.word	0x08017fbc
 8014d80:	08017fdc 	.word	0x08017fdc
 8014d84:	08017f9c 	.word	0x08017f9c

08014d88 <abort>:
 8014d88:	b508      	push	{r3, lr}
 8014d8a:	2006      	movs	r0, #6
 8014d8c:	f000 f890 	bl	8014eb0 <raise>
 8014d90:	2001      	movs	r0, #1
 8014d92:	f7eb fef5 	bl	8000b80 <_exit>

08014d96 <__swhatbuf_r>:
 8014d96:	b570      	push	{r4, r5, r6, lr}
 8014d98:	460e      	mov	r6, r1
 8014d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d9e:	2900      	cmp	r1, #0
 8014da0:	b096      	sub	sp, #88	; 0x58
 8014da2:	4614      	mov	r4, r2
 8014da4:	461d      	mov	r5, r3
 8014da6:	da08      	bge.n	8014dba <__swhatbuf_r+0x24>
 8014da8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014dac:	2200      	movs	r2, #0
 8014dae:	602a      	str	r2, [r5, #0]
 8014db0:	061a      	lsls	r2, r3, #24
 8014db2:	d410      	bmi.n	8014dd6 <__swhatbuf_r+0x40>
 8014db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014db8:	e00e      	b.n	8014dd8 <__swhatbuf_r+0x42>
 8014dba:	466a      	mov	r2, sp
 8014dbc:	f000 f894 	bl	8014ee8 <_fstat_r>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	dbf1      	blt.n	8014da8 <__swhatbuf_r+0x12>
 8014dc4:	9a01      	ldr	r2, [sp, #4]
 8014dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014dca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014dce:	425a      	negs	r2, r3
 8014dd0:	415a      	adcs	r2, r3
 8014dd2:	602a      	str	r2, [r5, #0]
 8014dd4:	e7ee      	b.n	8014db4 <__swhatbuf_r+0x1e>
 8014dd6:	2340      	movs	r3, #64	; 0x40
 8014dd8:	2000      	movs	r0, #0
 8014dda:	6023      	str	r3, [r4, #0]
 8014ddc:	b016      	add	sp, #88	; 0x58
 8014dde:	bd70      	pop	{r4, r5, r6, pc}

08014de0 <__smakebuf_r>:
 8014de0:	898b      	ldrh	r3, [r1, #12]
 8014de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014de4:	079d      	lsls	r5, r3, #30
 8014de6:	4606      	mov	r6, r0
 8014de8:	460c      	mov	r4, r1
 8014dea:	d507      	bpl.n	8014dfc <__smakebuf_r+0x1c>
 8014dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014df0:	6023      	str	r3, [r4, #0]
 8014df2:	6123      	str	r3, [r4, #16]
 8014df4:	2301      	movs	r3, #1
 8014df6:	6163      	str	r3, [r4, #20]
 8014df8:	b002      	add	sp, #8
 8014dfa:	bd70      	pop	{r4, r5, r6, pc}
 8014dfc:	ab01      	add	r3, sp, #4
 8014dfe:	466a      	mov	r2, sp
 8014e00:	f7ff ffc9 	bl	8014d96 <__swhatbuf_r>
 8014e04:	9900      	ldr	r1, [sp, #0]
 8014e06:	4605      	mov	r5, r0
 8014e08:	4630      	mov	r0, r6
 8014e0a:	f7ff f8ef 	bl	8013fec <_malloc_r>
 8014e0e:	b948      	cbnz	r0, 8014e24 <__smakebuf_r+0x44>
 8014e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e14:	059a      	lsls	r2, r3, #22
 8014e16:	d4ef      	bmi.n	8014df8 <__smakebuf_r+0x18>
 8014e18:	f023 0303 	bic.w	r3, r3, #3
 8014e1c:	f043 0302 	orr.w	r3, r3, #2
 8014e20:	81a3      	strh	r3, [r4, #12]
 8014e22:	e7e3      	b.n	8014dec <__smakebuf_r+0xc>
 8014e24:	4b0d      	ldr	r3, [pc, #52]	; (8014e5c <__smakebuf_r+0x7c>)
 8014e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8014e28:	89a3      	ldrh	r3, [r4, #12]
 8014e2a:	6020      	str	r0, [r4, #0]
 8014e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e30:	81a3      	strh	r3, [r4, #12]
 8014e32:	9b00      	ldr	r3, [sp, #0]
 8014e34:	6163      	str	r3, [r4, #20]
 8014e36:	9b01      	ldr	r3, [sp, #4]
 8014e38:	6120      	str	r0, [r4, #16]
 8014e3a:	b15b      	cbz	r3, 8014e54 <__smakebuf_r+0x74>
 8014e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e40:	4630      	mov	r0, r6
 8014e42:	f000 f863 	bl	8014f0c <_isatty_r>
 8014e46:	b128      	cbz	r0, 8014e54 <__smakebuf_r+0x74>
 8014e48:	89a3      	ldrh	r3, [r4, #12]
 8014e4a:	f023 0303 	bic.w	r3, r3, #3
 8014e4e:	f043 0301 	orr.w	r3, r3, #1
 8014e52:	81a3      	strh	r3, [r4, #12]
 8014e54:	89a0      	ldrh	r0, [r4, #12]
 8014e56:	4305      	orrs	r5, r0
 8014e58:	81a5      	strh	r5, [r4, #12]
 8014e5a:	e7cd      	b.n	8014df8 <__smakebuf_r+0x18>
 8014e5c:	08013d6d 	.word	0x08013d6d

08014e60 <_raise_r>:
 8014e60:	291f      	cmp	r1, #31
 8014e62:	b538      	push	{r3, r4, r5, lr}
 8014e64:	4604      	mov	r4, r0
 8014e66:	460d      	mov	r5, r1
 8014e68:	d904      	bls.n	8014e74 <_raise_r+0x14>
 8014e6a:	2316      	movs	r3, #22
 8014e6c:	6003      	str	r3, [r0, #0]
 8014e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e72:	bd38      	pop	{r3, r4, r5, pc}
 8014e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014e76:	b112      	cbz	r2, 8014e7e <_raise_r+0x1e>
 8014e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e7c:	b94b      	cbnz	r3, 8014e92 <_raise_r+0x32>
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f000 f830 	bl	8014ee4 <_getpid_r>
 8014e84:	462a      	mov	r2, r5
 8014e86:	4601      	mov	r1, r0
 8014e88:	4620      	mov	r0, r4
 8014e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e8e:	f000 b817 	b.w	8014ec0 <_kill_r>
 8014e92:	2b01      	cmp	r3, #1
 8014e94:	d00a      	beq.n	8014eac <_raise_r+0x4c>
 8014e96:	1c59      	adds	r1, r3, #1
 8014e98:	d103      	bne.n	8014ea2 <_raise_r+0x42>
 8014e9a:	2316      	movs	r3, #22
 8014e9c:	6003      	str	r3, [r0, #0]
 8014e9e:	2001      	movs	r0, #1
 8014ea0:	e7e7      	b.n	8014e72 <_raise_r+0x12>
 8014ea2:	2400      	movs	r4, #0
 8014ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ea8:	4628      	mov	r0, r5
 8014eaa:	4798      	blx	r3
 8014eac:	2000      	movs	r0, #0
 8014eae:	e7e0      	b.n	8014e72 <_raise_r+0x12>

08014eb0 <raise>:
 8014eb0:	4b02      	ldr	r3, [pc, #8]	; (8014ebc <raise+0xc>)
 8014eb2:	4601      	mov	r1, r0
 8014eb4:	6818      	ldr	r0, [r3, #0]
 8014eb6:	f7ff bfd3 	b.w	8014e60 <_raise_r>
 8014eba:	bf00      	nop
 8014ebc:	20000034 	.word	0x20000034

08014ec0 <_kill_r>:
 8014ec0:	b538      	push	{r3, r4, r5, lr}
 8014ec2:	4d07      	ldr	r5, [pc, #28]	; (8014ee0 <_kill_r+0x20>)
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	4608      	mov	r0, r1
 8014eca:	4611      	mov	r1, r2
 8014ecc:	602b      	str	r3, [r5, #0]
 8014ece:	f7eb fe45 	bl	8000b5c <_kill>
 8014ed2:	1c43      	adds	r3, r0, #1
 8014ed4:	d102      	bne.n	8014edc <_kill_r+0x1c>
 8014ed6:	682b      	ldr	r3, [r5, #0]
 8014ed8:	b103      	cbz	r3, 8014edc <_kill_r+0x1c>
 8014eda:	6023      	str	r3, [r4, #0]
 8014edc:	bd38      	pop	{r3, r4, r5, pc}
 8014ede:	bf00      	nop
 8014ee0:	20010a98 	.word	0x20010a98

08014ee4 <_getpid_r>:
 8014ee4:	f7eb be32 	b.w	8000b4c <_getpid>

08014ee8 <_fstat_r>:
 8014ee8:	b538      	push	{r3, r4, r5, lr}
 8014eea:	4d07      	ldr	r5, [pc, #28]	; (8014f08 <_fstat_r+0x20>)
 8014eec:	2300      	movs	r3, #0
 8014eee:	4604      	mov	r4, r0
 8014ef0:	4608      	mov	r0, r1
 8014ef2:	4611      	mov	r1, r2
 8014ef4:	602b      	str	r3, [r5, #0]
 8014ef6:	f7eb fe92 	bl	8000c1e <_fstat>
 8014efa:	1c43      	adds	r3, r0, #1
 8014efc:	d102      	bne.n	8014f04 <_fstat_r+0x1c>
 8014efe:	682b      	ldr	r3, [r5, #0]
 8014f00:	b103      	cbz	r3, 8014f04 <_fstat_r+0x1c>
 8014f02:	6023      	str	r3, [r4, #0]
 8014f04:	bd38      	pop	{r3, r4, r5, pc}
 8014f06:	bf00      	nop
 8014f08:	20010a98 	.word	0x20010a98

08014f0c <_isatty_r>:
 8014f0c:	b538      	push	{r3, r4, r5, lr}
 8014f0e:	4d06      	ldr	r5, [pc, #24]	; (8014f28 <_isatty_r+0x1c>)
 8014f10:	2300      	movs	r3, #0
 8014f12:	4604      	mov	r4, r0
 8014f14:	4608      	mov	r0, r1
 8014f16:	602b      	str	r3, [r5, #0]
 8014f18:	f7eb fe91 	bl	8000c3e <_isatty>
 8014f1c:	1c43      	adds	r3, r0, #1
 8014f1e:	d102      	bne.n	8014f26 <_isatty_r+0x1a>
 8014f20:	682b      	ldr	r3, [r5, #0]
 8014f22:	b103      	cbz	r3, 8014f26 <_isatty_r+0x1a>
 8014f24:	6023      	str	r3, [r4, #0]
 8014f26:	bd38      	pop	{r3, r4, r5, pc}
 8014f28:	20010a98 	.word	0x20010a98

08014f2c <_init>:
 8014f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f2e:	bf00      	nop
 8014f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f32:	bc08      	pop	{r3}
 8014f34:	469e      	mov	lr, r3
 8014f36:	4770      	bx	lr

08014f38 <_fini>:
 8014f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f3a:	bf00      	nop
 8014f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f3e:	bc08      	pop	{r3}
 8014f40:	469e      	mov	lr, r3
 8014f42:	4770      	bx	lr
