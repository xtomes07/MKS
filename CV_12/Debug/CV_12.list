
CV_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a204  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e180  0801a3b4  0801a3b4  0002a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028534  08028534  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  08028534  08028534  00038534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802853c  0802853c  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802853c  0802853c  0003853c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028540  08028540  00038540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08028544  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040098  2**0
                  CONTENTS
 10 .bss          00010f98  20000098  20000098  00040098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011030  20011030  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037058  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000834f  00000000  00000000  00077120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b8  00000000  00000000  0007f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002418  00000000  00000000  00081a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037675  00000000  00000000  00083e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bc32  00000000  00000000  000bb4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001024a7  00000000  00000000  000f70e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f958e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a634  00000000  00000000  001f95e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a39c 	.word	0x0801a39c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	0801a39c 	.word	0x0801a39c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	20000168 	.word	0x20000168

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f001 f8c5 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f81f 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8c5 	bl	8000794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f899 	bl	8000740 <MX_USART3_UART_Init>
  MX_RNG_Init();
 800060e:	f000 f883 	bl	8000718 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <main+0x44>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fea3 	bl	8005374 <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <main+0x48>)
 8000632:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f004 fe87 	bl	8005346 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x40>
 800063a:	bf00      	nop
 800063c:	0801a3c0 	.word	0x0801a3c0
 8000640:	200003bc 	.word	0x200003bc

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f018 fc91 	bl	8018f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fe35 	bl	8003338 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f95a 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f896 	bl	8003828 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f943 	bl	800098c <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_RNG_Init+0x20>)
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <MX_RNG_Init+0x24>)
 8000720:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_RNG_Init+0x20>)
 8000724:	f003 fad2 	bl	8003ccc <HAL_RNG_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800072e:	f000 f92d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000368 	.word	0x20000368
 800073c:	50060800 	.word	0x50060800

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART3_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000778:	f003 fdd6 	bl	8004328 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f903 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000378 	.word	0x20000378
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_GPIO_Init+0x188>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a5a      	ldr	r2, [pc, #360]	; (800091c <MX_GPIO_Init+0x188>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b58      	ldr	r3, [pc, #352]	; (800091c <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b54      	ldr	r3, [pc, #336]	; (800091c <MX_GPIO_Init+0x188>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a53      	ldr	r2, [pc, #332]	; (800091c <MX_GPIO_Init+0x188>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b51      	ldr	r3, [pc, #324]	; (800091c <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b4d      	ldr	r3, [pc, #308]	; (800091c <MX_GPIO_Init+0x188>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4c      	ldr	r2, [pc, #304]	; (800091c <MX_GPIO_Init+0x188>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b4a      	ldr	r3, [pc, #296]	; (800091c <MX_GPIO_Init+0x188>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <MX_GPIO_Init+0x188>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a45      	ldr	r2, [pc, #276]	; (800091c <MX_GPIO_Init+0x188>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b43      	ldr	r3, [pc, #268]	; (800091c <MX_GPIO_Init+0x188>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b3f      	ldr	r3, [pc, #252]	; (800091c <MX_GPIO_Init+0x188>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3e      	ldr	r2, [pc, #248]	; (800091c <MX_GPIO_Init+0x188>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b3c      	ldr	r3, [pc, #240]	; (800091c <MX_GPIO_Init+0x188>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b38      	ldr	r3, [pc, #224]	; (800091c <MX_GPIO_Init+0x188>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a37      	ldr	r2, [pc, #220]	; (800091c <MX_GPIO_Init+0x188>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <MX_GPIO_Init+0x188>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f244 0181 	movw	r1, #16513	; 0x4081
 8000858:	4831      	ldr	r0, [pc, #196]	; (8000920 <MX_GPIO_Init+0x18c>)
 800085a:	f002 fd53 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	4830      	ldr	r0, [pc, #192]	; (8000924 <MX_GPIO_Init+0x190>)
 8000864:	f002 fd4e 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	482a      	ldr	r0, [pc, #168]	; (8000928 <MX_GPIO_Init+0x194>)
 8000880:	f002 fb7c 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000884:	f244 0381 	movw	r3, #16513	; 0x4081
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_GPIO_Init+0x18c>)
 800089e:	f002 fb6d 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481a      	ldr	r0, [pc, #104]	; (8000924 <MX_GPIO_Init+0x190>)
 80008ba:	f002 fb5f 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_GPIO_Init+0x190>)
 80008d2:	f002 fb53 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e8:	230a      	movs	r3, #10
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_GPIO_Init+0x198>)
 80008f4:	f002 fb42 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_GPIO_Init+0x198>)
 800090e:	f002 fb35 	bl	8002f7c <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400
 8000924:	40021800 	.word	0x40021800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000

08000930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <StartDefaultTask+0x34>)
 8000940:	f003 f9ee 	bl	8003d20 <HAL_RNG_GenerateRandomNumber>
	srand(rnd);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4618      	mov	r0, r3
 8000948:	f018 fbcc 	bl	80190e4 <srand>

  /* init code for LWIP */
  MX_LWIP_Init();
 800094c:	f003 ffae 	bl	80048ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Initialize tcp echo server */
  tcpecho_init();
 8000950:	f000 fa9a 	bl	8000e88 <tcpecho_init>

  /* Initialize tcp echo server */
  telnet_init();
 8000954:	f000 fd7c 	bl	8001450 <telnet_init>

  /* Initialize HTTP server */
  httpd_init();
 8000958:	f00a ff50 	bl	800b7fc <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f004 fd55 	bl	800540c <osDelay>
 8000962:	e7fb      	b.n	800095c <StartDefaultTask+0x2c>
 8000964:	20000368 	.word	0x20000368

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 ff29 	bl	80017d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40002000 	.word	0x40002000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fff3 	bl	80019c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <HAL_RNG_MspInit+0x3c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10d      	bne.n	8000a1e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_RNG_MspInit+0x40>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <HAL_RNG_MspInit+0x40>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6353      	str	r3, [r2, #52]	; 0x34
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_RNG_MspInit+0x40>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	50060800 	.word	0x50060800
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12c      	bne.n	8000ab0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_UART_MspInit+0x8c>)
 8000aac:	f002 fa66 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004800 	.word	0x40004800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 f8b4 	bl	8003c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b0a:	f003 f885 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8000b0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b10:	e004      	b.n	8000b1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b12:	f003 f881 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8000b16:	4603      	mov	r3, r0
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_InitTick+0xe8>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	0c9b      	lsrs	r3, r3, #18
 8000b26:	3b01      	subs	r3, #1
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <HAL_InitTick+0xf0>)
 8000b2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b36:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b50:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b52:	f003 f93b 	bl	8003dcc <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11b      	bne.n	8000b9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b66:	f003 f98b 	bl	8003e80 <HAL_TIM_Base_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d111      	bne.n	8000b9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b78:	202d      	movs	r0, #45	; 0x2d
 8000b7a:	f000 ff41 	bl	8001a00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d808      	bhi.n	8000b96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	202d      	movs	r0, #45	; 0x2d
 8000b8a:	f000 ff1d 	bl	80019c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_InitTick+0xf4>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e002      	b.n	8000b9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	200003c0 	.word	0x200003c0
 8000bb4:	40002000 	.word	0x40002000
 8000bb8:	20000004 	.word	0x20000004

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000bee:	f003 f9b7 	bl	8003f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200003c0 	.word	0x200003c0

08000bfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <ETH_IRQHandler+0x10>)
 8000c02:	f001 fae5 	bl	80021d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000502c 	.word	0x2000502c

08000c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	return 1;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_kill>:

int _kill(int pid, int sig)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <_kill+0x20>)
 8000c2c:	2216      	movs	r2, #22
 8000c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	2001102c 	.word	0x2001102c

08000c44 <_exit>:

void _exit (int status)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ffe5 	bl	8000c20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c56:	e7fe      	b.n	8000c56 <_exit+0x12>

08000c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e00a      	b.n	8000c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c6a:	f3af 8000 	nop.w
 8000c6e:	4601      	mov	r1, r0
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	60ba      	str	r2, [r7, #8]
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf0      	blt.n	8000c6a <_read+0x12>
	}

return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e009      	b.n	8000cb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf1      	blt.n	8000ca4 <_write+0x12>
	}
	return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d205      	bcs.n	8000d70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <_sbrk+0x6c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20030000 	.word	0x20030000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	20000408 	.word	0x20000408
 8000d9c:	20011030 	.word	0x20011030
 8000da0:	2001102c 	.word	0x2001102c

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f007 fa9f 	bl	8008318 <netconn_new_with_proto_and_callback>
 8000dda:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d04e      	beq.n	8000e80 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000de2:	2207      	movs	r2, #7
 8000de4:	2100      	movs	r1, #0
 8000de6:	69f8      	ldr	r0, [r7, #28]
 8000de8:	f007 fb50 	bl	800848c <netconn_bind>
 8000dec:	4603      	mov	r3, r0
 8000dee:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000df0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d13f      	bne.n	8000e78 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df8:	21ff      	movs	r1, #255	; 0xff
 8000dfa:	69f8      	ldr	r0, [r7, #28]
 8000dfc:	f007 fbb6 	bl	800856c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	69f8      	ldr	r0, [r7, #28]
 8000e08:	f007 fbdc 	bl	80085c4 <netconn_accept>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f3      	bne.n	8000e00 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e18:	e01b      	b.n	8000e52 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f107 020a 	add.w	r2, r7, #10
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f009 fcbd 	bl	800a7a4 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	897b      	ldrh	r3, [r7, #10]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2301      	movs	r3, #1
 8000e38:	f007 fe46 	bl	8008ac8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f009 fcfa 	bl	800a838 <netbuf_next>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dae7      	bge.n	8000e1a <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 fc89 	bl	800a764 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f107 0210 	add.w	r2, r7, #16
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f007 fdba 	bl	80089d4 <netconn_recv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0d9      	beq.n	8000e1a <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 ff2f 	bl	8008ccc <netconn_close>
          netconn_delete(newconn);
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f007 faef 	bl	8008454 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e76:	e7c3      	b.n	8000e00 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f007 faea 	bl	8008454 <netconn_delete>
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e8e:	2304      	movs	r3, #4
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	2200      	movs	r2, #0
 8000e98:	4903      	ldr	r1, [pc, #12]	; (8000ea8 <tcpecho_init+0x20>)
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <tcpecho_init+0x24>)
 8000e9c:	f017 fed4 	bl	8018c48 <sys_thread_new>
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	08000dc9 	.word	0x08000dc9
 8000eac:	0801a3dc 	.word	0x0801a3dc

08000eb0 <http_client>:

char httpTextBuff;

/*-----------------------------------------------------------------------------------*/
static void http_client(char *s, uint16_t size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147,229,144,124);
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <http_client+0xbc>)
 8000ec2:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <http_client+0xc0>)
 8000ec6:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f007 fa23 	bl	8008318 <netconn_new_with_proto_and_callback>
 8000ed2:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2250      	movs	r2, #80	; 0x50
 8000eda:	4619      	mov	r1, r3
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f007 fb0d 	bl	80084fc <netconn_connect>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d136      	bne.n	8000f56 <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee8:	69b8      	ldr	r0, [r7, #24]
 8000eea:	f7ff f98b 	bl	8000204 <strlen>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f007 fde5 	bl	8008ac8 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f04:	e019      	b.n	8000f3a <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size-len);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	18d1      	adds	r1, r2, r3
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	8bfb      	ldrh	r3, [r7, #30]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f00c fac9 	bl	800d4b0 <pbuf_copy_partial>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	8bfb      	ldrh	r3, [r7, #30]
 8000f24:	4413      	add	r3, r2
 8000f26:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f28:	8bfb      	ldrh	r3, [r7, #30]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f009 fc15 	bl	800a764 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f3a:	8bfa      	ldrh	r2, [r7, #30]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d20d      	bcs.n	8000f5e <http_client+0xae>
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f007 fd43 	bl	80089d4 <netconn_recv>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0d8      	beq.n	8000f06 <http_client+0x56>
 8000f54:	e003      	b.n	8000f5e <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 8000f56:	4907      	ldr	r1, [pc, #28]	; (8000f74 <http_client+0xc4>)
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f018 f9a9 	bl	80192b0 <siprintf>
	}
	netconn_delete(client);
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f007 fa78 	bl	8008454 <netconn_delete>
}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	7c90e593 	.word	0x7c90e593
 8000f70:	0801a3ec 	.word	0x0801a3ec
 8000f74:	0801a438 	.word	0x0801a438

08000f78 <telnet_process_command>:

static void telnet_process_command(char *cmd, struct netconn *conn){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000f7e:	af02      	add	r7, sp, #8
 8000f80:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f84:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000f88:	6018      	str	r0, [r3, #0]
 8000f8a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f8e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f92:	6019      	str	r1, [r3, #0]
	uint8_t status_led1;
	uint8_t status_led2;
	uint8_t status_led3;
	char *token;
	char *saveptr;
	token = strtok_r(cmd, " ", &saveptr);
 8000f94:	f107 020c 	add.w	r2, r7, #12
 8000f98:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f9c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000fa0:	49cb      	ldr	r1, [pc, #812]	; (80012d0 <telnet_process_command+0x358>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f018 fa4b 	bl	801943e <strtok_r>
 8000fa8:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc


	if (strcasecmp(token, "HELLO") == 0) {
 8000fac:	49c9      	ldr	r1, [pc, #804]	; (80012d4 <telnet_process_command+0x35c>)
 8000fae:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8000fb2:	f018 f9e1 	bl	8019378 <strcasecmp>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d118      	bne.n	8000fee <telnet_process_command+0x76>
		sprintf(s, "Komunikace OK\r\n");
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	49c5      	ldr	r1, [pc, #788]	; (80012d8 <telnet_process_command+0x360>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f018 f974 	bl	80192b0 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f919 	bl	8000204 <strlen>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f107 0110 	add.w	r1, r7, #16
 8000fd8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000fdc:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6800      	ldr	r0, [r0, #0]
 8000fe8:	f007 fd6e 	bl	8008ac8 <netconn_write_partly>
	}else if (strcasecmp(token, "CLIENT") == 0){

		http_client(s,512);
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
	}
}
 8000fec:	e16b      	b.n	80012c6 <telnet_process_command+0x34e>
	}else if (strcasecmp(token, "LED1") == 0){
 8000fee:	49bb      	ldr	r1, [pc, #748]	; (80012dc <telnet_process_command+0x364>)
 8000ff0:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8000ff4:	f018 f9c0 	bl	8019378 <strcasecmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d125      	bne.n	800104a <telnet_process_command+0xd2>
		token = strtok_r(NULL, " ", &saveptr);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	461a      	mov	r2, r3
 8001004:	49b2      	ldr	r1, [pc, #712]	; (80012d0 <telnet_process_command+0x358>)
 8001006:	2000      	movs	r0, #0
 8001008:	f018 fa19 	bl	801943e <strtok_r>
 800100c:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc
		if (strcasecmp(token, "ON") == 0){
 8001010:	49b3      	ldr	r1, [pc, #716]	; (80012e0 <telnet_process_command+0x368>)
 8001012:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001016:	f018 f9af 	bl	8019378 <strcasecmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <telnet_process_command+0xb4>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	2101      	movs	r1, #1
 8001024:	48af      	ldr	r0, [pc, #700]	; (80012e4 <telnet_process_command+0x36c>)
 8001026:	f002 f96d 	bl	8003304 <HAL_GPIO_WritePin>
}
 800102a:	e14c      	b.n	80012c6 <telnet_process_command+0x34e>
		}else if (strcasecmp(token, "OFF") == 0){
 800102c:	49ae      	ldr	r1, [pc, #696]	; (80012e8 <telnet_process_command+0x370>)
 800102e:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001032:	f018 f9a1 	bl	8019378 <strcasecmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8144 	bne.w	80012c6 <telnet_process_command+0x34e>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	48a8      	ldr	r0, [pc, #672]	; (80012e4 <telnet_process_command+0x36c>)
 8001044:	f002 f95e 	bl	8003304 <HAL_GPIO_WritePin>
}
 8001048:	e13d      	b.n	80012c6 <telnet_process_command+0x34e>
	}else if (strcasecmp(token, "LED2") == 0){
 800104a:	49a8      	ldr	r1, [pc, #672]	; (80012ec <telnet_process_command+0x374>)
 800104c:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001050:	f018 f992 	bl	8019378 <strcasecmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d125      	bne.n	80010a6 <telnet_process_command+0x12e>
		token = strtok_r(NULL, " ", &saveptr);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	461a      	mov	r2, r3
 8001060:	499b      	ldr	r1, [pc, #620]	; (80012d0 <telnet_process_command+0x358>)
 8001062:	2000      	movs	r0, #0
 8001064:	f018 f9eb 	bl	801943e <strtok_r>
 8001068:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc
		if (strcasecmp(token, "ON") == 0){
 800106c:	499c      	ldr	r1, [pc, #624]	; (80012e0 <telnet_process_command+0x368>)
 800106e:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8001072:	f018 f981 	bl	8019378 <strcasecmp>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d105      	bne.n	8001088 <telnet_process_command+0x110>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4898      	ldr	r0, [pc, #608]	; (80012e4 <telnet_process_command+0x36c>)
 8001082:	f002 f93f 	bl	8003304 <HAL_GPIO_WritePin>
}
 8001086:	e11e      	b.n	80012c6 <telnet_process_command+0x34e>
		}else if (strcasecmp(token, "OFF") == 0){
 8001088:	4997      	ldr	r1, [pc, #604]	; (80012e8 <telnet_process_command+0x370>)
 800108a:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800108e:	f018 f973 	bl	8019378 <strcasecmp>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	f040 8116 	bne.w	80012c6 <telnet_process_command+0x34e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4891      	ldr	r0, [pc, #580]	; (80012e4 <telnet_process_command+0x36c>)
 80010a0:	f002 f930 	bl	8003304 <HAL_GPIO_WritePin>
}
 80010a4:	e10f      	b.n	80012c6 <telnet_process_command+0x34e>
	}else if (strcasecmp(token, "LED3") == 0){
 80010a6:	4992      	ldr	r1, [pc, #584]	; (80012f0 <telnet_process_command+0x378>)
 80010a8:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80010ac:	f018 f964 	bl	8019378 <strcasecmp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d127      	bne.n	8001106 <telnet_process_command+0x18e>
		token = strtok_r(NULL, " ", &saveptr);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	461a      	mov	r2, r3
 80010bc:	4984      	ldr	r1, [pc, #528]	; (80012d0 <telnet_process_command+0x358>)
 80010be:	2000      	movs	r0, #0
 80010c0:	f018 f9bd 	bl	801943e <strtok_r>
 80010c4:	f8c7 03fc 	str.w	r0, [r7, #1020]	; 0x3fc
		if (strcasecmp(token, "ON") == 0){
 80010c8:	4985      	ldr	r1, [pc, #532]	; (80012e0 <telnet_process_command+0x368>)
 80010ca:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80010ce:	f018 f953 	bl	8019378 <strcasecmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <telnet_process_command+0x16e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010de:	4881      	ldr	r0, [pc, #516]	; (80012e4 <telnet_process_command+0x36c>)
 80010e0:	f002 f910 	bl	8003304 <HAL_GPIO_WritePin>
}
 80010e4:	e0ef      	b.n	80012c6 <telnet_process_command+0x34e>
		}else if (strcasecmp(token, "OFF") == 0){
 80010e6:	4980      	ldr	r1, [pc, #512]	; (80012e8 <telnet_process_command+0x370>)
 80010e8:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80010ec:	f018 f944 	bl	8019378 <strcasecmp>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 80e7 	bne.w	80012c6 <telnet_process_command+0x34e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fe:	4879      	ldr	r0, [pc, #484]	; (80012e4 <telnet_process_command+0x36c>)
 8001100:	f002 f900 	bl	8003304 <HAL_GPIO_WritePin>
}
 8001104:	e0df      	b.n	80012c6 <telnet_process_command+0x34e>
	}else if (strcasecmp(token, "STATUS") == 0){
 8001106:	497b      	ldr	r1, [pc, #492]	; (80012f4 <telnet_process_command+0x37c>)
 8001108:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800110c:	f018 f934 	bl	8019378 <strcasecmp>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 80b6 	bne.w	8001284 <telnet_process_command+0x30c>
		status_led1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 8001118:	2101      	movs	r1, #1
 800111a:	4872      	ldr	r0, [pc, #456]	; (80012e4 <telnet_process_command+0x36c>)
 800111c:	f002 f8da 	bl	80032d4 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
		status_led2 = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	486e      	ldr	r0, [pc, #440]	; (80012e4 <telnet_process_command+0x36c>)
 800112a:	f002 f8d3 	bl	80032d4 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
		status_led3 = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	486a      	ldr	r0, [pc, #424]	; (80012e4 <telnet_process_command+0x36c>)
 800113a:	f002 f8cb 	bl	80032d4 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
		if (status_led1){
 8001144:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8001148:	2b00      	cmp	r3, #0
 800114a:	d018      	beq.n	800117e <telnet_process_command+0x206>
			sprintf(s, "LED1 is ON...\r\n");
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4969      	ldr	r1, [pc, #420]	; (80012f8 <telnet_process_command+0x380>)
 8001152:	4618      	mov	r0, r3
 8001154:	f018 f8ac 	bl	80192b0 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f851 	bl	8000204 <strlen>
 8001162:	4602      	mov	r2, r0
 8001164:	f107 0110 	add.w	r1, r7, #16
 8001168:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800116c:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	6800      	ldr	r0, [r0, #0]
 8001178:	f007 fca6 	bl	8008ac8 <netconn_write_partly>
 800117c:	e017      	b.n	80011ae <telnet_process_command+0x236>
			sprintf(s, "LED1 is OFF...\r\n");
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	495e      	ldr	r1, [pc, #376]	; (80012fc <telnet_process_command+0x384>)
 8001184:	4618      	mov	r0, r3
 8001186:	f018 f893 	bl	80192b0 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f838 	bl	8000204 <strlen>
 8001194:	4602      	mov	r2, r0
 8001196:	f107 0110 	add.w	r1, r7, #16
 800119a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800119e:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	6800      	ldr	r0, [r0, #0]
 80011aa:	f007 fc8d 	bl	8008ac8 <netconn_write_partly>
		if (status_led2){
 80011ae:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d018      	beq.n	80011e8 <telnet_process_command+0x270>
			sprintf(s, "LED2 is ON...\r\n");
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4951      	ldr	r1, [pc, #324]	; (8001300 <telnet_process_command+0x388>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f018 f877 	bl	80192b0 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f81c 	bl	8000204 <strlen>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f107 0110 	add.w	r1, r7, #16
 80011d2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80011d6:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 80011da:	2300      	movs	r3, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	6800      	ldr	r0, [r0, #0]
 80011e2:	f007 fc71 	bl	8008ac8 <netconn_write_partly>
 80011e6:	e017      	b.n	8001218 <telnet_process_command+0x2a0>
			sprintf(s, "LED2 is OFF...\r\n");
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4945      	ldr	r1, [pc, #276]	; (8001304 <telnet_process_command+0x38c>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f018 f85e 	bl	80192b0 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f803 	bl	8000204 <strlen>
 80011fe:	4602      	mov	r2, r0
 8001200:	f107 0110 	add.w	r1, r7, #16
 8001204:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001208:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	6800      	ldr	r0, [r0, #0]
 8001214:	f007 fc58 	bl	8008ac8 <netconn_write_partly>
		if (status_led3){
 8001218:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 800121c:	2b00      	cmp	r3, #0
 800121e:	d018      	beq.n	8001252 <telnet_process_command+0x2da>
			sprintf(s, "LED3 is ON...\r\n");
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4938      	ldr	r1, [pc, #224]	; (8001308 <telnet_process_command+0x390>)
 8001226:	4618      	mov	r0, r3
 8001228:	f018 f842 	bl	80192b0 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ffe7 	bl	8000204 <strlen>
 8001236:	4602      	mov	r2, r0
 8001238:	f107 0110 	add.w	r1, r7, #16
 800123c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001240:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	6800      	ldr	r0, [r0, #0]
 800124c:	f007 fc3c 	bl	8008ac8 <netconn_write_partly>
}
 8001250:	e039      	b.n	80012c6 <telnet_process_command+0x34e>
			sprintf(s, "LED3 is OFF...\r\n");
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	492d      	ldr	r1, [pc, #180]	; (800130c <telnet_process_command+0x394>)
 8001258:	4618      	mov	r0, r3
 800125a:	f018 f829 	bl	80192b0 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f7fe ffce 	bl	8000204 <strlen>
 8001268:	4602      	mov	r2, r0
 800126a:	f107 0110 	add.w	r1, r7, #16
 800126e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001272:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	6800      	ldr	r0, [r0, #0]
 800127e:	f007 fc23 	bl	8008ac8 <netconn_write_partly>
}
 8001282:	e020      	b.n	80012c6 <telnet_process_command+0x34e>
	}else if (strcasecmp(token, "CLIENT") == 0){
 8001284:	4922      	ldr	r1, [pc, #136]	; (8001310 <telnet_process_command+0x398>)
 8001286:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 800128a:	f018 f875 	bl	8019378 <strcasecmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d118      	bne.n	80012c6 <telnet_process_command+0x34e>
		http_client(s,512);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe07 	bl	8000eb0 <http_client>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffac 	bl	8000204 <strlen>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f107 0110 	add.w	r1, r7, #16
 80012b2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80012b6:	f5a3 6080 	sub.w	r0, r3, #1024	; 0x400
 80012ba:	2300      	movs	r3, #0
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	6800      	ldr	r0, [r0, #0]
 80012c2:	f007 fc01 	bl	8008ac8 <netconn_write_partly>
}
 80012c6:	bf00      	nop
 80012c8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0801a44c 	.word	0x0801a44c
 80012d4:	0801a450 	.word	0x0801a450
 80012d8:	0801a458 	.word	0x0801a458
 80012dc:	0801a468 	.word	0x0801a468
 80012e0:	0801a470 	.word	0x0801a470
 80012e4:	40020400 	.word	0x40020400
 80012e8:	0801a474 	.word	0x0801a474
 80012ec:	0801a478 	.word	0x0801a478
 80012f0:	0801a480 	.word	0x0801a480
 80012f4:	0801a488 	.word	0x0801a488
 80012f8:	0801a490 	.word	0x0801a490
 80012fc:	0801a4a0 	.word	0x0801a4a0
 8001300:	0801a4b4 	.word	0x0801a4b4
 8001304:	0801a4c4 	.word	0x0801a4c4
 8001308:	0801a4d8 	.word	0x0801a4d8
 800130c:	0801a4e8 	.word	0x0801a4e8
 8001310:	0801a4fc 	.word	0x0801a4fc

08001314 <telnet_byte_available>:

/*-----------------------------------------------------------------------------------*/
static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <telnet_byte_available+0x64>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2bff      	cmp	r3, #255	; 0xff
 8001326:	d810      	bhi.n	800134a <telnet_byte_available+0x36>
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b1f      	cmp	r3, #31
 800132c:	d90d      	bls.n	800134a <telnet_byte_available+0x36>
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db09      	blt.n	800134a <telnet_byte_available+0x36>
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <telnet_byte_available+0x64>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	b291      	uxth	r1, r2
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <telnet_byte_available+0x64>)
 8001340:	8011      	strh	r1, [r2, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <telnet_byte_available+0x68>)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b0a      	cmp	r3, #10
 800134e:	d002      	beq.n	8001356 <telnet_byte_available+0x42>
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b0d      	cmp	r3, #13
 8001354:	d10c      	bne.n	8001370 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <telnet_byte_available+0x64>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <telnet_byte_available+0x68>)
 800135e:	2100      	movs	r1, #0
 8001360:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 8001362:	6839      	ldr	r1, [r7, #0]
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <telnet_byte_available+0x68>)
 8001366:	f7ff fe07 	bl	8000f78 <telnet_process_command>
		cnt = 0;
 800136a:	4b03      	ldr	r3, [pc, #12]	; (8001378 <telnet_byte_available+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
	}
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000040c 	.word	0x2000040c
 800137c:	20000410 	.word	0x20000410

08001380 <telnet_thread>:
/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2010      	movs	r0, #16
 800138e:	f006 ffc3 	bl	8008318 <netconn_new_with_proto_and_callback>
 8001392:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d055      	beq.n	8001446 <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 23. */
		err = netconn_bind(conn, NULL, 23);
 800139a:	2217      	movs	r2, #23
 800139c:	2100      	movs	r1, #0
 800139e:	69f8      	ldr	r0, [r7, #28]
 80013a0:	f007 f874 	bl	800848c <netconn_bind>
 80013a4:	4603      	mov	r3, r0
 80013a6:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 80013a8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d146      	bne.n	800143e <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 80013b0:	21ff      	movs	r1, #255	; 0xff
 80013b2:	69f8      	ldr	r0, [r7, #28]
 80013b4:	f007 f8da 	bl	800856c <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	69f8      	ldr	r0, [r7, #28]
 80013c0:	f007 f900 	bl	80085c4 <netconn_accept>
 80013c4:	4603      	mov	r3, r0
 80013c6:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 80013c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f3      	bne.n	80013b8 <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 80013d0:	e022      	b.n	8001418 <telnet_thread+0x98>
					{
						do
						{
							netbuf_data(buf, (void**)&data, &len);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f107 020a 	add.w	r2, r7, #10
 80013d8:	f107 010c 	add.w	r1, r7, #12
 80013dc:	4618      	mov	r0, r3
 80013de:	f009 f9e1 	bl	800a7a4 <netbuf_data>
							while (len--){
 80013e2:	e008      	b.n	80013f6 <telnet_thread+0x76>
								telnet_byte_available(*data++, newconn);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60fa      	str	r2, [r7, #12]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff8f 	bl	8001314 <telnet_byte_available>
							while (len--){
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	b292      	uxth	r2, r2
 80013fc:	817a      	strh	r2, [r7, #10]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <telnet_thread+0x64>
							}

						}
						while (netbuf_next(buf) >= 0);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4618      	mov	r0, r3
 8001406:	f009 fa17 	bl	800a838 <netbuf_next>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	dae0      	bge.n	80013d2 <telnet_thread+0x52>

						netbuf_delete(buf);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4618      	mov	r0, r3
 8001414:	f009 f9a6 	bl	800a764 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f107 0210 	add.w	r2, r7, #16
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f007 fad7 	bl	80089d4 <netconn_recv>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0d2      	beq.n	80013d2 <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4618      	mov	r0, r3
 8001430:	f007 fc4c 	bl	8008ccc <netconn_close>
					netconn_delete(newconn);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4618      	mov	r0, r3
 8001438:	f007 f80c 	bl	8008454 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 800143c:	e7bc      	b.n	80013b8 <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4618      	mov	r0, r3
 8001442:	f007 f807 	bl	8008454 <netconn_delete>
		}
	}
}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 8001456:	2304      	movs	r3, #4
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145e:	2200      	movs	r2, #0
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <telnet_init+0x20>)
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <telnet_init+0x24>)
 8001464:	f017 fbf0 	bl	8018c48 <sys_thread_new>
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08001381 	.word	0x08001381
 8001474:	0801a504 	.word	0x0801a504

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001494:	4c0b      	ldr	r4, [pc, #44]	; (80014c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a2:	f7ff fc7f 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f017 fd09 	bl	8018ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff f8a5 	bl	80005f8 <main>
  bx  lr    
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80014bc:	08028544 	.word	0x08028544
  ldr r2, =_sbss
 80014c0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80014c4:	20011030 	.word	0x20011030

080014c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC_IRQHandler>

080014ca <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <LAN8742_RegisterBusIO+0x28>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <LAN8742_RegisterBusIO+0x28>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <LAN8742_RegisterBusIO+0x28>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e014      	b.n	8001522 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d17c      	bne.n	8001648 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e01c      	b.n	80015a2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	f107 0208 	add.w	r2, r7, #8
 8001570:	2112      	movs	r1, #18
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	4798      	blx	r3
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	da03      	bge.n	8001584 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800157c:	f06f 0304 	mvn.w	r3, #4
 8001580:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001582:	e00b      	b.n	800159c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	d105      	bne.n	800159c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
         break;
 800159a:	e005      	b.n	80015a8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b1f      	cmp	r3, #31
 80015a6:	d9df      	bls.n	8001568 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b1f      	cmp	r3, #31
 80015ae:	d902      	bls.n	80015b6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015b0:	f06f 0302 	mvn.w	r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d145      	bne.n	8001648 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6810      	ldr	r0, [r2, #0]
 80015c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c8:	2100      	movs	r1, #0
 80015ca:	4798      	blx	r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db37      	blt.n	8001642 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6810      	ldr	r0, [r2, #0]
 80015da:	f107 0208 	add.w	r2, r7, #8
 80015de:	2100      	movs	r1, #0
 80015e0:	4798      	blx	r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db28      	blt.n	800163a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4798      	blx	r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80015f2:	e01c      	b.n	800162e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4798      	blx	r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001606:	d80e      	bhi.n	8001626 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6810      	ldr	r0, [r2, #0]
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	2100      	movs	r1, #0
 8001616:	4798      	blx	r3
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	da07      	bge.n	800162e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800161e:	f06f 0304 	mvn.w	r3, #4
 8001622:	613b      	str	r3, [r7, #16]
                 break;
 8001624:	e010      	b.n	8001648 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001626:	f06f 0301 	mvn.w	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
               break;
 800162c:	e00c      	b.n	8001648 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1dd      	bne.n	80015f4 <LAN8742_Init+0xc6>
 8001638:	e006      	b.n	8001648 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800163a:	f06f 0304 	mvn.w	r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	e002      	b.n	8001648 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001642:	f06f 0303 	mvn.w	r3, #3
 8001646:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d112      	bne.n	8001674 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4798      	blx	r3
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001658:	bf00      	nop
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4798      	blx	r3
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800166c:	d9f5      	bls.n	800165a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001674:	693b      	ldr	r3, [r7, #16]
 }
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6810      	ldr	r0, [r2, #0]
 8001692:	f107 020c 	add.w	r2, r7, #12
 8001696:	2101      	movs	r1, #1
 8001698:	4798      	blx	r3
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	da02      	bge.n	80016a6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016a0:	f06f 0304 	mvn.w	r3, #4
 80016a4:	e06e      	b.n	8001784 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6810      	ldr	r0, [r2, #0]
 80016ae:	f107 020c 	add.w	r2, r7, #12
 80016b2:	2101      	movs	r1, #1
 80016b4:	4798      	blx	r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da02      	bge.n	80016c2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016bc:	f06f 0304 	mvn.w	r3, #4
 80016c0:	e060      	b.n	8001784 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80016cc:	2301      	movs	r3, #1
 80016ce:	e059      	b.n	8001784 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6810      	ldr	r0, [r2, #0]
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	2100      	movs	r1, #0
 80016de:	4798      	blx	r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da02      	bge.n	80016ec <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016e6:	f06f 0304 	mvn.w	r3, #4
 80016ea:	e04b      	b.n	8001784 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11b      	bne.n	800172e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <LAN8742_GetLinkState+0x90>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800170a:	2302      	movs	r3, #2
 800170c:	e03a      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001718:	2303      	movs	r3, #3
 800171a:	e033      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001726:	2304      	movs	r3, #4
 8001728:	e02c      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800172a:	2305      	movs	r3, #5
 800172c:	e02a      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6810      	ldr	r0, [r2, #0]
 8001736:	f107 020c 	add.w	r2, r7, #12
 800173a:	211f      	movs	r1, #31
 800173c:	4798      	blx	r3
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	da02      	bge.n	800174a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001744:	f06f 0304 	mvn.w	r3, #4
 8001748:	e01c      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001754:	2306      	movs	r3, #6
 8001756:	e015      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 031c 	and.w	r3, r3, #28
 800175e:	2b18      	cmp	r3, #24
 8001760:	d101      	bne.n	8001766 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001762:	2302      	movs	r3, #2
 8001764:	e00e      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 031c 	and.w	r3, r3, #28
 800176c:	2b08      	cmp	r3, #8
 800176e:	d101      	bne.n	8001774 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001770:	2303      	movs	r3, #3
 8001772:	e007      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 031c 	and.w	r3, r3, #28
 800177a:	2b14      	cmp	r3, #20
 800177c:	d101      	bne.n	8001782 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800177e:	2304      	movs	r3, #4
 8001780:	e000      	b.n	8001784 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001782:	2305      	movs	r3, #5
    }				
  }
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <HAL_Init+0x40>)
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_Init+0x40>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_Init+0x40>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f8fc 	bl	80019b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	200f      	movs	r0, #15
 80017bc:	f7ff f982 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff f8ea 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000510 	.word	0x20000510

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000510 	.word	0x20000510

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff4c 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019da:	f7ff ff61 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f7ff ffb1 	bl	800194c <NVIC_EncodePriority>
 80019ea:	4602      	mov	r2, r0
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff80 	bl	80018f8 <__NVIC_SetPriority>
}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff54 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06c      	b.n	8001b08 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2223      	movs	r2, #35	; 0x23
 8001a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f003 fa31 	bl	8004ea8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_ETH_Init+0xf4>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <HAL_ETH_Init+0xf4>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_ETH_Init+0xf4>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a98:	f7ff feae 	bl	80017f8 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a9e:	e011      	b.n	8001ac4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001aa0:	f7ff feaa 	bl	80017f8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aae:	d909      	bls.n	8001ac4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	22e0      	movs	r2, #224	; 0xe0
 8001abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e021      	b.n	8001b08 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e4      	bne.n	8001aa0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 ffaa 	bl	8002a30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f001 f851 	bl	8002b84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 f8a7 	bl	8002c36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f001 f80f 	bl	8002b14 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2210      	movs	r2, #16
 8001b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800

08001b18 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d150      	bne.n	8001bcc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2223      	movs	r2, #35	; 0x23
 8001b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fa79 	bl	8002030 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0208 	orr.w	r2, r2, #8
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff fe5a 	bl	8001810 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0204 	orr.w	r2, r2, #4
 8001b72:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff fe47 	bl	8001810 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fdf1 	bl	8002772 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bbe:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2223      	movs	r2, #35	; 0x23
 8001bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d17f      	bne.n	8001ce8 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2223      	movs	r2, #35	; 0x23
 8001bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c1a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001c2e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f9f9 	bl	8002030 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0208 	orr.w	r2, r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff fdda 	bl	8001810 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0204 	orr.w	r2, r2, #4
 8001c72:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f7ff fdc7 	bl	8001810 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fd71 	bl	8002772 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cbe:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001cd2:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001cd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cda:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2223      	movs	r2, #35	; 0x23
 8001ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d00:	2b23      	cmp	r3, #35	; 0x23
 8001d02:	d170      	bne.n	8001de6 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2223      	movs	r2, #35	; 0x23
 8001d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001d1e:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001d22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d26:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d3e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	f023 0302 	bic.w	r3, r3, #2
 8001d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d56:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0204 	bic.w	r2, r2, #4
 8001d66:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff fd4d 	bl	8001810 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fcf7 	bl	8002772 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0208 	bic.w	r2, r2, #8
 8001d92:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fd37 	bl	8001810 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e00e      	b.n	8001dce <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	3212      	adds	r2, #18
 8001db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dba:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d9ed      	bls.n	8001db0 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
  }
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e045      	b.n	8001ea0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1a:	2b23      	cmp	r3, #35	; 0x23
 8001e1c:	d13f      	bne.n	8001e9e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e26:	2201      	movs	r2, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 ff70 	bl	8002d10 <ETH_Prepare_Tx_Descriptors>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3c:	f043 0202 	orr.w	r2, r3, #2
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e02a      	b.n	8001ea0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4a:	f3bf 8f4f 	dsb	sy
}
 8001e4e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d904      	bls.n	8001e6c <HAL_ETH_Transmit_IT+0x7c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	1f1a      	subs	r2, r3, #4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	461a      	mov	r2, r3
 8001e88:	2304      	movs	r3, #4
 8001e8a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e94:	461a      	mov	r2, r3
 8001e96:	2300      	movs	r3, #0
 8001e98:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0a8      	b.n	8002026 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eda:	2b23      	cmp	r3, #35	; 0x23
 8001edc:	d001      	beq.n	8001ee2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0a1      	b.n	8002026 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	3212      	adds	r2, #18
 8001eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef8:	f1c3 0304 	rsb	r3, r3, #4
 8001efc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001efe:	e06a      	b.n	8001fd6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <HAL_ETH_ReadData+0x88>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d040      	beq.n	8001fb2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0c1b      	lsrs	r3, r3, #16
 8001f60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f64:	3b04      	subs	r3, #4
 8001f66:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	f003 f963 	bl	800525c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	441a      	add	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d902      	bls.n	8001fc4 <HAL_ETH_ReadData+0x11c>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b04      	subs	r3, #4
 8001fc2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	3212      	adds	r2, #18
 8001fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db06      	blt.n	8001fec <HAL_ETH_ReadData+0x144>
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d202      	bcs.n	8001fec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d089      	beq.n	8001f00 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f815 	bl	8002030 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800203c:	2301      	movs	r3, #1
 800203e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002044:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	3212      	adds	r2, #18
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002056:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002058:	e040      	b.n	80020dc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d112      	bne.n	8002088 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f8c8 	bl	80051fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	74fb      	strb	r3, [r7, #19]
 8002076:	e007      	b.n	8002088 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	461a      	mov	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d026      	beq.n	80020dc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <ETH_UpdateDescriptor+0xe4>)
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	e003      	b.n	80020a6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80020a4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020a6:	f3bf 8f5f 	dmb	sy
}
 80020aa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d902      	bls.n	80020ca <ETH_UpdateDescriptor+0x9a>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3b04      	subs	r3, #4
 80020c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	3212      	adds	r2, #18
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3b01      	subs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <ETH_UpdateDescriptor+0xb8>
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1b8      	bne.n	800205a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d00c      	beq.n	800210c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fa:	461a      	mov	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	800045f8 	.word	0x800045f8

08002118 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3318      	adds	r3, #24
 8002124:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002136:	e03f      	b.n	80021b8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002138:	2301      	movs	r3, #1
 800213a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3b01      	subs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	3304      	adds	r3, #4
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	3301      	adds	r3, #1
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d028      	beq.n	80021b8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db1b      	blt.n	80021b4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3304      	adds	r3, #4
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 f8a7 	bl	80052dc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	3304      	adds	r3, #4
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b2:	e001      	b.n	80021b8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_ETH_ReleaseTxPacket+0xac>
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1b9      	bne.n	8002138 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d112      	bne.n	8002210 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d109      	bne.n	8002210 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002204:	461a      	mov	r2, r3
 8002206:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_ETH_IRQHandler+0x178>)
 8002208:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f002 fbb0 	bl	8004970 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d113      	bne.n	800224a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10a      	bne.n	800224a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223c:	461a      	mov	r2, r3
 800223e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002242:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f002 fba3 	bl	8004990 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800225c:	d14c      	bne.n	80022f8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002270:	d142      	bne.n	80022f8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f043 0208 	orr.w	r2, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d11a      	bne.n	80022cc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_ETH_IRQHandler+0x17c>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80022bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022c0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	22e0      	movs	r2, #224	; 0xe0
 80022c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80022ca:	e012      	b.n	80022f2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	f248 6380 	movw	r3, #34432	; 0x8680
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ea:	461a      	mov	r2, r3
 80022ec:	f248 6380 	movw	r3, #34432	; 0x8680
 80022f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f002 fb5c 	bl	80049b0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b08      	cmp	r3, #8
 8002304:	d10e      	bne.n	8002324 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f81c 	bl	8002354 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_ETH_IRQHandler+0x180>)
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_ETH_IRQHandler+0x180>)
 8002332:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002336:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f815 	bl	8002368 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	00010040 	.word	0x00010040
 800234c:	007e2000 	.word	0x007e2000
 8002350:	40013c00 	.word	0x40013c00

08002354 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 031c 	and.w	r3, r3, #28
 8002398:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	02db      	lsls	r3, r3, #11
 800239e:	b29b      	uxth	r3, r3
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	019b      	lsls	r3, r3, #6
 80023aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0302 	bic.w	r3, r3, #2
 80023ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80023cc:	f7ff fa14 	bl	80017f8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023d2:	e00d      	b.n	80023f0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80023d4:	f7ff fa10 	bl	80017f8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d301      	bcc.n	80023e8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e010      	b.n	800240a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ec      	bne.n	80023d4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 031c 	and.w	r3, r3, #28
 800242e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	02db      	lsls	r3, r3, #11
 8002434:	b29b      	uxth	r3, r3
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	019b      	lsls	r3, r3, #6
 8002440:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246c:	f7ff f9c4 	bl	80017f8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002472:	e00d      	b.n	8002490 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002474:	f7ff f9c0 	bl	80017f8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d301      	bcc.n	8002488 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e009      	b.n	800249c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ec      	bne.n	8002474 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0d9      	b.n	800266c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	b29a      	uxth	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e00b      	b.n	80026a4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002692:	2b10      	cmp	r3, #16
 8002694:	d105      	bne.n	80026a2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f88f 	bl	80027bc <ETH_SetMACConfig>

    return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
  }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 031c 	bic.w	r3, r3, #28
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026c4:	f001 fa9c 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 80026c8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_ETH_SetMDIOClockRange+0x98>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d908      	bls.n	80026e4 <HAL_ETH_SetMDIOClockRange+0x38>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d804      	bhi.n	80026e4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e027      	b.n	8002734 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d908      	bls.n	80026fe <HAL_ETH_SetMDIOClockRange+0x52>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d204      	bcs.n	80026fe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f043 030c 	orr.w	r3, r3, #12
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e01a      	b.n	8002734 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d303      	bcc.n	800270e <HAL_ETH_SetMDIOClockRange+0x62>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d911      	bls.n	8002732 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d908      	bls.n	8002728 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d804      	bhi.n	8002728 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e005      	b.n	8002734 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f043 0310 	orr.w	r3, r3, #16
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e000      	b.n	8002734 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002732:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	611a      	str	r2, [r3, #16]
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	01312cff 	.word	0x01312cff
 8002748:	02160ebf 	.word	0x02160ebf
 800274c:	03938700 	.word	0x03938700
 8002750:	05f5e0ff 	.word	0x05f5e0ff
 8002754:	08f0d17f 	.word	0x08f0d17f

08002758 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002794:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f7ff f834 	bl	8001810 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027b2:	6193      	str	r3, [r2, #24]
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4b51      	ldr	r3, [pc, #324]	; (8002918 <ETH_SetMACConfig+0x15c>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7c1b      	ldrb	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <ETH_SetMACConfig+0x28>
 80027de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027e2:	e000      	b.n	80027e6 <ETH_SetMACConfig+0x2a>
 80027e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	7c5b      	ldrb	r3, [r3, #17]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <ETH_SetMACConfig+0x38>
 80027ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027f2:	e000      	b.n	80027f6 <ETH_SetMACConfig+0x3a>
 80027f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7fdb      	ldrb	r3, [r3, #31]
 8002802:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002804:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800280a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	7f92      	ldrb	r2, [r2, #30]
 8002810:	2a00      	cmp	r2, #0
 8002812:	d102      	bne.n	800281a <ETH_SetMACConfig+0x5e>
 8002814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002818:	e000      	b.n	800281c <ETH_SetMACConfig+0x60>
 800281a:	2200      	movs	r2, #0
                        macconf->Speed |
 800281c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	7f1b      	ldrb	r3, [r3, #28]
 8002822:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002824:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800282a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	791b      	ldrb	r3, [r3, #4]
 8002830:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002832:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	f892 2020 	ldrb.w	r2, [r2, #32]
 800283a:	2a00      	cmp	r2, #0
 800283c:	d102      	bne.n	8002844 <ETH_SetMACConfig+0x88>
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	e000      	b.n	8002846 <ETH_SetMACConfig+0x8a>
 8002844:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002846:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	7bdb      	ldrb	r3, [r3, #15]
 800284c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800284e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002854:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800285c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800285e:	4313      	orrs	r3, r2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002876:	2001      	movs	r0, #1
 8002878:	f7fe ffca 	bl	8001810 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	d101      	bne.n	80028aa <ETH_SetMACConfig+0xee>
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	e000      	b.n	80028ac <ETH_SetMACConfig+0xf0>
 80028aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028ba:	2a01      	cmp	r2, #1
 80028bc:	d101      	bne.n	80028c2 <ETH_SetMACConfig+0x106>
 80028be:	2208      	movs	r2, #8
 80028c0:	e000      	b.n	80028c4 <ETH_SetMACConfig+0x108>
 80028c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028cc:	2a01      	cmp	r2, #1
 80028ce:	d101      	bne.n	80028d4 <ETH_SetMACConfig+0x118>
 80028d0:	2204      	movs	r2, #4
 80028d2:	e000      	b.n	80028d6 <ETH_SetMACConfig+0x11a>
 80028d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028de:	2a01      	cmp	r2, #1
 80028e0:	d101      	bne.n	80028e6 <ETH_SetMACConfig+0x12a>
 80028e2:	2202      	movs	r2, #2
 80028e4:	e000      	b.n	80028e8 <ETH_SetMACConfig+0x12c>
 80028e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002900:	2001      	movs	r0, #1
 8002902:	f7fe ff85 	bl	8001810 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	ff20810f 	.word	0xff20810f

0800291c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <ETH_SetDMAConfig+0x110>)
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	7b1b      	ldrb	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <ETH_SetDMAConfig+0x2c>
 8002942:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002946:	e000      	b.n	800294a <ETH_SetDMAConfig+0x2e>
 8002948:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7b5b      	ldrb	r3, [r3, #13]
 800294e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002950:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	7f52      	ldrb	r2, [r2, #29]
 8002956:	2a00      	cmp	r2, #0
 8002958:	d102      	bne.n	8002960 <ETH_SetDMAConfig+0x44>
 800295a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800295e:	e000      	b.n	8002962 <ETH_SetDMAConfig+0x46>
 8002960:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002962:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	7b9b      	ldrb	r3, [r3, #14]
 8002968:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800296a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002970:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7f1b      	ldrb	r3, [r3, #28]
 8002976:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002978:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	7f9b      	ldrb	r3, [r3, #30]
 800297e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002980:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002986:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002990:	4313      	orrs	r3, r2
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f7fe ff2c 	bl	8001810 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c0:	461a      	mov	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	791b      	ldrb	r3, [r3, #4]
 80029ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f7fe fefd 	bl	8001810 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	f8de3f23 	.word	0xf8de3f23

08002a30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0a6      	sub	sp, #152	; 0x98
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002aa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fe86 	bl	80027bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff08 	bl	800291c <ETH_SetDMAConfig>
}
 8002b0c:	bf00      	nop
 8002b0e:	3798      	adds	r7, #152	; 0x98
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3305      	adds	r3, #5
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	3204      	adds	r2, #4
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <ETH_MACAddressConfig+0x68>)
 8002b36:	4413      	add	r3, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3303      	adds	r3, #3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	061a      	lsls	r2, r3, #24
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3302      	adds	r3, #2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <ETH_MACAddressConfig+0x6c>)
 8002b66:	4413      	add	r3, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	6013      	str	r3, [r2, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40028040 	.word	0x40028040
 8002b80:	40028044 	.word	0x40028044

08002b84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e03e      	b.n	8002c10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	3206      	adds	r2, #6
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d80c      	bhi.n	8002bf4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68d9      	ldr	r1, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e004      	b.n	8002bfe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d9bd      	bls.n	8002b92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	611a      	str	r2, [r3, #16]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b085      	sub	sp, #20
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e046      	b.n	8002cd2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002c88:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	3212      	adds	r2, #18
 8002c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d80c      	bhi.n	8002cc2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6919      	ldr	r1, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	e004      	b.n	8002ccc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d9b5      	bls.n	8002c44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	60da      	str	r2, [r3, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b08d      	sub	sp, #52	; 0x34
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3318      	adds	r3, #24
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d52:	d007      	beq.n	8002d64 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	3304      	adds	r3, #4
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	e103      	b.n	8002f70 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d80:	f023 031f 	bic.w	r3, r3, #31
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002dee:	f3bf 8f5f 	dmb	sy
}
 8002df2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e00:	e084      	b.n	8002f0c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e005      	b.n	8002e2e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	3301      	adds	r3, #1
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d902      	bls.n	8002e40 <ETH_Prepare_Tx_Descriptors+0x130>
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	3b04      	subs	r3, #4
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e48:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e62:	d007      	beq.n	8002e74 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	3304      	adds	r3, #4
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d029      	beq.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e86:	e019      	b.n	8002ebc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e88:	f3bf 8f5f 	dmb	sy
}
 8002e8c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d902      	bls.n	8002eac <ETH_Prepare_Tx_Descriptors+0x19c>
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	3b04      	subs	r3, #4
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	3301      	adds	r3, #1
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3e1      	bcc.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e053      	b.n	8002f70 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	3301      	adds	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ee6:	f023 031f 	bic.w	r3, r3, #31
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	6852      	ldr	r2, [r2, #4]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002efa:	f3bf 8f5f 	dmb	sy
}
 8002efe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f af76 	bne.w	8002e02 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e005      	b.n	8002f36 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f56:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f58:	b672      	cpsid	i
}
 8002f5a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f6a:	b662      	cpsie	i
}
 8002f6c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3734      	adds	r7, #52	; 0x34
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e177      	b.n	8003288 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8166 	bne.w	8003282 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d017      	beq.n	800306c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d123      	bne.n	80030c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80c0 	beq.w	8003282 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_GPIO_Init+0x324>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_GPIO_Init+0x324>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_GPIO_Init+0x324>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311e:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <HAL_GPIO_Init+0x328>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_GPIO_Init+0x32c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d037      	beq.n	80031ba <HAL_GPIO_Init+0x23e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_GPIO_Init+0x330>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d031      	beq.n	80031b6 <HAL_GPIO_Init+0x23a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02b      	beq.n	80031b2 <HAL_GPIO_Init+0x236>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <HAL_GPIO_Init+0x338>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d025      	beq.n	80031ae <HAL_GPIO_Init+0x232>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a54      	ldr	r2, [pc, #336]	; (80032b8 <HAL_GPIO_Init+0x33c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01f      	beq.n	80031aa <HAL_GPIO_Init+0x22e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a53      	ldr	r2, [pc, #332]	; (80032bc <HAL_GPIO_Init+0x340>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_GPIO_Init+0x22a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_GPIO_Init+0x344>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x226>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a51      	ldr	r2, [pc, #324]	; (80032c4 <HAL_GPIO_Init+0x348>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x222>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <HAL_GPIO_Init+0x34c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x21e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4f      	ldr	r2, [pc, #316]	; (80032cc <HAL_GPIO_Init+0x350>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x21a>
 8003192:	2309      	movs	r3, #9
 8003194:	e012      	b.n	80031bc <HAL_GPIO_Init+0x240>
 8003196:	230a      	movs	r3, #10
 8003198:	e010      	b.n	80031bc <HAL_GPIO_Init+0x240>
 800319a:	2308      	movs	r3, #8
 800319c:	e00e      	b.n	80031bc <HAL_GPIO_Init+0x240>
 800319e:	2307      	movs	r3, #7
 80031a0:	e00c      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031a2:	2306      	movs	r3, #6
 80031a4:	e00a      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031a6:	2305      	movs	r3, #5
 80031a8:	e008      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031aa:	2304      	movs	r3, #4
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031ae:	2303      	movs	r3, #3
 80031b0:	e004      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e002      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_GPIO_Init+0x240>
 80031ba:	2300      	movs	r3, #0
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	f002 0203 	and.w	r2, r2, #3
 80031c2:	0092      	lsls	r2, r2, #2
 80031c4:	4093      	lsls	r3, r2
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031cc:	4935      	ldr	r1, [pc, #212]	; (80032a4 <HAL_GPIO_Init+0x328>)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_GPIO_Init+0x354>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800322e:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003252:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <HAL_GPIO_Init+0x354>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <HAL_GPIO_Init+0x354>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3301      	adds	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	f67f ae84 	bls.w	8002f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40013800 	.word	0x40013800
 80032a8:	40020000 	.word	0x40020000
 80032ac:	40020400 	.word	0x40020400
 80032b0:	40020800 	.word	0x40020800
 80032b4:	40020c00 	.word	0x40020c00
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40021400 	.word	0x40021400
 80032c0:	40021800 	.word	0x40021800
 80032c4:	40021c00 	.word	0x40021c00
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40022400 	.word	0x40022400
 80032d0:	40013c00 	.word	0x40013c00

080032d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e001      	b.n	80032f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003320:	e003      	b.n	800332a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	041a      	lsls	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e267      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d075      	beq.n	8003442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003356:	4b88      	ldr	r3, [pc, #544]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d00c      	beq.n	800337c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b85      	ldr	r3, [pc, #532]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336a:	2b08      	cmp	r3, #8
 800336c:	d112      	bne.n	8003394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4b82      	ldr	r3, [pc, #520]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337a:	d10b      	bne.n	8003394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	4b7e      	ldr	r3, [pc, #504]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05b      	beq.n	8003440 <HAL_RCC_OscConfig+0x108>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d157      	bne.n	8003440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e242      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d106      	bne.n	80033ac <HAL_RCC_OscConfig+0x74>
 800339e:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a75      	ldr	r2, [pc, #468]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e01d      	b.n	80033e8 <HAL_RCC_OscConfig+0xb0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x98>
 80033b6:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6c      	ldr	r2, [pc, #432]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e00b      	b.n	80033e8 <HAL_RCC_OscConfig+0xb0>
 80033d0:	4b69      	ldr	r3, [pc, #420]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80033e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fa02 	bl	80017f8 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fe f9fe 	bl	80017f8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e207      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0xc0>
 8003416:	e014      	b.n	8003442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe f9ee 	bl	80017f8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003420:	f7fe f9ea 	bl	80017f8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1f3      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	4b51      	ldr	r3, [pc, #324]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0xe8>
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d063      	beq.n	8003516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344e:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003462:	2b08      	cmp	r3, #8
 8003464:	d11c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b44      	ldr	r3, [pc, #272]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d116      	bne.n	80034a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_RCC_OscConfig+0x152>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e1c7      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4937      	ldr	r1, [pc, #220]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	e03a      	b.n	8003516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a8:	4b34      	ldr	r3, [pc, #208]	; (800357c <HAL_RCC_OscConfig+0x244>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe f9a3 	bl	80017f8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fe f99f 	bl	80017f8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e1a8      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4925      	ldr	r1, [pc, #148]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_OscConfig+0x244>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe f982 	bl	80017f8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f8:	f7fe f97e 	bl	80017f8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e187      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d036      	beq.n	8003590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_RCC_OscConfig+0x248>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe f962 	bl	80017f8 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003538:	f7fe f95e 	bl	80017f8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e167      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_OscConfig+0x240>)
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x200>
 8003556:	e01b      	b.n	8003590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_OscConfig+0x248>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fe f94b 	bl	80017f8 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	e00e      	b.n	8003584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe f947 	bl	80017f8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d907      	bls.n	8003584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e150      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
 8003578:	40023800 	.word	0x40023800
 800357c:	42470000 	.word	0x42470000
 8003580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ea      	bne.n	8003566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8097 	beq.w	80036cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b81      	ldr	r3, [pc, #516]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a7c      	ldr	r2, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b7a      	ldr	r3, [pc, #488]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b77      	ldr	r3, [pc, #476]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b74      	ldr	r3, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a73      	ldr	r2, [pc, #460]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe f907 	bl	80017f8 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fe f903 	bl	80017f8 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e10c      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_OscConfig+0x474>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x2ea>
 8003614:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x324>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b05      	cmp	r3, #5
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x30c>
 800362a:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a5b      	ldr	r2, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0x324>
 8003644:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a54      	ldr	r2, [pc, #336]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003656:	f023 0304 	bic.w	r3, r3, #4
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d015      	beq.n	8003690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe f8c8 	bl	80017f8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fe f8c4 	bl	80017f8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0cb      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ee      	beq.n	800366c <HAL_RCC_OscConfig+0x334>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7fe f8b2 	bl	80017f8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe f8ae 	bl	80017f8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0b5      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ee      	bne.n	8003698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	4a38      	ldr	r2, [pc, #224]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a1 	beq.w	8003818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d05c      	beq.n	800379c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d141      	bne.n	800376e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_RCC_OscConfig+0x478>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe f882 	bl	80017f8 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe f87e 	bl	80017f8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e087      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	491b      	ldr	r1, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x478>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe f857 	bl	80017f8 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe f853 	bl	80017f8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e05c      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x416>
 800376c:	e054      	b.n	8003818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x478>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe f840 	bl	80017f8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe f83c 	bl	80017f8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e045      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x470>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x444>
 800379a:	e03d      	b.n	8003818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e038      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x4ec>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d028      	beq.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d121      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d11a      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d111      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	3b01      	subs	r3, #1
 80037fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800

08003828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0cc      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800383c:	4b68      	ldr	r3, [pc, #416]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d90c      	bls.n	8003864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0b8      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	494d      	ldr	r1, [pc, #308]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d044      	beq.n	8003948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c6:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d119      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e07f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e06f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e067      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4934      	ldr	r1, [pc, #208]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003918:	f7fd ff6e 	bl	80017f8 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fd ff6a 	bl	80017f8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e04f      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d20c      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b22      	ldr	r3, [pc, #136]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e032      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4916      	ldr	r1, [pc, #88]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ae:	f000 f821 	bl	80039f4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490a      	ldr	r1, [pc, #40]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd f878 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00
 80039e4:	40023800 	.word	0x40023800
 80039e8:	0801e048 	.word	0x0801e048
 80039ec:	20000000 	.word	0x20000000
 80039f0:	20000004 	.word	0x20000004

080039f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f8:	b094      	sub	sp, #80	; 0x50
 80039fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	2300      	movs	r3, #0
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	2300      	movs	r3, #0
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a0c:	4b79      	ldr	r3, [pc, #484]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d00d      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x40>
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	f200 80e1 	bhi.w	8003be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x34>
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a26:	e0db      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a2c:	e0db      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2e:	4b73      	ldr	r3, [pc, #460]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a32:	e0d8      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d063      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	099b      	lsrs	r3, r3, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	2300      	movs	r3, #0
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
 8003a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	0159      	lsls	r1, r3, #5
 8003a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a78:	0150      	lsls	r0, r2, #5
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4621      	mov	r1, r4
 8003a80:	1a51      	subs	r1, r2, r1
 8003a82:	6139      	str	r1, [r7, #16]
 8003a84:	4629      	mov	r1, r5
 8003a86:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a98:	4659      	mov	r1, fp
 8003a9a:	018b      	lsls	r3, r1, #6
 8003a9c:	4651      	mov	r1, sl
 8003a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	018a      	lsls	r2, r1, #6
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aac:	4659      	mov	r1, fp
 8003aae:	eb63 0901 	sbc.w	r9, r3, r1
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac6:	4690      	mov	r8, r2
 8003ac8:	4699      	mov	r9, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	eb18 0303 	adds.w	r3, r8, r3
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	eb49 0303 	adc.w	r3, r9, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	024b      	lsls	r3, r1, #9
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af0:	4621      	mov	r1, r4
 8003af2:	024a      	lsls	r2, r1, #9
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afa:	2200      	movs	r2, #0
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b04:	f7fc fbdc 	bl	80002c0 <__aeabi_uldivmod>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b10:	e058      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0159      	lsls	r1, r3, #5
 8003b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3e:	0150      	lsls	r0, r2, #5
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4641      	mov	r1, r8
 8003b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b64:	ebb2 040a 	subs.w	r4, r2, sl
 8003b68:	eb63 050b 	sbc.w	r5, r3, fp
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	464b      	mov	r3, r9
 8003b88:	eb45 0303 	adc.w	r3, r5, r3
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	028b      	lsls	r3, r1, #10
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	028a      	lsls	r2, r1, #10
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bae:	2200      	movs	r2, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	61fa      	str	r2, [r7, #28]
 8003bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb8:	f7fc fb82 	bl	80002c0 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3750      	adds	r7, #80	; 0x50
 8003bec:	46bd      	mov	sp, r7
 8003bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	00f42400 	.word	0x00f42400
 8003bfc:	007a1200 	.word	0x007a1200

08003c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000000 	.word	0x20000000

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c1c:	f7ff fff0 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0a9b      	lsrs	r3, r3, #10
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	0801e058 	.word	0x0801e058

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c44:	f7ff ffdc 	bl	8003c00 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0b5b      	lsrs	r3, r3, #13
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	0801e058 	.word	0x0801e058

08003c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	220f      	movs	r2, #15
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	08db      	lsrs	r3, r3, #3
 8003ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_RCC_GetClockConfig+0x60>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 020f 	and.w	r2, r3, #15
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	601a      	str	r2, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40023c00 	.word	0x40023c00

08003ccc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e01c      	b.n	8003d18 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	795b      	ldrb	r3, [r3, #5]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc fe7e 	bl	80009f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0204 	orr.w	r2, r2, #4
 8003d08:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	791b      	ldrb	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_RNG_GenerateRandomNumber+0x1a>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e044      	b.n	8003dc4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	795b      	ldrb	r3, [r3, #5]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d133      	bne.n	8003db2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fd fd52 	bl	80017f8 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d56:	e018      	b.n	8003d8a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003d58:	f7fd fd4e 	bl	80017f8 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d911      	bls.n	8003d8a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d00a      	beq.n	8003d8a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e01c      	b.n	8003dc4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d1df      	bne.n	8003d58 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	715a      	strb	r2, [r3, #5]
 8003db0:	e004      	b.n	8003dbc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2204      	movs	r2, #4
 8003db6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	711a      	strb	r2, [r3, #4]

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f839 	bl	8003e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f9d8 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04e      	b.n	8003f36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d01d      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_TIM_Base_Start_IT+0xdc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d111      	bne.n	8003f24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d010      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f22:	e007      	b.n	8003f34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40010400 	.word	0x40010400
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40001800 	.word	0x40001800

08003f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0202 	mvn.w	r2, #2
 8003f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8ee 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8e0 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8f1 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0204 	mvn.w	r2, #4
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8c4 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8b6 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8c7 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b08      	cmp	r3, #8
 800401c:	d122      	bne.n	8004064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d11b      	bne.n	8004064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0208 	mvn.w	r2, #8
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2204      	movs	r2, #4
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f89a 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f88c 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f89d 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b10      	cmp	r3, #16
 8004070:	d122      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b10      	cmp	r3, #16
 800407e:	d11b      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0210 	mvn.w	r2, #16
 8004088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2208      	movs	r2, #8
 800408e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f870 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f862 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f873 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0201 	mvn.w	r2, #1
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc fc42 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f902 	bl	8004314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f838 	bl	80041ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b20      	cmp	r3, #32
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b20      	cmp	r3, #32
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0220 	mvn.w	r2, #32
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8cc 	bl	8004300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00f      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00b      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x40>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a3a      	ldr	r2, [pc, #232]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d027      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <TIM_Base_SetConfig+0x118>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d023      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d017      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <TIM_Base_SetConfig+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00f      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <TIM_Base_SetConfig+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00b      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <TIM_Base_SetConfig+0x138>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <TIM_Base_SetConfig+0x13c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0xf8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	615a      	str	r2, [r3, #20]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800
 80042f4:	40001800 	.word	0x40001800
 80042f8:	40001c00 	.word	0x40001c00
 80042fc:	40002000 	.word	0x40002000

08004300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e03f      	b.n	80043ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fc fb70 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f829 	bl	80043c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b0c0      	sub	sp, #256	; 0x100
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	ea40 0301 	orr.w	r3, r0, r1
 80043ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800441c:	f021 010c 	bic.w	r1, r1, #12
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800442a:	430b      	orrs	r3, r1
 800442c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	ea40 0301 	orr.w	r3, r0, r1
 800444a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b8f      	ldr	r3, [pc, #572]	; (8004690 <UART_SetConfig+0x2cc>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d005      	beq.n	8004464 <UART_SetConfig+0xa0>
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b8d      	ldr	r3, [pc, #564]	; (8004694 <UART_SetConfig+0x2d0>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d104      	bne.n	800446e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7ff fbec 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8004468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800446c:	e003      	b.n	8004476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446e:	f7ff fbd3 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 8004472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	f040 810c 	bne.w	800469c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800448e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004496:	4622      	mov	r2, r4
 8004498:	462b      	mov	r3, r5
 800449a:	1891      	adds	r1, r2, r2
 800449c:	65b9      	str	r1, [r7, #88]	; 0x58
 800449e:	415b      	adcs	r3, r3
 80044a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044a6:	4621      	mov	r1, r4
 80044a8:	eb12 0801 	adds.w	r8, r2, r1
 80044ac:	4629      	mov	r1, r5
 80044ae:	eb43 0901 	adc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044d4:	462b      	mov	r3, r5
 80044d6:	eb49 0303 	adc.w	r3, r9, r3
 80044da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044f2:	460b      	mov	r3, r1
 80044f4:	18db      	adds	r3, r3, r3
 80044f6:	653b      	str	r3, [r7, #80]	; 0x50
 80044f8:	4613      	mov	r3, r2
 80044fa:	eb42 0303 	adc.w	r3, r2, r3
 80044fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004508:	f7fb feda 	bl	80002c0 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <UART_SetConfig+0x2d4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	64b9      	str	r1, [r7, #72]	; 0x48
 8004534:	415b      	adcs	r3, r3
 8004536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800453c:	4641      	mov	r1, r8
 800453e:	eb12 0a01 	adds.w	sl, r2, r1
 8004542:	4649      	mov	r1, r9
 8004544:	eb43 0b01 	adc.w	fp, r3, r1
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455c:	4692      	mov	sl, r2
 800455e:	469b      	mov	fp, r3
 8004560:	4643      	mov	r3, r8
 8004562:	eb1a 0303 	adds.w	r3, sl, r3
 8004566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800456a:	464b      	mov	r3, r9
 800456c:	eb4b 0303 	adc.w	r3, fp, r3
 8004570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004588:	460b      	mov	r3, r1
 800458a:	18db      	adds	r3, r3, r3
 800458c:	643b      	str	r3, [r7, #64]	; 0x40
 800458e:	4613      	mov	r3, r2
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	647b      	str	r3, [r7, #68]	; 0x44
 8004596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800459a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800459e:	f7fb fe8f 	bl	80002c0 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <UART_SetConfig+0x2d4>)
 80045aa:	fba3 2301 	umull	r2, r3, r3, r1
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2264      	movs	r2, #100	; 0x64
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	1acb      	subs	r3, r1, r3
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <UART_SetConfig+0x2d4>)
 80045c0:	fba3 2302 	umull	r2, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045cc:	441c      	add	r4, r3
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045e8:	415b      	adcs	r3, r3
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6339      	str	r1, [r7, #48]	; 0x30
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800463c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004644:	460b      	mov	r3, r1
 8004646:	18db      	adds	r3, r3, r3
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
 800464a:	4613      	mov	r3, r2
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800465a:	f7fb fe31 	bl	80002c0 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <UART_SetConfig+0x2d4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <UART_SetConfig+0x2d4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4422      	add	r2, r4
 800468a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800468c:	e105      	b.n	800489a <UART_SetConfig+0x4d6>
 800468e:	bf00      	nop
 8004690:	40011000 	.word	0x40011000
 8004694:	40011400 	.word	0x40011400
 8004698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ae:	4642      	mov	r2, r8
 80046b0:	464b      	mov	r3, r9
 80046b2:	1891      	adds	r1, r2, r2
 80046b4:	6239      	str	r1, [r7, #32]
 80046b6:	415b      	adcs	r3, r3
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046be:	4641      	mov	r1, r8
 80046c0:	1854      	adds	r4, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0501 	adc.w	r5, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	00eb      	lsls	r3, r5, #3
 80046d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d6:	00e2      	lsls	r2, r4, #3
 80046d8:	4614      	mov	r4, r2
 80046da:	461d      	mov	r5, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	18e3      	adds	r3, r4, r3
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e4:	464b      	mov	r3, r9
 80046e6:	eb45 0303 	adc.w	r3, r5, r3
 80046ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800470a:	4629      	mov	r1, r5
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004714:	4621      	mov	r1, r4
 8004716:	008a      	lsls	r2, r1, #2
 8004718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800471c:	f7fb fdd0 	bl	80002c0 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b60      	ldr	r3, [pc, #384]	; (80048a8 <UART_SetConfig+0x4e4>)
 8004726:	fba3 2302 	umull	r2, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	011c      	lsls	r4, r3, #4
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800473c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	61b9      	str	r1, [r7, #24]
 8004748:	415b      	adcs	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	4641      	mov	r1, r8
 8004752:	1851      	adds	r1, r2, r1
 8004754:	6139      	str	r1, [r7, #16]
 8004756:	4649      	mov	r1, r9
 8004758:	414b      	adcs	r3, r1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004768:	4659      	mov	r1, fp
 800476a:	00cb      	lsls	r3, r1, #3
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004772:	4651      	mov	r1, sl
 8004774:	00ca      	lsls	r2, r1, #3
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	4603      	mov	r3, r0
 800477c:	4642      	mov	r2, r8
 800477e:	189b      	adds	r3, r3, r2
 8004780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004784:	464b      	mov	r3, r9
 8004786:	460a      	mov	r2, r1
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	67bb      	str	r3, [r7, #120]	; 0x78
 800479a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047a8:	4649      	mov	r1, r9
 80047aa:	008b      	lsls	r3, r1, #2
 80047ac:	4641      	mov	r1, r8
 80047ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b2:	4641      	mov	r1, r8
 80047b4:	008a      	lsls	r2, r1, #2
 80047b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ba:	f7fb fd81 	bl	80002c0 <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <UART_SetConfig+0x4e4>)
 80047c4:	fba3 1302 	umull	r1, r3, r3, r2
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	2164      	movs	r1, #100	; 0x64
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	3332      	adds	r3, #50	; 0x32
 80047d6:	4a34      	ldr	r2, [pc, #208]	; (80048a8 <UART_SetConfig+0x4e4>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e2:	441c      	add	r4, r3
 80047e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e8:	2200      	movs	r2, #0
 80047ea:	673b      	str	r3, [r7, #112]	; 0x70
 80047ec:	677a      	str	r2, [r7, #116]	; 0x74
 80047ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047f2:	4642      	mov	r2, r8
 80047f4:	464b      	mov	r3, r9
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	415b      	adcs	r3, r3
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004802:	4641      	mov	r1, r8
 8004804:	1851      	adds	r1, r2, r1
 8004806:	6039      	str	r1, [r7, #0]
 8004808:	4649      	mov	r1, r9
 800480a:	414b      	adcs	r3, r1
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800481a:	4659      	mov	r1, fp
 800481c:	00cb      	lsls	r3, r1, #3
 800481e:	4651      	mov	r1, sl
 8004820:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004824:	4651      	mov	r1, sl
 8004826:	00ca      	lsls	r2, r1, #3
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	4603      	mov	r3, r0
 800482e:	4642      	mov	r2, r8
 8004830:	189b      	adds	r3, r3, r2
 8004832:	66bb      	str	r3, [r7, #104]	; 0x68
 8004834:	464b      	mov	r3, r9
 8004836:	460a      	mov	r2, r1
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	663b      	str	r3, [r7, #96]	; 0x60
 8004848:	667a      	str	r2, [r7, #100]	; 0x64
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004856:	4649      	mov	r1, r9
 8004858:	008b      	lsls	r3, r1, #2
 800485a:	4641      	mov	r1, r8
 800485c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004860:	4641      	mov	r1, r8
 8004862:	008a      	lsls	r2, r1, #2
 8004864:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004868:	f7fb fd2a 	bl	80002c0 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <UART_SetConfig+0x4e4>)
 8004872:	fba3 1302 	umull	r1, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2164      	movs	r1, #100	; 0x64
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	; 0x32
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <UART_SetConfig+0x4e4>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 020f 	and.w	r2, r3, #15
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4422      	add	r2, r4
 8004898:	609a      	str	r2, [r3, #8]
}
 800489a:	bf00      	nop
 800489c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	51eb851f 	.word	0x51eb851f

080048ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048ac:	b5b0      	push	{r4, r5, r7, lr}
 80048ae:	b08c      	sub	sp, #48	; 0x30
 80048b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80048b2:	2100      	movs	r1, #0
 80048b4:	2000      	movs	r0, #0
 80048b6:	f006 f95d 	bl	800ab74 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <MX_LWIP_Init+0x90>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <MX_LWIP_Init+0x94>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80048c6:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <MX_LWIP_Init+0x98>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <MX_LWIP_Init+0x9c>)
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <MX_LWIP_Init+0xa0>)
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	2300      	movs	r3, #0
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <MX_LWIP_Init+0x98>)
 80048da:	4a19      	ldr	r2, [pc, #100]	; (8004940 <MX_LWIP_Init+0x94>)
 80048dc:	4917      	ldr	r1, [pc, #92]	; (800493c <MX_LWIP_Init+0x90>)
 80048de:	481c      	ldr	r0, [pc, #112]	; (8004950 <MX_LWIP_Init+0xa4>)
 80048e0:	f007 fd62 	bl	800c3a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80048e4:	481a      	ldr	r0, [pc, #104]	; (8004950 <MX_LWIP_Init+0xa4>)
 80048e6:	f007 ff19 	bl	800c71c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <MX_LWIP_Init+0xa4>)
 80048ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80048fc:	4814      	ldr	r0, [pc, #80]	; (8004950 <MX_LWIP_Init+0xa4>)
 80048fe:	f007 ff1d 	bl	800c73c <netif_set_up>
 8004902:	e002      	b.n	800490a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004904:	4812      	ldr	r0, [pc, #72]	; (8004950 <MX_LWIP_Init+0xa4>)
 8004906:	f007 ff85 	bl	800c814 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800490a:	4912      	ldr	r1, [pc, #72]	; (8004954 <MX_LWIP_Init+0xa8>)
 800490c:	4810      	ldr	r0, [pc, #64]	; (8004950 <MX_LWIP_Init+0xa4>)
 800490e:	f008 f81b 	bl	800c948 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004912:	4b11      	ldr	r3, [pc, #68]	; (8004958 <MX_LWIP_Init+0xac>)
 8004914:	1d3c      	adds	r4, r7, #4
 8004916:	461d      	mov	r5, r3
 8004918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800491a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800491c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	490a      	ldr	r1, [pc, #40]	; (8004950 <MX_LWIP_Init+0xa4>)
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fd23 	bl	8005374 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800492e:	4808      	ldr	r0, [pc, #32]	; (8004950 <MX_LWIP_Init+0xa4>)
 8004930:	f010 f9ee 	bl	8014d10 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004934:	bf00      	nop
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bdb0      	pop	{r4, r5, r7, pc}
 800493c:	2000054c 	.word	0x2000054c
 8004940:	20000550 	.word	0x20000550
 8004944:	20000554 	.word	0x20000554
 8004948:	0800aa85 	.word	0x0800aa85
 800494c:	08004dfd 	.word	0x08004dfd
 8004950:	20000514 	.word	0x20000514
 8004954:	0800495d 	.word	0x0800495d
 8004958:	0801a51c 	.word	0x0801a51c

0800495c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_ETH_RxCpltCallback+0x1c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fe75 	bl	800566c <osSemaphoreRelease>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20005024 	.word	0x20005024

08004990 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <HAL_ETH_TxCpltCallback+0x1c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fe65 	bl	800566c <osSemaphoreRelease>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20005028 	.word	0x20005028

080049b0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fd fecd 	bl	8002758 <HAL_ETH_GetDMAError>
 80049be:	4603      	mov	r3, r0
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d104      	bne.n	80049d2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_ETH_ErrorCallback+0x2c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fe4d 	bl	800566c <osSemaphoreRelease>
  }
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20005024 	.word	0x20005024

080049e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80049e0:	b5b0      	push	{r4, r5, r7, lr}
 80049e2:	b0a8      	sub	sp, #160	; 0xa0
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80049fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049fe:	2264      	movs	r2, #100	; 0x64
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f014 fab9 	bl	8018f7a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a08:	4b85      	ldr	r3, [pc, #532]	; (8004c20 <low_level_init+0x240>)
 8004a0a:	4a86      	ldr	r2, [pc, #536]	; (8004c24 <low_level_init+0x244>)
 8004a0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004a1a:	23e1      	movs	r3, #225	; 0xe1
 8004a1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 8004a20:	23fe      	movs	r3, #254	; 0xfe
 8004a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 8004a26:	23ec      	movs	r3, #236	; 0xec
 8004a28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x80;
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004a32:	4a7b      	ldr	r2, [pc, #492]	; (8004c20 <low_level_init+0x240>)
 8004a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a38:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004a3a:	4b79      	ldr	r3, [pc, #484]	; (8004c20 <low_level_init+0x240>)
 8004a3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a40:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004a42:	4b77      	ldr	r3, [pc, #476]	; (8004c20 <low_level_init+0x240>)
 8004a44:	4a78      	ldr	r2, [pc, #480]	; (8004c28 <low_level_init+0x248>)
 8004a46:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004a48:	4b75      	ldr	r3, [pc, #468]	; (8004c20 <low_level_init+0x240>)
 8004a4a:	4a78      	ldr	r2, [pc, #480]	; (8004c2c <low_level_init+0x24c>)
 8004a4c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004a4e:	4b74      	ldr	r3, [pc, #464]	; (8004c20 <low_level_init+0x240>)
 8004a50:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a54:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a56:	4872      	ldr	r0, [pc, #456]	; (8004c20 <low_level_init+0x240>)
 8004a58:	f7fc ffe0 	bl	8001a1c <HAL_ETH_Init>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004a62:	2238      	movs	r2, #56	; 0x38
 8004a64:	2100      	movs	r1, #0
 8004a66:	4872      	ldr	r0, [pc, #456]	; (8004c30 <low_level_init+0x250>)
 8004a68:	f014 fa87 	bl	8018f7a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004a6c:	4b70      	ldr	r3, [pc, #448]	; (8004c30 <low_level_init+0x250>)
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004a72:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <low_level_init+0x250>)
 8004a74:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004a78:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004a7a:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <low_level_init+0x250>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004a80:	486c      	ldr	r0, [pc, #432]	; (8004c34 <low_level_init+0x254>)
 8004a82:	f007 fb4b 	bl	800c11c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2206      	movs	r2, #6
 8004a8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004a8e:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <low_level_init+0x240>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	781a      	ldrb	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004a9a:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <low_level_init+0x240>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	785a      	ldrb	r2, [r3, #1]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004aa6:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <low_level_init+0x240>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	789a      	ldrb	r2, [r3, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	; (8004c20 <low_level_init+0x240>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	78da      	ldrb	r2, [r3, #3]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004abe:	4b58      	ldr	r3, [pc, #352]	; (8004c20 <low_level_init+0x240>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	791a      	ldrb	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004aca:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <low_level_init+0x240>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	795a      	ldrb	r2, [r3, #5]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ae4:	f043 030a 	orr.w	r3, r3, #10
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004af0:	2203      	movs	r2, #3
 8004af2:	2100      	movs	r1, #0
 8004af4:	2001      	movs	r0, #1
 8004af6:	f001 f89d 	bl	8005c34 <xQueueGenericCreate>
 8004afa:	4603      	mov	r3, r0
 8004afc:	4a4e      	ldr	r2, [pc, #312]	; (8004c38 <low_level_init+0x258>)
 8004afe:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004b00:	2203      	movs	r2, #3
 8004b02:	2100      	movs	r1, #0
 8004b04:	2001      	movs	r0, #1
 8004b06:	f001 f895 	bl	8005c34 <xQueueGenericCreate>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a4b      	ldr	r2, [pc, #300]	; (8004c3c <low_level_init+0x25c>)
 8004b0e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <low_level_init+0x260>)
 8004b12:	f107 0408 	add.w	r4, r7, #8
 8004b16:	461d      	mov	r5, r3
 8004b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fc22 	bl	8005374 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004b30:	4944      	ldr	r1, [pc, #272]	; (8004c44 <low_level_init+0x264>)
 8004b32:	4845      	ldr	r0, [pc, #276]	; (8004c48 <low_level_init+0x268>)
 8004b34:	f7fc fcc9 	bl	80014ca <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004b38:	4843      	ldr	r0, [pc, #268]	; (8004c48 <low_level_init+0x268>)
 8004b3a:	f7fc fcf8 	bl	800152e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004b3e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d165      	bne.n	8004c12 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004b46:	4840      	ldr	r0, [pc, #256]	; (8004c48 <low_level_init+0x268>)
 8004b48:	f7fc fd99 	bl	800167e <LAN8742_GetLinkState>
 8004b4c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	dc06      	bgt.n	8004b66 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f007 fec5 	bl	800c8e8 <netif_set_link_down>
      netif_set_down(netif);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f007 fe58 	bl	800c814 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b64:	e057      	b.n	8004c16 <low_level_init+0x236>
      switch (PHYLinkState)
 8004b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b6a:	3b02      	subs	r3, #2
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d82b      	bhi.n	8004bc8 <low_level_init+0x1e8>
 8004b70:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <low_level_init+0x198>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b9b 	.word	0x08004b9b
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bbb 	.word	0x08004bbb
        duplex = ETH_FULLDUPLEX_MODE;
 8004b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004b98:	e01f      	b.n	8004bda <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004ba8:	e017      	b.n	8004bda <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bb8:	e00f      	b.n	8004bda <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bc6:	e008      	b.n	8004bda <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004bd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bd8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bde:	4619      	mov	r1, r3
 8004be0:	480f      	ldr	r0, [pc, #60]	; (8004c20 <low_level_init+0x240>)
 8004be2:	f7fd fc5f 	bl	80024a4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4809      	ldr	r0, [pc, #36]	; (8004c20 <low_level_init+0x240>)
 8004bfa:	f7fd fd3d 	bl	8002678 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004bfe:	4808      	ldr	r0, [pc, #32]	; (8004c20 <low_level_init+0x240>)
 8004c00:	f7fc ffe9 	bl	8001bd6 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f007 fd99 	bl	800c73c <netif_set_up>
    netif_set_link_up(netif);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f007 fe34 	bl	800c878 <netif_set_link_up>
}
 8004c10:	e001      	b.n	8004c16 <low_level_init+0x236>
    Error_Handler();
 8004c12:	f7fb febb 	bl	800098c <Error_Handler>
}
 8004c16:	bf00      	nop
 8004c18:	37a0      	adds	r7, #160	; 0xa0
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2000502c 	.word	0x2000502c
 8004c24:	40028000 	.word	0x40028000
 8004c28:	20004f84 	.word	0x20004f84
 8004c2c:	20004ee4 	.word	0x20004ee4
 8004c30:	200050dc 	.word	0x200050dc
 8004c34:	0801e060 	.word	0x0801e060
 8004c38:	20005024 	.word	0x20005024
 8004c3c:	20005028 	.word	0x20005028
 8004c40:	0801a540 	.word	0x0801a540
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	20005114 	.word	0x20005114

08004c4c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b092      	sub	sp, #72	; 0x48
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	2230      	movs	r2, #48	; 0x30
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f014 f984 	bl	8018f7a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	2230      	movs	r2, #48	; 0x30
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f014 f97d 	bl	8018f7a <memset>

  for(q = p; q != NULL; q = q->next)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40
 8004c84:	e045      	b.n	8004d12 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d902      	bls.n	8004c92 <low_level_output+0x46>
      return ERR_IF;
 8004c8c:	f06f 030b 	mvn.w	r3, #11
 8004c90:	e065      	b.n	8004d5e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c98:	4613      	mov	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	3348      	adds	r3, #72	; 0x48
 8004ca2:	443b      	add	r3, r7
 8004ca4:	3b3c      	subs	r3, #60	; 0x3c
 8004ca6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004caa:	895b      	ldrh	r3, [r3, #10]
 8004cac:	4619      	mov	r1, r3
 8004cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	3348      	adds	r3, #72	; 0x48
 8004cba:	443b      	add	r3, r7
 8004cbc:	3b38      	subs	r3, #56	; 0x38
 8004cbe:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d011      	beq.n	8004cea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc8:	1e5a      	subs	r2, r3, #1
 8004cca:	f107 000c 	add.w	r0, r7, #12
 8004cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	440b      	add	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	18c1      	adds	r1, r0, r3
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	3348      	adds	r3, #72	; 0x48
 8004ce4:	443b      	add	r3, r7
 8004ce6:	3b34      	subs	r3, #52	; 0x34
 8004ce8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3348      	adds	r3, #72	; 0x48
 8004cfe:	443b      	add	r3, r7
 8004d00:	3b34      	subs	r3, #52	; 0x34
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d08:	3301      	adds	r3, #1
 8004d0a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1b6      	bne.n	8004c86 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	891b      	ldrh	r3, [r3, #8]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <low_level_output+0x11c>)
 8004d20:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004d22:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <low_level_output+0x11c>)
 8004d24:	f107 030c 	add.w	r3, r7, #12
 8004d28:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004d2a:	4a0f      	ldr	r2, [pc, #60]	; (8004d68 <low_level_output+0x11c>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f008 fa5d 	bl	800d1f0 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004d36:	490c      	ldr	r1, [pc, #48]	; (8004d68 <low_level_output+0x11c>)
 8004d38:	480c      	ldr	r0, [pc, #48]	; (8004d6c <low_level_output+0x120>)
 8004d3a:	f7fd f859 	bl	8001df0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004d3e:	bf00      	nop
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <low_level_output+0x124>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f04f 31ff 	mov.w	r1, #4294967295
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fc41 	bl	80055d0 <osSemaphoreWait>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f5      	bne.n	8004d40 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004d54:	4805      	ldr	r0, [pc, #20]	; (8004d6c <low_level_output+0x120>)
 8004d56:	f7fd f9df 	bl	8002118 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004d5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3748      	adds	r7, #72	; 0x48
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200050dc 	.word	0x200050dc
 8004d6c:	2000502c 	.word	0x2000502c
 8004d70:	20005028 	.word	0x20005028

08004d74 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <low_level_input+0x2c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004d88:	f107 030c 	add.w	r3, r7, #12
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4805      	ldr	r0, [pc, #20]	; (8004da4 <low_level_input+0x30>)
 8004d90:	f7fd f88a 	bl	8001ea8 <HAL_ETH_ReadData>
  }

  return p;
 8004d94:	68fb      	ldr	r3, [r7, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20004ee0 	.word	0x20004ee0
 8004da4:	2000502c 	.word	0x2000502c

08004da8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <ethernetif_input+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fc05 	bl	80055d0 <osSemaphoreWait>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f5      	bne.n	8004db8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004dcc:	68b8      	ldr	r0, [r7, #8]
 8004dce:	f7ff ffd1 	bl	8004d74 <low_level_input>
 8004dd2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	4798      	blx	r3
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f008 f95a 	bl	800d0a4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1ea      	bne.n	8004dcc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004df6:	e7df      	b.n	8004db8 <ethernetif_input+0x10>
 8004df8:	20005024 	.word	0x20005024

08004dfc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <ethernetif_init+0x1c>
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <ethernetif_init+0x48>)
 8004e0c:	f240 12df 	movw	r2, #479	; 0x1df
 8004e10:	490d      	ldr	r1, [pc, #52]	; (8004e48 <ethernetif_init+0x4c>)
 8004e12:	480e      	ldr	r0, [pc, #56]	; (8004e4c <ethernetif_init+0x50>)
 8004e14:	f014 f94e 	bl	80190b4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2273      	movs	r2, #115	; 0x73
 8004e1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2274      	movs	r2, #116	; 0x74
 8004e24:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <ethernetif_init+0x54>)
 8004e2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <ethernetif_init+0x58>)
 8004e32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fdd3 	bl	80049e0 <low_level_init>

  return ERR_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	0801a55c 	.word	0x0801a55c
 8004e48:	0801a578 	.word	0x0801a578
 8004e4c:	0801a588 	.word	0x0801a588
 8004e50:	08016bdd 	.word	0x08016bdd
 8004e54:	08004c4d 	.word	0x08004c4d

08004e58 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	4809      	ldr	r0, [pc, #36]	; (8004e8c <pbuf_free_custom+0x34>)
 8004e68:	f007 fa48 	bl	800c2fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004e6c:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <pbuf_free_custom+0x38>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <pbuf_free_custom+0x38>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <pbuf_free_custom+0x3c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fbf4 	bl	800566c <osSemaphoreRelease>
  }
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	0801e060 	.word	0x0801e060
 8004e90:	20004ee0 	.word	0x20004ee0
 8004e94:	20005024 	.word	0x20005024

08004e98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e9c:	f7fc fcac 	bl	80017f8 <HAL_GetTick>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a59      	ldr	r2, [pc, #356]	; (800502c <HAL_ETH_MspInit+0x184>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f040 80ac 	bne.w	8005024 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004ecc:	2300      	movs	r3, #0
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	4b57      	ldr	r3, [pc, #348]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	4a56      	ldr	r2, [pc, #344]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eda:	6313      	str	r3, [r2, #48]	; 0x30
 8004edc:	4b54      	ldr	r3, [pc, #336]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	4b50      	ldr	r3, [pc, #320]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	4a4f      	ldr	r2, [pc, #316]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2300      	movs	r3, #0
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	4b49      	ldr	r3, [pc, #292]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	4a48      	ldr	r2, [pc, #288]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f12:	6313      	str	r3, [r2, #48]	; 0x30
 8004f14:	4b46      	ldr	r3, [pc, #280]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	4b42      	ldr	r3, [pc, #264]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	4a41      	ldr	r2, [pc, #260]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f2a:	f043 0304 	orr.w	r3, r3, #4
 8004f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	4a3a      	ldr	r2, [pc, #232]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4c:	4b38      	ldr	r3, [pc, #224]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	4b34      	ldr	r3, [pc, #208]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	4a33      	ldr	r2, [pc, #204]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f62:	f043 0302 	orr.w	r3, r3, #2
 8004f66:	6313      	str	r3, [r2, #48]	; 0x30
 8004f68:	4b31      	ldr	r3, [pc, #196]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f82:	6313      	str	r3, [r2, #48]	; 0x30
 8004f84:	4b2a      	ldr	r3, [pc, #168]	; (8005030 <HAL_ETH_MspInit+0x188>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004f90:	2332      	movs	r3, #50	; 0x32
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f94:	2302      	movs	r3, #2
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fa0:	230b      	movs	r3, #11
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4822      	ldr	r0, [pc, #136]	; (8005034 <HAL_ETH_MspInit+0x18c>)
 8004fac:	f7fd ffe6 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004fb0:	2386      	movs	r3, #134	; 0x86
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fc0:	230b      	movs	r3, #11
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fc8:	4619      	mov	r1, r3
 8004fca:	481b      	ldr	r0, [pc, #108]	; (8005038 <HAL_ETH_MspInit+0x190>)
 8004fcc:	f7fd ffd6 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fe2:	230b      	movs	r3, #11
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fea:	4619      	mov	r1, r3
 8004fec:	4813      	ldr	r0, [pc, #76]	; (800503c <HAL_ETH_MspInit+0x194>)
 8004fee:	f7fd ffc5 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004ff2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005000:	2303      	movs	r3, #3
 8005002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005004:	230b      	movs	r3, #11
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500c:	4619      	mov	r1, r3
 800500e:	480c      	ldr	r0, [pc, #48]	; (8005040 <HAL_ETH_MspInit+0x198>)
 8005010:	f7fd ffb4 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005014:	2200      	movs	r2, #0
 8005016:	2105      	movs	r1, #5
 8005018:	203d      	movs	r0, #61	; 0x3d
 800501a:	f7fc fcd5 	bl	80019c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800501e:	203d      	movs	r0, #61	; 0x3d
 8005020:	f7fc fcee 	bl	8001a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005024:	bf00      	nop
 8005026:	3738      	adds	r7, #56	; 0x38
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40028000 	.word	0x40028000
 8005030:	40023800 	.word	0x40023800
 8005034:	40020800 	.word	0x40020800
 8005038:	40020000 	.word	0x40020000
 800503c:	40020400 	.word	0x40020400
 8005040:	40021800 	.word	0x40021800

08005044 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <ETH_PHY_IO_Init+0x10>)
 800504a:	f7fd fb2f 	bl	80026ac <HAL_ETH_SetMDIOClockRange>

  return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	2000502c 	.word	0x2000502c

08005058 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return 0;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	68f9      	ldr	r1, [r7, #12]
 800507a:	4807      	ldr	r0, [pc, #28]	; (8005098 <ETH_PHY_IO_ReadReg+0x30>)
 800507c:	f7fd f97e 	bl	800237c <HAL_ETH_ReadPHYRegister>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e000      	b.n	800508e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	2000502c 	.word	0x2000502c

0800509c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	4807      	ldr	r0, [pc, #28]	; (80050cc <ETH_PHY_IO_WriteReg+0x30>)
 80050b0:	f7fd f9af 	bl	8002412 <HAL_ETH_WritePHYRegister>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	e000      	b.n	80050c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000502c 	.word	0x2000502c

080050d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80050d4:	f7fc fb90 	bl	80017f8 <HAL_GetTick>
 80050d8:	4603      	mov	r3, r0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b0a0      	sub	sp, #128	; 0x80
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	2264      	movs	r2, #100	; 0x64
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f013 ff42 	bl	8018f7a <memset>
  int32_t PHYLinkState = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050fe:	2300      	movs	r3, #0
 8005100:	67bb      	str	r3, [r7, #120]	; 0x78
 8005102:	2300      	movs	r3, #0
 8005104:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800510a:	483a      	ldr	r0, [pc, #232]	; (80051f4 <ethernet_link_thread+0x114>)
 800510c:	f7fc fab7 	bl	800167e <LAN8742_GetLinkState>
 8005110:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00c      	beq.n	800513e <ethernet_link_thread+0x5e>
 8005124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005126:	2b01      	cmp	r3, #1
 8005128:	dc09      	bgt.n	800513e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800512a:	4833      	ldr	r0, [pc, #204]	; (80051f8 <ethernet_link_thread+0x118>)
 800512c:	f7fc fde1 	bl	8001cf2 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005130:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005132:	f007 fb6f 	bl	800c814 <netif_set_down>
    netif_set_link_down(netif);
 8005136:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005138:	f007 fbd6 	bl	800c8e8 <netif_set_link_down>
 800513c:	e055      	b.n	80051ea <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800513e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005140:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d14e      	bne.n	80051ea <ethernet_link_thread+0x10a>
 800514c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800514e:	2b01      	cmp	r3, #1
 8005150:	dd4b      	ble.n	80051ea <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005154:	3b02      	subs	r3, #2
 8005156:	2b03      	cmp	r3, #3
 8005158:	d82a      	bhi.n	80051b0 <ethernet_link_thread+0xd0>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <ethernet_link_thread+0x80>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005171 	.word	0x08005171
 8005164:	08005183 	.word	0x08005183
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005174:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800517a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800517c:	2301      	movs	r3, #1
 800517e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005180:	e017      	b.n	80051b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005182:	2300      	movs	r3, #0
 8005184:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800518a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800518c:	2301      	movs	r3, #1
 800518e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005190:	e00f      	b.n	80051b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005196:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005198:	2300      	movs	r3, #0
 800519a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800519c:	2301      	movs	r3, #1
 800519e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051a0:	e007      	b.n	80051b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80051a6:	2300      	movs	r3, #0
 80051a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051ae:	e000      	b.n	80051b2 <ethernet_link_thread+0xd2>
    default:
      break;
 80051b0:	bf00      	nop
    }

    if(linkchanged)
 80051b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d018      	beq.n	80051ea <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	4619      	mov	r1, r3
 80051be:	480e      	ldr	r0, [pc, #56]	; (80051f8 <ethernet_link_thread+0x118>)
 80051c0:	f7fd f970 	bl	80024a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80051c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80051c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	4619      	mov	r1, r3
 80051d2:	4809      	ldr	r0, [pc, #36]	; (80051f8 <ethernet_link_thread+0x118>)
 80051d4:	f7fd fa50 	bl	8002678 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80051d8:	4807      	ldr	r0, [pc, #28]	; (80051f8 <ethernet_link_thread+0x118>)
 80051da:	f7fc fc9d 	bl	8001b18 <HAL_ETH_Start>
      netif_set_up(netif);
 80051de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051e0:	f007 faac 	bl	800c73c <netif_set_up>
      netif_set_link_up(netif);
 80051e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80051e6:	f007 fb47 	bl	800c878 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80051ea:	2064      	movs	r0, #100	; 0x64
 80051ec:	f000 f90e 	bl	800540c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80051f0:	e78b      	b.n	800510a <ethernet_link_thread+0x2a>
 80051f2:	bf00      	nop
 80051f4:	20005114 	.word	0x20005114
 80051f8:	2000502c 	.word	0x2000502c

080051fc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af02      	add	r7, sp, #8
 8005202:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005204:	4812      	ldr	r0, [pc, #72]	; (8005250 <HAL_ETH_RxAllocateCallback+0x54>)
 8005206:	f007 f805 	bl	800c214 <memp_malloc_pool>
 800520a:	60f8      	str	r0, [r7, #12]
  if (p)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d014      	beq.n	800523c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f103 0220 	add.w	r2, r3, #32
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <HAL_ETH_RxAllocateCallback+0x58>)
 8005220:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800522a:	9201      	str	r2, [sp, #4]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2241      	movs	r2, #65	; 0x41
 8005232:	2100      	movs	r1, #0
 8005234:	2000      	movs	r0, #0
 8005236:	f007 fd7b 	bl	800cd30 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800523a:	e005      	b.n	8005248 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <HAL_ETH_RxAllocateCallback+0x5c>)
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	0801e060 	.word	0x0801e060
 8005254:	08004e59 	.word	0x08004e59
 8005258:	20004ee0 	.word	0x20004ee0

0800525c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800525c:	b480      	push	{r7}
 800525e:	b089      	sub	sp, #36	; 0x24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3b20      	subs	r3, #32
 800527a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2200      	movs	r2, #0
 8005286:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e003      	b.n	80052a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	e009      	b.n	80052c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	891a      	ldrh	r2, [r3, #8]
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	4413      	add	r3, r2
 80052bc:	b29a      	uxth	r2, r3
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f2      	bne.n	80052b4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	3724      	adds	r7, #36	; 0x24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f007 fedd 	bl	800d0a4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	4603      	mov	r3, r0
 80052fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005304:	2b84      	cmp	r3, #132	; 0x84
 8005306:	d005      	beq.n	8005314 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005308:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	3303      	adds	r3, #3
 8005312:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005328:	f3ef 8305 	mrs	r3, IPSR
 800532c:	607b      	str	r3, [r7, #4]
  return(result);
 800532e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800534a:	f001 fd3b 	bl	8006dc4 <vTaskStartScheduler>
  
  return osOK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}

08005354 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005358:	f7ff ffe3 	bl	8005322 <inHandlerMode>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005362:	f001 fe53 	bl	800700c <xTaskGetTickCountFromISR>
 8005366:	4603      	mov	r3, r0
 8005368:	e002      	b.n	8005370 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800536a:	f001 fe3f 	bl	8006fec <xTaskGetTickCount>
 800536e:	4603      	mov	r3, r0
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}

08005374 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af04      	add	r7, sp, #16
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d020      	beq.n	80053c8 <osThreadCreate+0x54>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01c      	beq.n	80053c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685c      	ldr	r4, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691e      	ldr	r6, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ffa6 	bl	80052f2 <makeFreeRtosPriority>
 80053a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053b0:	9202      	str	r2, [sp, #8]
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	9100      	str	r1, [sp, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	4632      	mov	r2, r6
 80053ba:	4629      	mov	r1, r5
 80053bc:	4620      	mov	r0, r4
 80053be:	f001 fb23 	bl	8006a08 <xTaskCreateStatic>
 80053c2:	4603      	mov	r3, r0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e01c      	b.n	8005402 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685c      	ldr	r4, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053d4:	b29e      	uxth	r6, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff88 	bl	80052f2 <makeFreeRtosPriority>
 80053e2:	4602      	mov	r2, r0
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	9200      	str	r2, [sp, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4632      	mov	r2, r6
 80053f0:	4629      	mov	r1, r5
 80053f2:	4620      	mov	r0, r4
 80053f4:	f001 fb65 	bl	8006ac2 <xTaskCreate>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	e000      	b.n	8005404 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005402:	68fb      	ldr	r3, [r7, #12]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800540c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <osDelay+0x16>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	e000      	b.n	8005424 <osDelay+0x18>
 8005422:	2301      	movs	r3, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fc99 	bl	8006d5c <vTaskDelay>
  
  return osOK;
 800542a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4619      	mov	r1, r3
 800544a:	2001      	movs	r0, #1
 800544c:	f000 fc7d 	bl	8005d4a <xQueueCreateMutexStatic>
 8005450:	4603      	mov	r3, r0
 8005452:	e003      	b.n	800545c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005454:	2001      	movs	r0, #1
 8005456:	f000 fc60 	bl	8005d1a <xQueueCreateMutex>
 800545a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <osMutexWait+0x18>
    return osErrorParameter;
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	e03a      	b.n	80054f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d103      	bne.n	8005490 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e009      	b.n	80054a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <osMutexWait+0x40>
      ticks = 1;
 80054a0:	2301      	movs	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80054a4:	f7ff ff3d 	bl	8005322 <inHandlerMode>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	461a      	mov	r2, r3
 80054b4:	2100      	movs	r1, #0
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 f874 	bl	80065a4 <xQueueReceiveFromISR>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d001      	beq.n	80054c6 <osMutexWait+0x62>
      return osErrorOS;
 80054c2:	23ff      	movs	r3, #255	; 0xff
 80054c4:	e015      	b.n	80054f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d011      	beq.n	80054f0 <osMutexWait+0x8c>
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <osMutexWait+0x98>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	e008      	b.n	80054f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 ff53 	bl	800638c <xQueueSemaphoreTake>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <osMutexWait+0x8c>
    return osErrorOS;
 80054ec:	23ff      	movs	r3, #255	; 0xff
 80054ee:	e000      	b.n	80054f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005510:	f7ff ff07 	bl	8005322 <inHandlerMode>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d016      	beq.n	8005548 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fdc6 	bl	80060b2 <xQueueGiveFromISR>
 8005526:	4603      	mov	r3, r0
 8005528:	2b01      	cmp	r3, #1
 800552a:	d001      	beq.n	8005530 <osMutexRelease+0x30>
      return osErrorOS;
 800552c:	23ff      	movs	r3, #255	; 0xff
 800552e:	e017      	b.n	8005560 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d013      	beq.n	800555e <osMutexRelease+0x5e>
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <osMutexRelease+0x68>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e00a      	b.n	800555e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005548:	2300      	movs	r3, #0
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fc16 	bl	8005d80 <xQueueGenericSend>
 8005554:	4603      	mov	r3, r0
 8005556:	2b01      	cmp	r3, #1
 8005558:	d001      	beq.n	800555e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800555a:	23ff      	movs	r3, #255	; 0xff
 800555c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800555e:	68fb      	ldr	r3, [r7, #12]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00f      	beq.n	800559e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10a      	bne.n	800559a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2203      	movs	r2, #3
 800558a:	9200      	str	r2, [sp, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	2100      	movs	r1, #0
 8005590:	2001      	movs	r0, #1
 8005592:	f000 fad7 	bl	8005b44 <xQueueGenericCreateStatic>
 8005596:	4603      	mov	r3, r0
 8005598:	e016      	b.n	80055c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	e014      	b.n	80055c8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d110      	bne.n	80055c6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80055a4:	2203      	movs	r2, #3
 80055a6:	2100      	movs	r1, #0
 80055a8:	2001      	movs	r0, #1
 80055aa:	f000 fb43 	bl	8005c34 <xQueueGenericCreate>
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <osSemaphoreCreate+0x56>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2200      	movs	r2, #0
 80055ba:	2100      	movs	r1, #0
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fbdf 	bl	8005d80 <xQueueGenericSend>
      return sema;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	e000      	b.n	80055c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80055c6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	e03a      	b.n	800565e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d103      	bne.n	80055fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e009      	b.n	8005610 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d006      	beq.n	8005610 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <osSemaphoreWait+0x40>
      ticks = 1;
 800560c:	2301      	movs	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005610:	f7ff fe87 	bl	8005322 <inHandlerMode>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d017      	beq.n	800564a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	461a      	mov	r2, r3
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 ffbe 	bl	80065a4 <xQueueReceiveFromISR>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d001      	beq.n	8005632 <osSemaphoreWait+0x62>
      return osErrorOS;
 800562e:	23ff      	movs	r3, #255	; 0xff
 8005630:	e015      	b.n	800565e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d011      	beq.n	800565c <osSemaphoreWait+0x8c>
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <osSemaphoreWait+0x98>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	e008      	b.n	800565c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fe9d 	bl	800638c <xQueueSemaphoreTake>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d001      	beq.n	800565c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005658:	23ff      	movs	r3, #255	; 0xff
 800565a:	e000      	b.n	800565e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800567c:	f7ff fe51 	bl	8005322 <inHandlerMode>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fd10 	bl	80060b2 <xQueueGiveFromISR>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d001      	beq.n	800569c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005698:	23ff      	movs	r3, #255	; 0xff
 800569a:	e017      	b.n	80056cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d013      	beq.n	80056ca <osSemaphoreRelease+0x5e>
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <osSemaphoreRelease+0x68>)
 80056a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	e00a      	b.n	80056ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80056b4:	2300      	movs	r3, #0
 80056b6:	2200      	movs	r2, #0
 80056b8:	2100      	movs	r1, #0
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fb60 	bl	8005d80 <xQueueGenericSend>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d001      	beq.n	80056ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80056c6:	23ff      	movs	r3, #255	; 0xff
 80056c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80056e0:	f7ff fe1f 	bl	8005322 <inHandlerMode>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <osSemaphoreDelete+0x16>
    return osErrorISR;
 80056ea:	2382      	movs	r3, #130	; 0x82
 80056ec:	e003      	b.n	80056f6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 f814 	bl	800671c <vQueueDelete>

  return osOK; 
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80056fe:	b590      	push	{r4, r7, lr}
 8005700:	b085      	sub	sp, #20
 8005702:	af02      	add	r7, sp, #8
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d011      	beq.n	8005734 <osMessageCreate+0x36>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2400      	movs	r4, #0
 800572a:	9400      	str	r4, [sp, #0]
 800572c:	f000 fa0a 	bl	8005b44 <xQueueGenericCreateStatic>
 8005730:	4603      	mov	r3, r0
 8005732:	e008      	b.n	8005746 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	4619      	mov	r1, r3
 8005740:	f000 fa78 	bl	8005c34 <xQueueGenericCreate>
 8005744:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bd90      	pop	{r4, r7, pc}
	...

08005750 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <osMessagePut+0x1e>
    ticks = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800576e:	f7ff fdd8 	bl	8005322 <inHandlerMode>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d018      	beq.n	80057aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005778:	f107 0210 	add.w	r2, r7, #16
 800577c:	f107 0108 	add.w	r1, r7, #8
 8005780:	2300      	movs	r3, #0
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fbfa 	bl	8005f7c <xQueueGenericSendFromISR>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <osMessagePut+0x42>
      return osErrorOS;
 800578e:	23ff      	movs	r3, #255	; 0xff
 8005790:	e018      	b.n	80057c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d014      	beq.n	80057c2 <osMessagePut+0x72>
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <osMessagePut+0x7c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	e00b      	b.n	80057c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80057aa:	f107 0108 	add.w	r1, r7, #8
 80057ae:	2300      	movs	r3, #0
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fae4 	bl	8005d80 <xQueueGenericSend>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d001      	beq.n	80057c2 <osMessagePut+0x72>
      return osErrorOS;
 80057be:	23ff      	movs	r3, #255	; 0xff
 80057c0:	e000      	b.n	80057c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b08b      	sub	sp, #44	; 0x2c
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	617b      	str	r3, [r7, #20]
    return event;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	461c      	mov	r4, r3
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057fe:	e054      	b.n	80058aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005800:	2300      	movs	r3, #0
 8005802:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d103      	bne.n	8005818 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	e009      	b.n	800582c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <osMessageGet+0x5c>
      ticks = 1;
 8005828:	2301      	movs	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800582c:	f7ff fd79 	bl	8005322 <inHandlerMode>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01c      	beq.n	8005870 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005836:	f107 0220 	add.w	r2, r7, #32
 800583a:	f107 0314 	add.w	r3, r7, #20
 800583e:	3304      	adds	r3, #4
 8005840:	4619      	mov	r1, r3
 8005842:	68b8      	ldr	r0, [r7, #8]
 8005844:	f000 feae 	bl	80065a4 <xQueueReceiveFromISR>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d102      	bne.n	8005854 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800584e:	2310      	movs	r3, #16
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e001      	b.n	8005858 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01d      	beq.n	800589a <osMessageGet+0xca>
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <osMessageGet+0xe4>)
 8005860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	e014      	b.n	800589a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	3304      	adds	r3, #4
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	4619      	mov	r1, r3
 800587a:	68b8      	ldr	r0, [r7, #8]
 800587c:	f000 fca6 	bl	80061cc <xQueueReceive>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d102      	bne.n	800588c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005886:	2310      	movs	r3, #16
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e006      	b.n	800589a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <osMessageGet+0xc6>
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <osMessageGet+0xc8>
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	461c      	mov	r4, r3
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	372c      	adds	r7, #44	; 0x2c
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80058c0:	f7ff fd2f 	bl	8005322 <inHandlerMode>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 ff08 	bl	80066e0 <uxQueueMessagesWaitingFromISR>
 80058d0:	4603      	mov	r3, r0
 80058d2:	e003      	b.n	80058dc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fee5 	bl	80066a4 <uxQueueMessagesWaiting>
 80058da:	4603      	mov	r3, r0
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80058ec:	f7ff fd19 	bl	8005322 <inHandlerMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <osMessageDelete+0x16>
    return osErrorISR;
 80058f6:	2382      	movs	r3, #130	; 0x82
 80058f8:	e003      	b.n	8005902 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 ff0e 	bl	800671c <vQueueDelete>

  return osOK; 
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f103 0208 	add.w	r2, r3, #8
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f103 0208 	add.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f103 0208 	add.w	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d103      	bne.n	80059cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e00c      	b.n	80059e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3308      	adds	r3, #8
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e002      	b.n	80059da <vListInsert+0x2e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d2f6      	bcs.n	80059d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6852      	ldr	r2, [r2, #4]
 8005a3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d103      	bne.n	8005a52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a9e:	f002 f911 	bl	8007cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	441a      	add	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	68f9      	ldr	r1, [r7, #12]
 8005ad2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	441a      	add	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	22ff      	movs	r2, #255	; 0xff
 8005aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d114      	bne.n	8005b1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01a      	beq.n	8005b32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3310      	adds	r3, #16
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fbd3 	bl	80072ac <xTaskRemoveFromEventList>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d012      	beq.n	8005b32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <xQueueGenericReset+0xcc>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	e009      	b.n	8005b32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3310      	adds	r3, #16
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fef1 	bl	800590a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3324      	adds	r3, #36	; 0x24
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff feec 	bl	800590a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b32:	f002 f8f7 	bl	8007d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b36:	2301      	movs	r3, #1
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08e      	sub	sp, #56	; 0x38
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <xQueueGenericCreateStatic+0x52>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <xQueueGenericCreateStatic+0x56>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueGenericCreateStatic+0x58>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	623b      	str	r3, [r7, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <xQueueGenericCreateStatic+0x7e>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <xQueueGenericCreateStatic+0x82>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <xQueueGenericCreateStatic+0x84>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61fb      	str	r3, [r7, #28]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005be2:	2348      	movs	r3, #72	; 0x48
 8005be4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b48      	cmp	r3, #72	; 0x48
 8005bea:	d00a      	beq.n	8005c02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	61bb      	str	r3, [r7, #24]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f83f 	bl	8005ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3730      	adds	r7, #48	; 0x30
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	613b      	str	r3, [r7, #16]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	3348      	adds	r3, #72	; 0x48
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f002 f94b 	bl	8007f08 <pvPortMalloc>
 8005c72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d011      	beq.n	8005c9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	3348      	adds	r3, #72	; 0x48
 8005c82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c8c:	79fa      	ldrb	r2, [r7, #7]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f805 	bl	8005ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	69b8      	ldr	r0, [r7, #24]
 8005cda:	f7ff fecb 	bl	8005a74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00e      	beq.n	8005d12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d06:	2300      	movs	r3, #0
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f837 	bl	8005d80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	4603      	mov	r3, r0
 8005d22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d24:	2301      	movs	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6939      	ldr	r1, [r7, #16]
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f7ff ff7e 	bl	8005c34 <xQueueGenericCreate>
 8005d38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff ffd3 	bl	8005ce6 <prvInitialiseMutex>

		return xNewQueue;
 8005d40:	68fb      	ldr	r3, [r7, #12]
	}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	af02      	add	r7, sp, #8
 8005d50:	4603      	mov	r3, r0
 8005d52:	6039      	str	r1, [r7, #0]
 8005d54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d56:	2301      	movs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2200      	movs	r2, #0
 8005d66:	6939      	ldr	r1, [r7, #16]
 8005d68:	6978      	ldr	r0, [r7, #20]
 8005d6a:	f7ff feeb 	bl	8005b44 <xQueueGenericCreateStatic>
 8005d6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff ffb8 	bl	8005ce6 <prvInitialiseMutex>

		return xNewQueue;
 8005d76:	68fb      	ldr	r3, [r7, #12]
	}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08e      	sub	sp, #56	; 0x38
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueGenericSend+0x32>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <xQueueGenericSend+0x40>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <xQueueGenericSend+0x44>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <xQueueGenericSend+0x46>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <xQueueGenericSend+0x60>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d103      	bne.n	8005dee <xQueueGenericSend+0x6e>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <xQueueGenericSend+0x72>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <xQueueGenericSend+0x74>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xQueueGenericSend+0x8e>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	623b      	str	r3, [r7, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e0e:	f001 fc0d 	bl	800762c <xTaskGetSchedulerState>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <xQueueGenericSend+0x9e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <xQueueGenericSend+0xa2>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <xQueueGenericSend+0xa4>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xQueueGenericSend+0xbe>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	61fb      	str	r3, [r7, #28]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e3e:	f001 ff41 	bl	8007cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <xQueueGenericSend+0xd4>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d129      	bne.n	8005ea8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e5a:	f000 fc9a 	bl	8006792 <prvCopyDataToQueue>
 8005e5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d010      	beq.n	8005e8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	3324      	adds	r3, #36	; 0x24
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 fa1d 	bl	80072ac <xTaskRemoveFromEventList>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d013      	beq.n	8005ea0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e78:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <xQueueGenericSend+0x1f8>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	e00a      	b.n	8005ea0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e90:	4b39      	ldr	r3, [pc, #228]	; (8005f78 <xQueueGenericSend+0x1f8>)
 8005e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ea0:	f001 ff40 	bl	8007d24 <vPortExitCritical>
				return pdPASS;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e063      	b.n	8005f70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eae:	f001 ff39 	bl	8007d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e05c      	b.n	8005f70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ebc:	f107 0314 	add.w	r3, r7, #20
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fa55 	bl	8007370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eca:	f001 ff2b 	bl	8007d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ece:	f000 ffe3 	bl	8006e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ed2:	f001 fef7 	bl	8007cc4 <vPortEnterCritical>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee2:	d103      	bne.n	8005eec <xQueueGenericSend+0x16c>
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d103      	bne.n	8005f02 <xQueueGenericSend+0x182>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f02:	f001 ff0f 	bl	8007d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f06:	1d3a      	adds	r2, r7, #4
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fa44 	bl	800739c <xTaskCheckForTimeOut>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d124      	bne.n	8005f64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f1c:	f000 fd31 	bl	8006982 <prvIsQueueFull>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d018      	beq.n	8005f58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	3310      	adds	r3, #16
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 f998 	bl	8007264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f36:	f000 fcbc 	bl	80068b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f3a:	f000 ffbb 	bl	8006eb4 <xTaskResumeAll>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f af7c 	bne.w	8005e3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <xQueueGenericSend+0x1f8>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	e772      	b.n	8005e3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5a:	f000 fcaa 	bl	80068b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f5e:	f000 ffa9 	bl	8006eb4 <xTaskResumeAll>
 8005f62:	e76c      	b.n	8005e3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f66:	f000 fca4 	bl	80068b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f6a:	f000 ffa3 	bl	8006eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3738      	adds	r7, #56	; 0x38
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b090      	sub	sp, #64	; 0x40
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <xQueueGenericSendFromISR+0x3c>
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <xQueueGenericSendFromISR+0x40>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <xQueueGenericSendFromISR+0x42>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d103      	bne.n	8005fe6 <xQueueGenericSendFromISR+0x6a>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <xQueueGenericSendFromISR+0x6e>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <xQueueGenericSendFromISR+0x70>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	623b      	str	r3, [r7, #32]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006006:	f001 ff3f 	bl	8007e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800600a:	f3ef 8211 	mrs	r2, BASEPRI
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	61fa      	str	r2, [r7, #28]
 8006020:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006022:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <xQueueGenericSendFromISR+0xbc>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d12f      	bne.n	8006098 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800604e:	f000 fba0 	bl	8006792 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006052:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d112      	bne.n	8006082 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	3324      	adds	r3, #36	; 0x24
 8006068:	4618      	mov	r0, r3
 800606a:	f001 f91f 	bl	80072ac <xTaskRemoveFromEventList>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00e      	beq.n	8006092 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e007      	b.n	8006092 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006086:	3301      	adds	r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	b25a      	sxtb	r2, r3
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006092:	2301      	movs	r3, #1
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006096:	e001      	b.n	800609c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006098:	2300      	movs	r3, #0
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3740      	adds	r7, #64	; 0x40
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b08e      	sub	sp, #56	; 0x38
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	623b      	str	r3, [r7, #32]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <xQueueGiveFromISR+0x48>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	61fb      	str	r3, [r7, #28]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <xQueueGiveFromISR+0x58>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <xQueueGiveFromISR+0x5c>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <xQueueGiveFromISR+0x5e>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61bb      	str	r3, [r7, #24]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800612a:	f001 fead 	bl	8007e88 <vPortValidateInterruptPriority>
	__asm volatile
 800612e:	f3ef 8211 	mrs	r2, BASEPRI
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	617a      	str	r2, [r7, #20]
 8006144:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006146:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006156:	429a      	cmp	r2, r3
 8006158:	d22b      	bcs.n	80061b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800616c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d112      	bne.n	800619c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f892 	bl	80072ac <xTaskRemoveFromEventList>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e007      	b.n	80061ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800619c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a0:	3301      	adds	r3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	b25a      	sxtb	r2, r3
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061ac:	2301      	movs	r3, #1
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
 80061b0:	e001      	b.n	80061b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f383 8811 	msr	BASEPRI, r3
}
 80061c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3738      	adds	r7, #56	; 0x38
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	; 0x30
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061d8:	2300      	movs	r3, #0
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xQueueReceive+0x30>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	623b      	str	r3, [r7, #32]
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d103      	bne.n	800620a <xQueueReceive+0x3e>
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <xQueueReceive+0x42>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueReceive+0x44>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueReceive+0x5e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	61fb      	str	r3, [r7, #28]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622a:	f001 f9ff 	bl	800762c <xTaskGetSchedulerState>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <xQueueReceive+0x6e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <xQueueReceive+0x72>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <xQueueReceive+0x74>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueReceive+0x8e>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61bb      	str	r3, [r7, #24]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625a:	f001 fd33 	bl	8007cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01f      	beq.n	80062aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f000 fafa 	bl	8006866 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	1e5a      	subs	r2, r3, #1
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	3310      	adds	r3, #16
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f810 	bl	80072ac <xTaskRemoveFromEventList>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006292:	4b3d      	ldr	r3, [pc, #244]	; (8006388 <xQueueReceive+0x1bc>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062a2:	f001 fd3f 	bl	8007d24 <vPortExitCritical>
				return pdPASS;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e069      	b.n	800637e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062b0:	f001 fd38 	bl	8007d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e062      	b.n	800637e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062be:	f107 0310 	add.w	r3, r7, #16
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 f854 	bl	8007370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062c8:	2301      	movs	r3, #1
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062cc:	f001 fd2a 	bl	8007d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062d0:	f000 fde2 	bl	8006e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062d4:	f001 fcf6 	bl	8007cc4 <vPortEnterCritical>
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d103      	bne.n	80062ee <xQueueReceive+0x122>
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d103      	bne.n	8006304 <xQueueReceive+0x138>
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006304:	f001 fd0e 	bl	8007d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006308:	1d3a      	adds	r2, r7, #4
 800630a:	f107 0310 	add.w	r3, r7, #16
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f843 	bl	800739c <xTaskCheckForTimeOut>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d123      	bne.n	8006364 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631e:	f000 fb1a 	bl	8006956 <prvIsQueueEmpty>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d017      	beq.n	8006358 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	3324      	adds	r3, #36	; 0x24
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4611      	mov	r1, r2
 8006330:	4618      	mov	r0, r3
 8006332:	f000 ff97 	bl	8007264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006338:	f000 fabb 	bl	80068b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800633c:	f000 fdba 	bl	8006eb4 <xTaskResumeAll>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d189      	bne.n	800625a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xQueueReceive+0x1bc>)
 8006348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	e780      	b.n	800625a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f000 faaa 	bl	80068b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800635e:	f000 fda9 	bl	8006eb4 <xTaskResumeAll>
 8006362:	e77a      	b.n	800625a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006366:	f000 faa4 	bl	80068b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800636a:	f000 fda3 	bl	8006eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006370:	f000 faf1 	bl	8006956 <prvIsQueueEmpty>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f43f af6f 	beq.w	800625a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800637c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800637e:	4618      	mov	r0, r3
 8006380:	3730      	adds	r7, #48	; 0x30
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08e      	sub	sp, #56	; 0x38
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800639e:	2300      	movs	r3, #0
 80063a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	61fb      	str	r3, [r7, #28]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063dc:	f001 f926 	bl	800762c <xTaskGetSchedulerState>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <xQueueSemaphoreTake+0x60>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <xQueueSemaphoreTake+0x64>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <xQueueSemaphoreTake+0x66>
 80063f0:	2300      	movs	r3, #0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61bb      	str	r3, [r7, #24]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800640c:	f001 fc5a 	bl	8007cc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d024      	beq.n	8006466 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800642c:	f001 faa6 	bl	800797c <pvTaskIncrementMutexHeldCount>
 8006430:	4602      	mov	r2, r0
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00f      	beq.n	800645e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	3310      	adds	r3, #16
 8006442:	4618      	mov	r0, r3
 8006444:	f000 ff32 	bl	80072ac <xTaskRemoveFromEventList>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800644e:	4b54      	ldr	r3, [pc, #336]	; (80065a0 <xQueueSemaphoreTake+0x214>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800645e:	f001 fc61 	bl	8007d24 <vPortExitCritical>
				return pdPASS;
 8006462:	2301      	movs	r3, #1
 8006464:	e097      	b.n	8006596 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d111      	bne.n	8006490 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	617b      	str	r3, [r7, #20]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006488:	f001 fc4c 	bl	8007d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800648c:	2300      	movs	r3, #0
 800648e:	e082      	b.n	8006596 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	4618      	mov	r0, r3
 800649c:	f000 ff68 	bl	8007370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064a4:	f001 fc3e 	bl	8007d24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064a8:	f000 fcf6 	bl	8006e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ac:	f001 fc0a 	bl	8007cc4 <vPortEnterCritical>
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b6:	b25b      	sxtb	r3, r3
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d103      	bne.n	80064c6 <xQueueSemaphoreTake+0x13a>
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d103      	bne.n	80064dc <xQueueSemaphoreTake+0x150>
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064dc:	f001 fc22 	bl	8007d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064e0:	463a      	mov	r2, r7
 80064e2:	f107 030c 	add.w	r3, r7, #12
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 ff57 	bl	800739c <xTaskCheckForTimeOut>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d132      	bne.n	800655a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f6:	f000 fa2e 	bl	8006956 <prvIsQueueEmpty>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d026      	beq.n	800654e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d109      	bne.n	800651c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006508:	f001 fbdc 	bl	8007cc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f001 f8a9 	bl	8007668 <xTaskPriorityInherit>
 8006516:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006518:	f001 fc04 	bl	8007d24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fe9d 	bl	8007264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800652a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800652c:	f000 f9c1 	bl	80068b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006530:	f000 fcc0 	bl	8006eb4 <xTaskResumeAll>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f af68 	bne.w	800640c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800653c:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <xQueueSemaphoreTake+0x214>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	e75e      	b.n	800640c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800654e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006550:	f000 f9af 	bl	80068b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006554:	f000 fcae 	bl	8006eb4 <xTaskResumeAll>
 8006558:	e758      	b.n	800640c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800655a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800655c:	f000 f9a9 	bl	80068b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006560:	f000 fca8 	bl	8006eb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006566:	f000 f9f6 	bl	8006956 <prvIsQueueEmpty>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	f43f af4d 	beq.w	800640c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006578:	f001 fba4 	bl	8007cc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800657c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800657e:	f000 f8f0 	bl	8006762 <prvGetDisinheritPriorityAfterTimeout>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f001 f968 	bl	8007860 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006590:	f001 fbc8 	bl	8007d24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006596:	4618      	mov	r0, r3
 8006598:	3738      	adds	r7, #56	; 0x38
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08e      	sub	sp, #56	; 0x38
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	623b      	str	r3, [r7, #32]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <xQueueReceiveFromISR+0x3a>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <xQueueReceiveFromISR+0x3e>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueReceiveFromISR+0x40>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	61fb      	str	r3, [r7, #28]
}
 80065fa:	bf00      	nop
 80065fc:	e7fe      	b.n	80065fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065fe:	f001 fc43 	bl	8007e88 <vPortValidateInterruptPriority>
	__asm volatile
 8006602:	f3ef 8211 	mrs	r2, BASEPRI
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61ba      	str	r2, [r7, #24]
 8006618:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800661a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d02f      	beq.n	800668a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006638:	f000 f915 	bl	8006866 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	1e5a      	subs	r2, r3, #1
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d112      	bne.n	8006674 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	3310      	adds	r3, #16
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fe26 	bl	80072ac <xTaskRemoveFromEventList>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e007      	b.n	8006684 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006678:	3301      	adds	r3, #1
 800667a:	b2db      	uxtb	r3, r3
 800667c:	b25a      	sxtb	r2, r3
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006684:	2301      	movs	r3, #1
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
 8006688:	e001      	b.n	800668e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800668a:	2300      	movs	r3, #0
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f383 8811 	msr	BASEPRI, r3
}
 8006698:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800669c:	4618      	mov	r0, r3
 800669e:	3738      	adds	r7, #56	; 0x38
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80066c8:	f001 fafc 	bl	8007cc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80066d2:	f001 fb27 	bl	8007d24 <vPortExitCritical>

	return uxReturn;
 80066d6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800670e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006710:	4618      	mov	r0, r3
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <vQueueDelete+0x28>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60bb      	str	r3, [r7, #8]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f935 	bl	80069b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 fca3 	bl	80080a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d006      	beq.n	8006780 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f1c3 0307 	rsb	r3, r3, #7
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e001      	b.n	8006784 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006784:	68fb      	ldr	r3, [r7, #12]
	}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800679e:	2300      	movs	r3, #0
 80067a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10d      	bne.n	80067cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d14d      	bne.n	8006854 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ffc9 	bl	8007754 <xTaskPriorityDisinherit>
 80067c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
 80067ca:	e043      	b.n	8006854 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d119      	bne.n	8006806 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6858      	ldr	r0, [r3, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	461a      	mov	r2, r3
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	f012 fba4 	bl	8018f2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	441a      	add	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d32b      	bcc.n	8006854 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	e026      	b.n	8006854 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68d8      	ldr	r0, [r3, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	461a      	mov	r2, r3
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	f012 fb8a 	bl	8018f2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	425b      	negs	r3, r3
 8006820:	441a      	add	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d207      	bcs.n	8006842 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	425b      	negs	r3, r3
 800683c:	441a      	add	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d105      	bne.n	8006854 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3b01      	subs	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800685c:	697b      	ldr	r3, [r7, #20]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d018      	beq.n	80068aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	429a      	cmp	r2, r3
 8006890:	d303      	bcc.n	800689a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68d9      	ldr	r1, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	461a      	mov	r2, r3
 80068a4:	6838      	ldr	r0, [r7, #0]
 80068a6:	f012 fb40 	bl	8018f2a <memcpy>
	}
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068ba:	f001 fa03 	bl	8007cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c6:	e011      	b.n	80068ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3324      	adds	r3, #36	; 0x24
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fce9 	bl	80072ac <xTaskRemoveFromEventList>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068e0:	f000 fdbe 	bl	8007460 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dce9      	bgt.n	80068c8 <prvUnlockQueue+0x16>
 80068f4:	e000      	b.n	80068f8 <prvUnlockQueue+0x46>
					break;
 80068f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	22ff      	movs	r2, #255	; 0xff
 80068fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006900:	f001 fa10 	bl	8007d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006904:	f001 f9de 	bl	8007cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800690e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006910:	e011      	b.n	8006936 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3310      	adds	r3, #16
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fcc4 	bl	80072ac <xTaskRemoveFromEventList>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800692a:	f000 fd99 	bl	8007460 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	3b01      	subs	r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dce9      	bgt.n	8006912 <prvUnlockQueue+0x60>
 800693e:	e000      	b.n	8006942 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006940:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800694a:	f001 f9eb 	bl	8007d24 <vPortExitCritical>
}
 800694e:	bf00      	nop
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800695e:	f001 f9b1 	bl	8007cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e001      	b.n	8006974 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006974:	f001 f9d6 	bl	8007d24 <vPortExitCritical>

	return xReturn;
 8006978:	68fb      	ldr	r3, [r7, #12]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800698a:	f001 f99b 	bl	8007cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	429a      	cmp	r2, r3
 8006998:	d102      	bne.n	80069a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800699a:	2301      	movs	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	e001      	b.n	80069a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069a4:	f001 f9be 	bl	8007d24 <vPortExitCritical>

	return xReturn;
 80069a8:	68fb      	ldr	r3, [r7, #12]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e016      	b.n	80069f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <vQueueUnregisterQueue+0x50>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4413      	add	r3, r2
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d10b      	bne.n	80069ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069d2:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <vQueueUnregisterQueue+0x50>)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2100      	movs	r1, #0
 80069d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069dc:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <vQueueUnregisterQueue+0x50>)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	2200      	movs	r2, #0
 80069e6:	605a      	str	r2, [r3, #4]
				break;
 80069e8:	e006      	b.n	80069f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b07      	cmp	r3, #7
 80069f4:	d9e5      	bls.n	80069c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20005134 	.word	0x20005134

08006a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	; 0x38
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	623b      	str	r3, [r7, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <xTaskCreateStatic+0x46>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	61fb      	str	r3, [r7, #28]
}
 8006a4a:	bf00      	nop
 8006a4c:	e7fe      	b.n	8006a4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a4e:	23b4      	movs	r3, #180	; 0xb4
 8006a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2bb4      	cmp	r3, #180	; 0xb4
 8006a56:	d00a      	beq.n	8006a6e <xTaskCreateStatic+0x66>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	61bb      	str	r3, [r7, #24]
}
 8006a6a:	bf00      	nop
 8006a6c:	e7fe      	b.n	8006a6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01e      	beq.n	8006ab4 <xTaskCreateStatic+0xac>
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	9302      	str	r3, [sp, #8]
 8006a96:	f107 0314 	add.w	r3, r7, #20
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f850 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aae:	f000 f8eb 	bl	8006c88 <prvAddNewTaskToReadyList>
 8006ab2:	e001      	b.n	8006ab8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ab8:	697b      	ldr	r3, [r7, #20]
	}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3728      	adds	r7, #40	; 0x28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08c      	sub	sp, #48	; 0x30
 8006ac6:	af04      	add	r7, sp, #16
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 fa16 	bl	8007f08 <pvPortMalloc>
 8006adc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00e      	beq.n	8006b02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae4:	20b4      	movs	r0, #180	; 0xb4
 8006ae6:	f001 fa0f 	bl	8007f08 <pvPortMalloc>
 8006aea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
 8006af8:	e005      	b.n	8006b06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006afa:	6978      	ldr	r0, [r7, #20]
 8006afc:	f001 fad0 	bl	80080a0 <vPortFree>
 8006b00:	e001      	b.n	8006b06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d017      	beq.n	8006b3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	2300      	movs	r3, #0
 8006b18:	9303      	str	r3, [sp, #12]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	9302      	str	r3, [sp, #8]
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68b9      	ldr	r1, [r7, #8]
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f80e 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b30:	69f8      	ldr	r0, [r7, #28]
 8006b32:	f000 f8a9 	bl	8006c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b36:	2301      	movs	r3, #1
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	e002      	b.n	8006b42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b42:	69bb      	ldr	r3, [r7, #24]
	}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b64:	3b01      	subs	r3, #1
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f023 0307 	bic.w	r3, r3, #7
 8006b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	617b      	str	r3, [r7, #20]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01f      	beq.n	8006bda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	e012      	b.n	8006bc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	7819      	ldrb	r1, [r3, #0]
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	3334      	adds	r3, #52	; 0x34
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b0f      	cmp	r3, #15
 8006bca:	d9e9      	bls.n	8006ba0 <prvInitialiseNewTask+0x54>
 8006bcc:	e000      	b.n	8006bd0 <prvInitialiseNewTask+0x84>
			{
				break;
 8006bce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd8:	e003      	b.n	8006be2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b06      	cmp	r3, #6
 8006be6:	d901      	bls.n	8006bec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006be8:	2306      	movs	r3, #6
 8006bea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fea1 	bl	800594a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fe9c 	bl	800594a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	f1c3 0207 	rsb	r2, r3, #7
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	334c      	adds	r3, #76	; 0x4c
 8006c3c:	2260      	movs	r2, #96	; 0x60
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f012 f99a 	bl	8018f7a <memset>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <prvInitialiseNewTask+0x130>)
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <prvInitialiseNewTask+0x134>)
 8006c50:	655a      	str	r2, [r3, #84]	; 0x54
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	4a0b      	ldr	r2, [pc, #44]	; (8006c84 <prvInitialiseNewTask+0x138>)
 8006c56:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f000 ff07 	bl	8007a70 <pxPortInitialiseStack>
 8006c62:	4602      	mov	r2, r0
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	0802840c 	.word	0x0802840c
 8006c80:	0802842c 	.word	0x0802842c
 8006c84:	080283ec 	.word	0x080283ec

08006c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c90:	f001 f818 	bl	8007cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c94:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <prvAddNewTaskToReadyList+0xb8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	4a29      	ldr	r2, [pc, #164]	; (8006d40 <prvAddNewTaskToReadyList+0xb8>)
 8006c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c9e:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ca6:	4a27      	ldr	r2, [pc, #156]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cac:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <prvAddNewTaskToReadyList+0xb8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d110      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cb4:	f000 fbf8 	bl	80074a8 <prvInitialiseTaskLists>
 8006cb8:	e00d      	b.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <prvAddNewTaskToReadyList+0xc0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cc2:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d802      	bhi.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <prvAddNewTaskToReadyList+0xcc>)
 8006d00:	441a      	add	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fe fe2b 	bl	8005964 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d0e:	f001 f809 	bl	8007d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d12:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <prvAddNewTaskToReadyList+0xc0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d207      	bcs.n	8006d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <prvAddNewTaskToReadyList+0xd0>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20005274 	.word	0x20005274
 8006d44:	20005174 	.word	0x20005174
 8006d48:	20005280 	.word	0x20005280
 8006d4c:	20005290 	.word	0x20005290
 8006d50:	2000527c 	.word	0x2000527c
 8006d54:	20005178 	.word	0x20005178
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d017      	beq.n	8006d9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <vTaskDelay+0x60>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <vTaskDelay+0x30>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60bb      	str	r3, [r7, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d8c:	f000 f884 	bl	8006e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d90:	2100      	movs	r1, #0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fe06 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d98:	f000 f88c 	bl	8006eb4 <xTaskResumeAll>
 8006d9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006da4:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <vTaskDelay+0x64>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000529c 	.word	0x2000529c
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	; 0x28
 8006dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dd2:	463a      	mov	r2, r7
 8006dd4:	1d39      	adds	r1, r7, #4
 8006dd6:	f107 0308 	add.w	r3, r7, #8
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7f9 fbf2 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	9202      	str	r2, [sp, #8]
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	2300      	movs	r3, #0
 8006df0:	460a      	mov	r2, r1
 8006df2:	4921      	ldr	r1, [pc, #132]	; (8006e78 <vTaskStartScheduler+0xb4>)
 8006df4:	4821      	ldr	r0, [pc, #132]	; (8006e7c <vTaskStartScheduler+0xb8>)
 8006df6:	f7ff fe07 	bl	8006a08 <xTaskCreateStatic>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <vTaskStartScheduler+0xbc>)
 8006dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e00:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <vTaskStartScheduler+0xbc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e001      	b.n	8006e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d11b      	bne.n	8006e50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	613b      	str	r3, [r7, #16]
}
 8006e2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e2c:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <vTaskStartScheduler+0xc0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	334c      	adds	r3, #76	; 0x4c
 8006e32:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <vTaskStartScheduler+0xc4>)
 8006e34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <vTaskStartScheduler+0xc8>)
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <vTaskStartScheduler+0xcc>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e44:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <vTaskStartScheduler+0xd0>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e4a:	f000 fe99 	bl	8007b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e4e:	e00e      	b.n	8006e6e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d10a      	bne.n	8006e6e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <vTaskStartScheduler+0xa8>
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	0801a5b0 	.word	0x0801a5b0
 8006e7c:	08007479 	.word	0x08007479
 8006e80:	20005298 	.word	0x20005298
 8006e84:	20005174 	.word	0x20005174
 8006e88:	20000034 	.word	0x20000034
 8006e8c:	20005294 	.word	0x20005294
 8006e90:	20005280 	.word	0x20005280
 8006e94:	20005278 	.word	0x20005278

08006e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <vTaskSuspendAll+0x18>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	4a03      	ldr	r2, [pc, #12]	; (8006eb0 <vTaskSuspendAll+0x18>)
 8006ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	2000529c 	.word	0x2000529c

08006eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ec2:	4b41      	ldr	r3, [pc, #260]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	603b      	str	r3, [r7, #0]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ee0:	f000 fef0 	bl	8007cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ee4:	4b38      	ldr	r3, [pc, #224]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	4a37      	ldr	r2, [pc, #220]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eee:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d161      	bne.n	8006fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ef6:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <xTaskResumeAll+0x118>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d05d      	beq.n	8006fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006efe:	e02e      	b.n	8006f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <xTaskResumeAll+0x11c>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fd86 	bl	8005a1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fd81 	bl	8005a1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	2201      	movs	r2, #1
 8006f22:	409a      	lsls	r2, r3
 8006f24:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <xTaskResumeAll+0x120>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <xTaskResumeAll+0x120>)
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <xTaskResumeAll+0x124>)
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7fe fd0d 	bl	8005964 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	4b23      	ldr	r3, [pc, #140]	; (8006fdc <xTaskResumeAll+0x128>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d302      	bcc.n	8006f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f58:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <xTaskResumeAll+0x12c>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <xTaskResumeAll+0x11c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1cc      	bne.n	8006f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f6c:	f000 fb3e 	bl	80075ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f70:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <xTaskResumeAll+0x130>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f7c:	f000 f858 	bl	8007030 <xTaskIncrementTick>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <xTaskResumeAll+0x12c>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f1      	bne.n	8006f7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <xTaskResumeAll+0x130>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <xTaskResumeAll+0x12c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006faa:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <xTaskResumeAll+0x134>)
 8006fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fba:	f000 feb3 	bl	8007d24 <vPortExitCritical>

	return xAlreadyYielded;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	2000529c 	.word	0x2000529c
 8006fcc:	20005274 	.word	0x20005274
 8006fd0:	20005234 	.word	0x20005234
 8006fd4:	2000527c 	.word	0x2000527c
 8006fd8:	20005178 	.word	0x20005178
 8006fdc:	20005174 	.word	0x20005174
 8006fe0:	20005288 	.word	0x20005288
 8006fe4:	20005284 	.word	0x20005284
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <xTaskGetTickCount+0x1c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ff8:	687b      	ldr	r3, [r7, #4]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20005278 	.word	0x20005278

0800700c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007012:	f000 ff39 	bl	8007e88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800701a:	4b04      	ldr	r3, [pc, #16]	; (800702c <xTaskGetTickCountFromISR+0x20>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007020:	683b      	ldr	r3, [r7, #0]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20005278 	.word	0x20005278

08007030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703a:	4b4e      	ldr	r3, [pc, #312]	; (8007174 <xTaskIncrementTick+0x144>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 808e 	bne.w	8007160 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007044:	4b4c      	ldr	r3, [pc, #304]	; (8007178 <xTaskIncrementTick+0x148>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800704c:	4a4a      	ldr	r2, [pc, #296]	; (8007178 <xTaskIncrementTick+0x148>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d120      	bne.n	800709a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007058:	4b48      	ldr	r3, [pc, #288]	; (800717c <xTaskIncrementTick+0x14c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <xTaskIncrementTick+0x48>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	603b      	str	r3, [r7, #0]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskIncrementTick+0x46>
 8007078:	4b40      	ldr	r3, [pc, #256]	; (800717c <xTaskIncrementTick+0x14c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	4b40      	ldr	r3, [pc, #256]	; (8007180 <xTaskIncrementTick+0x150>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3e      	ldr	r2, [pc, #248]	; (800717c <xTaskIncrementTick+0x14c>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4a3e      	ldr	r2, [pc, #248]	; (8007180 <xTaskIncrementTick+0x150>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <xTaskIncrementTick+0x154>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a3c      	ldr	r2, [pc, #240]	; (8007184 <xTaskIncrementTick+0x154>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	f000 faa9 	bl	80075ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <xTaskIncrementTick+0x158>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d348      	bcc.n	8007136 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a4:	4b35      	ldr	r3, [pc, #212]	; (800717c <xTaskIncrementTick+0x14c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	4b36      	ldr	r3, [pc, #216]	; (8007188 <xTaskIncrementTick+0x158>)
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	601a      	str	r2, [r3, #0]
					break;
 80070b6:	e03e      	b.n	8007136 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b30      	ldr	r3, [pc, #192]	; (800717c <xTaskIncrementTick+0x14c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d203      	bcs.n	80070d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d0:	4a2d      	ldr	r2, [pc, #180]	; (8007188 <xTaskIncrementTick+0x158>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070d6:	e02e      	b.n	8007136 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fc9e 	bl	8005a1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fc95 	bl	8005a1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	2201      	movs	r2, #1
 80070fa:	409a      	lsls	r2, r3
 80070fc:	4b23      	ldr	r3, [pc, #140]	; (800718c <xTaskIncrementTick+0x15c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4313      	orrs	r3, r2
 8007102:	4a22      	ldr	r2, [pc, #136]	; (800718c <xTaskIncrementTick+0x15c>)
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4a1f      	ldr	r2, [pc, #124]	; (8007190 <xTaskIncrementTick+0x160>)
 8007114:	441a      	add	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	3304      	adds	r3, #4
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f7fe fc21 	bl	8005964 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <xTaskIncrementTick+0x164>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d3b9      	bcc.n	80070a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007134:	e7b6      	b.n	80070a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007136:	4b17      	ldr	r3, [pc, #92]	; (8007194 <xTaskIncrementTick+0x164>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4914      	ldr	r1, [pc, #80]	; (8007190 <xTaskIncrementTick+0x160>)
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d901      	bls.n	8007152 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <xTaskIncrementTick+0x168>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	e004      	b.n	800716a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <xTaskIncrementTick+0x16c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	4a0d      	ldr	r2, [pc, #52]	; (800719c <xTaskIncrementTick+0x16c>)
 8007168:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	2000529c 	.word	0x2000529c
 8007178:	20005278 	.word	0x20005278
 800717c:	2000522c 	.word	0x2000522c
 8007180:	20005230 	.word	0x20005230
 8007184:	2000528c 	.word	0x2000528c
 8007188:	20005294 	.word	0x20005294
 800718c:	2000527c 	.word	0x2000527c
 8007190:	20005178 	.word	0x20005178
 8007194:	20005174 	.word	0x20005174
 8007198:	20005288 	.word	0x20005288
 800719c:	20005284 	.word	0x20005284

080071a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <vTaskSwitchContext+0xac>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071ae:	4b28      	ldr	r3, [pc, #160]	; (8007250 <vTaskSwitchContext+0xb0>)
 80071b0:	2201      	movs	r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b4:	e044      	b.n	8007240 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80071b6:	4b26      	ldr	r3, [pc, #152]	; (8007250 <vTaskSwitchContext+0xb0>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071bc:	4b25      	ldr	r3, [pc, #148]	; (8007254 <vTaskSwitchContext+0xb4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	fab3 f383 	clz	r3, r3
 80071c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	f1c3 031f 	rsb	r3, r3, #31
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	4921      	ldr	r1, [pc, #132]	; (8007258 <vTaskSwitchContext+0xb8>)
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	607b      	str	r3, [r7, #4]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <vTaskSwitchContext+0x5a>
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <vTaskSwitchContext+0xb8>)
 8007208:	4413      	add	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	3308      	adds	r3, #8
 800721e:	429a      	cmp	r2, r3
 8007220:	d104      	bne.n	800722c <vTaskSwitchContext+0x8c>
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <vTaskSwitchContext+0xbc>)
 8007234:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <vTaskSwitchContext+0xbc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	334c      	adds	r3, #76	; 0x4c
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <vTaskSwitchContext+0xc0>)
 800723e:	6013      	str	r3, [r2, #0]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000529c 	.word	0x2000529c
 8007250:	20005288 	.word	0x20005288
 8007254:	2000527c 	.word	0x2000527c
 8007258:	20005178 	.word	0x20005178
 800725c:	20005174 	.word	0x20005174
 8007260:	20000034 	.word	0x20000034

08007264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	60fb      	str	r3, [r7, #12]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <vTaskPlaceOnEventList+0x44>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3318      	adds	r3, #24
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fe fb8a 	bl	80059ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007298:	2101      	movs	r1, #1
 800729a:	6838      	ldr	r0, [r7, #0]
 800729c:	f000 fb82 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
}
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20005174 	.word	0x20005174

080072ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	60fb      	str	r3, [r7, #12]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	3318      	adds	r3, #24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe fb9e 	bl	8005a1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <xTaskRemoveFromEventList+0xac>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d11c      	bne.n	8007324 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fb95 	bl	8005a1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	2201      	movs	r2, #1
 80072fa:	409a      	lsls	r2, r3
 80072fc:	4b17      	ldr	r3, [pc, #92]	; (800735c <xTaskRemoveFromEventList+0xb0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4313      	orrs	r3, r2
 8007302:	4a16      	ldr	r2, [pc, #88]	; (800735c <xTaskRemoveFromEventList+0xb0>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4a13      	ldr	r2, [pc, #76]	; (8007360 <xTaskRemoveFromEventList+0xb4>)
 8007314:	441a      	add	r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3304      	adds	r3, #4
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f7fe fb21 	bl	8005964 <vListInsertEnd>
 8007322:	e005      	b.n	8007330 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3318      	adds	r3, #24
 8007328:	4619      	mov	r1, r3
 800732a:	480e      	ldr	r0, [pc, #56]	; (8007364 <xTaskRemoveFromEventList+0xb8>)
 800732c:	f7fe fb1a 	bl	8005964 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <xTaskRemoveFromEventList+0xbc>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	429a      	cmp	r2, r3
 800733c:	d905      	bls.n	800734a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800733e:	2301      	movs	r3, #1
 8007340:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007342:	4b0a      	ldr	r3, [pc, #40]	; (800736c <xTaskRemoveFromEventList+0xc0>)
 8007344:	2201      	movs	r2, #1
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	e001      	b.n	800734e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	2000529c 	.word	0x2000529c
 800735c:	2000527c 	.word	0x2000527c
 8007360:	20005178 	.word	0x20005178
 8007364:	20005234 	.word	0x20005234
 8007368:	20005174 	.word	0x20005174
 800736c:	20005288 	.word	0x20005288

08007370 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <vTaskInternalSetTimeOutState+0x24>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <vTaskInternalSetTimeOutState+0x28>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	605a      	str	r2, [r3, #4]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	2000528c 	.word	0x2000528c
 8007398:	20005278 	.word	0x20005278

0800739c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	613b      	str	r3, [r7, #16]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	60fb      	str	r3, [r7, #12]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073de:	f000 fc71 	bl	8007cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073e2:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <xTaskCheckForTimeOut+0xbc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d102      	bne.n	8007402 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	e023      	b.n	800744a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b15      	ldr	r3, [pc, #84]	; (800745c <xTaskCheckForTimeOut+0xc0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d007      	beq.n	800741e <xTaskCheckForTimeOut+0x82>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	e015      	b.n	800744a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	429a      	cmp	r2, r3
 8007426:	d20b      	bcs.n	8007440 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff ff9b 	bl	8007370 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	e004      	b.n	800744a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007446:	2301      	movs	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800744a:	f000 fc6b 	bl	8007d24 <vPortExitCritical>

	return xReturn;
 800744e:	69fb      	ldr	r3, [r7, #28]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20005278 	.word	0x20005278
 800745c:	2000528c 	.word	0x2000528c

08007460 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007464:	4b03      	ldr	r3, [pc, #12]	; (8007474 <vTaskMissedYield+0x14>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
}
 800746a:	bf00      	nop
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	20005288 	.word	0x20005288

08007478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007480:	f000 f852 	bl	8007528 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007484:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <prvIdleTask+0x28>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d9f9      	bls.n	8007480 <prvIdleTask+0x8>
			{
				taskYIELD();
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <prvIdleTask+0x2c>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800749c:	e7f0      	b.n	8007480 <prvIdleTask+0x8>
 800749e:	bf00      	nop
 80074a0:	20005178 	.word	0x20005178
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
 80074b2:	e00c      	b.n	80074ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4a12      	ldr	r2, [pc, #72]	; (8007508 <prvInitialiseTaskLists+0x60>)
 80074c0:	4413      	add	r3, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fa21 	bl	800590a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3301      	adds	r3, #1
 80074cc:	607b      	str	r3, [r7, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b06      	cmp	r3, #6
 80074d2:	d9ef      	bls.n	80074b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074d4:	480d      	ldr	r0, [pc, #52]	; (800750c <prvInitialiseTaskLists+0x64>)
 80074d6:	f7fe fa18 	bl	800590a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074da:	480d      	ldr	r0, [pc, #52]	; (8007510 <prvInitialiseTaskLists+0x68>)
 80074dc:	f7fe fa15 	bl	800590a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074e0:	480c      	ldr	r0, [pc, #48]	; (8007514 <prvInitialiseTaskLists+0x6c>)
 80074e2:	f7fe fa12 	bl	800590a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074e6:	480c      	ldr	r0, [pc, #48]	; (8007518 <prvInitialiseTaskLists+0x70>)
 80074e8:	f7fe fa0f 	bl	800590a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074ec:	480b      	ldr	r0, [pc, #44]	; (800751c <prvInitialiseTaskLists+0x74>)
 80074ee:	f7fe fa0c 	bl	800590a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <prvInitialiseTaskLists+0x78>)
 80074f4:	4a05      	ldr	r2, [pc, #20]	; (800750c <prvInitialiseTaskLists+0x64>)
 80074f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <prvInitialiseTaskLists+0x7c>)
 80074fa:	4a05      	ldr	r2, [pc, #20]	; (8007510 <prvInitialiseTaskLists+0x68>)
 80074fc:	601a      	str	r2, [r3, #0]
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20005178 	.word	0x20005178
 800750c:	20005204 	.word	0x20005204
 8007510:	20005218 	.word	0x20005218
 8007514:	20005234 	.word	0x20005234
 8007518:	20005248 	.word	0x20005248
 800751c:	20005260 	.word	0x20005260
 8007520:	2000522c 	.word	0x2000522c
 8007524:	20005230 	.word	0x20005230

08007528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800752e:	e019      	b.n	8007564 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007530:	f000 fbc8 	bl	8007cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007534:	4b10      	ldr	r3, [pc, #64]	; (8007578 <prvCheckTasksWaitingTermination+0x50>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe fa6c 	bl	8005a1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <prvCheckTasksWaitingTermination+0x54>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3b01      	subs	r3, #1
 800754c:	4a0b      	ldr	r2, [pc, #44]	; (800757c <prvCheckTasksWaitingTermination+0x54>)
 800754e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <prvCheckTasksWaitingTermination+0x58>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3b01      	subs	r3, #1
 8007556:	4a0a      	ldr	r2, [pc, #40]	; (8007580 <prvCheckTasksWaitingTermination+0x58>)
 8007558:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800755a:	f000 fbe3 	bl	8007d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f810 	bl	8007584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007564:	4b06      	ldr	r3, [pc, #24]	; (8007580 <prvCheckTasksWaitingTermination+0x58>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e1      	bne.n	8007530 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20005248 	.word	0x20005248
 800757c:	20005274 	.word	0x20005274
 8007580:	2000525c 	.word	0x2000525c

08007584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	334c      	adds	r3, #76	; 0x4c
 8007590:	4618      	mov	r0, r3
 8007592:	f011 fe21 	bl	80191d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fd7b 	bl	80080a0 <vPortFree>
				vPortFree( pxTCB );
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fd78 	bl	80080a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075b0:	e018      	b.n	80075e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d103      	bne.n	80075c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fd6f 	bl	80080a0 <vPortFree>
	}
 80075c2:	e00f      	b.n	80075e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d00a      	beq.n	80075e4 <prvDeleteTCB+0x60>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	60fb      	str	r3, [r7, #12]
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <prvDeleteTCB+0x5e>
	}
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <prvResetNextTaskUnblockTime+0x38>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <prvResetNextTaskUnblockTime+0x3c>)
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007604:	e008      	b.n	8007618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <prvResetNextTaskUnblockTime+0x38>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	4a04      	ldr	r2, [pc, #16]	; (8007628 <prvResetNextTaskUnblockTime+0x3c>)
 8007616:	6013      	str	r3, [r2, #0]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	2000522c 	.word	0x2000522c
 8007628:	20005294 	.word	0x20005294

0800762c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <xTaskGetSchedulerState+0x34>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800763a:	2301      	movs	r3, #1
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	e008      	b.n	8007652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <xTaskGetSchedulerState+0x38>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007648:	2302      	movs	r3, #2
 800764a:	607b      	str	r3, [r7, #4]
 800764c:	e001      	b.n	8007652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007652:	687b      	ldr	r3, [r7, #4]
	}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20005280 	.word	0x20005280
 8007664:	2000529c 	.word	0x2000529c

08007668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d05e      	beq.n	800773c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <xTaskPriorityInherit+0xe0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	429a      	cmp	r2, r3
 800768a:	d24e      	bcs.n	800772a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	db06      	blt.n	80076a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007694:	4b2c      	ldr	r3, [pc, #176]	; (8007748 <xTaskPriorityInherit+0xe0>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	f1c3 0207 	rsb	r2, r3, #7
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6959      	ldr	r1, [r3, #20]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4a26      	ldr	r2, [pc, #152]	; (800774c <xTaskPriorityInherit+0xe4>)
 80076b4:	4413      	add	r3, r2
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d12f      	bne.n	800771a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3304      	adds	r3, #4
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe f9ad 	bl	8005a1e <uxListRemove>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	2201      	movs	r2, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43da      	mvns	r2, r3
 80076d6:	4b1e      	ldr	r3, [pc, #120]	; (8007750 <xTaskPriorityInherit+0xe8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4013      	ands	r3, r2
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <xTaskPriorityInherit+0xe8>)
 80076de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076e0:	4b19      	ldr	r3, [pc, #100]	; (8007748 <xTaskPriorityInherit+0xe0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	2201      	movs	r2, #1
 80076f0:	409a      	lsls	r2, r3
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <xTaskPriorityInherit+0xe8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	4a15      	ldr	r2, [pc, #84]	; (8007750 <xTaskPriorityInherit+0xe8>)
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4a10      	ldr	r2, [pc, #64]	; (800774c <xTaskPriorityInherit+0xe4>)
 800770a:	441a      	add	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fe f926 	bl	8005964 <vListInsertEnd>
 8007718:	e004      	b.n	8007724 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <xTaskPriorityInherit+0xe0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	e008      	b.n	800773c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <xTaskPriorityInherit+0xe0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	429a      	cmp	r2, r3
 8007736:	d201      	bcs.n	800773c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800773c:	68fb      	ldr	r3, [r7, #12]
	}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20005174 	.word	0x20005174
 800774c:	20005178 	.word	0x20005178
 8007750:	2000527c 	.word	0x2000527c

08007754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d06e      	beq.n	8007848 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800776a:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <xTaskPriorityDisinherit+0x100>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d00a      	beq.n	800778a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	60fb      	str	r3, [r7, #12]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60bb      	str	r3, [r7, #8]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ac:	1e5a      	subs	r2, r3, #1
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d044      	beq.n	8007848 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d140      	bne.n	8007848 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe f927 	bl	8005a1e <uxListRemove>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d115      	bne.n	8007802 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077da:	491f      	ldr	r1, [pc, #124]	; (8007858 <xTaskPriorityDisinherit+0x104>)
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	440b      	add	r3, r1
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xTaskPriorityDisinherit+0xae>
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	2201      	movs	r2, #1
 80077f2:	fa02 f303 	lsl.w	r3, r2, r3
 80077f6:	43da      	mvns	r2, r3
 80077f8:	4b18      	ldr	r3, [pc, #96]	; (800785c <xTaskPriorityDisinherit+0x108>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4013      	ands	r3, r2
 80077fe:	4a17      	ldr	r2, [pc, #92]	; (800785c <xTaskPriorityDisinherit+0x108>)
 8007800:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	f1c3 0207 	rsb	r2, r3, #7
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	2201      	movs	r2, #1
 800781c:	409a      	lsls	r2, r3
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <xTaskPriorityDisinherit+0x108>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4313      	orrs	r3, r2
 8007824:	4a0d      	ldr	r2, [pc, #52]	; (800785c <xTaskPriorityDisinherit+0x108>)
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4a08      	ldr	r2, [pc, #32]	; (8007858 <xTaskPriorityDisinherit+0x104>)
 8007836:	441a      	add	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	3304      	adds	r3, #4
 800783c:	4619      	mov	r1, r3
 800783e:	4610      	mov	r0, r2
 8007840:	f7fe f890 	bl	8005964 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007848:	697b      	ldr	r3, [r7, #20]
	}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20005174 	.word	0x20005174
 8007858:	20005178 	.word	0x20005178
 800785c:	2000527c 	.word	0x2000527c

08007860 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800786e:	2301      	movs	r3, #1
 8007870:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d077      	beq.n	8007968 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d902      	bls.n	80078a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	e002      	b.n	80078ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d058      	beq.n	8007968 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d153      	bne.n	8007968 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078c0:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d10a      	bne.n	80078e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	60bb      	str	r3, [r7, #8]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	db04      	blt.n	80078fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f1c3 0207 	rsb	r2, r3, #7
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6959      	ldr	r1, [r3, #20]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4a19      	ldr	r2, [pc, #100]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800790e:	4413      	add	r3, r2
 8007910:	4299      	cmp	r1, r3
 8007912:	d129      	bne.n	8007968 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3304      	adds	r3, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe f880 	bl	8005a1e <uxListRemove>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	2201      	movs	r2, #1
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43da      	mvns	r2, r3
 8007930:	4b11      	ldr	r3, [pc, #68]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4013      	ands	r3, r2
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007938:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	2201      	movs	r2, #1
 8007940:	409a      	lsls	r2, r3
 8007942:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4313      	orrs	r3, r2
 8007948:	4a0b      	ldr	r2, [pc, #44]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a06      	ldr	r2, [pc, #24]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800795a:	441a      	add	r2, r3
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fd fffe 	bl	8005964 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007968:	bf00      	nop
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20005174 	.word	0x20005174
 8007974:	20005178 	.word	0x20005178
 8007978:	2000527c 	.word	0x2000527c

0800797c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800798e:	3201      	adds	r2, #1
 8007990:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007992:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007994:	681b      	ldr	r3, [r3, #0]
	}
 8007996:	4618      	mov	r0, r3
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	20005174 	.word	0x20005174

080079a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079ae:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b4:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f82f 	bl	8005a1e <uxListRemove>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10b      	bne.n	80079de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	2201      	movs	r2, #1
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <prvAddCurrentTaskToDelayedList+0xb8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4013      	ands	r3, r2
 80079da:	4a20      	ldr	r2, [pc, #128]	; (8007a5c <prvAddCurrentTaskToDelayedList+0xb8>)
 80079dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d10a      	bne.n	80079fc <prvAddCurrentTaskToDelayedList+0x58>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ec:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4619      	mov	r1, r3
 80079f4:	481a      	ldr	r0, [pc, #104]	; (8007a60 <prvAddCurrentTaskToDelayedList+0xbc>)
 80079f6:	f7fd ffb5 	bl	8005964 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079fa:	e026      	b.n	8007a4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a04:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d209      	bcs.n	8007a28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a14:	4b13      	ldr	r3, [pc, #76]	; (8007a64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7fd ffc3 	bl	80059ac <vListInsert>
}
 8007a26:	e010      	b.n	8007a4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7fd ffb9 	bl	80059ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a3a:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d202      	bcs.n	8007a4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a44:	4a09      	ldr	r2, [pc, #36]	; (8007a6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6013      	str	r3, [r2, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20005278 	.word	0x20005278
 8007a58:	20005174 	.word	0x20005174
 8007a5c:	2000527c 	.word	0x2000527c
 8007a60:	20005260 	.word	0x20005260
 8007a64:	20005230 	.word	0x20005230
 8007a68:	2000522c 	.word	0x2000522c
 8007a6c:	20005294 	.word	0x20005294

08007a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3b04      	subs	r3, #4
 8007a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b04      	subs	r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f023 0201 	bic.w	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007aa0:	4a0c      	ldr	r2, [pc, #48]	; (8007ad4 <pxPortInitialiseStack+0x64>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3b14      	subs	r3, #20
 8007aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f06f 0202 	mvn.w	r2, #2
 8007abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3b20      	subs	r3, #32
 8007ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	08007ad9 	.word	0x08007ad9

08007ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ae2:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <prvTaskExitError+0x54>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d00a      	beq.n	8007b02 <prvTaskExitError+0x2a>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <prvTaskExitError+0x28>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	60bb      	str	r3, [r7, #8]
}
 8007b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b16:	bf00      	nop
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0fc      	beq.n	8007b18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	20000020 	.word	0x20000020

08007b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <pxCurrentTCBConst2>)
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	6808      	ldr	r0, [r1, #0]
 8007b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	f380 8809 	msr	PSP, r0
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8811 	msr	BASEPRI, r0
 8007b4a:	4770      	bx	lr
 8007b4c:	f3af 8000 	nop.w

08007b50 <pxCurrentTCBConst2>:
 8007b50:	20005174 	.word	0x20005174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop

08007b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b58:	4808      	ldr	r0, [pc, #32]	; (8007b7c <prvPortStartFirstTask+0x24>)
 8007b5a:	6800      	ldr	r0, [r0, #0]
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f380 8808 	msr	MSP, r0
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8814 	msr	CONTROL, r0
 8007b6a:	b662      	cpsie	i
 8007b6c:	b661      	cpsie	f
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	df00      	svc	0
 8007b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b7a:	bf00      	nop
 8007b7c:	e000ed08 	.word	0xe000ed08

08007b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b86:	4b46      	ldr	r3, [pc, #280]	; (8007ca0 <xPortStartScheduler+0x120>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a46      	ldr	r2, [pc, #280]	; (8007ca4 <xPortStartScheduler+0x124>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d10a      	bne.n	8007ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	613b      	str	r3, [r7, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ba6:	4b3e      	ldr	r3, [pc, #248]	; (8007ca0 <xPortStartScheduler+0x120>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a3f      	ldr	r2, [pc, #252]	; (8007ca8 <xPortStartScheduler+0x128>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10a      	bne.n	8007bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bc6:	4b39      	ldr	r3, [pc, #228]	; (8007cac <xPortStartScheduler+0x12c>)
 8007bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	22ff      	movs	r2, #255	; 0xff
 8007bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	4b31      	ldr	r3, [pc, #196]	; (8007cb0 <xPortStartScheduler+0x130>)
 8007bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bee:	4b31      	ldr	r3, [pc, #196]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bf4:	e009      	b.n	8007c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007bf6:	4b2f      	ldr	r3, [pc, #188]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	4a2d      	ldr	r2, [pc, #180]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d0ef      	beq.n	8007bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c16:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f1c3 0307 	rsb	r3, r3, #7
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d00a      	beq.n	8007c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60bb      	str	r3, [r7, #8]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c38:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c42:	4b1c      	ldr	r3, [pc, #112]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <xPortStartScheduler+0x134>)
 8007c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <xPortStartScheduler+0x138>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a17      	ldr	r2, [pc, #92]	; (8007cb8 <xPortStartScheduler+0x138>)
 8007c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <xPortStartScheduler+0x138>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a14      	ldr	r2, [pc, #80]	; (8007cb8 <xPortStartScheduler+0x138>)
 8007c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c6e:	f000 f8dd 	bl	8007e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <xPortStartScheduler+0x13c>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c78:	f000 f8fc 	bl	8007e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c7c:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <xPortStartScheduler+0x140>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a0f      	ldr	r2, [pc, #60]	; (8007cc0 <xPortStartScheduler+0x140>)
 8007c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c88:	f7ff ff66 	bl	8007b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c8c:	f7ff fa88 	bl	80071a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007c90:	f7ff ff22 	bl	8007ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	e000ed00 	.word	0xe000ed00
 8007ca4:	410fc271 	.word	0x410fc271
 8007ca8:	410fc270 	.word	0x410fc270
 8007cac:	e000e400 	.word	0xe000e400
 8007cb0:	200052a0 	.word	0x200052a0
 8007cb4:	200052a4 	.word	0x200052a4
 8007cb8:	e000ed20 	.word	0xe000ed20
 8007cbc:	20000020 	.word	0x20000020
 8007cc0:	e000ef34 	.word	0xe000ef34

08007cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	607b      	str	r3, [r7, #4]
}
 8007cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <vPortEnterCritical+0x58>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	4a0d      	ldr	r2, [pc, #52]	; (8007d1c <vPortEnterCritical+0x58>)
 8007ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <vPortEnterCritical+0x58>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10f      	bne.n	8007d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <vPortEnterCritical+0x5c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	603b      	str	r3, [r7, #0]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <vPortEnterCritical+0x4a>
	}
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	20000020 	.word	0x20000020
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d2a:	4b12      	ldr	r3, [pc, #72]	; (8007d74 <vPortExitCritical+0x50>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <vPortExitCritical+0x24>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	607b      	str	r3, [r7, #4]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <vPortExitCritical+0x50>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	4a09      	ldr	r2, [pc, #36]	; (8007d74 <vPortExitCritical+0x50>)
 8007d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d52:	4b08      	ldr	r3, [pc, #32]	; (8007d74 <vPortExitCritical+0x50>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <vPortExitCritical+0x42>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	f383 8811 	msr	BASEPRI, r3
}
 8007d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	20000020 	.word	0x20000020
	...

08007d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d80:	f3ef 8009 	mrs	r0, PSP
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <pxCurrentTCBConst>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	f01e 0f10 	tst.w	lr, #16
 8007d90:	bf08      	it	eq
 8007d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	6010      	str	r0, [r2, #0]
 8007d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007da4:	f380 8811 	msr	BASEPRI, r0
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f7ff f9f6 	bl	80071a0 <vTaskSwitchContext>
 8007db4:	f04f 0000 	mov.w	r0, #0
 8007db8:	f380 8811 	msr	BASEPRI, r0
 8007dbc:	bc09      	pop	{r0, r3}
 8007dbe:	6819      	ldr	r1, [r3, #0]
 8007dc0:	6808      	ldr	r0, [r1, #0]
 8007dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc6:	f01e 0f10 	tst.w	lr, #16
 8007dca:	bf08      	it	eq
 8007dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007dd0:	f380 8809 	msr	PSP, r0
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	f3af 8000 	nop.w

08007de0 <pxCurrentTCBConst>:
 8007de0:	20005174 	.word	0x20005174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop

08007de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	607b      	str	r3, [r7, #4]
}
 8007e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e02:	f7ff f915 	bl	8007030 <xTaskIncrementTick>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e0c:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <SysTick_Handler+0x40>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	2300      	movs	r3, #0
 8007e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f383 8811 	msr	BASEPRI, r3
}
 8007e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <vPortSetupTimerInterrupt+0x34>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <vPortSetupTimerInterrupt+0x38>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <vPortSetupTimerInterrupt+0x3c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <vPortSetupTimerInterrupt+0x40>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	099b      	lsrs	r3, r3, #6
 8007e48:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <vPortSetupTimerInterrupt+0x44>)
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e4e:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <vPortSetupTimerInterrupt+0x34>)
 8007e50:	2207      	movs	r2, #7
 8007e52:	601a      	str	r2, [r3, #0]
}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	e000e010 	.word	0xe000e010
 8007e64:	e000e018 	.word	0xe000e018
 8007e68:	20000000 	.word	0x20000000
 8007e6c:	10624dd3 	.word	0x10624dd3
 8007e70:	e000e014 	.word	0xe000e014

08007e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e84 <vPortEnableVFP+0x10>
 8007e78:	6801      	ldr	r1, [r0, #0]
 8007e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e7e:	6001      	str	r1, [r0, #0]
 8007e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e82:	bf00      	nop
 8007e84:	e000ed88 	.word	0xe000ed88

08007e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e8e:	f3ef 8305 	mrs	r3, IPSR
 8007e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b0f      	cmp	r3, #15
 8007e98:	d914      	bls.n	8007ec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e9a:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <vPortValidateInterruptPriority+0x70>)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ea4:	4b15      	ldr	r3, [pc, #84]	; (8007efc <vPortValidateInterruptPriority+0x74>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	7afa      	ldrb	r2, [r7, #11]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d20a      	bcs.n	8007ec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <vPortValidateInterruptPriority+0x78>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <vPortValidateInterruptPriority+0x7c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d90a      	bls.n	8007eea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	603b      	str	r3, [r7, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <vPortValidateInterruptPriority+0x60>
	}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	e000e3f0 	.word	0xe000e3f0
 8007efc:	200052a0 	.word	0x200052a0
 8007f00:	e000ed0c 	.word	0xe000ed0c
 8007f04:	200052a4 	.word	0x200052a4

08007f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08a      	sub	sp, #40	; 0x28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f14:	f7fe ffc0 	bl	8006e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f18:	4b5b      	ldr	r3, [pc, #364]	; (8008088 <pvPortMalloc+0x180>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f20:	f000 f920 	bl	8008164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f24:	4b59      	ldr	r3, [pc, #356]	; (800808c <pvPortMalloc+0x184>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 8093 	bne.w	8008058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01d      	beq.n	8007f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f38:	2208      	movs	r2, #8
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d014      	beq.n	8007f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f023 0307 	bic.w	r3, r3, #7
 8007f50:	3308      	adds	r3, #8
 8007f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <pvPortMalloc+0x6c>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	617b      	str	r3, [r7, #20]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d06e      	beq.n	8008058 <pvPortMalloc+0x150>
 8007f7a:	4b45      	ldr	r3, [pc, #276]	; (8008090 <pvPortMalloc+0x188>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d869      	bhi.n	8008058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f84:	4b43      	ldr	r3, [pc, #268]	; (8008094 <pvPortMalloc+0x18c>)
 8007f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f88:	4b42      	ldr	r3, [pc, #264]	; (8008094 <pvPortMalloc+0x18c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8e:	e004      	b.n	8007f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d903      	bls.n	8007fac <pvPortMalloc+0xa4>
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f1      	bne.n	8007f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fac:	4b36      	ldr	r3, [pc, #216]	; (8008088 <pvPortMalloc+0x180>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d050      	beq.n	8008058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d91f      	bls.n	8008018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <pvPortMalloc+0xf8>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	613b      	str	r3, [r7, #16]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1ad2      	subs	r2, r2, r3
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008012:	69b8      	ldr	r0, [r7, #24]
 8008014:	f000 f908 	bl	8008228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008018:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <pvPortMalloc+0x188>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	4a1b      	ldr	r2, [pc, #108]	; (8008090 <pvPortMalloc+0x188>)
 8008024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008026:	4b1a      	ldr	r3, [pc, #104]	; (8008090 <pvPortMalloc+0x188>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <pvPortMalloc+0x190>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d203      	bcs.n	800803a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008032:	4b17      	ldr	r3, [pc, #92]	; (8008090 <pvPortMalloc+0x188>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a18      	ldr	r2, [pc, #96]	; (8008098 <pvPortMalloc+0x190>)
 8008038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	4b13      	ldr	r3, [pc, #76]	; (800808c <pvPortMalloc+0x184>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	431a      	orrs	r2, r3
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <pvPortMalloc+0x194>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	4a11      	ldr	r2, [pc, #68]	; (800809c <pvPortMalloc+0x194>)
 8008056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008058:	f7fe ff2c 	bl	8006eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <pvPortMalloc+0x174>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60fb      	str	r3, [r7, #12]
}
 8008078:	bf00      	nop
 800807a:	e7fe      	b.n	800807a <pvPortMalloc+0x172>
	return pvReturn;
 800807c:	69fb      	ldr	r3, [r7, #28]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000d2b0 	.word	0x2000d2b0
 800808c:	2000d2c4 	.word	0x2000d2c4
 8008090:	2000d2b4 	.word	0x2000d2b4
 8008094:	2000d2a8 	.word	0x2000d2a8
 8008098:	2000d2b8 	.word	0x2000d2b8
 800809c:	2000d2bc 	.word	0x2000d2bc

080080a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d04d      	beq.n	800814e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080b2:	2308      	movs	r3, #8
 80080b4:	425b      	negs	r3, r3
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4413      	add	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	4b24      	ldr	r3, [pc, #144]	; (8008158 <vPortFree+0xb8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <vPortFree+0x44>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <vPortFree+0x62>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60bb      	str	r3, [r7, #8]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b14      	ldr	r3, [pc, #80]	; (8008158 <vPortFree+0xb8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01e      	beq.n	800814e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d11a      	bne.n	800814e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <vPortFree+0xb8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	43db      	mvns	r3, r3
 8008122:	401a      	ands	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008128:	f7fe feb6 	bl	8006e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4b0a      	ldr	r3, [pc, #40]	; (800815c <vPortFree+0xbc>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4413      	add	r3, r2
 8008136:	4a09      	ldr	r2, [pc, #36]	; (800815c <vPortFree+0xbc>)
 8008138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800813a:	6938      	ldr	r0, [r7, #16]
 800813c:	f000 f874 	bl	8008228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008140:	4b07      	ldr	r3, [pc, #28]	; (8008160 <vPortFree+0xc0>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	4a06      	ldr	r2, [pc, #24]	; (8008160 <vPortFree+0xc0>)
 8008148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800814a:	f7fe feb3 	bl	8006eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800814e:	bf00      	nop
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	2000d2c4 	.word	0x2000d2c4
 800815c:	2000d2b4 	.word	0x2000d2b4
 8008160:	2000d2c0 	.word	0x2000d2c0

08008164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800816a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800816e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008170:	4b27      	ldr	r3, [pc, #156]	; (8008210 <prvHeapInit+0xac>)
 8008172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00c      	beq.n	8008198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3307      	adds	r3, #7
 8008182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	4a1f      	ldr	r2, [pc, #124]	; (8008210 <prvHeapInit+0xac>)
 8008194:	4413      	add	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800819c:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <prvHeapInit+0xb0>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <prvHeapInit+0xb0>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081b0:	2208      	movs	r2, #8
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	1a9b      	subs	r3, r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a15      	ldr	r2, [pc, #84]	; (8008218 <prvHeapInit+0xb4>)
 80081c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <prvHeapInit+0xb4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ce:	4b12      	ldr	r3, [pc, #72]	; (8008218 <prvHeapInit+0xb4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081e4:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <prvHeapInit+0xb4>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4a0a      	ldr	r2, [pc, #40]	; (800821c <prvHeapInit+0xb8>)
 80081f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <prvHeapInit+0xbc>)
 80081fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <prvHeapInit+0xc0>)
 80081fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008202:	601a      	str	r2, [r3, #0]
}
 8008204:	bf00      	nop
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	200052a8 	.word	0x200052a8
 8008214:	2000d2a8 	.word	0x2000d2a8
 8008218:	2000d2b0 	.word	0x2000d2b0
 800821c:	2000d2b8 	.word	0x2000d2b8
 8008220:	2000d2b4 	.word	0x2000d2b4
 8008224:	2000d2c4 	.word	0x2000d2c4

08008228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008230:	4b28      	ldr	r3, [pc, #160]	; (80082d4 <prvInsertBlockIntoFreeList+0xac>)
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e002      	b.n	800823c <prvInsertBlockIntoFreeList+0x14>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d8f7      	bhi.n	8008236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	4413      	add	r3, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d108      	bne.n	800826a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	441a      	add	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	441a      	add	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d118      	bne.n	80082b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b15      	ldr	r3, [pc, #84]	; (80082d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d00d      	beq.n	80082a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	441a      	add	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e008      	b.n	80082b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <prvInsertBlockIntoFreeList+0xb0>)
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e003      	b.n	80082b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d002      	beq.n	80082c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c6:	bf00      	nop
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000d2a8 	.word	0x2000d2a8
 80082d8:	2000d2b0 	.word	0x2000d2b0

080082dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	330c      	adds	r3, #12
 80082ec:	461a      	mov	r2, r3
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f002 fc29 	bl	800ab48 <tcpip_send_msg_wait_sem>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80082fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008308:	e001      	b.n	800830e <netconn_apimsg+0x32>
  }
  return err;
 800830a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08c      	sub	sp, #48	; 0x30
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	603a      	str	r2, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
 8008324:	460b      	mov	r3, r1
 8008326:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	4618      	mov	r0, r3
 800832e:	f001 f95b 	bl	80095e8 <netconn_alloc>
 8008332:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d054      	beq.n	80083e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800833a:	79bb      	ldrb	r3, [r7, #6]
 800833c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008342:	f107 0308 	add.w	r3, r7, #8
 8008346:	4619      	mov	r1, r3
 8008348:	4829      	ldr	r0, [pc, #164]	; (80083f0 <netconn_new_with_proto_and_callback+0xd8>)
 800834a:	f7ff ffc7 	bl	80082dc <netconn_apimsg>
 800834e:	4603      	mov	r3, r0
 8008350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008354:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008358:	2b00      	cmp	r3, #0
 800835a:	d043      	beq.n	80083e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <netconn_new_with_proto_and_callback+0x58>
 8008364:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <netconn_new_with_proto_and_callback+0xdc>)
 8008366:	22a3      	movs	r2, #163	; 0xa3
 8008368:	4923      	ldr	r1, [pc, #140]	; (80083f8 <netconn_new_with_proto_and_callback+0xe0>)
 800836a:	4824      	ldr	r0, [pc, #144]	; (80083fc <netconn_new_with_proto_and_callback+0xe4>)
 800836c:	f010 fea2 	bl	80190b4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	3310      	adds	r3, #16
 8008374:	4618      	mov	r0, r3
 8008376:	f010 fb72 	bl	8018a5e <sys_mbox_valid>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <netconn_new_with_proto_and_callback+0x74>
 8008380:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <netconn_new_with_proto_and_callback+0xdc>)
 8008382:	22a4      	movs	r2, #164	; 0xa4
 8008384:	491e      	ldr	r1, [pc, #120]	; (8008400 <netconn_new_with_proto_and_callback+0xe8>)
 8008386:	481d      	ldr	r0, [pc, #116]	; (80083fc <netconn_new_with_proto_and_callback+0xe4>)
 8008388:	f010 fe94 	bl	80190b4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	3314      	adds	r3, #20
 8008390:	4618      	mov	r0, r3
 8008392:	f010 fb64 	bl	8018a5e <sys_mbox_valid>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <netconn_new_with_proto_and_callback+0x90>
 800839c:	4b15      	ldr	r3, [pc, #84]	; (80083f4 <netconn_new_with_proto_and_callback+0xdc>)
 800839e:	22a6      	movs	r2, #166	; 0xa6
 80083a0:	4918      	ldr	r1, [pc, #96]	; (8008404 <netconn_new_with_proto_and_callback+0xec>)
 80083a2:	4816      	ldr	r0, [pc, #88]	; (80083fc <netconn_new_with_proto_and_callback+0xe4>)
 80083a4:	f010 fe86 	bl	80190b4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	330c      	adds	r3, #12
 80083ac:	4618      	mov	r0, r3
 80083ae:	f010 fbe7 	bl	8018b80 <sys_sem_valid>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d105      	bne.n	80083c4 <netconn_new_with_proto_and_callback+0xac>
 80083b8:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <netconn_new_with_proto_and_callback+0xdc>)
 80083ba:	22a9      	movs	r2, #169	; 0xa9
 80083bc:	4912      	ldr	r1, [pc, #72]	; (8008408 <netconn_new_with_proto_and_callback+0xf0>)
 80083be:	480f      	ldr	r0, [pc, #60]	; (80083fc <netconn_new_with_proto_and_callback+0xe4>)
 80083c0:	f010 fe78 	bl	80190b4 <iprintf>
      sys_sem_free(&conn->op_completed);
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	330c      	adds	r3, #12
 80083c8:	4618      	mov	r0, r3
 80083ca:	f010 fbcc 	bl	8018b66 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	3310      	adds	r3, #16
 80083d2:	4618      	mov	r0, r3
 80083d4:	f010 fabc 	bl	8018950 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80083d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083da:	2007      	movs	r0, #7
 80083dc:	f003 ffb2 	bl	800c344 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	e000      	b.n	80083e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3730      	adds	r7, #48	; 0x30
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	080095bd 	.word	0x080095bd
 80083f4:	0801a5b8 	.word	0x0801a5b8
 80083f8:	0801a5ec 	.word	0x0801a5ec
 80083fc:	0801a610 	.word	0x0801a610
 8008400:	0801a638 	.word	0x0801a638
 8008404:	0801a650 	.word	0x0801a650
 8008408:	0801a674 	.word	0x0801a674

0800840c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e014      	b.n	8008448 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008422:	2329      	movs	r3, #41	; 0x29
 8008424:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008426:	f107 030c 	add.w	r3, r7, #12
 800842a:	4619      	mov	r1, r3
 800842c:	4808      	ldr	r0, [pc, #32]	; (8008450 <netconn_prepare_delete+0x44>)
 800842e:	f7ff ff55 	bl	80082dc <netconn_apimsg>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008438:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <netconn_prepare_delete+0x3a>
    return err;
 8008440:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008444:	e000      	b.n	8008448 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	; 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	08009b29 	.word	0x08009b29

08008454 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <netconn_delete+0x12>
    return ERR_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	e00d      	b.n	8008482 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff ffd0 	bl	800840c <netconn_prepare_delete>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d102      	bne.n	800847e <netconn_delete+0x2a>
    netconn_free(conn);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 f923 	bl	80096c4 <netconn_free>
  }
  return err;
 800847e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08e      	sub	sp, #56	; 0x38
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d109      	bne.n	80084b4 <netconn_bind+0x28>
 80084a0:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <netconn_bind+0x5c>)
 80084a2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80084a6:	4911      	ldr	r1, [pc, #68]	; (80084ec <netconn_bind+0x60>)
 80084a8:	4811      	ldr	r0, [pc, #68]	; (80084f0 <netconn_bind+0x64>)
 80084aa:	f010 fe03 	bl	80190b4 <iprintf>
 80084ae:	f06f 030f 	mvn.w	r3, #15
 80084b2:	e015      	b.n	80084e0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80084ba:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <netconn_bind+0x68>)
 80084bc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80084ca:	f107 0314 	add.w	r3, r7, #20
 80084ce:	4619      	mov	r1, r3
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <netconn_bind+0x6c>)
 80084d2:	f7ff ff03 	bl	80082dc <netconn_apimsg>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80084dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3738      	adds	r7, #56	; 0x38
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	0801a5b8 	.word	0x0801a5b8
 80084ec:	0801a6f0 	.word	0x0801a6f0
 80084f0:	0801a610 	.word	0x0801a610
 80084f4:	080282c8 	.word	0x080282c8
 80084f8:	08009cf1 	.word	0x08009cf1

080084fc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08e      	sub	sp, #56	; 0x38
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	4613      	mov	r3, r2
 8008508:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <netconn_connect+0x28>
 8008510:	4b11      	ldr	r3, [pc, #68]	; (8008558 <netconn_connect+0x5c>)
 8008512:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008516:	4911      	ldr	r1, [pc, #68]	; (800855c <netconn_connect+0x60>)
 8008518:	4811      	ldr	r0, [pc, #68]	; (8008560 <netconn_connect+0x64>)
 800851a:	f010 fdcb 	bl	80190b4 <iprintf>
 800851e:	f06f 030f 	mvn.w	r3, #15
 8008522:	e015      	b.n	8008550 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800852a:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <netconn_connect+0x68>)
 800852c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800853a:	f107 0314 	add.w	r3, r7, #20
 800853e:	4619      	mov	r1, r3
 8008540:	4809      	ldr	r0, [pc, #36]	; (8008568 <netconn_connect+0x6c>)
 8008542:	f7ff fecb 	bl	80082dc <netconn_apimsg>
 8008546:	4603      	mov	r3, r0
 8008548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800854c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008550:	4618      	mov	r0, r3
 8008552:	3738      	adds	r7, #56	; 0x38
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	0801a5b8 	.word	0x0801a5b8
 800855c:	0801a72c 	.word	0x0801a72c
 8008560:	0801a610 	.word	0x0801a610
 8008564:	080282c8 	.word	0x080282c8
 8008568:	08009e85 	.word	0x08009e85

0800856c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08c      	sub	sp, #48	; 0x30
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <netconn_listen_with_backlog+0x26>
 800857e:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <netconn_listen_with_backlog+0x48>)
 8008580:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008584:	490c      	ldr	r1, [pc, #48]	; (80085b8 <netconn_listen_with_backlog+0x4c>)
 8008586:	480d      	ldr	r0, [pc, #52]	; (80085bc <netconn_listen_with_backlog+0x50>)
 8008588:	f010 fd94 	bl	80190b4 <iprintf>
 800858c:	f06f 030f 	mvn.w	r3, #15
 8008590:	e00c      	b.n	80085ac <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008596:	f107 030c 	add.w	r3, r7, #12
 800859a:	4619      	mov	r1, r3
 800859c:	4808      	ldr	r0, [pc, #32]	; (80085c0 <netconn_listen_with_backlog+0x54>)
 800859e:	f7ff fe9d 	bl	80082dc <netconn_apimsg>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80085a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3730      	adds	r7, #48	; 0x30
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	0801a5b8 	.word	0x0801a5b8
 80085b8:	0801a770 	.word	0x0801a770
 80085bc:	0801a610 	.word	0x0801a610
 80085c0:	0800a001 	.word	0x0800a001

080085c4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d109      	bne.n	80085e8 <netconn_accept+0x24>
 80085d4:	4b3d      	ldr	r3, [pc, #244]	; (80086cc <netconn_accept+0x108>)
 80085d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80085da:	493d      	ldr	r1, [pc, #244]	; (80086d0 <netconn_accept+0x10c>)
 80085dc:	483d      	ldr	r0, [pc, #244]	; (80086d4 <netconn_accept+0x110>)
 80085de:	f010 fd69 	bl	80190b4 <iprintf>
 80085e2:	f06f 030f 	mvn.w	r3, #15
 80085e6:	e06c      	b.n	80086c2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <netconn_accept+0x44>
 80085f4:	4b35      	ldr	r3, [pc, #212]	; (80086cc <netconn_accept+0x108>)
 80085f6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80085fa:	4937      	ldr	r1, [pc, #220]	; (80086d8 <netconn_accept+0x114>)
 80085fc:	4835      	ldr	r0, [pc, #212]	; (80086d4 <netconn_accept+0x110>)
 80085fe:	f010 fd59 	bl	80190b4 <iprintf>
 8008602:	f06f 030f 	mvn.w	r3, #15
 8008606:	e05c      	b.n	80086c2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fb6c 	bl	8008ce6 <netconn_err>
 800860e:	4603      	mov	r3, r0
 8008610:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008612:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800861a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800861e:	e050      	b.n	80086c2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3314      	adds	r3, #20
 8008624:	4618      	mov	r0, r3
 8008626:	f010 fa1a 	bl	8018a5e <sys_mbox_valid>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d005      	beq.n	800863c <netconn_accept+0x78>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7f1b      	ldrb	r3, [r3, #28]
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800863c:	f06f 030e 	mvn.w	r3, #14
 8008640:	e03f      	b.n	80086c2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7f1b      	ldrb	r3, [r3, #28]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00e      	beq.n	800866c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3314      	adds	r3, #20
 8008652:	f107 020c 	add.w	r2, r7, #12
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f010 f9e4 	bl	8018a26 <sys_arch_mbox_tryfetch>
 800865e:	4603      	mov	r3, r0
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d10a      	bne.n	800867c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008666:	f06f 0306 	mvn.w	r3, #6
 800866a:	e02a      	b.n	80086c2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3314      	adds	r3, #20
 8008670:	f107 010c 	add.w	r1, r7, #12
 8008674:	2200      	movs	r2, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f010 f996 	bl	80189a8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <netconn_accept+0xcc>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2200      	movs	r2, #0
 800868a:	2101      	movs	r1, #1
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f107 0213 	add.w	r2, r7, #19
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fb75 	bl	8008d88 <lwip_netconn_is_err_msg>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80086a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086a8:	e00b      	b.n	80086c2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80086b0:	f06f 030e 	mvn.w	r3, #14
 80086b4:	e005      	b.n	80086c2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80086c0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	0801a5b8 	.word	0x0801a5b8
 80086d0:	0801a790 	.word	0x0801a790
 80086d4:	0801a610 	.word	0x0801a610
 80086d8:	0801a7b0 	.word	0x0801a7b0

080086dc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d109      	bne.n	8008708 <netconn_recv_data+0x2c>
 80086f4:	4b58      	ldr	r3, [pc, #352]	; (8008858 <netconn_recv_data+0x17c>)
 80086f6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80086fa:	4958      	ldr	r1, [pc, #352]	; (800885c <netconn_recv_data+0x180>)
 80086fc:	4858      	ldr	r0, [pc, #352]	; (8008860 <netconn_recv_data+0x184>)
 80086fe:	f010 fcd9 	bl	80190b4 <iprintf>
 8008702:	f06f 030f 	mvn.w	r3, #15
 8008706:	e0a2      	b.n	800884e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <netconn_recv_data+0x4c>
 8008714:	4b50      	ldr	r3, [pc, #320]	; (8008858 <netconn_recv_data+0x17c>)
 8008716:	f240 224a 	movw	r2, #586	; 0x24a
 800871a:	4952      	ldr	r1, [pc, #328]	; (8008864 <netconn_recv_data+0x188>)
 800871c:	4850      	ldr	r0, [pc, #320]	; (8008860 <netconn_recv_data+0x184>)
 800871e:	f010 fcc9 	bl	80190b4 <iprintf>
 8008722:	f06f 030f 	mvn.w	r3, #15
 8008726:	e092      	b.n	800884e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3310      	adds	r3, #16
 800872c:	4618      	mov	r0, r3
 800872e:	f010 f996 	bl	8018a5e <sys_mbox_valid>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10e      	bne.n	8008756 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 fad4 	bl	8008ce6 <netconn_err>
 800873e:	4603      	mov	r3, r0
 8008740:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008742:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800874a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800874e:	e07e      	b.n	800884e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008750:	f06f 030a 	mvn.w	r3, #10
 8008754:	e07b      	b.n	800884e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	7f1b      	ldrb	r3, [r3, #28]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10f      	bne.n	8008782 <netconn_recv_data+0xa6>
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	7f1b      	ldrb	r3, [r3, #28]
 8008770:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d023      	beq.n	80087ca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3310      	adds	r3, #16
 8008786:	f107 0218 	add.w	r2, r7, #24
 800878a:	4611      	mov	r1, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f010 f94a 	bl	8018a26 <sys_arch_mbox_tryfetch>
 8008792:	4603      	mov	r3, r0
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d11f      	bne.n	80087da <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 faa3 	bl	8008ce6 <netconn_err>
 80087a0:	4603      	mov	r3, r0
 80087a2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80087a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80087ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80087b0:	e04d      	b.n	800884e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	7f1b      	ldrb	r3, [r3, #28]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80087be:	f06f 030a 	mvn.w	r3, #10
 80087c2:	e044      	b.n	800884e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80087c4:	f06f 0306 	mvn.w	r3, #6
 80087c8:	e041      	b.n	800884e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3310      	adds	r3, #16
 80087ce:	f107 0118 	add.w	r1, r7, #24
 80087d2:	2200      	movs	r2, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f010 f8e7 	bl	80189a8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087e2:	2b10      	cmp	r3, #16
 80087e4:	d117      	bne.n	8008816 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	f107 0217 	add.w	r2, r7, #23
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 faca 	bl	8008d88 <lwip_netconn_is_err_msg>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80087fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087fe:	f113 0f0f 	cmn.w	r3, #15
 8008802:	d101      	bne.n	8008808 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	e022      	b.n	800884e <netconn_recv_data+0x172>
      }
      return err;
 8008808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800880c:	e01f      	b.n	800884e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	891b      	ldrh	r3, [r3, #8]
 8008812:	83fb      	strh	r3, [r7, #30]
 8008814:	e00d      	b.n	8008832 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <netconn_recv_data+0x14e>
 800881c:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <netconn_recv_data+0x17c>)
 800881e:	f240 2291 	movw	r2, #657	; 0x291
 8008822:	4911      	ldr	r1, [pc, #68]	; (8008868 <netconn_recv_data+0x18c>)
 8008824:	480e      	ldr	r0, [pc, #56]	; (8008860 <netconn_recv_data+0x184>)
 8008826:	f010 fc45 	bl	80190b4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	891b      	ldrh	r3, [r3, #8]
 8008830:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <netconn_recv_data+0x16a>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	8bfa      	ldrh	r2, [r7, #30]
 8008840:	2101      	movs	r1, #1
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3720      	adds	r7, #32
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	0801a5b8 	.word	0x0801a5b8
 800885c:	0801a7d0 	.word	0x0801a7d0
 8008860:	0801a610 	.word	0x0801a610
 8008864:	0801a7f0 	.word	0x0801a7f0
 8008868:	0801a80c 	.word	0x0801a80c

0800886c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <netconn_tcp_recvd_msg+0x1e>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008886:	2b10      	cmp	r3, #16
 8008888:	d009      	beq.n	800889e <netconn_tcp_recvd_msg+0x32>
 800888a:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <netconn_tcp_recvd_msg+0x50>)
 800888c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008890:	490b      	ldr	r1, [pc, #44]	; (80088c0 <netconn_tcp_recvd_msg+0x54>)
 8008892:	480c      	ldr	r0, [pc, #48]	; (80088c4 <netconn_tcp_recvd_msg+0x58>)
 8008894:	f010 fc0e 	bl	80190b4 <iprintf>
 8008898:	f06f 030f 	mvn.w	r3, #15
 800889c:	e00a      	b.n	80088b4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4806      	ldr	r0, [pc, #24]	; (80088c8 <netconn_tcp_recvd_msg+0x5c>)
 80088ae:	f7ff fd15 	bl	80082dc <netconn_apimsg>
 80088b2:	4603      	mov	r3, r0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	0801a5b8 	.word	0x0801a5b8
 80088c0:	0801a818 	.word	0x0801a818
 80088c4:	0801a610 	.word	0x0801a610
 80088c8:	0800a131 	.word	0x0800a131

080088cc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b090      	sub	sp, #64	; 0x40
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3310      	adds	r3, #16
 80088de:	4618      	mov	r0, r3
 80088e0:	f010 f8bd 	bl	8018a5e <sys_mbox_valid>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80088ea:	f06f 030a 	mvn.w	r3, #10
 80088ee:	e06d      	b.n	80089cc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	7f1b      	ldrb	r3, [r3, #28]
 80088f4:	b25b      	sxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da07      	bge.n	800890a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	7f1b      	ldrb	r3, [r3, #28]
 80088fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008902:	b2da      	uxtb	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008908:	e039      	b.n	800897e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	461a      	mov	r2, r3
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff fee3 	bl	80086dc <netconn_recv_data>
 8008916:	4603      	mov	r3, r0
 8008918:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800891c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008924:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008928:	e050      	b.n	80089cc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10e      	bne.n	8008958 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <netconn_recv_data_tcp+0x7a>
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	891b      	ldrh	r3, [r3, #8]
 8008944:	e000      	b.n	8008948 <netconn_recv_data_tcp+0x7c>
 8008946:	2301      	movs	r3, #1
 8008948:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800894a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800894c:	f107 0214 	add.w	r2, r7, #20
 8008950:	4619      	mov	r1, r3
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff ff8a 	bl	800886c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	2b00      	cmp	r3, #0
 800895c:	d134      	bne.n	80089c8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d009      	beq.n	800897c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	7f1b      	ldrb	r3, [r3, #28]
 800896c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008970:	b2da      	uxtb	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008976:	f06f 0306 	mvn.w	r3, #6
 800897a:	e027      	b.n	80089cc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800897c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <netconn_recv_data_tcp+0xc6>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2200      	movs	r2, #0
 800898c:	2101      	movs	r1, #1
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10f      	bne.n	80089ba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f9a3 	bl	8008ce6 <netconn_err>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80089a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <netconn_recv_data_tcp+0xe8>
          return err;
 80089ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089b2:	e00b      	b.n	80089cc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80089b4:	f06f 030d 	mvn.w	r3, #13
 80089b8:	e008      	b.n	80089cc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80089ba:	2101      	movs	r1, #1
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f955 	bl	8008c6c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80089c2:	f06f 030e 	mvn.w	r3, #14
 80089c6:	e001      	b.n	80089cc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80089c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3740      	adds	r7, #64	; 0x40
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <netconn_recv+0x28>
 80089e8:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <netconn_recv+0xe0>)
 80089ea:	f240 3263 	movw	r2, #867	; 0x363
 80089ee:	4932      	ldr	r1, [pc, #200]	; (8008ab8 <netconn_recv+0xe4>)
 80089f0:	4832      	ldr	r0, [pc, #200]	; (8008abc <netconn_recv+0xe8>)
 80089f2:	f010 fb5f 	bl	80190b4 <iprintf>
 80089f6:	f06f 030f 	mvn.w	r3, #15
 80089fa:	e056      	b.n	8008aaa <netconn_recv+0xd6>
  *new_buf = NULL;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d109      	bne.n	8008a1c <netconn_recv+0x48>
 8008a08:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <netconn_recv+0xe0>)
 8008a0a:	f240 3265 	movw	r2, #869	; 0x365
 8008a0e:	492c      	ldr	r1, [pc, #176]	; (8008ac0 <netconn_recv+0xec>)
 8008a10:	482a      	ldr	r0, [pc, #168]	; (8008abc <netconn_recv+0xe8>)
 8008a12:	f010 fb4f 	bl	80190b4 <iprintf>
 8008a16:	f06f 030f 	mvn.w	r3, #15
 8008a1a:	e046      	b.n	8008aaa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d13a      	bne.n	8008a9e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008a2c:	2006      	movs	r0, #6
 8008a2e:	f003 fc13 	bl	800c258 <memp_malloc>
 8008a32:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <netconn_recv+0x6c>
      return ERR_MEM;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3e:	e034      	b.n	8008aaa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008a40:	f107 030c 	add.w	r3, r7, #12
 8008a44:	2200      	movs	r2, #0
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ff3f 	bl	80088cc <netconn_recv_data_tcp>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008a52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d006      	beq.n	8008a68 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008a5a:	6979      	ldr	r1, [r7, #20]
 8008a5c:	2006      	movs	r0, #6
 8008a5e:	f003 fc71 	bl	800c344 <memp_free>
      return err;
 8008a62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a66:	e020      	b.n	8008aaa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <netconn_recv+0xa8>
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <netconn_recv+0xe0>)
 8008a70:	f240 3279 	movw	r2, #889	; 0x379
 8008a74:	4913      	ldr	r1, [pc, #76]	; (8008ac4 <netconn_recv+0xf0>)
 8008a76:	4811      	ldr	r0, [pc, #68]	; (8008abc <netconn_recv+0xe8>)
 8008a78:	f010 fb1c 	bl	80190b4 <iprintf>

    buf->p = p;
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e005      	b.n	8008aaa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff fe1a 	bl	80086dc <netconn_recv_data>
 8008aa8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	0801a5b8 	.word	0x0801a5b8
 8008ab8:	0801a7d0 	.word	0x0801a7d0
 8008abc:	0801a610 	.word	0x0801a610
 8008ac0:	0801a7f0 	.word	0x0801a7f0
 8008ac4:	0801a868 	.word	0x0801a868

08008ac8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008ade:	78fa      	ldrb	r2, [r7, #3]
 8008ae0:	f107 0110 	add.w	r1, r7, #16
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	2201      	movs	r2, #1
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 f805 	bl	8008afc <netconn_write_vectors_partly>
 8008af2:	4603      	mov	r3, r0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b092      	sub	sp, #72	; 0x48
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	4611      	mov	r1, r2
 8008b08:	461a      	mov	r2, r3
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	80fb      	strh	r3, [r7, #6]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <netconn_write_vectors_partly+0x30>
 8008b18:	4b4e      	ldr	r3, [pc, #312]	; (8008c54 <netconn_write_vectors_partly+0x158>)
 8008b1a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b1e:	494e      	ldr	r1, [pc, #312]	; (8008c58 <netconn_write_vectors_partly+0x15c>)
 8008b20:	484e      	ldr	r0, [pc, #312]	; (8008c5c <netconn_write_vectors_partly+0x160>)
 8008b22:	f010 fac7 	bl	80190b4 <iprintf>
 8008b26:	f06f 030f 	mvn.w	r3, #15
 8008b2a:	e08e      	b.n	8008c4a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d009      	beq.n	8008b4c <netconn_write_vectors_partly+0x50>
 8008b38:	4b46      	ldr	r3, [pc, #280]	; (8008c54 <netconn_write_vectors_partly+0x158>)
 8008b3a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008b3e:	4948      	ldr	r1, [pc, #288]	; (8008c60 <netconn_write_vectors_partly+0x164>)
 8008b40:	4846      	ldr	r0, [pc, #280]	; (8008c5c <netconn_write_vectors_partly+0x160>)
 8008b42:	f010 fab7 	bl	80190b4 <iprintf>
 8008b46:	f06f 0305 	mvn.w	r3, #5
 8008b4a:	e07e      	b.n	8008c4a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	7f1b      	ldrb	r3, [r3, #28]
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <netconn_write_vectors_partly+0x66>
 8008b58:	797b      	ldrb	r3, [r7, #5]
 8008b5a:	f003 0304 	and.w	r3, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <netconn_write_vectors_partly+0x6a>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <netconn_write_vectors_partly+0x6c>
 8008b66:	2300      	movs	r3, #0
 8008b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <netconn_write_vectors_partly+0x84>
 8008b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008b7a:	f06f 0305 	mvn.w	r3, #5
 8008b7e:	e064      	b.n	8008c4a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008b84:	2300      	movs	r3, #0
 8008b86:	643b      	str	r3, [r7, #64]	; 0x40
 8008b88:	e015      	b.n	8008bb6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	4413      	add	r3, r2
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b96:	4413      	add	r3, r2
 8008b98:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d202      	bcs.n	8008bb0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008baa:	f06f 0305 	mvn.w	r3, #5
 8008bae:	e04c      	b.n	8008c4a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	dbe5      	blt.n	8008b8a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e040      	b.n	8008c4a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da0a      	bge.n	8008be4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008bd4:	f06f 0305 	mvn.w	r3, #5
 8008bd8:	e037      	b.n	8008c4a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008bda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008bde:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008bf4:	797b      	ldrb	r3, [r7, #5]
 8008bf6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008c02:	f107 0314 	add.w	r3, r7, #20
 8008c06:	4619      	mov	r1, r3
 8008c08:	4816      	ldr	r0, [pc, #88]	; (8008c64 <netconn_write_vectors_partly+0x168>)
 8008c0a:	f7ff fb67 	bl	80082dc <netconn_apimsg>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008c14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d114      	bne.n	8008c46 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c26:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008c28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d006      	beq.n	8008c46 <netconn_write_vectors_partly+0x14a>
 8008c38:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <netconn_write_vectors_partly+0x158>)
 8008c3a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008c3e:	490a      	ldr	r1, [pc, #40]	; (8008c68 <netconn_write_vectors_partly+0x16c>)
 8008c40:	4806      	ldr	r0, [pc, #24]	; (8008c5c <netconn_write_vectors_partly+0x160>)
 8008c42:	f010 fa37 	bl	80190b4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008c46:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3748      	adds	r7, #72	; 0x48
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	0801a5b8 	.word	0x0801a5b8
 8008c58:	0801a890 	.word	0x0801a890
 8008c5c:	0801a610 	.word	0x0801a610
 8008c60:	0801a8ac 	.word	0x0801a8ac
 8008c64:	0800a535 	.word	0x0800a535
 8008c68:	0801a8d0 	.word	0x0801a8d0

08008c6c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	; 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <netconn_close_shutdown+0x26>
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <netconn_close_shutdown+0x50>)
 8008c80:	f240 4247 	movw	r2, #1095	; 0x447
 8008c84:	490e      	ldr	r1, [pc, #56]	; (8008cc0 <netconn_close_shutdown+0x54>)
 8008c86:	480f      	ldr	r0, [pc, #60]	; (8008cc4 <netconn_close_shutdown+0x58>)
 8008c88:	f010 fa14 	bl	80190b4 <iprintf>
 8008c8c:	f06f 030f 	mvn.w	r3, #15
 8008c90:	e010      	b.n	8008cb4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008c9a:	2329      	movs	r3, #41	; 0x29
 8008c9c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <netconn_close_shutdown+0x5c>)
 8008ca6:	f7ff fb19 	bl	80082dc <netconn_apimsg>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008cb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3730      	adds	r7, #48	; 0x30
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	0801a5b8 	.word	0x0801a5b8
 8008cc0:	0801a8f4 	.word	0x0801a8f4
 8008cc4:	0801a610 	.word	0x0801a610
 8008cc8:	0800a64d 	.word	0x0800a64d

08008ccc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008cd4:	2103      	movs	r1, #3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff ffc8 	bl	8008c6c <netconn_close_shutdown>
 8008cdc:	4603      	mov	r3, r0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <netconn_err+0x12>
    return ERR_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e00d      	b.n	8008d14 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008cf8:	f00f ffcc 	bl	8018c94 <sys_arch_protect>
 8008cfc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7a1b      	ldrb	r3, [r3, #8]
 8008d02:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f00f ffd0 	bl	8018cb0 <sys_arch_unprotect>
  return err;
 8008d10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d2a:	f113 0f0d 	cmn.w	r3, #13
 8008d2e:	d009      	beq.n	8008d44 <lwip_netconn_err_to_msg+0x28>
 8008d30:	f113 0f0d 	cmn.w	r3, #13
 8008d34:	dc0c      	bgt.n	8008d50 <lwip_netconn_err_to_msg+0x34>
 8008d36:	f113 0f0f 	cmn.w	r3, #15
 8008d3a:	d007      	beq.n	8008d4c <lwip_netconn_err_to_msg+0x30>
 8008d3c:	f113 0f0e 	cmn.w	r3, #14
 8008d40:	d002      	beq.n	8008d48 <lwip_netconn_err_to_msg+0x2c>
 8008d42:	e005      	b.n	8008d50 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <lwip_netconn_err_to_msg+0x54>)
 8008d46:	e00e      	b.n	8008d66 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <lwip_netconn_err_to_msg+0x58>)
 8008d4a:	e00c      	b.n	8008d66 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008d4c:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <lwip_netconn_err_to_msg+0x5c>)
 8008d4e:	e00a      	b.n	8008d66 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <lwip_netconn_err_to_msg+0x48>
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <lwip_netconn_err_to_msg+0x60>)
 8008d5a:	227d      	movs	r2, #125	; 0x7d
 8008d5c:	4908      	ldr	r1, [pc, #32]	; (8008d80 <lwip_netconn_err_to_msg+0x64>)
 8008d5e:	4809      	ldr	r0, [pc, #36]	; (8008d84 <lwip_netconn_err_to_msg+0x68>)
 8008d60:	f010 f9a8 	bl	80190b4 <iprintf>
      return NULL;
 8008d64:	2300      	movs	r3, #0
  }
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	0801e06c 	.word	0x0801e06c
 8008d74:	0801e06d 	.word	0x0801e06d
 8008d78:	0801e06e 	.word	0x0801e06e
 8008d7c:	0801a910 	.word	0x0801a910
 8008d80:	0801a944 	.word	0x0801a944
 8008d84:	0801a954 	.word	0x0801a954

08008d88 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <lwip_netconn_is_err_msg+0x1c>
 8008d98:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <lwip_netconn_is_err_msg+0x5c>)
 8008d9a:	2285      	movs	r2, #133	; 0x85
 8008d9c:	4912      	ldr	r1, [pc, #72]	; (8008de8 <lwip_netconn_is_err_msg+0x60>)
 8008d9e:	4813      	ldr	r0, [pc, #76]	; (8008dec <lwip_netconn_is_err_msg+0x64>)
 8008da0:	f010 f988 	bl	80190b4 <iprintf>

  if (msg == &netconn_aborted) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <lwip_netconn_is_err_msg+0x68>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d104      	bne.n	8008db6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	22f3      	movs	r2, #243	; 0xf3
 8008db0:	701a      	strb	r2, [r3, #0]
    return 1;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e012      	b.n	8008ddc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a0e      	ldr	r2, [pc, #56]	; (8008df4 <lwip_netconn_is_err_msg+0x6c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d104      	bne.n	8008dc8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	22f2      	movs	r2, #242	; 0xf2
 8008dc2:	701a      	strb	r2, [r3, #0]
    return 1;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e009      	b.n	8008ddc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a0b      	ldr	r2, [pc, #44]	; (8008df8 <lwip_netconn_is_err_msg+0x70>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d104      	bne.n	8008dda <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	22f1      	movs	r2, #241	; 0xf1
 8008dd4:	701a      	strb	r2, [r3, #0]
    return 1;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e000      	b.n	8008ddc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	0801a910 	.word	0x0801a910
 8008de8:	0801a97c 	.word	0x0801a97c
 8008dec:	0801a954 	.word	0x0801a954
 8008df0:	0801e06c 	.word	0x0801e06c
 8008df4:	0801e06d 	.word	0x0801e06d
 8008df8:	0801e06e 	.word	0x0801e06e

08008dfc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d105      	bne.n	8008e1c <recv_udp+0x20>
 8008e10:	4b34      	ldr	r3, [pc, #208]	; (8008ee4 <recv_udp+0xe8>)
 8008e12:	22e5      	movs	r2, #229	; 0xe5
 8008e14:	4934      	ldr	r1, [pc, #208]	; (8008ee8 <recv_udp+0xec>)
 8008e16:	4835      	ldr	r0, [pc, #212]	; (8008eec <recv_udp+0xf0>)
 8008e18:	f010 f94c 	bl	80190b4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d105      	bne.n	8008e2e <recv_udp+0x32>
 8008e22:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <recv_udp+0xe8>)
 8008e24:	22e6      	movs	r2, #230	; 0xe6
 8008e26:	4932      	ldr	r1, [pc, #200]	; (8008ef0 <recv_udp+0xf4>)
 8008e28:	4830      	ldr	r0, [pc, #192]	; (8008eec <recv_udp+0xf0>)
 8008e2a:	f010 f943 	bl	80190b4 <iprintf>
  conn = (struct netconn *)arg;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d103      	bne.n	8008e40 <recv_udp+0x44>
    pbuf_free(p);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f004 f933 	bl	800d0a4 <pbuf_free>
    return;
 8008e3e:	e04d      	b.n	8008edc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d005      	beq.n	8008e56 <recv_udp+0x5a>
 8008e4a:	4b26      	ldr	r3, [pc, #152]	; (8008ee4 <recv_udp+0xe8>)
 8008e4c:	22ee      	movs	r2, #238	; 0xee
 8008e4e:	4929      	ldr	r1, [pc, #164]	; (8008ef4 <recv_udp+0xf8>)
 8008e50:	4826      	ldr	r0, [pc, #152]	; (8008eec <recv_udp+0xf0>)
 8008e52:	f010 f92f 	bl	80190b4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	3310      	adds	r3, #16
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f00f fdff 	bl	8018a5e <sys_mbox_valid>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f004 f91c 	bl	800d0a4 <pbuf_free>
    return;
 8008e6c:	e036      	b.n	8008edc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008e6e:	2006      	movs	r0, #6
 8008e70:	f003 f9f2 	bl	800c258 <memp_malloc>
 8008e74:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <recv_udp+0x88>
    pbuf_free(p);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f004 f911 	bl	800d0a4 <pbuf_free>
    return;
 8008e82:	e02b      	b.n	8008edc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <recv_udp+0xa0>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	e000      	b.n	8008e9e <recv_udp+0xa2>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ea6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	891b      	ldrh	r3, [r3, #8]
 8008eac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	3310      	adds	r3, #16
 8008eb2:	69b9      	ldr	r1, [r7, #24]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f00f fd5d 	bl	8018974 <sys_mbox_trypost>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008ec0:	69b8      	ldr	r0, [r7, #24]
 8008ec2:	f001 fc4f 	bl	800a764 <netbuf_delete>
    return;
 8008ec6:	e009      	b.n	8008edc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <recv_udp+0xe0>
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	8afa      	ldrh	r2, [r7, #22]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	69f8      	ldr	r0, [r7, #28]
 8008eda:	4798      	blx	r3
  }
}
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0801a910 	.word	0x0801a910
 8008ee8:	0801a988 	.word	0x0801a988
 8008eec:	0801a954 	.word	0x0801a954
 8008ef0:	0801a9ac 	.word	0x0801a9ac
 8008ef4:	0801a9cc 	.word	0x0801a9cc

08008ef8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <recv_tcp+0x22>
 8008f0c:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <recv_tcp+0xf0>)
 8008f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f12:	4936      	ldr	r1, [pc, #216]	; (8008fec <recv_tcp+0xf4>)
 8008f14:	4836      	ldr	r0, [pc, #216]	; (8008ff0 <recv_tcp+0xf8>)
 8008f16:	f010 f8cd 	bl	80190b4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d106      	bne.n	8008f2e <recv_tcp+0x36>
 8008f20:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <recv_tcp+0xf0>)
 8008f22:	f240 122d 	movw	r2, #301	; 0x12d
 8008f26:	4933      	ldr	r1, [pc, #204]	; (8008ff4 <recv_tcp+0xfc>)
 8008f28:	4831      	ldr	r0, [pc, #196]	; (8008ff0 <recv_tcp+0xf8>)
 8008f2a:	f010 f8c3 	bl	80190b4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <recv_tcp+0x4c>
 8008f36:	4b2c      	ldr	r3, [pc, #176]	; (8008fe8 <recv_tcp+0xf0>)
 8008f38:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008f3c:	492e      	ldr	r1, [pc, #184]	; (8008ff8 <recv_tcp+0x100>)
 8008f3e:	482c      	ldr	r0, [pc, #176]	; (8008ff0 <recv_tcp+0xf8>)
 8008f40:	f010 f8b8 	bl	80190b4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <recv_tcp+0x5c>
    return ERR_VAL;
 8008f4e:	f06f 0305 	mvn.w	r3, #5
 8008f52:	e045      	b.n	8008fe0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d006      	beq.n	8008f6c <recv_tcp+0x74>
 8008f5e:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <recv_tcp+0xf0>)
 8008f60:	f240 1235 	movw	r2, #309	; 0x135
 8008f64:	4925      	ldr	r1, [pc, #148]	; (8008ffc <recv_tcp+0x104>)
 8008f66:	4822      	ldr	r0, [pc, #136]	; (8008ff0 <recv_tcp+0xf8>)
 8008f68:	f010 f8a4 	bl	80190b4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	3310      	adds	r3, #16
 8008f70:	4618      	mov	r0, r3
 8008f72:	f00f fd74 	bl	8018a5e <sys_mbox_valid>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10d      	bne.n	8008f98 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	891b      	ldrh	r3, [r3, #8]
 8008f86:	4619      	mov	r1, r3
 8008f88:	68b8      	ldr	r0, [r7, #8]
 8008f8a:	f005 f865 	bl	800e058 <tcp_recved>
      pbuf_free(p);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f004 f888 	bl	800d0a4 <pbuf_free>
    }
    return ERR_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e023      	b.n	8008fe0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <recv_tcp+0xb2>
    msg = p;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	891b      	ldrh	r3, [r3, #8]
 8008fa6:	83fb      	strh	r3, [r7, #30]
 8008fa8:	e003      	b.n	8008fb2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008faa:	4b15      	ldr	r3, [pc, #84]	; (8009000 <recv_tcp+0x108>)
 8008fac:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	69b9      	ldr	r1, [r7, #24]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f00f fcdb 	bl	8018974 <sys_mbox_trypost>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	e00a      	b.n	8008fe0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <recv_tcp+0xe6>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	8bfa      	ldrh	r2, [r7, #30]
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6978      	ldr	r0, [r7, #20]
 8008fdc:	4798      	blx	r3
  }

  return ERR_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	0801a910 	.word	0x0801a910
 8008fec:	0801a9ec 	.word	0x0801a9ec
 8008ff0:	0801a954 	.word	0x0801a954
 8008ff4:	0801aa10 	.word	0x0801aa10
 8008ff8:	0801aa30 	.word	0x0801aa30
 8008ffc:	0801aa48 	.word	0x0801aa48
 8009000:	0801e06e 	.word	0x0801e06e

08009004 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <poll_tcp+0x22>
 8009018:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <poll_tcp+0xbc>)
 800901a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800901e:	4929      	ldr	r1, [pc, #164]	; (80090c4 <poll_tcp+0xc0>)
 8009020:	4829      	ldr	r0, [pc, #164]	; (80090c8 <poll_tcp+0xc4>)
 8009022:	f010 f847 	bl	80190b4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	785b      	ldrb	r3, [r3, #1]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d104      	bne.n	8009038 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800902e:	2101      	movs	r1, #1
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f001 f8b3 	bl	800a19c <lwip_netconn_do_writemore>
 8009036:	e016      	b.n	8009066 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b04      	cmp	r3, #4
 800903e:	d112      	bne.n	8009066 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <poll_tcp+0x5a>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	7a5b      	ldrb	r3, [r3, #9]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	7a5a      	ldrb	r2, [r3, #9]
 8009058:	3a01      	subs	r2, #1
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800905e:	2101      	movs	r1, #1
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fbf7 	bl	8009854 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	7f1b      	ldrb	r3, [r3, #28]
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2b00      	cmp	r3, #0
 8009070:	d021      	beq.n	80090b6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01d      	beq.n	80090b6 <poll_tcp+0xb2>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009082:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009086:	d316      	bcc.n	80090b6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009090:	2b04      	cmp	r3, #4
 8009092:	d810      	bhi.n	80090b6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	7f1b      	ldrb	r3, [r3, #28]
 8009098:	f023 0310 	bic.w	r3, r3, #16
 800909c:	b2da      	uxtb	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <poll_tcp+0xb2>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2200      	movs	r2, #0
 80090b0:	2102      	movs	r1, #2
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	0801a910 	.word	0x0801a910
 80090c4:	0801aa68 	.word	0x0801aa68
 80090c8:	0801a954 	.word	0x0801a954

080090cc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <sent_tcp+0x26>
 80090e4:	4b20      	ldr	r3, [pc, #128]	; (8009168 <sent_tcp+0x9c>)
 80090e6:	f240 1293 	movw	r2, #403	; 0x193
 80090ea:	4920      	ldr	r1, [pc, #128]	; (800916c <sent_tcp+0xa0>)
 80090ec:	4820      	ldr	r0, [pc, #128]	; (8009170 <sent_tcp+0xa4>)
 80090ee:	f00f ffe1 	bl	80190b4 <iprintf>

  if (conn) {
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d032      	beq.n	800915e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d104      	bne.n	800910a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009100:	2101      	movs	r1, #1
 8009102:	6978      	ldr	r0, [r7, #20]
 8009104:	f001 f84a 	bl	800a19c <lwip_netconn_do_writemore>
 8009108:	e007      	b.n	800911a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	2b04      	cmp	r3, #4
 8009110:	d103      	bne.n	800911a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009112:	2101      	movs	r1, #1
 8009114:	6978      	ldr	r0, [r7, #20]
 8009116:	f000 fb9d 	bl	8009854 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d01d      	beq.n	800915e <sent_tcp+0x92>
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800912a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800912e:	d316      	bcc.n	800915e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009138:	2b04      	cmp	r3, #4
 800913a:	d810      	bhi.n	800915e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	7f1b      	ldrb	r3, [r3, #28]
 8009140:	f023 0310 	bic.w	r3, r3, #16
 8009144:	b2da      	uxtb	r2, r3
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <sent_tcp+0x92>
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	88fa      	ldrh	r2, [r7, #6]
 8009158:	2102      	movs	r1, #2
 800915a:	6978      	ldr	r0, [r7, #20]
 800915c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	0801a910 	.word	0x0801a910
 800916c:	0801aa68 	.word	0x0801aa68
 8009170:	0801a954 	.word	0x0801a954

08009174 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <err_tcp+0x24>
 800918a:	4b5f      	ldr	r3, [pc, #380]	; (8009308 <err_tcp+0x194>)
 800918c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009190:	495e      	ldr	r1, [pc, #376]	; (800930c <err_tcp+0x198>)
 8009192:	485f      	ldr	r0, [pc, #380]	; (8009310 <err_tcp+0x19c>)
 8009194:	f00f ff8e 	bl	80190b4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009198:	f00f fd7c 	bl	8018c94 <sys_arch_protect>
 800919c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	2200      	movs	r2, #0
 80091a2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	7f1b      	ldrb	r3, [r3, #28]
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	2200      	movs	r2, #0
 80091c2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80091c4:	69b8      	ldr	r0, [r7, #24]
 80091c6:	f00f fd73 	bl	8018cb0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <err_tcp+0x6a>
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	2200      	movs	r2, #0
 80091d8:	2104      	movs	r1, #4
 80091da:	69f8      	ldr	r0, [r7, #28]
 80091dc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d005      	beq.n	80091f2 <err_tcp+0x7e>
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	2200      	movs	r2, #0
 80091ec:	2100      	movs	r1, #0
 80091ee:	69f8      	ldr	r0, [r7, #28]
 80091f0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <err_tcp+0x92>
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	2200      	movs	r2, #0
 8009200:	2102      	movs	r1, #2
 8009202:	69f8      	ldr	r0, [r7, #28]
 8009204:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fd86 	bl	8008d1c <lwip_netconn_err_to_msg>
 8009210:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	3310      	adds	r3, #16
 8009216:	4618      	mov	r0, r3
 8009218:	f00f fc21 	bl	8018a5e <sys_mbox_valid>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	3310      	adds	r3, #16
 8009226:	6939      	ldr	r1, [r7, #16]
 8009228:	4618      	mov	r0, r3
 800922a:	f00f fba3 	bl	8018974 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	3314      	adds	r3, #20
 8009232:	4618      	mov	r0, r3
 8009234:	f00f fc13 	bl	8018a5e <sys_mbox_valid>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3314      	adds	r3, #20
 8009242:	6939      	ldr	r1, [r7, #16]
 8009244:	4618      	mov	r0, r3
 8009246:	f00f fb95 	bl	8018974 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d005      	beq.n	800925c <err_tcp+0xe8>
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	2b04      	cmp	r3, #4
 8009254:	d002      	beq.n	800925c <err_tcp+0xe8>
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d143      	bne.n	80092e4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	7f1b      	ldrb	r3, [r3, #28]
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	bf14      	ite	ne
 8009268:	2301      	movne	r3, #1
 800926a:	2300      	moveq	r3, #0
 800926c:	b2db      	uxtb	r3, r3
 800926e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	7f1b      	ldrb	r3, [r3, #28]
 8009274:	f023 0304 	bic.w	r3, r3, #4
 8009278:	b2da      	uxtb	r2, r3
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d13b      	bne.n	80092fc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <err_tcp+0x126>
 800928c:	4b1e      	ldr	r3, [pc, #120]	; (8009308 <err_tcp+0x194>)
 800928e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009292:	4920      	ldr	r1, [pc, #128]	; (8009314 <err_tcp+0x1a0>)
 8009294:	481e      	ldr	r0, [pc, #120]	; (8009310 <err_tcp+0x19c>)
 8009296:	f00f ff0d 	bl	80190b4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	2b04      	cmp	r3, #4
 800929e:	d104      	bne.n	80092aa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	2200      	movs	r2, #0
 80092a6:	711a      	strb	r2, [r3, #4]
 80092a8:	e003      	b.n	80092b2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80092bc:	68b8      	ldr	r0, [r7, #8]
 80092be:	f00f fc5f 	bl	8018b80 <sys_sem_valid>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <err_tcp+0x162>
 80092c8:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <err_tcp+0x194>)
 80092ca:	f240 12ef 	movw	r2, #495	; 0x1ef
 80092ce:	4912      	ldr	r1, [pc, #72]	; (8009318 <err_tcp+0x1a4>)
 80092d0:	480f      	ldr	r0, [pc, #60]	; (8009310 <err_tcp+0x19c>)
 80092d2:	f00f feef 	bl	80190b4 <iprintf>
      conn->current_msg = NULL;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	2200      	movs	r2, #0
 80092da:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80092dc:	68b8      	ldr	r0, [r7, #8]
 80092de:	f00f fc35 	bl	8018b4c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80092e2:	e00b      	b.n	80092fc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <err_tcp+0x18a>
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <err_tcp+0x194>)
 80092ee:	f240 12f7 	movw	r2, #503	; 0x1f7
 80092f2:	490a      	ldr	r1, [pc, #40]	; (800931c <err_tcp+0x1a8>)
 80092f4:	4806      	ldr	r0, [pc, #24]	; (8009310 <err_tcp+0x19c>)
 80092f6:	f00f fedd 	bl	80190b4 <iprintf>
  }
}
 80092fa:	e000      	b.n	80092fe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80092fc:	bf00      	nop
}
 80092fe:	bf00      	nop
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	0801a910 	.word	0x0801a910
 800930c:	0801aa68 	.word	0x0801aa68
 8009310:	0801a954 	.word	0x0801a954
 8009314:	0801aa78 	.word	0x0801aa78
 8009318:	0801aa94 	.word	0x0801aa94
 800931c:	0801aab0 	.word	0x0801aab0

08009320 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f005 fe8d 	bl	800f050 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009336:	490a      	ldr	r1, [pc, #40]	; (8009360 <setup_tcp+0x40>)
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f005 fe9b 	bl	800f074 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800933e:	4909      	ldr	r1, [pc, #36]	; (8009364 <setup_tcp+0x44>)
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f005 feb9 	bl	800f0b8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009346:	2202      	movs	r2, #2
 8009348:	4907      	ldr	r1, [pc, #28]	; (8009368 <setup_tcp+0x48>)
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f005 ff10 	bl	800f170 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009350:	4906      	ldr	r1, [pc, #24]	; (800936c <setup_tcp+0x4c>)
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f005 fed2 	bl	800f0fc <tcp_err>
}
 8009358:	bf00      	nop
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	08008ef9 	.word	0x08008ef9
 8009364:	080090cd 	.word	0x080090cd
 8009368:	08009005 	.word	0x08009005
 800936c:	08009175 	.word	0x08009175

08009370 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009370:	b590      	push	{r4, r7, lr}
 8009372:	b089      	sub	sp, #36	; 0x24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <accept_function+0x1e>
    return ERR_VAL;
 8009388:	f06f 0305 	mvn.w	r3, #5
 800938c:	e0a1      	b.n	80094d2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	3314      	adds	r3, #20
 8009392:	4618      	mov	r0, r3
 8009394:	f00f fb63 	bl	8018a5e <sys_mbox_valid>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800939e:	f06f 0305 	mvn.w	r3, #5
 80093a2:	e096      	b.n	80094d2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d11b      	bne.n	80093e2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	f103 0414 	add.w	r4, r3, #20
 80093b0:	f06f 000c 	mvn.w	r0, #12
 80093b4:	f7ff fcb2 	bl	8008d1c <lwip_netconn_err_to_msg>
 80093b8:	4603      	mov	r3, r0
 80093ba:	4619      	mov	r1, r3
 80093bc:	4620      	mov	r0, r4
 80093be:	f00f fad9 	bl	8018974 <sys_mbox_trypost>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <accept_function+0x6c>
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	2200      	movs	r2, #0
 80093d6:	2100      	movs	r1, #0
 80093d8:	69f8      	ldr	r0, [r7, #28]
 80093da:	4798      	blx	r3
    }
    return ERR_VAL;
 80093dc:	f06f 0305 	mvn.w	r3, #5
 80093e0:	e077      	b.n	80094d2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80093e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d006      	beq.n	80093f8 <accept_function+0x88>
 80093ea:	4b3c      	ldr	r3, [pc, #240]	; (80094dc <accept_function+0x16c>)
 80093ec:	f240 222a 	movw	r2, #554	; 0x22a
 80093f0:	493b      	ldr	r1, [pc, #236]	; (80094e0 <accept_function+0x170>)
 80093f2:	483c      	ldr	r0, [pc, #240]	; (80094e4 <accept_function+0x174>)
 80093f4:	f00f fe5e 	bl	80190b4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f000 f8f0 	bl	80095e8 <netconn_alloc>
 8009408:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d11b      	bne.n	8009448 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	f103 0414 	add.w	r4, r3, #20
 8009416:	f06f 000c 	mvn.w	r0, #12
 800941a:	f7ff fc7f 	bl	8008d1c <lwip_netconn_err_to_msg>
 800941e:	4603      	mov	r3, r0
 8009420:	4619      	mov	r1, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f00f faa6 	bl	8018974 <sys_mbox_trypost>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d005      	beq.n	8009442 <accept_function+0xd2>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2200      	movs	r2, #0
 800943c:	2100      	movs	r1, #0
 800943e:	69f8      	ldr	r0, [r7, #28]
 8009440:	4798      	blx	r3
    }
    return ERR_MEM;
 8009442:	f04f 33ff 	mov.w	r3, #4294967295
 8009446:	e044      	b.n	80094d2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800944e:	69b8      	ldr	r0, [r7, #24]
 8009450:	f7ff ff66 	bl	8009320 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3314      	adds	r3, #20
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	4618      	mov	r0, r3
 800945c:	f00f fa8a 	bl	8018974 <sys_mbox_trypost>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d02a      	beq.n	80094bc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800946c:	2100      	movs	r1, #0
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f005 fdee 	bl	800f050 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009474:	2100      	movs	r1, #0
 8009476:	6978      	ldr	r0, [r7, #20]
 8009478:	f005 fdfc 	bl	800f074 <tcp_recv>
    tcp_sent(pcb, NULL);
 800947c:	2100      	movs	r1, #0
 800947e:	6978      	ldr	r0, [r7, #20]
 8009480:	f005 fe1a 	bl	800f0b8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009484:	2200      	movs	r2, #0
 8009486:	2100      	movs	r1, #0
 8009488:	6978      	ldr	r0, [r7, #20]
 800948a:	f005 fe71 	bl	800f170 <tcp_poll>
    tcp_err(pcb, NULL);
 800948e:	2100      	movs	r1, #0
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	f005 fe33 	bl	800f0fc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2200      	movs	r2, #0
 800949a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	3310      	adds	r3, #16
 80094a0:	4618      	mov	r0, r3
 80094a2:	f00f fa55 	bl	8018950 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	3310      	adds	r3, #16
 80094aa:	4618      	mov	r0, r3
 80094ac:	f00f fae8 	bl	8018a80 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80094b0:	69b8      	ldr	r0, [r7, #24]
 80094b2:	f000 f907 	bl	80096c4 <netconn_free>
    return ERR_MEM;
 80094b6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ba:	e00a      	b.n	80094d2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <accept_function+0x160>
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2200      	movs	r2, #0
 80094ca:	2100      	movs	r1, #0
 80094cc:	69f8      	ldr	r0, [r7, #28]
 80094ce:	4798      	blx	r3
  }

  return ERR_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3724      	adds	r7, #36	; 0x24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd90      	pop	{r4, r7, pc}
 80094da:	bf00      	nop
 80094dc:	0801a910 	.word	0x0801a910
 80094e0:	0801aacc 	.word	0x0801aacc
 80094e4:	0801a954 	.word	0x0801a954

080094e8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d006      	beq.n	800950c <pcb_new+0x24>
 80094fe:	4b2b      	ldr	r3, [pc, #172]	; (80095ac <pcb_new+0xc4>)
 8009500:	f240 2265 	movw	r2, #613	; 0x265
 8009504:	492a      	ldr	r1, [pc, #168]	; (80095b0 <pcb_new+0xc8>)
 8009506:	482b      	ldr	r0, [pc, #172]	; (80095b4 <pcb_new+0xcc>)
 8009508:	f00f fdd4 	bl	80190b4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009516:	2b10      	cmp	r3, #16
 8009518:	d022      	beq.n	8009560 <pcb_new+0x78>
 800951a:	2b20      	cmp	r3, #32
 800951c:	d133      	bne.n	8009586 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4618      	mov	r0, r3
 8009526:	f00b f83a 	bl	801459e <udp_new_ip_type>
 800952a:	4603      	mov	r3, r0
 800952c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d02a      	beq.n	800958e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b22      	cmp	r3, #34	; 0x22
 8009540:	d104      	bne.n	800954c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6858      	ldr	r0, [r3, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	4917      	ldr	r1, [pc, #92]	; (80095b8 <pcb_new+0xd0>)
 800955a:	f00a ffa7 	bl	80144ac <udp_recv>
      }
      break;
 800955e:	e016      	b.n	800958e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681c      	ldr	r4, [r3, #0]
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	4618      	mov	r0, r3
 8009568:	f005 fd64 	bl	800f034 <tcp_new_ip_type>
 800956c:	4603      	mov	r3, r0
 800956e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00b      	beq.n	8009592 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fece 	bl	8009320 <setup_tcp>
      }
      break;
 8009584:	e005      	b.n	8009592 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	22fa      	movs	r2, #250	; 0xfa
 800958a:	711a      	strb	r2, [r3, #4]
      return;
 800958c:	e00a      	b.n	80095a4 <pcb_new+0xbc>
      break;
 800958e:	bf00      	nop
 8009590:	e000      	b.n	8009594 <pcb_new+0xac>
      break;
 8009592:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d102      	bne.n	80095a4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	22ff      	movs	r2, #255	; 0xff
 80095a2:	711a      	strb	r2, [r3, #4]
  }
}
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd90      	pop	{r4, r7, pc}
 80095aa:	bf00      	nop
 80095ac:	0801a910 	.word	0x0801a910
 80095b0:	0801aaf4 	.word	0x0801aaf4
 80095b4:	0801a954 	.word	0x0801a954
 80095b8:	08008dfd 	.word	0x08008dfd

080095bc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff ff85 	bl	80094e8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80095f8:	2007      	movs	r0, #7
 80095fa:	f002 fe2d 	bl	800c258 <memp_malloc>
 80095fe:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <netconn_alloc+0x22>
    return NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	e052      	b.n	80096b0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	79fa      	ldrb	r2, [r7, #7]
 8009614:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009622:	2b10      	cmp	r3, #16
 8009624:	d004      	beq.n	8009630 <netconn_alloc+0x48>
 8009626:	2b20      	cmp	r3, #32
 8009628:	d105      	bne.n	8009636 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800962a:	2306      	movs	r3, #6
 800962c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800962e:	e00a      	b.n	8009646 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009630:	2306      	movs	r3, #6
 8009632:	617b      	str	r3, [r7, #20]
      break;
 8009634:	e007      	b.n	8009646 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009636:	4b20      	ldr	r3, [pc, #128]	; (80096b8 <netconn_alloc+0xd0>)
 8009638:	f240 22e5 	movw	r2, #741	; 0x2e5
 800963c:	491f      	ldr	r1, [pc, #124]	; (80096bc <netconn_alloc+0xd4>)
 800963e:	4820      	ldr	r0, [pc, #128]	; (80096c0 <netconn_alloc+0xd8>)
 8009640:	f00f fd38 	bl	80190b4 <iprintf>
      goto free_and_return;
 8009644:	e02f      	b.n	80096a6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3310      	adds	r3, #16
 800964a:	6979      	ldr	r1, [r7, #20]
 800964c:	4618      	mov	r0, r3
 800964e:	f00f f95d 	bl	801890c <sys_mbox_new>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d125      	bne.n	80096a4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	330c      	adds	r3, #12
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f00f fa1b 	bl	8018a9a <sys_sem_new>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3310      	adds	r3, #16
 800966e:	4618      	mov	r0, r3
 8009670:	f00f f96e 	bl	8018950 <sys_mbox_free>
    goto free_and_return;
 8009674:	e017      	b.n	80096a6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3314      	adds	r3, #20
 800967a:	4618      	mov	r0, r3
 800967c:	f00f fa00 	bl	8018a80 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f04f 32ff 	mov.w	r2, #4294967295
 800968c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	7cfa      	ldrb	r2, [r7, #19]
 800969e:	771a      	strb	r2, [r3, #28]
  return conn;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	e005      	b.n	80096b0 <netconn_alloc+0xc8>
    goto free_and_return;
 80096a4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	2007      	movs	r0, #7
 80096aa:	f002 fe4b 	bl	800c344 <memp_free>
  return NULL;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	0801a910 	.word	0x0801a910
 80096bc:	0801ab14 	.word	0x0801ab14
 80096c0:	0801a954 	.word	0x0801a954

080096c4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d006      	beq.n	80096e2 <netconn_free+0x1e>
 80096d4:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <netconn_free+0x80>)
 80096d6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80096da:	491b      	ldr	r1, [pc, #108]	; (8009748 <netconn_free+0x84>)
 80096dc:	481b      	ldr	r0, [pc, #108]	; (800974c <netconn_free+0x88>)
 80096de:	f00f fce9 	bl	80190b4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3310      	adds	r3, #16
 80096e6:	4618      	mov	r0, r3
 80096e8:	f00f f9b9 	bl	8018a5e <sys_mbox_valid>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d006      	beq.n	8009700 <netconn_free+0x3c>
 80096f2:	4b14      	ldr	r3, [pc, #80]	; (8009744 <netconn_free+0x80>)
 80096f4:	f240 3223 	movw	r2, #803	; 0x323
 80096f8:	4915      	ldr	r1, [pc, #84]	; (8009750 <netconn_free+0x8c>)
 80096fa:	4814      	ldr	r0, [pc, #80]	; (800974c <netconn_free+0x88>)
 80096fc:	f00f fcda 	bl	80190b4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3314      	adds	r3, #20
 8009704:	4618      	mov	r0, r3
 8009706:	f00f f9aa 	bl	8018a5e <sys_mbox_valid>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d006      	beq.n	800971e <netconn_free+0x5a>
 8009710:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <netconn_free+0x80>)
 8009712:	f240 3226 	movw	r2, #806	; 0x326
 8009716:	490f      	ldr	r1, [pc, #60]	; (8009754 <netconn_free+0x90>)
 8009718:	480c      	ldr	r0, [pc, #48]	; (800974c <netconn_free+0x88>)
 800971a:	f00f fccb 	bl	80190b4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	330c      	adds	r3, #12
 8009722:	4618      	mov	r0, r3
 8009724:	f00f fa1f 	bl	8018b66 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	330c      	adds	r3, #12
 800972c:	4618      	mov	r0, r3
 800972e:	f00f fa38 	bl	8018ba2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	2007      	movs	r0, #7
 8009736:	f002 fe05 	bl	800c344 <memp_free>
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	0801a910 	.word	0x0801a910
 8009748:	0801ab3c 	.word	0x0801ab3c
 800974c:	0801a954 	.word	0x0801a954
 8009750:	0801ab6c 	.word	0x0801ab6c
 8009754:	0801aba8 	.word	0x0801aba8

08009758 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3310      	adds	r3, #16
 8009764:	4618      	mov	r0, r3
 8009766:	f00f f97a 	bl	8018a5e <sys_mbox_valid>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d02f      	beq.n	80097d0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009770:	e018      	b.n	80097a4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800977a:	2b10      	cmp	r3, #16
 800977c:	d10e      	bne.n	800979c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f107 020f 	add.w	r2, r7, #15
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff fafe 	bl	8008d88 <lwip_netconn_is_err_msg>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d108      	bne.n	80097a4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	4618      	mov	r0, r3
 8009796:	f003 fc85 	bl	800d0a4 <pbuf_free>
 800979a:	e003      	b.n	80097a4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 ffe0 	bl	800a764 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	3310      	adds	r3, #16
 80097a8:	f107 0210 	add.w	r2, r7, #16
 80097ac:	4611      	mov	r1, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f00f f939 	bl	8018a26 <sys_arch_mbox_tryfetch>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ba:	d1da      	bne.n	8009772 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3310      	adds	r3, #16
 80097c0:	4618      	mov	r0, r3
 80097c2:	f00f f8c5 	bl	8018950 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3310      	adds	r3, #16
 80097ca:	4618      	mov	r0, r3
 80097cc:	f00f f958 	bl	8018a80 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3314      	adds	r3, #20
 80097d4:	4618      	mov	r0, r3
 80097d6:	f00f f942 	bl	8018a5e <sys_mbox_valid>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d034      	beq.n	800984a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80097e0:	e01d      	b.n	800981e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f107 020e 	add.w	r2, r7, #14
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff facc 	bl	8008d88 <lwip_netconn_is_err_msg>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d113      	bne.n	800981e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f7ff ffac 	bl	8009758 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4618      	mov	r0, r3
 800980e:	f004 fa49 	bl	800dca4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2200      	movs	r2, #0
 8009816:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f7ff ff53 	bl	80096c4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3314      	adds	r3, #20
 8009822:	f107 0210 	add.w	r2, r7, #16
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f00f f8fc 	bl	8018a26 <sys_arch_mbox_tryfetch>
 800982e:	4603      	mov	r3, r0
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009834:	d1d5      	bne.n	80097e2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3314      	adds	r3, #20
 800983a:	4618      	mov	r0, r3
 800983c:	f00f f888 	bl	8018950 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3314      	adds	r3, #20
 8009844:	4618      	mov	r0, r3
 8009846:	f00f f91b 	bl	8018a80 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800984a:	bf00      	nop
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <lwip_netconn_do_close_internal+0x24>
 800986a:	4b87      	ldr	r3, [pc, #540]	; (8009a88 <lwip_netconn_do_close_internal+0x234>)
 800986c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009870:	4986      	ldr	r1, [pc, #536]	; (8009a8c <lwip_netconn_do_close_internal+0x238>)
 8009872:	4887      	ldr	r0, [pc, #540]	; (8009a90 <lwip_netconn_do_close_internal+0x23c>)
 8009874:	f00f fc1e 	bl	80190b4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009880:	2b10      	cmp	r3, #16
 8009882:	d006      	beq.n	8009892 <lwip_netconn_do_close_internal+0x3e>
 8009884:	4b80      	ldr	r3, [pc, #512]	; (8009a88 <lwip_netconn_do_close_internal+0x234>)
 8009886:	f240 32a3 	movw	r2, #931	; 0x3a3
 800988a:	4982      	ldr	r1, [pc, #520]	; (8009a94 <lwip_netconn_do_close_internal+0x240>)
 800988c:	4880      	ldr	r0, [pc, #512]	; (8009a90 <lwip_netconn_do_close_internal+0x23c>)
 800988e:	f00f fc11 	bl	80190b4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	2b04      	cmp	r3, #4
 8009898:	d006      	beq.n	80098a8 <lwip_netconn_do_close_internal+0x54>
 800989a:	4b7b      	ldr	r3, [pc, #492]	; (8009a88 <lwip_netconn_do_close_internal+0x234>)
 800989c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80098a0:	497d      	ldr	r1, [pc, #500]	; (8009a98 <lwip_netconn_do_close_internal+0x244>)
 80098a2:	487b      	ldr	r0, [pc, #492]	; (8009a90 <lwip_netconn_do_close_internal+0x23c>)
 80098a4:	f00f fc06 	bl	80190b4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <lwip_netconn_do_close_internal+0x6a>
 80098b0:	4b75      	ldr	r3, [pc, #468]	; (8009a88 <lwip_netconn_do_close_internal+0x234>)
 80098b2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80098b6:	4979      	ldr	r1, [pc, #484]	; (8009a9c <lwip_netconn_do_close_internal+0x248>)
 80098b8:	4875      	ldr	r0, [pc, #468]	; (8009a90 <lwip_netconn_do_close_internal+0x23c>)
 80098ba:	f00f fbfb 	bl	80190b4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <lwip_netconn_do_close_internal+0x80>
 80098c6:	4b70      	ldr	r3, [pc, #448]	; (8009a88 <lwip_netconn_do_close_internal+0x234>)
 80098c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80098cc:	4974      	ldr	r1, [pc, #464]	; (8009aa0 <lwip_netconn_do_close_internal+0x24c>)
 80098ce:	4870      	ldr	r0, [pc, #448]	; (8009a90 <lwip_netconn_do_close_internal+0x23c>)
 80098d0:	f00f fbf0 	bl	80190b4 <iprintf>

  tpcb = conn->pcb.tcp;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	7a1b      	ldrb	r3, [r3, #8]
 80098e0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d102      	bne.n	80098fe <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80098f8:	2301      	movs	r3, #1
 80098fa:	75bb      	strb	r3, [r7, #22]
 80098fc:	e01f      	b.n	800993e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00e      	beq.n	8009922 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009908:	2b05      	cmp	r3, #5
 800990a:	d007      	beq.n	800991c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009910:	2b06      	cmp	r3, #6
 8009912:	d003      	beq.n	800991c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009918:	2b08      	cmp	r3, #8
 800991a:	d102      	bne.n	8009922 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800991c:	2301      	movs	r3, #1
 800991e:	75bb      	strb	r3, [r7, #22]
 8009920:	e00d      	b.n	800993e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009922:	7b7b      	ldrb	r3, [r7, #13]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d008      	beq.n	800993a <lwip_netconn_do_close_internal+0xe6>
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	8b5b      	ldrh	r3, [r3, #26]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009934:	2301      	movs	r3, #1
 8009936:	75bb      	strb	r3, [r7, #22]
 8009938:	e001      	b.n	800993e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800993e:	7dbb      	ldrb	r3, [r7, #22]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009944:	2100      	movs	r1, #0
 8009946:	6938      	ldr	r0, [r7, #16]
 8009948:	f005 fb82 	bl	800f050 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	7d1b      	ldrb	r3, [r3, #20]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d104      	bne.n	800995e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009954:	2100      	movs	r1, #0
 8009956:	6938      	ldr	r0, [r7, #16]
 8009958:	f005 fbf2 	bl	800f140 <tcp_accept>
 800995c:	e01d      	b.n	800999a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d007      	beq.n	8009974 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009964:	2100      	movs	r1, #0
 8009966:	6938      	ldr	r0, [r7, #16]
 8009968:	f005 fb84 	bl	800f074 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800996c:	2100      	movs	r1, #0
 800996e:	6938      	ldr	r0, [r7, #16]
 8009970:	f005 fbe6 	bl	800f140 <tcp_accept>
    }
    if (shut_tx) {
 8009974:	7b7b      	ldrb	r3, [r7, #13]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800997a:	2100      	movs	r1, #0
 800997c:	6938      	ldr	r0, [r7, #16]
 800997e:	f005 fb9b 	bl	800f0b8 <tcp_sent>
    }
    if (shut_close) {
 8009982:	7dbb      	ldrb	r3, [r7, #22]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d008      	beq.n	800999a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009988:	2200      	movs	r2, #0
 800998a:	2100      	movs	r1, #0
 800998c:	6938      	ldr	r0, [r7, #16]
 800998e:	f005 fbef 	bl	800f170 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009992:	2100      	movs	r1, #0
 8009994:	6938      	ldr	r0, [r7, #16]
 8009996:	f005 fbb1 	bl	800f0fc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800999a:	7dbb      	ldrb	r3, [r7, #22]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80099a0:	6938      	ldr	r0, [r7, #16]
 80099a2:	f004 f839 	bl	800da18 <tcp_close>
 80099a6:	4603      	mov	r3, r0
 80099a8:	75fb      	strb	r3, [r7, #23]
 80099aa:	e007      	b.n	80099bc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	7b7a      	ldrb	r2, [r7, #13]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6938      	ldr	r0, [r7, #16]
 80099b4:	f004 f85c 	bl	800da70 <tcp_shutdown>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80099bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80099c4:	2301      	movs	r3, #1
 80099c6:	757b      	strb	r3, [r7, #21]
 80099c8:	e016      	b.n	80099f8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80099ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d2:	d10f      	bne.n	80099f4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	7a5b      	ldrb	r3, [r3, #9]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10c      	bne.n	80099f8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80099de:	2301      	movs	r3, #1
 80099e0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80099e2:	7dbb      	ldrb	r3, [r7, #22]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d007      	beq.n	80099f8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80099e8:	6938      	ldr	r0, [r7, #16]
 80099ea:	f004 f95b 	bl	800dca4 <tcp_abort>
          err = ERR_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
 80099f2:	e001      	b.n	80099f8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80099f4:	2301      	movs	r3, #1
 80099f6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80099f8:	7d7b      	ldrb	r3, [r7, #21]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d052      	beq.n	8009aa4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	330c      	adds	r3, #12
 8009a06:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	7dfa      	ldrb	r2, [r7, #23]
 8009a0e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009a1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d129      	bne.n	8009a78 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009a24:	7dbb      	ldrb	r3, [r7, #22]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00c      	beq.n	8009a44 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d005      	beq.n	8009a44 <lwip_netconn_do_close_internal+0x1f0>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2104      	movs	r1, #4
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	4798      	blx	r3
      }
      if (shut_rx) {
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d009      	beq.n	8009a5e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <lwip_netconn_do_close_internal+0x20a>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	2200      	movs	r2, #0
 8009a58:	2100      	movs	r1, #0
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
      }
      if (shut_tx) {
 8009a5e:	7b7b      	ldrb	r3, [r7, #13]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <lwip_netconn_do_close_internal+0x224>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2200      	movs	r2, #0
 8009a72:	2102      	movs	r1, #2
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009a7e:	68b8      	ldr	r0, [r7, #8]
 8009a80:	f00f f864 	bl	8018b4c <sys_sem_signal>
    }
    return ERR_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	e03c      	b.n	8009b02 <lwip_netconn_do_close_internal+0x2ae>
 8009a88:	0801a910 	.word	0x0801a910
 8009a8c:	0801abe4 	.word	0x0801abe4
 8009a90:	0801a954 	.word	0x0801a954
 8009a94:	0801abf4 	.word	0x0801abf4
 8009a98:	0801ac14 	.word	0x0801ac14
 8009a9c:	0801ac38 	.word	0x0801ac38
 8009aa0:	0801aa78 	.word	0x0801aa78
  }
  if (!close_finished) {
 8009aa4:	7d7b      	ldrb	r3, [r7, #21]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d11e      	bne.n	8009ae8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	7d1b      	ldrb	r3, [r3, #20]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d106      	bne.n	8009ac0 <lwip_netconn_do_close_internal+0x26c>
 8009ab2:	4b16      	ldr	r3, [pc, #88]	; (8009b0c <lwip_netconn_do_close_internal+0x2b8>)
 8009ab4:	f240 4241 	movw	r2, #1089	; 0x441
 8009ab8:	4915      	ldr	r1, [pc, #84]	; (8009b10 <lwip_netconn_do_close_internal+0x2bc>)
 8009aba:	4816      	ldr	r0, [pc, #88]	; (8009b14 <lwip_netconn_do_close_internal+0x2c0>)
 8009abc:	f00f fafa 	bl	80190b4 <iprintf>
    if (shut_tx) {
 8009ac0:	7b7b      	ldrb	r3, [r7, #13]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009ac6:	4914      	ldr	r1, [pc, #80]	; (8009b18 <lwip_netconn_do_close_internal+0x2c4>)
 8009ac8:	6938      	ldr	r0, [r7, #16]
 8009aca:	f005 faf5 	bl	800f0b8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4912      	ldr	r1, [pc, #72]	; (8009b1c <lwip_netconn_do_close_internal+0x2c8>)
 8009ad2:	6938      	ldr	r0, [r7, #16]
 8009ad4:	f005 fb4c 	bl	800f170 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009ad8:	4911      	ldr	r1, [pc, #68]	; (8009b20 <lwip_netconn_do_close_internal+0x2cc>)
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f005 fb0e 	bl	800f0fc <tcp_err>
    tcp_arg(tpcb, conn);
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	6938      	ldr	r0, [r7, #16]
 8009ae4:	f005 fab4 	bl	800f050 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d106      	bne.n	8009afe <lwip_netconn_do_close_internal+0x2aa>
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <lwip_netconn_do_close_internal+0x2b8>)
 8009af2:	f240 424d 	movw	r2, #1101	; 0x44d
 8009af6:	490b      	ldr	r1, [pc, #44]	; (8009b24 <lwip_netconn_do_close_internal+0x2d0>)
 8009af8:	4806      	ldr	r0, [pc, #24]	; (8009b14 <lwip_netconn_do_close_internal+0x2c0>)
 8009afa:	f00f fadb 	bl	80190b4 <iprintf>
  return err;
 8009afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0801a910 	.word	0x0801a910
 8009b10:	0801ac4c 	.word	0x0801ac4c
 8009b14:	0801a954 	.word	0x0801a954
 8009b18:	080090cd 	.word	0x080090cd
 8009b1c:	08009005 	.word	0x08009005
 8009b20:	08009175 	.word	0x08009175
 8009b24:	0801ac70 	.word	0x0801ac70

08009b28 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	785b      	ldrb	r3, [r3, #1]
 8009b3a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009b3c:	7afb      	ldrb	r3, [r7, #11]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00d      	beq.n	8009b5e <lwip_netconn_do_delconn+0x36>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b4c:	2b10      	cmp	r3, #16
 8009b4e:	d006      	beq.n	8009b5e <lwip_netconn_do_delconn+0x36>
 8009b50:	4b60      	ldr	r3, [pc, #384]	; (8009cd4 <lwip_netconn_do_delconn+0x1ac>)
 8009b52:	f240 425e 	movw	r2, #1118	; 0x45e
 8009b56:	4960      	ldr	r1, [pc, #384]	; (8009cd8 <lwip_netconn_do_delconn+0x1b0>)
 8009b58:	4860      	ldr	r0, [pc, #384]	; (8009cdc <lwip_netconn_do_delconn+0x1b4>)
 8009b5a:	f00f faab 	bl	80190b4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <lwip_netconn_do_delconn+0x48>
 8009b64:	7afb      	ldrb	r3, [r7, #11]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d002      	beq.n	8009b70 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d109      	bne.n	8009b84 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d10a      	bne.n	8009b8c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	7f1b      	ldrb	r3, [r3, #28]
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	22fb      	movs	r2, #251	; 0xfb
 8009b88:	711a      	strb	r2, [r3, #4]
 8009b8a:	e097      	b.n	8009cbc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009b8c:	7afb      	ldrb	r3, [r7, #11]
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d10d      	bne.n	8009bae <lwip_netconn_do_delconn+0x86>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	7f1b      	ldrb	r3, [r3, #28]
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <lwip_netconn_do_delconn+0x86>
 8009ba0:	4b4c      	ldr	r3, [pc, #304]	; (8009cd4 <lwip_netconn_do_delconn+0x1ac>)
 8009ba2:	f240 427a 	movw	r2, #1146	; 0x47a
 8009ba6:	494e      	ldr	r1, [pc, #312]	; (8009ce0 <lwip_netconn_do_delconn+0x1b8>)
 8009ba8:	484c      	ldr	r0, [pc, #304]	; (8009cdc <lwip_netconn_do_delconn+0x1b4>)
 8009baa:	f00f fa83 	bl	80190b4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fdcd 	bl	8009758 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d05f      	beq.n	8009c88 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d00d      	beq.n	8009bf2 <lwip_netconn_do_delconn+0xca>
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d151      	bne.n	8009c7e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f00a fc7e 	bl	80144ec <udp_remove>
          break;
 8009bf0:	e046      	b.n	8009c80 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <lwip_netconn_do_delconn+0xe2>
 8009bfc:	4b35      	ldr	r3, [pc, #212]	; (8009cd4 <lwip_netconn_do_delconn+0x1ac>)
 8009bfe:	f240 4294 	movw	r2, #1172	; 0x494
 8009c02:	4938      	ldr	r1, [pc, #224]	; (8009ce4 <lwip_netconn_do_delconn+0x1bc>)
 8009c04:	4835      	ldr	r0, [pc, #212]	; (8009cdc <lwip_netconn_do_delconn+0x1b4>)
 8009c06:	f00f fa55 	bl	80190b4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2204      	movs	r2, #4
 8009c10:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2203      	movs	r2, #3
 8009c16:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2100      	movs	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff fe14 	bl	8009854 <lwip_netconn_do_close_internal>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d04b      	beq.n	8009cca <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d006      	beq.n	8009c4a <lwip_netconn_do_delconn+0x122>
 8009c3c:	4b25      	ldr	r3, [pc, #148]	; (8009cd4 <lwip_netconn_do_delconn+0x1ac>)
 8009c3e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009c42:	4929      	ldr	r1, [pc, #164]	; (8009ce8 <lwip_netconn_do_delconn+0x1c0>)
 8009c44:	4825      	ldr	r0, [pc, #148]	; (8009cdc <lwip_netconn_do_delconn+0x1b4>)
 8009c46:	f00f fa35 	bl	80190b4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009c4a:	4828      	ldr	r0, [pc, #160]	; (8009cec <lwip_netconn_do_delconn+0x1c4>)
 8009c4c:	f00e ffef 	bl	8018c2e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	330c      	adds	r3, #12
 8009c56:	2100      	movs	r1, #0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f00e ff46 	bl	8018aea <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009c5e:	4823      	ldr	r0, [pc, #140]	; (8009cec <lwip_netconn_do_delconn+0x1c4>)
 8009c60:	f00e ffd6 	bl	8018c10 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	785b      	ldrb	r3, [r3, #1]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d02d      	beq.n	8009cca <lwip_netconn_do_delconn+0x1a2>
 8009c6e:	4b19      	ldr	r3, [pc, #100]	; (8009cd4 <lwip_netconn_do_delconn+0x1ac>)
 8009c70:	f240 429e 	movw	r2, #1182	; 0x49e
 8009c74:	491c      	ldr	r1, [pc, #112]	; (8009ce8 <lwip_netconn_do_delconn+0x1c0>)
 8009c76:	4819      	ldr	r0, [pc, #100]	; (8009cdc <lwip_netconn_do_delconn+0x1b4>)
 8009c78:	f00f fa1c 	bl	80190b4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009c7c:	e025      	b.n	8009cca <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009c7e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2200      	movs	r2, #0
 8009c86:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <lwip_netconn_do_delconn+0x17a>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	6810      	ldr	r0, [r2, #0]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <lwip_netconn_do_delconn+0x194>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	6810      	ldr	r0, [r2, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2102      	movs	r1, #2
 8009cba:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00e ff5c 	bl	8018b80 <sys_sem_valid>
 8009cc8:	e000      	b.n	8009ccc <lwip_netconn_do_delconn+0x1a4>
          return;
 8009cca:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	0801a910 	.word	0x0801a910
 8009cd8:	0801ac80 	.word	0x0801ac80
 8009cdc:	0801a954 	.word	0x0801a954
 8009ce0:	0801ac94 	.word	0x0801ac94
 8009ce4:	0801acb4 	.word	0x0801acb4
 8009ce8:	0801acd0 	.word	0x0801acd0
 8009cec:	2000d2d4 	.word	0x2000d2d4

08009cf0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d025      	beq.n	8009d52 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d10:	2b10      	cmp	r3, #16
 8009d12:	d00e      	beq.n	8009d32 <lwip_netconn_do_bind+0x42>
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d119      	bne.n	8009d4c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6858      	ldr	r0, [r3, #4]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6899      	ldr	r1, [r3, #8]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	899b      	ldrh	r3, [r3, #12]
 8009d26:	461a      	mov	r2, r3
 8009d28:	f00a faca 	bl	80142c0 <udp_bind>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
        break;
 8009d30:	e011      	b.n	8009d56 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6858      	ldr	r0, [r3, #4]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	6899      	ldr	r1, [r3, #8]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	899b      	ldrh	r3, [r3, #12]
 8009d40:	461a      	mov	r2, r3
 8009d42:	f003 ffbb 	bl	800dcbc <tcp_bind>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
        break;
 8009d4a:	e004      	b.n	8009d56 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009d4c:	23fa      	movs	r3, #250	; 0xfa
 8009d4e:	73fb      	strb	r3, [r7, #15]
        break;
 8009d50:	e001      	b.n	8009d56 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009d52:	23fa      	movs	r3, #250	; 0xfa
 8009d54:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	7bfa      	ldrb	r2, [r7, #15]
 8009d5a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009d80:	f06f 0305 	mvn.w	r3, #5
 8009d84:	e070      	b.n	8009e68 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	785b      	ldrb	r3, [r3, #1]
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d006      	beq.n	8009d9c <lwip_netconn_do_connected+0x38>
 8009d8e:	4b38      	ldr	r3, [pc, #224]	; (8009e70 <lwip_netconn_do_connected+0x10c>)
 8009d90:	f240 5223 	movw	r2, #1315	; 0x523
 8009d94:	4937      	ldr	r1, [pc, #220]	; (8009e74 <lwip_netconn_do_connected+0x110>)
 8009d96:	4838      	ldr	r0, [pc, #224]	; (8009e78 <lwip_netconn_do_connected+0x114>)
 8009d98:	f00f f98c 	bl	80190b4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10c      	bne.n	8009dbe <lwip_netconn_do_connected+0x5a>
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	7f1b      	ldrb	r3, [r3, #28]
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <lwip_netconn_do_connected+0x5a>
 8009db0:	4b2f      	ldr	r3, [pc, #188]	; (8009e70 <lwip_netconn_do_connected+0x10c>)
 8009db2:	f240 5224 	movw	r2, #1316	; 0x524
 8009db6:	4931      	ldr	r1, [pc, #196]	; (8009e7c <lwip_netconn_do_connected+0x118>)
 8009db8:	482f      	ldr	r0, [pc, #188]	; (8009e78 <lwip_netconn_do_connected+0x114>)
 8009dba:	f00f f97b 	bl	80190b4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	79fa      	ldrb	r2, [r7, #7]
 8009dcc:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	d106      	bne.n	8009df2 <lwip_netconn_do_connected+0x8e>
 8009de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009dec:	69b8      	ldr	r0, [r7, #24]
 8009dee:	f7ff fa97 	bl	8009320 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	7f1b      	ldrb	r3, [r3, #28]
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	bf0c      	ite	eq
 8009dfe:	2301      	moveq	r3, #1
 8009e00:	2300      	movne	r3, #0
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	7f1b      	ldrb	r3, [r3, #28]
 8009e0a:	f023 0304 	bic.w	r3, r3, #4
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <lwip_netconn_do_connected+0xbc>
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10c      	bne.n	8009e3a <lwip_netconn_do_connected+0xd6>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <lwip_netconn_do_connected+0xc8>
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d006      	beq.n	8009e3a <lwip_netconn_do_connected+0xd6>
 8009e2c:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <lwip_netconn_do_connected+0x10c>)
 8009e2e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009e32:	4913      	ldr	r1, [pc, #76]	; (8009e80 <lwip_netconn_do_connected+0x11c>)
 8009e34:	4810      	ldr	r0, [pc, #64]	; (8009e78 <lwip_netconn_do_connected+0x114>)
 8009e36:	f00f f93d 	bl	80190b4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2200      	movs	r2, #0
 8009e44:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <lwip_netconn_do_connected+0xf6>
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e52:	2200      	movs	r2, #0
 8009e54:	2102      	movs	r1, #2
 8009e56:	69b8      	ldr	r0, [r7, #24]
 8009e58:	4798      	blx	r3

  if (was_blocking) {
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009e60:	69f8      	ldr	r0, [r7, #28]
 8009e62:	f00e fe73 	bl	8018b4c <sys_sem_signal>
  }
  return ERR_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3720      	adds	r7, #32
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	0801a910 	.word	0x0801a910
 8009e74:	0801acd8 	.word	0x0801acd8
 8009e78:	0801a954 	.word	0x0801a954
 8009e7c:	0801acf8 	.word	0x0801acf8
 8009e80:	0801ad38 	.word	0x0801ad38

08009e84 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d102      	bne.n	8009ea0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009e9a:	23f1      	movs	r3, #241	; 0xf1
 8009e9c:	75fb      	strb	r3, [r7, #23]
 8009e9e:	e09b      	b.n	8009fd8 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d00f      	beq.n	8009ece <lwip_netconn_do_connect+0x4a>
 8009eae:	2b20      	cmp	r3, #32
 8009eb0:	f040 8087 	bne.w	8009fc2 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6858      	ldr	r0, [r3, #4]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6899      	ldr	r1, [r3, #8]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	899b      	ldrh	r3, [r3, #12]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f00a fa84 	bl	80143d0 <udp_connect>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]
        break;
 8009ecc:	e084      	b.n	8009fd8 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d102      	bne.n	8009ede <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009ed8:	23f7      	movs	r3, #247	; 0xf7
 8009eda:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009edc:	e07b      	b.n	8009fd6 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009ee8:	23f6      	movs	r3, #246	; 0xf6
 8009eea:	75fb      	strb	r3, [r7, #23]
        break;
 8009eec:	e073      	b.n	8009fd6 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fa14 	bl	8009320 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6858      	ldr	r0, [r3, #4]
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	6899      	ldr	r1, [r3, #8]
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	899a      	ldrh	r2, [r3, #12]
 8009f06:	4b38      	ldr	r3, [pc, #224]	; (8009fe8 <lwip_netconn_do_connect+0x164>)
 8009f08:	f004 f93c 	bl	800e184 <tcp_connect>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d15e      	bne.n	8009fd6 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	7f1b      	ldrb	r3, [r3, #28]
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bf14      	ite	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	2300      	moveq	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2203      	movs	r2, #3
 8009f34:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d009      	beq.n	8009f50 <lwip_netconn_do_connect+0xcc>
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	7f1a      	ldrb	r2, [r3, #28]
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0204 	orr.w	r2, r2, #4
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	771a      	strb	r2, [r3, #28]
 8009f4e:	e008      	b.n	8009f62 <lwip_netconn_do_connect+0xde>
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	7f1a      	ldrb	r2, [r3, #28]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0204 	bic.w	r2, r2, #4
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009f68:	23fb      	movs	r3, #251	; 0xfb
 8009f6a:	75fb      	strb	r3, [r7, #23]
        break;
 8009f6c:	e033      	b.n	8009fd6 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	785b      	ldrb	r3, [r3, #1]
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d006      	beq.n	8009f8e <lwip_netconn_do_connect+0x10a>
 8009f80:	4b1a      	ldr	r3, [pc, #104]	; (8009fec <lwip_netconn_do_connect+0x168>)
 8009f82:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009f86:	491a      	ldr	r1, [pc, #104]	; (8009ff0 <lwip_netconn_do_connect+0x16c>)
 8009f88:	481a      	ldr	r0, [pc, #104]	; (8009ff4 <lwip_netconn_do_connect+0x170>)
 8009f8a:	f00f f893 	bl	80190b4 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009f8e:	481a      	ldr	r0, [pc, #104]	; (8009ff8 <lwip_netconn_do_connect+0x174>)
 8009f90:	f00e fe4d 	bl	8018c2e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	330c      	adds	r3, #12
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f00e fda4 	bl	8018aea <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009fa2:	4815      	ldr	r0, [pc, #84]	; (8009ff8 <lwip_netconn_do_connect+0x174>)
 8009fa4:	f00e fe34 	bl	8018c10 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d116      	bne.n	8009fe0 <lwip_netconn_do_connect+0x15c>
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <lwip_netconn_do_connect+0x168>)
 8009fb4:	f240 5274 	movw	r2, #1396	; 0x574
 8009fb8:	490d      	ldr	r1, [pc, #52]	; (8009ff0 <lwip_netconn_do_connect+0x16c>)
 8009fba:	480e      	ldr	r0, [pc, #56]	; (8009ff4 <lwip_netconn_do_connect+0x170>)
 8009fbc:	f00f f87a 	bl	80190b4 <iprintf>
              return;
 8009fc0:	e00e      	b.n	8009fe0 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009fc2:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <lwip_netconn_do_connect+0x168>)
 8009fc4:	f240 527d 	movw	r2, #1405	; 0x57d
 8009fc8:	490c      	ldr	r1, [pc, #48]	; (8009ffc <lwip_netconn_do_connect+0x178>)
 8009fca:	480a      	ldr	r0, [pc, #40]	; (8009ff4 <lwip_netconn_do_connect+0x170>)
 8009fcc:	f00f f872 	bl	80190b4 <iprintf>
 8009fd0:	23fa      	movs	r3, #250	; 0xfa
 8009fd2:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009fd4:	e000      	b.n	8009fd8 <lwip_netconn_do_connect+0x154>
        break;
 8009fd6:	bf00      	nop
    }
  }
  msg->err = err;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	7dfa      	ldrb	r2, [r7, #23]
 8009fdc:	711a      	strb	r2, [r3, #4]
 8009fde:	e000      	b.n	8009fe2 <lwip_netconn_do_connect+0x15e>
              return;
 8009fe0:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	08009d65 	.word	0x08009d65
 8009fec:	0801a910 	.word	0x0801a910
 8009ff0:	0801acd0 	.word	0x0801acd0
 8009ff4:	0801a954 	.word	0x0801a954
 8009ff8:	2000d2d4 	.word	0x2000d2d4
 8009ffc:	0801ad58 	.word	0x0801ad58

0800a000 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d07f      	beq.n	800a116 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a020:	2b10      	cmp	r3, #16
 800a022:	d175      	bne.n	800a110 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d165      	bne.n	800a0fa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a03a:	23fa      	movs	r3, #250	; 0xfa
 800a03c:	72fb      	strb	r3, [r7, #11]
 800a03e:	e06c      	b.n	800a11a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a040:	23ff      	movs	r3, #255	; 0xff
 800a042:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f107 020b 	add.w	r2, r7, #11
 800a04e:	7cf9      	ldrb	r1, [r7, #19]
 800a050:	4618      	mov	r0, r3
 800a052:	f003 fefd 	bl	800de50 <tcp_listen_with_backlog_and_err>
 800a056:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d05d      	beq.n	800a11a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3310      	adds	r3, #16
 800a064:	4618      	mov	r0, r3
 800a066:	f00e fcfa 	bl	8018a5e <sys_mbox_valid>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3310      	adds	r3, #16
 800a076:	4618      	mov	r0, r3
 800a078:	f00e fc6a 	bl	8018950 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3310      	adds	r3, #16
 800a082:	4618      	mov	r0, r3
 800a084:	f00e fcfc 	bl	8018a80 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3314      	adds	r3, #20
 800a092:	4618      	mov	r0, r3
 800a094:	f00e fce3 	bl	8018a5e <sys_mbox_valid>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d108      	bne.n	800a0b0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3314      	adds	r3, #20
 800a0a4:	2106      	movs	r1, #6
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f00e fc30 	bl	801890c <sys_mbox_new>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a0b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d118      	bne.n	800a0ea <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f004 ffbb 	bl	800f050 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	4912      	ldr	r1, [pc, #72]	; (800a12c <lwip_netconn_do_listen+0x12c>)
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f005 f82c 	bl	800f140 <tcp_accept>
 800a0e8:	e017      	b.n	800a11a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f003 fc94 	bl	800da18 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	605a      	str	r2, [r3, #4]
 800a0f8:	e00f      	b.n	800a11a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b02      	cmp	r3, #2
 800a102:	d102      	bne.n	800a10a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	72fb      	strb	r3, [r7, #11]
 800a108:	e007      	b.n	800a11a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a10a:	23f5      	movs	r3, #245	; 0xf5
 800a10c:	72fb      	strb	r3, [r7, #11]
 800a10e:	e004      	b.n	800a11a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a110:	23f0      	movs	r3, #240	; 0xf0
 800a112:	72fb      	strb	r3, [r7, #11]
 800a114:	e001      	b.n	800a11a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a116:	23f5      	movs	r3, #245	; 0xf5
 800a118:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a11a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a122:	bf00      	nop
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	08009371 	.word	0x08009371

0800a130 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2200      	movs	r2, #0
 800a140:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d022      	beq.n	800a192 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a156:	2b10      	cmp	r3, #16
 800a158:	d11b      	bne.n	800a192 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a166:	d202      	bcs.n	800a16e <lwip_netconn_do_recv+0x3e>
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	e001      	b.n	800a172 <lwip_netconn_do_recv+0x42>
 800a16e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a172:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	89fa      	ldrh	r2, [r7, #14]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f003 ff6a 	bl	800e058 <tcp_recved>
        remaining -= recved;
 800a184:	89fb      	ldrh	r3, [r7, #14]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e6      	bne.n	800a160 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a192:	bf00      	nop
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <lwip_netconn_do_writemore+0x24>
 800a1b2:	4b96      	ldr	r3, [pc, #600]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a1b4:	f240 6273 	movw	r2, #1651	; 0x673
 800a1b8:	4995      	ldr	r1, [pc, #596]	; (800a410 <lwip_netconn_do_writemore+0x274>)
 800a1ba:	4896      	ldr	r0, [pc, #600]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a1bc:	f00e ff7a 	bl	80190b4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	785b      	ldrb	r3, [r3, #1]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d006      	beq.n	800a1d6 <lwip_netconn_do_writemore+0x3a>
 800a1c8:	4b90      	ldr	r3, [pc, #576]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a1ca:	f240 6274 	movw	r2, #1652	; 0x674
 800a1ce:	4992      	ldr	r1, [pc, #584]	; (800a418 <lwip_netconn_do_writemore+0x27c>)
 800a1d0:	4890      	ldr	r0, [pc, #576]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a1d2:	f00e ff6f 	bl	80190b4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <lwip_netconn_do_writemore+0x50>
 800a1de:	4b8b      	ldr	r3, [pc, #556]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a1e0:	f240 6275 	movw	r2, #1653	; 0x675
 800a1e4:	498d      	ldr	r1, [pc, #564]	; (800a41c <lwip_netconn_do_writemore+0x280>)
 800a1e6:	488b      	ldr	r0, [pc, #556]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a1e8:	f00e ff64 	bl	80190b4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <lwip_netconn_do_writemore+0x66>
 800a1f4:	4b85      	ldr	r3, [pc, #532]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a1f6:	f240 6276 	movw	r2, #1654	; 0x676
 800a1fa:	4989      	ldr	r1, [pc, #548]	; (800a420 <lwip_netconn_do_writemore+0x284>)
 800a1fc:	4885      	ldr	r0, [pc, #532]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a1fe:	f00e ff59 	bl	80190b4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	699a      	ldr	r2, [r3, #24]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d306      	bcc.n	800a220 <lwip_netconn_do_writemore+0x84>
 800a212:	4b7e      	ldr	r3, [pc, #504]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a214:	f240 6277 	movw	r2, #1655	; 0x677
 800a218:	4982      	ldr	r1, [pc, #520]	; (800a424 <lwip_netconn_do_writemore+0x288>)
 800a21a:	487e      	ldr	r0, [pc, #504]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a21c:	f00e ff4a 	bl	80190b4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	899b      	ldrh	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <lwip_netconn_do_writemore+0x9c>
 800a22a:	4b78      	ldr	r3, [pc, #480]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a22c:	f240 6279 	movw	r2, #1657	; 0x679
 800a230:	497d      	ldr	r1, [pc, #500]	; (800a428 <lwip_netconn_do_writemore+0x28c>)
 800a232:	4878      	ldr	r0, [pc, #480]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a234:	f00e ff3e 	bl	80190b4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	7f1b      	ldrb	r3, [r3, #28]
 800a23e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	7f1b      	ldrb	r3, [r3, #28]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <lwip_netconn_do_writemore+0xba>
 800a24c:	7ebb      	ldrb	r3, [r7, #26]
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <lwip_netconn_do_writemore+0xbe>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <lwip_netconn_do_writemore+0xc0>
 800a25a:	2300      	movs	r3, #0
 800a25c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	4413      	add	r3, r2
 800a26e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a288:	d307      	bcc.n	800a29a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a28a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a28e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a290:	7ebb      	ldrb	r3, [r7, #26]
 800a292:	f043 0302 	orr.w	r3, r3, #2
 800a296:	76bb      	strb	r3, [r7, #26]
 800a298:	e001      	b.n	800a29e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2a6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a2a8:	89fa      	ldrh	r2, [r7, #14]
 800a2aa:	8bbb      	ldrh	r3, [r7, #28]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d216      	bcs.n	800a2de <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a2b0:	89fb      	ldrh	r3, [r7, #14]
 800a2b2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a2b4:	7e3b      	ldrb	r3, [r7, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00d      	beq.n	800a2d6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a2ba:	8bbb      	ldrh	r3, [r7, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10e      	bne.n	800a2de <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <lwip_netconn_do_writemore+0x134>
 800a2ca:	f06f 0306 	mvn.w	r3, #6
 800a2ce:	e000      	b.n	800a2d2 <lwip_netconn_do_writemore+0x136>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a2d4:	e07d      	b.n	800a3d2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a2d6:	7ebb      	ldrb	r3, [r7, #26]
 800a2d8:	f043 0302 	orr.w	r3, r3, #2
 800a2dc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	8bbb      	ldrh	r3, [r7, #28]
 800a2e6:	441a      	add	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d906      	bls.n	800a302 <lwip_netconn_do_writemore+0x166>
 800a2f4:	4b45      	ldr	r3, [pc, #276]	; (800a40c <lwip_netconn_do_writemore+0x270>)
 800a2f6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a2fa:	494c      	ldr	r1, [pc, #304]	; (800a42c <lwip_netconn_do_writemore+0x290>)
 800a2fc:	4845      	ldr	r0, [pc, #276]	; (800a414 <lwip_netconn_do_writemore+0x278>)
 800a2fe:	f00e fed9 	bl	80190b4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a302:	8bbb      	ldrh	r3, [r7, #28]
 800a304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a308:	4293      	cmp	r3, r2
 800a30a:	d103      	bne.n	800a314 <lwip_netconn_do_writemore+0x178>
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a312:	d209      	bcs.n	800a328 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a318:	8bba      	ldrh	r2, [r7, #28]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d10b      	bne.n	800a336 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	899b      	ldrh	r3, [r3, #12]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d906      	bls.n	800a336 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a328:	2301      	movs	r3, #1
 800a32a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a32c:	7ebb      	ldrb	r3, [r7, #26]
 800a32e:	f043 0302 	orr.w	r3, r3, #2
 800a332:	76bb      	strb	r3, [r7, #26]
 800a334:	e001      	b.n	800a33a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6858      	ldr	r0, [r3, #4]
 800a33e:	7ebb      	ldrb	r3, [r7, #26]
 800a340:	8bba      	ldrh	r2, [r7, #28]
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	f007 fdc6 	bl	8011ed4 <tcp_write>
 800a348:	4603      	mov	r3, r0
 800a34a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a34c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d12c      	bne.n	800a3ae <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	6999      	ldr	r1, [r3, #24]
 800a35a:	8bba      	ldrh	r2, [r7, #28]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	440a      	add	r2, r1
 800a362:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	6919      	ldr	r1, [r3, #16]
 800a36a:	8bba      	ldrh	r2, [r7, #28]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	440a      	add	r2, r1
 800a372:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d113      	bne.n	800a3ae <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	899a      	ldrh	r2, [r3, #12]
 800a38c:	3a01      	subs	r2, #1
 800a38e:	b292      	uxth	r2, r2
 800a390:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	899b      	ldrh	r3, [r3, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d008      	beq.n	800a3ae <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	689a      	ldr	r2, [r3, #8]
 800a3a2:	3208      	adds	r2, #8
 800a3a4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a3ae:	7e7b      	ldrb	r3, [r7, #25]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <lwip_netconn_do_writemore+0x222>
 800a3b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f43f af50 	beq.w	800a25e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a3be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <lwip_netconn_do_writemore+0x234>
 800a3c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ce:	d146      	bne.n	800a45e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a3d0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a3d2:	7e3b      	ldrb	r3, [r7, #24]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d02b      	beq.n	800a430 <lwip_netconn_do_writemore+0x294>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d223      	bcs.n	800a430 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <lwip_netconn_do_writemore+0x260>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2103      	movs	r1, #3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	7f1b      	ldrb	r3, [r3, #28]
 800a400:	f043 0310 	orr.w	r3, r3, #16
 800a404:	b2da      	uxtb	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	771a      	strb	r2, [r3, #28]
 800a40a:	e028      	b.n	800a45e <lwip_netconn_do_writemore+0x2c2>
 800a40c:	0801a910 	.word	0x0801a910
 800a410:	0801aa68 	.word	0x0801aa68
 800a414:	0801a954 	.word	0x0801a954
 800a418:	0801ad70 	.word	0x0801ad70
 800a41c:	0801aa78 	.word	0x0801aa78
 800a420:	0801ad90 	.word	0x0801ad90
 800a424:	0801ada8 	.word	0x0801ada8
 800a428:	0801ade8 	.word	0x0801ade8
 800a42c:	0801ae10 	.word	0x0801ae10
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a438:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a43c:	d305      	bcc.n	800a44a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a446:	2b04      	cmp	r3, #4
 800a448:	d909      	bls.n	800a45e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <lwip_netconn_do_writemore+0x2c2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	2200      	movs	r2, #0
 800a458:	2103      	movs	r1, #3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a45e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d11d      	bne.n	800a4a2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	699a      	ldr	r2, [r3, #24]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	429a      	cmp	r2, r3
 800a474:	d002      	beq.n	800a47c <lwip_netconn_do_writemore+0x2e0>
 800a476:	7e3b      	ldrb	r3, [r7, #24]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a47c:	2301      	movs	r3, #1
 800a47e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	f008 fb0f 	bl	8012aa8 <tcp_output>
 800a48a:	4603      	mov	r3, r0
 800a48c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a48e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a492:	f113 0f04 	cmn.w	r3, #4
 800a496:	d12c      	bne.n	800a4f2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a498:	7b3b      	ldrb	r3, [r7, #12]
 800a49a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	76fb      	strb	r3, [r7, #27]
 800a4a0:	e027      	b.n	800a4f2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a4a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	d120      	bne.n	800a4ee <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f008 faf9 	bl	8012aa8 <tcp_output>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a4ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a4be:	f113 0f04 	cmn.w	r3, #4
 800a4c2:	d104      	bne.n	800a4ce <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a4c4:	7b7b      	ldrb	r3, [r7, #13]
 800a4c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	76fb      	strb	r3, [r7, #27]
 800a4cc:	e011      	b.n	800a4f2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a4ce:	7e3b      	ldrb	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00e      	beq.n	800a4f2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a1b      	ldr	r3, [r3, #32]
 800a4d8:	699b      	ldr	r3, [r3, #24]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <lwip_netconn_do_writemore+0x348>
 800a4de:	f06f 0306 	mvn.w	r3, #6
 800a4e2:	e000      	b.n	800a4e6 <lwip_netconn_do_writemore+0x34a>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	76fb      	strb	r3, [r7, #27]
 800a4ec:	e001      	b.n	800a4f2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a4f2:	7efb      	ldrb	r3, [r7, #27]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d015      	beq.n	800a524 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	330c      	adds	r3, #12
 800a500:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	7ffa      	ldrb	r2, [r7, #31]
 800a508:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d006      	beq.n	800a52a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a51c:	68b8      	ldr	r0, [r7, #8]
 800a51e:	f00e fb15 	bl	8018b4c <sys_sem_signal>
 800a522:	e002      	b.n	800a52a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	e000      	b.n	800a52c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fbce 	bl	8008ce6 <netconn_err>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d166      	bne.n	800a624 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a560:	2b10      	cmp	r3, #16
 800a562:	d15d      	bne.n	800a620 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a56e:	23fb      	movs	r3, #251	; 0xfb
 800a570:	73fb      	strb	r3, [r7, #15]
 800a572:	e057      	b.n	800a624 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d04d      	beq.n	800a61a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2201      	movs	r2, #1
 800a584:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d006      	beq.n	800a59e <lwip_netconn_do_write+0x6a>
 800a590:	4b28      	ldr	r3, [pc, #160]	; (800a634 <lwip_netconn_do_write+0x100>)
 800a592:	f240 7223 	movw	r2, #1827	; 0x723
 800a596:	4928      	ldr	r1, [pc, #160]	; (800a638 <lwip_netconn_do_write+0x104>)
 800a598:	4828      	ldr	r0, [pc, #160]	; (800a63c <lwip_netconn_do_write+0x108>)
 800a59a:	f00e fd8b 	bl	80190b4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <lwip_netconn_do_write+0x80>
 800a5a6:	4b23      	ldr	r3, [pc, #140]	; (800a634 <lwip_netconn_do_write+0x100>)
 800a5a8:	f240 7224 	movw	r2, #1828	; 0x724
 800a5ac:	4924      	ldr	r1, [pc, #144]	; (800a640 <lwip_netconn_do_write+0x10c>)
 800a5ae:	4823      	ldr	r0, [pc, #140]	; (800a63c <lwip_netconn_do_write+0x108>)
 800a5b0:	f00e fd80 	bl	80190b4 <iprintf>
        msg->conn->current_msg = msg;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff fdea 	bl	800a19c <lwip_netconn_do_writemore>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d02e      	beq.n	800a62c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	785b      	ldrb	r3, [r3, #1]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d006      	beq.n	800a5e6 <lwip_netconn_do_write+0xb2>
 800a5d8:	4b16      	ldr	r3, [pc, #88]	; (800a634 <lwip_netconn_do_write+0x100>)
 800a5da:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a5de:	4919      	ldr	r1, [pc, #100]	; (800a644 <lwip_netconn_do_write+0x110>)
 800a5e0:	4816      	ldr	r0, [pc, #88]	; (800a63c <lwip_netconn_do_write+0x108>)
 800a5e2:	f00e fd67 	bl	80190b4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a5e6:	4818      	ldr	r0, [pc, #96]	; (800a648 <lwip_netconn_do_write+0x114>)
 800a5e8:	f00e fb21 	bl	8018c2e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f00e fa78 	bl	8018aea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a5fa:	4813      	ldr	r0, [pc, #76]	; (800a648 <lwip_netconn_do_write+0x114>)
 800a5fc:	f00e fb08 	bl	8018c10 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	785b      	ldrb	r3, [r3, #1]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d110      	bne.n	800a62c <lwip_netconn_do_write+0xf8>
 800a60a:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <lwip_netconn_do_write+0x100>)
 800a60c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a610:	490c      	ldr	r1, [pc, #48]	; (800a644 <lwip_netconn_do_write+0x110>)
 800a612:	480a      	ldr	r0, [pc, #40]	; (800a63c <lwip_netconn_do_write+0x108>)
 800a614:	f00e fd4e 	bl	80190b4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a618:	e008      	b.n	800a62c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a61a:	23f5      	movs	r3, #245	; 0xf5
 800a61c:	73fb      	strb	r3, [r7, #15]
 800a61e:	e001      	b.n	800a624 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a620:	23fa      	movs	r3, #250	; 0xfa
 800a622:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	7bfa      	ldrb	r2, [r7, #15]
 800a628:	711a      	strb	r2, [r3, #4]
 800a62a:	e000      	b.n	800a62e <lwip_netconn_do_write+0xfa>
        return;
 800a62c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	0801a910 	.word	0x0801a910
 800a638:	0801acb4 	.word	0x0801acb4
 800a63c:	0801a954 	.word	0x0801a954
 800a640:	0801ae3c 	.word	0x0801ae3c
 800a644:	0801acd0 	.word	0x0801acd0
 800a648:	2000d2d4 	.word	0x2000d2d4

0800a64c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d069      	beq.n	800a73e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a674:	2b10      	cmp	r3, #16
 800a676:	d162      	bne.n	800a73e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	d002      	beq.n	800a686 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a680:	7afb      	ldrb	r3, [r7, #11]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d05b      	beq.n	800a73e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a686:	7afb      	ldrb	r3, [r7, #11]
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d103      	bne.n	800a694 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	22f5      	movs	r2, #245	; 0xf5
 800a690:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a692:	e059      	b.n	800a748 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d103      	bne.n	800a6a2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	22fb      	movs	r2, #251	; 0xfb
 800a69e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a6a0:	e052      	b.n	800a748 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	7a1b      	ldrb	r3, [r3, #8]
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff f850 	bl	8009758 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d006      	beq.n	800a6d0 <lwip_netconn_do_close+0x84>
 800a6c2:	4b23      	ldr	r3, [pc, #140]	; (800a750 <lwip_netconn_do_close+0x104>)
 800a6c4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a6c8:	4922      	ldr	r1, [pc, #136]	; (800a754 <lwip_netconn_do_close+0x108>)
 800a6ca:	4823      	ldr	r0, [pc, #140]	; (800a758 <lwip_netconn_do_close+0x10c>)
 800a6cc:	f00e fcf2 	bl	80190b4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2204      	movs	r2, #4
 800a6d6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff f8b4 	bl	8009854 <lwip_netconn_do_close_internal>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d029      	beq.n	800a746 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d006      	beq.n	800a70a <lwip_netconn_do_close+0xbe>
 800a6fc:	4b14      	ldr	r3, [pc, #80]	; (800a750 <lwip_netconn_do_close+0x104>)
 800a6fe:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a702:	4916      	ldr	r1, [pc, #88]	; (800a75c <lwip_netconn_do_close+0x110>)
 800a704:	4814      	ldr	r0, [pc, #80]	; (800a758 <lwip_netconn_do_close+0x10c>)
 800a706:	f00e fcd5 	bl	80190b4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a70a:	4815      	ldr	r0, [pc, #84]	; (800a760 <lwip_netconn_do_close+0x114>)
 800a70c:	f00e fa8f 	bl	8018c2e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	330c      	adds	r3, #12
 800a716:	2100      	movs	r1, #0
 800a718:	4618      	mov	r0, r3
 800a71a:	f00e f9e6 	bl	8018aea <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a71e:	4810      	ldr	r0, [pc, #64]	; (800a760 <lwip_netconn_do_close+0x114>)
 800a720:	f00e fa76 	bl	8018c10 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <lwip_netconn_do_close+0xfa>
 800a72e:	4b08      	ldr	r3, [pc, #32]	; (800a750 <lwip_netconn_do_close+0x104>)
 800a730:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a734:	4909      	ldr	r1, [pc, #36]	; (800a75c <lwip_netconn_do_close+0x110>)
 800a736:	4808      	ldr	r0, [pc, #32]	; (800a758 <lwip_netconn_do_close+0x10c>)
 800a738:	f00e fcbc 	bl	80190b4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a73c:	e003      	b.n	800a746 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	22f5      	movs	r2, #245	; 0xf5
 800a742:	711a      	strb	r2, [r3, #4]
 800a744:	e000      	b.n	800a748 <lwip_netconn_do_close+0xfc>
      return;
 800a746:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	0801a910 	.word	0x0801a910
 800a754:	0801acb4 	.word	0x0801acb4
 800a758:	0801a954 	.word	0x0801a954
 800a75c:	0801acd0 	.word	0x0801acd0
 800a760:	2000d2d4 	.word	0x2000d2d4

0800a764 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d013      	beq.n	800a79a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00b      	beq.n	800a792 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f002 fc90 	bl	800d0a4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	605a      	str	r2, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a792:	6879      	ldr	r1, [r7, #4]
 800a794:	2006      	movs	r0, #6
 800a796:	f001 fdd5 	bl	800c344 <memp_free>
  }
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d108      	bne.n	800a7c8 <netbuf_data+0x24>
 800a7b6:	4b1b      	ldr	r3, [pc, #108]	; (800a824 <netbuf_data+0x80>)
 800a7b8:	22c6      	movs	r2, #198	; 0xc6
 800a7ba:	491b      	ldr	r1, [pc, #108]	; (800a828 <netbuf_data+0x84>)
 800a7bc:	481b      	ldr	r0, [pc, #108]	; (800a82c <netbuf_data+0x88>)
 800a7be:	f00e fc79 	bl	80190b4 <iprintf>
 800a7c2:	f06f 030f 	mvn.w	r3, #15
 800a7c6:	e029      	b.n	800a81c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d108      	bne.n	800a7e0 <netbuf_data+0x3c>
 800a7ce:	4b15      	ldr	r3, [pc, #84]	; (800a824 <netbuf_data+0x80>)
 800a7d0:	22c7      	movs	r2, #199	; 0xc7
 800a7d2:	4917      	ldr	r1, [pc, #92]	; (800a830 <netbuf_data+0x8c>)
 800a7d4:	4815      	ldr	r0, [pc, #84]	; (800a82c <netbuf_data+0x88>)
 800a7d6:	f00e fc6d 	bl	80190b4 <iprintf>
 800a7da:	f06f 030f 	mvn.w	r3, #15
 800a7de:	e01d      	b.n	800a81c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d108      	bne.n	800a7f8 <netbuf_data+0x54>
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <netbuf_data+0x80>)
 800a7e8:	22c8      	movs	r2, #200	; 0xc8
 800a7ea:	4912      	ldr	r1, [pc, #72]	; (800a834 <netbuf_data+0x90>)
 800a7ec:	480f      	ldr	r0, [pc, #60]	; (800a82c <netbuf_data+0x88>)
 800a7ee:	f00e fc61 	bl	80190b4 <iprintf>
 800a7f2:	f06f 030f 	mvn.w	r3, #15
 800a7f6:	e011      	b.n	800a81c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <netbuf_data+0x62>
    return ERR_BUF;
 800a800:	f06f 0301 	mvn.w	r3, #1
 800a804:	e00a      	b.n	800a81c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	895a      	ldrh	r2, [r3, #10]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	0801ae68 	.word	0x0801ae68
 800a828:	0801af70 	.word	0x0801af70
 800a82c:	0801aeb8 	.word	0x0801aeb8
 800a830:	0801af8c 	.word	0x0801af8c
 800a834:	0801afac 	.word	0x0801afac

0800a838 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d108      	bne.n	800a858 <netbuf_next+0x20>
 800a846:	4b11      	ldr	r3, [pc, #68]	; (800a88c <netbuf_next+0x54>)
 800a848:	22e0      	movs	r2, #224	; 0xe0
 800a84a:	4911      	ldr	r1, [pc, #68]	; (800a890 <netbuf_next+0x58>)
 800a84c:	4811      	ldr	r0, [pc, #68]	; (800a894 <netbuf_next+0x5c>)
 800a84e:	f00e fc31 	bl	80190b4 <iprintf>
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	e014      	b.n	800a882 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <netbuf_next+0x30>
    return -1;
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	e00c      	b.n	800a882 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <netbuf_next+0x48>
    return 1;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <netbuf_next+0x4a>
  }
  return 0;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	0801ae68 	.word	0x0801ae68
 800a890:	0801afc8 	.word	0x0801afc8
 800a894:	0801aeb8 	.word	0x0801aeb8

0800a898 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a8a2:	f009 f9b9 	bl	8013c18 <sys_timeouts_sleeptime>
 800a8a6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	d10b      	bne.n	800a8c8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a8b0:	4813      	ldr	r0, [pc, #76]	; (800a900 <tcpip_timeouts_mbox_fetch+0x68>)
 800a8b2:	f00e f9bc 	bl	8018c2e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f00e f874 	bl	80189a8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a8c0:	480f      	ldr	r0, [pc, #60]	; (800a900 <tcpip_timeouts_mbox_fetch+0x68>)
 800a8c2:	f00e f9a5 	bl	8018c10 <sys_mutex_lock>
    return;
 800a8c6:	e018      	b.n	800a8fa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d102      	bne.n	800a8d4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a8ce:	f009 f969 	bl	8013ba4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a8d2:	e7e6      	b.n	800a8a2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a8d4:	480a      	ldr	r0, [pc, #40]	; (800a900 <tcpip_timeouts_mbox_fetch+0x68>)
 800a8d6:	f00e f9aa 	bl	8018c2e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f00e f862 	bl	80189a8 <sys_arch_mbox_fetch>
 800a8e4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a8e6:	4806      	ldr	r0, [pc, #24]	; (800a900 <tcpip_timeouts_mbox_fetch+0x68>)
 800a8e8:	f00e f992 	bl	8018c10 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d102      	bne.n	800a8fa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a8f4:	f009 f956 	bl	8013ba4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a8f8:	e7d3      	b.n	800a8a2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	2000d2d4 	.word	0x2000d2d4

0800a904 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a90c:	4810      	ldr	r0, [pc, #64]	; (800a950 <tcpip_thread+0x4c>)
 800a90e:	f00e f97f 	bl	8018c10 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a912:	4b10      	ldr	r3, [pc, #64]	; (800a954 <tcpip_thread+0x50>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d005      	beq.n	800a926 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a91a:	4b0e      	ldr	r3, [pc, #56]	; (800a954 <tcpip_thread+0x50>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a0e      	ldr	r2, [pc, #56]	; (800a958 <tcpip_thread+0x54>)
 800a920:	6812      	ldr	r2, [r2, #0]
 800a922:	4610      	mov	r0, r2
 800a924:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	4619      	mov	r1, r3
 800a92c:	480b      	ldr	r0, [pc, #44]	; (800a95c <tcpip_thread+0x58>)
 800a92e:	f7ff ffb3 	bl	800a898 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a938:	4b09      	ldr	r3, [pc, #36]	; (800a960 <tcpip_thread+0x5c>)
 800a93a:	2291      	movs	r2, #145	; 0x91
 800a93c:	4909      	ldr	r1, [pc, #36]	; (800a964 <tcpip_thread+0x60>)
 800a93e:	480a      	ldr	r0, [pc, #40]	; (800a968 <tcpip_thread+0x64>)
 800a940:	f00e fbb8 	bl	80190b4 <iprintf>
      continue;
 800a944:	e003      	b.n	800a94e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f80f 	bl	800a96c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a94e:	e7ea      	b.n	800a926 <tcpip_thread+0x22>
 800a950:	2000d2d4 	.word	0x2000d2d4
 800a954:	2000d2c8 	.word	0x2000d2c8
 800a958:	2000d2cc 	.word	0x2000d2cc
 800a95c:	2000d2d0 	.word	0x2000d2d0
 800a960:	0801b000 	.word	0x0801b000
 800a964:	0801b030 	.word	0x0801b030
 800a968:	0801b050 	.word	0x0801b050

0800a96c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d026      	beq.n	800a9ca <tcpip_thread_handle_msg+0x5e>
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	dc2b      	bgt.n	800a9d8 <tcpip_thread_handle_msg+0x6c>
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <tcpip_thread_handle_msg+0x1e>
 800a984:	2b01      	cmp	r3, #1
 800a986:	d015      	beq.n	800a9b4 <tcpip_thread_handle_msg+0x48>
 800a988:	e026      	b.n	800a9d8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	6850      	ldr	r0, [r2, #4]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6892      	ldr	r2, [r2, #8]
 800a996:	4611      	mov	r1, r2
 800a998:	4798      	blx	r3
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f002 fb7d 	bl	800d0a4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	2009      	movs	r0, #9
 800a9ae:	f001 fcc9 	bl	800c344 <memp_free>
      break;
 800a9b2:	e018      	b.n	800a9e6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	6892      	ldr	r2, [r2, #8]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	2008      	movs	r0, #8
 800a9c4:	f001 fcbe 	bl	800c344 <memp_free>
      break;
 800a9c8:	e00d      	b.n	800a9e6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6892      	ldr	r2, [r2, #8]
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	4798      	blx	r3
      break;
 800a9d6:	e006      	b.n	800a9e6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a9d8:	4b05      	ldr	r3, [pc, #20]	; (800a9f0 <tcpip_thread_handle_msg+0x84>)
 800a9da:	22cf      	movs	r2, #207	; 0xcf
 800a9dc:	4905      	ldr	r1, [pc, #20]	; (800a9f4 <tcpip_thread_handle_msg+0x88>)
 800a9de:	4806      	ldr	r0, [pc, #24]	; (800a9f8 <tcpip_thread_handle_msg+0x8c>)
 800a9e0:	f00e fb68 	bl	80190b4 <iprintf>
      break;
 800a9e4:	bf00      	nop
  }
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	0801b000 	.word	0x0801b000
 800a9f4:	0801b030 	.word	0x0801b030
 800a9f8:	0801b050 	.word	0x0801b050

0800a9fc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa08:	481a      	ldr	r0, [pc, #104]	; (800aa74 <tcpip_inpkt+0x78>)
 800aa0a:	f00e f828 	bl	8018a5e <sys_mbox_valid>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d105      	bne.n	800aa20 <tcpip_inpkt+0x24>
 800aa14:	4b18      	ldr	r3, [pc, #96]	; (800aa78 <tcpip_inpkt+0x7c>)
 800aa16:	22fc      	movs	r2, #252	; 0xfc
 800aa18:	4918      	ldr	r1, [pc, #96]	; (800aa7c <tcpip_inpkt+0x80>)
 800aa1a:	4819      	ldr	r0, [pc, #100]	; (800aa80 <tcpip_inpkt+0x84>)
 800aa1c:	f00e fb4a 	bl	80190b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aa20:	2009      	movs	r0, #9
 800aa22:	f001 fc19 	bl	800c258 <memp_malloc>
 800aa26:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800aa2e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa32:	e01a      	b.n	800aa6a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aa4c:	6979      	ldr	r1, [r7, #20]
 800aa4e:	4809      	ldr	r0, [pc, #36]	; (800aa74 <tcpip_inpkt+0x78>)
 800aa50:	f00d ff90 	bl	8018974 <sys_mbox_trypost>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d006      	beq.n	800aa68 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa5a:	6979      	ldr	r1, [r7, #20]
 800aa5c:	2009      	movs	r0, #9
 800aa5e:	f001 fc71 	bl	800c344 <memp_free>
    return ERR_MEM;
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295
 800aa66:	e000      	b.n	800aa6a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aa68:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000d2d0 	.word	0x2000d2d0
 800aa78:	0801b000 	.word	0x0801b000
 800aa7c:	0801b078 	.word	0x0801b078
 800aa80:	0801b050 	.word	0x0801b050

0800aa84 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa94:	f003 0318 	and.w	r3, r3, #24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800aa9c:	4a08      	ldr	r2, [pc, #32]	; (800aac0 <tcpip_input+0x3c>)
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff ffab 	bl	800a9fc <tcpip_inpkt>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	e005      	b.n	800aab6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800aaaa:	4a06      	ldr	r2, [pc, #24]	; (800aac4 <tcpip_input+0x40>)
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff ffa4 	bl	800a9fc <tcpip_inpkt>
 800aab4:	4603      	mov	r3, r0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	08018761 	.word	0x08018761
 800aac4:	0801762d 	.word	0x0801762d

0800aac8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aad2:	4819      	ldr	r0, [pc, #100]	; (800ab38 <tcpip_try_callback+0x70>)
 800aad4:	f00d ffc3 	bl	8018a5e <sys_mbox_valid>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <tcpip_try_callback+0x24>
 800aade:	4b17      	ldr	r3, [pc, #92]	; (800ab3c <tcpip_try_callback+0x74>)
 800aae0:	f240 125d 	movw	r2, #349	; 0x15d
 800aae4:	4916      	ldr	r1, [pc, #88]	; (800ab40 <tcpip_try_callback+0x78>)
 800aae6:	4817      	ldr	r0, [pc, #92]	; (800ab44 <tcpip_try_callback+0x7c>)
 800aae8:	f00e fae4 	bl	80190b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800aaec:	2008      	movs	r0, #8
 800aaee:	f001 fbb3 	bl	800c258 <memp_malloc>
 800aaf2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d102      	bne.n	800ab00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
 800aafe:	e017      	b.n	800ab30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2201      	movs	r2, #1
 800ab04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	4808      	ldr	r0, [pc, #32]	; (800ab38 <tcpip_try_callback+0x70>)
 800ab16:	f00d ff2d 	bl	8018974 <sys_mbox_trypost>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d006      	beq.n	800ab2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ab20:	68f9      	ldr	r1, [r7, #12]
 800ab22:	2008      	movs	r0, #8
 800ab24:	f001 fc0e 	bl	800c344 <memp_free>
    return ERR_MEM;
 800ab28:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2c:	e000      	b.n	800ab30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	2000d2d0 	.word	0x2000d2d0
 800ab3c:	0801b000 	.word	0x0801b000
 800ab40:	0801b078 	.word	0x0801b078
 800ab44:	0801b050 	.word	0x0801b050

0800ab48 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ab54:	4806      	ldr	r0, [pc, #24]	; (800ab70 <tcpip_send_msg_wait_sem+0x28>)
 800ab56:	f00e f85b 	bl	8018c10 <sys_mutex_lock>
  fn(apimsg);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	68b8      	ldr	r0, [r7, #8]
 800ab5e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ab60:	4803      	ldr	r0, [pc, #12]	; (800ab70 <tcpip_send_msg_wait_sem+0x28>)
 800ab62:	f00e f864 	bl	8018c2e <sys_mutex_unlock>
  return ERR_OK;
 800ab66:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	2000d2d4 	.word	0x2000d2d4

0800ab74 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af02      	add	r7, sp, #8
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ab7e:	f000 fec1 	bl	800b904 <lwip_init>

  tcpip_init_done = initfunc;
 800ab82:	4a17      	ldr	r2, [pc, #92]	; (800abe0 <tcpip_init+0x6c>)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ab88:	4a16      	ldr	r2, [pc, #88]	; (800abe4 <tcpip_init+0x70>)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ab8e:	2106      	movs	r1, #6
 800ab90:	4815      	ldr	r0, [pc, #84]	; (800abe8 <tcpip_init+0x74>)
 800ab92:	f00d febb 	bl	801890c <sys_mbox_new>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d006      	beq.n	800abaa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ab9c:	4b13      	ldr	r3, [pc, #76]	; (800abec <tcpip_init+0x78>)
 800ab9e:	f240 2261 	movw	r2, #609	; 0x261
 800aba2:	4913      	ldr	r1, [pc, #76]	; (800abf0 <tcpip_init+0x7c>)
 800aba4:	4813      	ldr	r0, [pc, #76]	; (800abf4 <tcpip_init+0x80>)
 800aba6:	f00e fa85 	bl	80190b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800abaa:	4813      	ldr	r0, [pc, #76]	; (800abf8 <tcpip_init+0x84>)
 800abac:	f00e f814 	bl	8018bd8 <sys_mutex_new>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d006      	beq.n	800abc4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800abb6:	4b0d      	ldr	r3, [pc, #52]	; (800abec <tcpip_init+0x78>)
 800abb8:	f240 2265 	movw	r2, #613	; 0x265
 800abbc:	490f      	ldr	r1, [pc, #60]	; (800abfc <tcpip_init+0x88>)
 800abbe:	480d      	ldr	r0, [pc, #52]	; (800abf4 <tcpip_init+0x80>)
 800abc0:	f00e fa78 	bl	80190b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800abc4:	2300      	movs	r3, #0
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abcc:	2200      	movs	r2, #0
 800abce:	490c      	ldr	r1, [pc, #48]	; (800ac00 <tcpip_init+0x8c>)
 800abd0:	480c      	ldr	r0, [pc, #48]	; (800ac04 <tcpip_init+0x90>)
 800abd2:	f00e f839 	bl	8018c48 <sys_thread_new>
}
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	2000d2c8 	.word	0x2000d2c8
 800abe4:	2000d2cc 	.word	0x2000d2cc
 800abe8:	2000d2d0 	.word	0x2000d2d0
 800abec:	0801b000 	.word	0x0801b000
 800abf0:	0801b088 	.word	0x0801b088
 800abf4:	0801b050 	.word	0x0801b050
 800abf8:	2000d2d4 	.word	0x2000d2d4
 800abfc:	0801b0ac 	.word	0x0801b0ac
 800ac00:	0800a905 	.word	0x0800a905
 800ac04:	0801b0d0 	.word	0x0801b0d0

0800ac08 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <fs_open+0x16>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <fs_open+0x1c>
    return ERR_ARG;
 800ac1e:	f06f 030f 	mvn.w	r3, #15
 800ac22:	e028      	b.n	800ac76 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ac24:	4b16      	ldr	r3, [pc, #88]	; (800ac80 <fs_open+0x78>)
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	e020      	b.n	800ac6c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6838      	ldr	r0, [r7, #0]
 800ac32:	f7f5 fadd 	bl	80001f0 <strcmp>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d114      	bne.n	800ac66 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	7c1a      	ldrb	r2, [r3, #16]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e007      	b.n	800ac76 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1db      	bne.n	800ac2a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ac72:	f06f 0305 	mvn.w	r3, #5
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	0802816c 	.word	0x0802816c

0800ac84 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	1ad3      	subs	r3, r2, r3
}
 800acaa:	4618      	mov	r0, r3
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800acbe:	222c      	movs	r2, #44	; 0x2c
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f00e f959 	bl	8018f7a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800acd6:	202c      	movs	r0, #44	; 0x2c
 800acd8:	f001 f91a 	bl	800bf10 <mem_malloc>
 800acdc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <http_state_alloc+0x1a>
    http_state_init(ret);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff ffe6 	bl	800acb6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800acea:	687b      	ldr	r3, [r7, #4]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d007      	beq.n	800ad14 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7ff ffbb 	bl	800ac84 <fs_close>
    hs->handle = NULL;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d007      	beq.n	800ad2c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f002 f9bf 	bl	800d0a4 <pbuf_free>
    hs->req = NULL;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d005      	beq.n	800ad4e <http_state_free+0x1a>
    http_state_eof(hs);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ffd6 	bl	800acf4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 ff47 	bl	800bbdc <mem_free>
  }
}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <http_write+0x22>
 800ad6c:	4b2c      	ldr	r3, [pc, #176]	; (800ae20 <http_write+0xc8>)
 800ad6e:	f240 2219 	movw	r2, #537	; 0x219
 800ad72:	492c      	ldr	r1, [pc, #176]	; (800ae24 <http_write+0xcc>)
 800ad74:	482c      	ldr	r0, [pc, #176]	; (800ae28 <http_write+0xd0>)
 800ad76:	f00e f99d 	bl	80190b4 <iprintf>
  len = *length;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ad80:	8afb      	ldrh	r3, [r7, #22]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <http_write+0x32>
    return ERR_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	e045      	b.n	800ae16 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad90:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ad92:	8aba      	ldrh	r2, [r7, #20]
 800ad94:	8afb      	ldrh	r3, [r7, #22]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d201      	bcs.n	800ad9e <http_write+0x46>
    len = max_len;
 800ad9a:	8abb      	ldrh	r3, [r7, #20]
 800ad9c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ada6:	8afa      	ldrh	r2, [r7, #22]
 800ada8:	8abb      	ldrh	r3, [r7, #20]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d901      	bls.n	800adb2 <http_write+0x5a>
    len = max_len;
 800adae:	8abb      	ldrh	r3, [r7, #20]
 800adb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	8afa      	ldrh	r2, [r7, #22]
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f007 f88b 	bl	8011ed4 <tcp_write>
 800adbe:	4603      	mov	r3, r0
 800adc0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800adc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adca:	d10f      	bne.n	800adec <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800addc:	2b08      	cmp	r3, #8
 800adde:	d902      	bls.n	800ade6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ade0:	2301      	movs	r3, #1
 800ade2:	82fb      	strh	r3, [r7, #22]
 800ade4:	e002      	b.n	800adec <http_write+0x94>
      } else {
        len /= 2;
 800ade6:	8afb      	ldrh	r3, [r7, #22]
 800ade8:	085b      	lsrs	r3, r3, #1
 800adea:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800adec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d102      	bne.n	800adfc <http_write+0xa4>
 800adf6:	8afb      	ldrh	r3, [r7, #22]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d8da      	bhi.n	800adb2 <http_write+0x5a>

  if (err == ERR_OK) {
 800adfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	8afa      	ldrh	r2, [r7, #22]
 800ae08:	801a      	strh	r2, [r3, #0]
 800ae0a:	e002      	b.n	800ae12 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ae12:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	0801b120 	.word	0x0801b120
 800ae24:	0801b158 	.word	0x0801b158
 800ae28:	0801b168 	.word	0x0801b168

0800ae2c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f004 f907 	bl	800f050 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ae42:	2100      	movs	r1, #0
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f004 f915 	bl	800f074 <tcp_recv>
  altcp_err(pcb, NULL);
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f004 f955 	bl	800f0fc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ae52:	2200      	movs	r2, #0
 800ae54:	2100      	movs	r1, #0
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f004 f98a 	bl	800f170 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f004 f92a 	bl	800f0b8 <tcp_sent>
  if (hs != NULL) {
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ae6a:	68b8      	ldr	r0, [r7, #8]
 800ae6c:	f7ff ff62 	bl	800ad34 <http_state_free>
  }

  if (abort_conn) {
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f002 ff14 	bl	800dca4 <tcp_abort>
    return ERR_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e00f      	b.n	800aea0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f002 fdc9 	bl	800da18 <tcp_close>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ae8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ae92:	2204      	movs	r2, #4
 800ae94:	4904      	ldr	r1, [pc, #16]	; (800aea8 <http_close_or_abort_conn+0x7c>)
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f004 f96a 	bl	800f170 <tcp_poll>
  }
  return err;
 800ae9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	0800b56f 	.word	0x0800b56f

0800aeac <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff ffb6 	bl	800ae2c <http_close_or_abort_conn>
 800aec0:	4603      	mov	r3, r0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff ffe8 	bl	800aeac <http_close_conn>
  }
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d105      	bne.n	800af02 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff ffe6 	bl	800aeca <http_eof>
    return 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	e016      	b.n	800af30 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff fec6 	bl	800ac98 <fs_bytes_left>
 800af0c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dc05      	bgt.n	800af20 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff ffd7 	bl	800aeca <http_eof>
    return 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	e007      	b.n	800af30 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800af20:	4b05      	ldr	r3, [pc, #20]	; (800af38 <http_check_eof+0x54>)
 800af22:	f240 429d 	movw	r2, #1181	; 0x49d
 800af26:	4905      	ldr	r1, [pc, #20]	; (800af3c <http_check_eof+0x58>)
 800af28:	4805      	ldr	r0, [pc, #20]	; (800af40 <http_check_eof+0x5c>)
 800af2a:	f00e f8c3 	bl	80190b4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800af2e:	2301      	movs	r3, #1
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	0801b120 	.word	0x0801b120
 800af3c:	0801b190 	.word	0x0801b190
 800af40:	0801b168 	.word	0x0801b168

0800af44 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d803      	bhi.n	800af66 <http_send_data_nonssi+0x22>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af62:	b29b      	uxth	r3, r3
 800af64:	e001      	b.n	800af6a <http_send_data_nonssi+0x26>
 800af66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af6a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	6999      	ldr	r1, [r3, #24]
 800af70:	f107 020c 	add.w	r2, r7, #12
 800af74:	2300      	movs	r3, #0
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff feee 	bl	800ad58 <http_write>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800af80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10d      	bne.n	800afa4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800af88:	2301      	movs	r3, #1
 800af8a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	89ba      	ldrh	r2, [r7, #12]
 800af92:	441a      	add	r2, r3
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	89ba      	ldrh	r2, [r7, #12]
 800af9e:	1a9a      	subs	r2, r3, r2
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800afb8:	2300      	movs	r3, #0
 800afba:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <http_send+0x18>
    return 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e025      	b.n	800b012 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d108      	bne.n	800afe0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff ff87 	bl	800aee4 <http_check_eof>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <http_send+0x32>
      return 0;
 800afdc:	2300      	movs	r3, #0
 800afde:	e018      	b.n	800b012 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff ffae 	bl	800af44 <http_send_data_nonssi>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <http_send+0x62>
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff fe4d 	bl	800ac98 <fs_bytes_left>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	dc05      	bgt.n	800b010 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff ff5f 	bl	800aeca <http_eof>
    return 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	e000      	b.n	800b012 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	4a1c      	ldr	r2, [pc, #112]	; (800b09c <http_get_404_file+0x80>)
 800b02a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4619      	mov	r1, r3
 800b034:	4610      	mov	r0, r2
 800b036:	f7ff fde7 	bl	800ac08 <fs_open>
 800b03a:	4603      	mov	r3, r0
 800b03c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d024      	beq.n	800b090 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	4a15      	ldr	r2, [pc, #84]	; (800b0a0 <http_get_404_file+0x84>)
 800b04a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4619      	mov	r1, r3
 800b054:	4610      	mov	r0, r2
 800b056:	f7ff fdd7 	bl	800ac08 <fs_open>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b05e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d014      	beq.n	800b090 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	4a0e      	ldr	r2, [pc, #56]	; (800b0a4 <http_get_404_file+0x88>)
 800b06a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7ff fdc7 	bl	800ac08 <fs_open>
 800b07a:	4603      	mov	r3, r0
 800b07c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b07e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d004      	beq.n	800b090 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2200      	movs	r2, #0
 800b08a:	601a      	str	r2, [r3, #0]
        return NULL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b090:	687b      	ldr	r3, [r7, #4]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0801b1c8 	.word	0x0801b1c8
 800b0a0:	0801b1d4 	.word	0x0801b1d4
 800b0a4:	0801b1e0 	.word	0x0801b1e0

0800b0a8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08e      	sub	sp, #56	; 0x38
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <http_parse_request+0x24>
 800b0be:	4b65      	ldr	r3, [pc, #404]	; (800b254 <http_parse_request+0x1ac>)
 800b0c0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800b0c4:	4964      	ldr	r1, [pc, #400]	; (800b258 <http_parse_request+0x1b0>)
 800b0c6:	4865      	ldr	r0, [pc, #404]	; (800b25c <http_parse_request+0x1b4>)
 800b0c8:	f00d fff4 	bl	80190b4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <http_parse_request+0x38>
 800b0d2:	4b60      	ldr	r3, [pc, #384]	; (800b254 <http_parse_request+0x1ac>)
 800b0d4:	f240 72af 	movw	r2, #1967	; 0x7af
 800b0d8:	4961      	ldr	r1, [pc, #388]	; (800b260 <http_parse_request+0x1b8>)
 800b0da:	4860      	ldr	r0, [pc, #384]	; (800b25c <http_parse_request+0x1b4>)
 800b0dc:	f00d ffea 	bl	80190b4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d103      	bne.n	800b0f0 <http_parse_request+0x48>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b0f0:	f06f 0307 	mvn.w	r3, #7
 800b0f4:	e0a9      	b.n	800b24a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d103      	bne.n	800b106 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	621a      	str	r2, [r3, #32]
 800b104:	e005      	b.n	800b112 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b10c:	4618      	mov	r0, r3
 800b10e:	f002 f897 	bl	800d240 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b114:	f002 f86c 	bl	800d1f0 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	6a1b      	ldr	r3, [r3, #32]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d012      	beq.n	800b148 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	891b      	ldrh	r3, [r3, #8]
 800b128:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b12c:	4293      	cmp	r3, r2
 800b12e:	bf28      	it	cs
 800b130:	4613      	movcs	r3, r2
 800b132:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	6a18      	ldr	r0, [r3, #32]
 800b138:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b13a:	2300      	movs	r3, #0
 800b13c:	4949      	ldr	r1, [pc, #292]	; (800b264 <http_parse_request+0x1bc>)
 800b13e:	f002 f9b7 	bl	800d4b0 <pbuf_copy_partial>
    data = httpd_req_buf;
 800b142:	4b48      	ldr	r3, [pc, #288]	; (800b264 <http_parse_request+0x1bc>)
 800b144:	637b      	str	r3, [r7, #52]	; 0x34
 800b146:	e005      	b.n	800b154 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	895b      	ldrh	r3, [r3, #10]
 800b152:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b154:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b156:	2b06      	cmp	r3, #6
 800b158:	d962      	bls.n	800b220 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b15a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b15c:	461a      	mov	r2, r3
 800b15e:	4942      	ldr	r1, [pc, #264]	; (800b268 <http_parse_request+0x1c0>)
 800b160:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b162:	f000 fb99 	bl	800b898 <lwip_strnstr>
 800b166:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d058      	beq.n	800b220 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b172:	2204      	movs	r2, #4
 800b174:	493d      	ldr	r1, [pc, #244]	; (800b26c <http_parse_request+0x1c4>)
 800b176:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b178:	f00e f925 	bl	80193c6 <strncmp>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d116      	bne.n	800b1b0 <http_parse_request+0x108>
        sp1 = data + 3;
 800b182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b184:	3303      	adds	r3, #3
 800b186:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	b29b      	uxth	r3, r3
 800b192:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	3301      	adds	r3, #1
 800b19c:	8b7a      	ldrh	r2, [r7, #26]
 800b19e:	4934      	ldr	r1, [pc, #208]	; (800b270 <http_parse_request+0x1c8>)
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fb79 	bl	800b898 <lwip_strnstr>
 800b1a6:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d111      	bne.n	800b1d2 <http_parse_request+0x12a>
 800b1ae:	e006      	b.n	800b1be <http_parse_request+0x116>
        data[4] = 0;
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b1b8:	f06f 030f 	mvn.w	r3, #15
 800b1bc:	e045      	b.n	800b24a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	8b7a      	ldrh	r2, [r7, #26]
 800b1c4:	4928      	ldr	r1, [pc, #160]	; (800b268 <http_parse_request+0x1c0>)
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fb66 	bl	800b898 <lwip_strnstr>
 800b1cc:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01e      	beq.n	800b220 <http_parse_request+0x178>
 800b1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d91a      	bls.n	800b220 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b1ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4921      	ldr	r1, [pc, #132]	; (800b274 <http_parse_request+0x1cc>)
 800b1f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b1f2:	f000 fb51 	bl	800b898 <lwip_strnstr>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d011      	beq.n	800b220 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	3301      	adds	r3, #1
 800b200:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b208:	8b3b      	ldrh	r3, [r7, #24]
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	4413      	add	r3, r2
 800b20e:	2200      	movs	r2, #0
 800b210:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b214:	6979      	ldr	r1, [r7, #20]
 800b216:	68b8      	ldr	r0, [r7, #8]
 800b218:	f000 f82e 	bl	800b278 <http_find_file>
 800b21c:	4603      	mov	r3, r0
 800b21e:	e014      	b.n	800b24a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	4618      	mov	r0, r3
 800b226:	f001 ffcb 	bl	800d1c0 <pbuf_clen>
 800b22a:	4603      	mov	r3, r0
 800b22c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	891b      	ldrh	r3, [r3, #8]
 800b234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b238:	d205      	bcs.n	800b246 <http_parse_request+0x19e>
 800b23a:	8a7b      	ldrh	r3, [r7, #18]
 800b23c:	2b05      	cmp	r3, #5
 800b23e:	d802      	bhi.n	800b246 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b240:	f06f 0304 	mvn.w	r3, #4
 800b244:	e001      	b.n	800b24a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b246:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3738      	adds	r7, #56	; 0x38
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	0801b120 	.word	0x0801b120
 800b258:	0801b1ec 	.word	0x0801b1ec
 800b25c:	0801b168 	.word	0x0801b168
 800b260:	0801b1f8 	.word	0x0801b1f8
 800b264:	2000d2d8 	.word	0x2000d2d8
 800b268:	0801b204 	.word	0x0801b204
 800b26c:	0801b208 	.word	0x0801b208
 800b270:	0801b210 	.word	0x0801b210
 800b274:	0801b214 	.word	0x0801b214

0800b278 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b092      	sub	sp, #72	; 0x48
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b284:	2300      	movs	r3, #0
 800b286:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4618      	mov	r0, r3
 800b296:	f7f4 ffb5 	bl	8000204 <strlen>
 800b29a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d06b      	beq.n	800b37a <http_find_file+0x102>
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	4413      	add	r3, r2
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b2f      	cmp	r3, #47	; 0x2f
 800b2ae:	d164      	bne.n	800b37a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b2b0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b2b2:	4a53      	ldr	r2, [pc, #332]	; (800b400 <http_find_file+0x188>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d102      	bne.n	800b2be <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d15d      	bne.n	800b37a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	2b3f      	cmp	r3, #63	; 0x3f
 800b2c4:	bf28      	it	cs
 800b2c6:	233f      	movcs	r3, #63	; 0x3f
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00a      	beq.n	800b2e6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	484a      	ldr	r0, [pc, #296]	; (800b400 <http_find_file+0x188>)
 800b2d8:	f00d fe27 	bl	8018f2a <memcpy>
      http_uri_buf[copy_len] = 0;
 800b2dc:	4a48      	ldr	r2, [pc, #288]	; (800b400 <http_find_file+0x188>)
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	4413      	add	r3, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ea:	e043      	b.n	800b374 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d028      	beq.n	800b344 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b2f8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d01e      	beq.n	800b33e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b300:	4a40      	ldr	r2, [pc, #256]	; (800b404 <http_find_file+0x18c>)
 800b302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f4 ff7b 	bl	8000204 <strlen>
 800b30e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	4293      	cmp	r3, r2
 800b316:	bf28      	it	cs
 800b318:	4613      	movcs	r3, r2
 800b31a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	4a38      	ldr	r2, [pc, #224]	; (800b400 <http_find_file+0x188>)
 800b320:	1898      	adds	r0, r3, r2
 800b322:	4a38      	ldr	r2, [pc, #224]	; (800b404 <http_find_file+0x18c>)
 800b324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b326:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	4619      	mov	r1, r3
 800b32e:	f00d fdfc 	bl	8018f2a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	4413      	add	r3, r2
 800b338:	4a31      	ldr	r2, [pc, #196]	; (800b400 <http_find_file+0x188>)
 800b33a:	2100      	movs	r1, #0
 800b33c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b33e:	4b30      	ldr	r3, [pc, #192]	; (800b400 <http_find_file+0x188>)
 800b340:	633b      	str	r3, [r7, #48]	; 0x30
 800b342:	e004      	b.n	800b34e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b344:	4a2f      	ldr	r2, [pc, #188]	; (800b404 <http_find_file+0x18c>)
 800b346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b34c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff fc58 	bl	800ac08 <fs_open>
 800b358:	4603      	mov	r3, r0
 800b35a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b35c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d104      	bne.n	800b36e <http_find_file+0xf6>
        uri = file_name;
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b36c:	e005      	b.n	800b37a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b370:	3301      	adds	r3, #1
 800b372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b376:	2b04      	cmp	r3, #4
 800b378:	d9b8      	bls.n	800b2ec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d124      	bne.n	800b3ca <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	213f      	movs	r1, #63	; 0x3f
 800b384:	4618      	mov	r0, r3
 800b386:	f00e f811 	bl	80193ac <strchr>
 800b38a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d005      	beq.n	800b39e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	2200      	movs	r2, #0
 800b396:	701a      	strb	r2, [r3, #0]
      params++;
 800b398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39a:	3301      	adds	r3, #1
 800b39c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fc2f 	bl	800ac08 <fs_open>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b3ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d102      	bne.n	800b3bc <http_find_file+0x144>
      file = &hs->file_handle;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3ba:	e006      	b.n	800b3ca <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b3bc:	f107 0308 	add.w	r3, r7, #8
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff fe2a 	bl	800b01c <http_get_404_file>
 800b3c8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d106      	bne.n	800b3de <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fe20 	bl	800b01c <http_get_404_file>
 800b3dc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 f809 	bl	800b408 <http_init_file>
 800b3f6:	4603      	mov	r3, r0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3740      	adds	r7, #64	; 0x40
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	2000d6d8 	.word	0x2000d6d8
 800b404:	08028180 	.word	0x08028180

0800b408 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d05c      	beq.n	800b4d6 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <http_init_file+0x2a>
 800b424:	4b35      	ldr	r3, [pc, #212]	; (800b4fc <http_init_file+0xf4>)
 800b426:	f640 120b 	movw	r2, #2315	; 0x90b
 800b42a:	4935      	ldr	r1, [pc, #212]	; (800b500 <http_init_file+0xf8>)
 800b42c:	4835      	ldr	r0, [pc, #212]	; (800b504 <http_init_file+0xfc>)
 800b42e:	f00d fe41 	bl	80190b4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	da06      	bge.n	800b456 <http_init_file+0x4e>
 800b448:	4b2c      	ldr	r3, [pc, #176]	; (800b4fc <http_init_file+0xf4>)
 800b44a:	f640 1234 	movw	r2, #2356	; 0x934
 800b44e:	492e      	ldr	r1, [pc, #184]	; (800b508 <http_init_file+0x100>)
 800b450:	482c      	ldr	r0, [pc, #176]	; (800b504 <http_init_file+0xfc>)
 800b452:	f00d fe2f 	bl	80190b4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	461a      	mov	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	7c1b      	ldrb	r3, [r3, #16]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <http_init_file+0x7c>
 800b476:	4b21      	ldr	r3, [pc, #132]	; (800b4fc <http_init_file+0xf4>)
 800b478:	f640 1243 	movw	r2, #2371	; 0x943
 800b47c:	4923      	ldr	r1, [pc, #140]	; (800b50c <http_init_file+0x104>)
 800b47e:	4821      	ldr	r0, [pc, #132]	; (800b504 <http_init_file+0xfc>)
 800b480:	f00d fe18 	bl	80190b4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d032      	beq.n	800b4f0 <http_init_file+0xe8>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	7c1b      	ldrb	r3, [r3, #16]
 800b490:	f003 0301 	and.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	d02b      	beq.n	800b4f0 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6998      	ldr	r0, [r3, #24]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	491b      	ldr	r1, [pc, #108]	; (800b510 <http_init_file+0x108>)
 800b4a4:	f000 f9f8 	bl	800b898 <lwip_strnstr>
 800b4a8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d01f      	beq.n	800b4f0 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	699a      	ldr	r2, [r3, #24]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	441a      	add	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	625a      	str	r2, [r3, #36]	; 0x24
 800b4d4:	e00c      	b.n	800b4f0 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	0801b120 	.word	0x0801b120
 800b500:	0801b21c 	.word	0x0801b21c
 800b504:	0801b168 	.word	0x0801b168
 800b508:	0801b230 	.word	0x0801b230
 800b50c:	0801b250 	.word	0x0801b250
 800b510:	0801b214 	.word	0x0801b214

0800b514 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <http_err+0x1c>
    http_state_free(hs);
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7ff fc02 	bl	800ad34 <http_state_free>
  }
}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	4613      	mov	r3, r2
 800b544:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <http_sent+0x1c>
    return ERR_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	e008      	b.n	800b566 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b55c:	6979      	ldr	r1, [r7, #20]
 800b55e:	68b8      	ldr	r0, [r7, #8]
 800b560:	f7ff fd25 	bl	800afae <http_send>

  return ERR_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d107      	bne.n	800b592 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b582:	2100      	movs	r1, #0
 800b584:	6838      	ldr	r0, [r7, #0]
 800b586:	f7ff fc91 	bl	800aeac <http_close_conn>
 800b58a:	4603      	mov	r3, r0
 800b58c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e021      	b.n	800b5d6 <http_poll+0x68>
  } else {
    hs->retries++;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b598:	3301      	adds	r3, #1
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d105      	bne.n	800b5b8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	6838      	ldr	r0, [r7, #0]
 800b5b0:	f7ff fc7c 	bl	800aeac <http_close_conn>
      return ERR_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	e00e      	b.n	800b5d6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d009      	beq.n	800b5d4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b5c0:	68f9      	ldr	r1, [r7, #12]
 800b5c2:	6838      	ldr	r0, [r7, #0]
 800b5c4:	f7ff fcf3 	bl	800afae <http_send>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b5ce:	6838      	ldr	r0, [r7, #0]
 800b5d0:	f007 fa6a 	bl	8012aa8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b5f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <http_recv+0x26>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <http_recv+0x26>
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d111      	bne.n	800b62a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d008      	beq.n	800b61e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	891b      	ldrh	r3, [r3, #8]
 800b610:	4619      	mov	r1, r3
 800b612:	68b8      	ldr	r0, [r7, #8]
 800b614:	f002 fd20 	bl	800e058 <tcp_recved>
      pbuf_free(p);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 fd43 	bl	800d0a4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b61e:	6979      	ldr	r1, [r7, #20]
 800b620:	68b8      	ldr	r0, [r7, #8]
 800b622:	f7ff fc43 	bl	800aeac <http_close_conn>
    return ERR_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	e055      	b.n	800b6d6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	891b      	ldrh	r3, [r3, #8]
 800b62e:	4619      	mov	r1, r3
 800b630:	68b8      	ldr	r0, [r7, #8]
 800b632:	f002 fd11 	bl	800e058 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d147      	bne.n	800b6ce <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	6979      	ldr	r1, [r7, #20]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff fd30 	bl	800b0a8 <http_parse_request>
 800b648:	4603      	mov	r3, r0
 800b64a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b64c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d015      	beq.n	800b680 <http_recv+0xa0>
 800b654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b658:	f113 0f05 	cmn.w	r3, #5
 800b65c:	d010      	beq.n	800b680 <http_recv+0xa0>
 800b65e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b662:	f113 0f10 	cmn.w	r3, #16
 800b666:	d00b      	beq.n	800b680 <http_recv+0xa0>
 800b668:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b66c:	f113 0f08 	cmn.w	r3, #8
 800b670:	d006      	beq.n	800b680 <http_recv+0xa0>
 800b672:	4b1b      	ldr	r3, [pc, #108]	; (800b6e0 <http_recv+0x100>)
 800b674:	f640 2204 	movw	r2, #2564	; 0xa04
 800b678:	491a      	ldr	r1, [pc, #104]	; (800b6e4 <http_recv+0x104>)
 800b67a:	481b      	ldr	r0, [pc, #108]	; (800b6e8 <http_recv+0x108>)
 800b67c:	f00d fd1a 	bl	80190b4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b684:	f113 0f05 	cmn.w	r3, #5
 800b688:	d00b      	beq.n	800b6a2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	4618      	mov	r0, r3
 800b698:	f001 fd04 	bl	800d0a4 <pbuf_free>
          hs->req = NULL;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 fcfe 	bl	800d0a4 <pbuf_free>
      if (parsed == ERR_OK) {
 800b6a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b6b0:	6979      	ldr	r1, [r7, #20]
 800b6b2:	68b8      	ldr	r0, [r7, #8]
 800b6b4:	f7ff fc7b 	bl	800afae <http_send>
 800b6b8:	e00c      	b.n	800b6d4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6be:	f113 0f10 	cmn.w	r3, #16
 800b6c2:	d107      	bne.n	800b6d4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b6c4:	6979      	ldr	r1, [r7, #20]
 800b6c6:	68b8      	ldr	r0, [r7, #8]
 800b6c8:	f7ff fbf0 	bl	800aeac <http_close_conn>
 800b6cc:	e002      	b.n	800b6d4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 fce8 	bl	800d0a4 <pbuf_free>
    }
  }
  return ERR_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	0801b120 	.word	0x0801b120
 800b6e4:	0801b27c 	.word	0x0801b27c
 800b6e8:	0801b168 	.word	0x0801b168

0800b6ec <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b6fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <http_accept+0x1c>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <http_accept+0x22>
    return ERR_VAL;
 800b708:	f06f 0305 	mvn.w	r3, #5
 800b70c:	e025      	b.n	800b75a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b70e:	2101      	movs	r1, #1
 800b710:	68b8      	ldr	r0, [r7, #8]
 800b712:	f003 fa9d 	bl	800ec50 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b716:	f7ff fadb 	bl	800acd0 <http_state_alloc>
 800b71a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b722:	f04f 33ff 	mov.w	r3, #4294967295
 800b726:	e018      	b.n	800b75a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b72e:	6979      	ldr	r1, [r7, #20]
 800b730:	68b8      	ldr	r0, [r7, #8]
 800b732:	f003 fc8d 	bl	800f050 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b736:	490b      	ldr	r1, [pc, #44]	; (800b764 <http_accept+0x78>)
 800b738:	68b8      	ldr	r0, [r7, #8]
 800b73a:	f003 fc9b 	bl	800f074 <tcp_recv>
  altcp_err(pcb, http_err);
 800b73e:	490a      	ldr	r1, [pc, #40]	; (800b768 <http_accept+0x7c>)
 800b740:	68b8      	ldr	r0, [r7, #8]
 800b742:	f003 fcdb 	bl	800f0fc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b746:	2204      	movs	r2, #4
 800b748:	4908      	ldr	r1, [pc, #32]	; (800b76c <http_accept+0x80>)
 800b74a:	68b8      	ldr	r0, [r7, #8]
 800b74c:	f003 fd10 	bl	800f170 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b750:	4907      	ldr	r1, [pc, #28]	; (800b770 <http_accept+0x84>)
 800b752:	68b8      	ldr	r0, [r7, #8]
 800b754:	f003 fcb0 	bl	800f0b8 <tcp_sent>

  return ERR_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	0800b5e1 	.word	0x0800b5e1
 800b768:	0800b515 	.word	0x0800b515
 800b76c:	0800b56f 	.word	0x0800b56f
 800b770:	0800b539 	.word	0x0800b539

0800b774 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d029      	beq.n	800b7da <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b786:	2101      	movs	r1, #1
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f003 fa61 	bl	800ec50 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b78e:	887b      	ldrh	r3, [r7, #2]
 800b790:	461a      	mov	r2, r3
 800b792:	4914      	ldr	r1, [pc, #80]	; (800b7e4 <httpd_init_pcb+0x70>)
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 fa91 	bl	800dcbc <tcp_bind>
 800b79a:	4603      	mov	r3, r0
 800b79c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b79e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d006      	beq.n	800b7b4 <httpd_init_pcb+0x40>
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <httpd_init_pcb+0x74>)
 800b7a8:	f640 2257 	movw	r2, #2647	; 0xa57
 800b7ac:	490f      	ldr	r1, [pc, #60]	; (800b7ec <httpd_init_pcb+0x78>)
 800b7ae:	4810      	ldr	r0, [pc, #64]	; (800b7f0 <httpd_init_pcb+0x7c>)
 800b7b0:	f00d fc80 	bl	80190b4 <iprintf>
    pcb = altcp_listen(pcb);
 800b7b4:	21ff      	movs	r1, #255	; 0xff
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f002 fb38 	bl	800de2c <tcp_listen_with_backlog>
 800b7bc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <httpd_init_pcb+0x5e>
 800b7c4:	4b08      	ldr	r3, [pc, #32]	; (800b7e8 <httpd_init_pcb+0x74>)
 800b7c6:	f640 2259 	movw	r2, #2649	; 0xa59
 800b7ca:	490a      	ldr	r1, [pc, #40]	; (800b7f4 <httpd_init_pcb+0x80>)
 800b7cc:	4808      	ldr	r0, [pc, #32]	; (800b7f0 <httpd_init_pcb+0x7c>)
 800b7ce:	f00d fc71 	bl	80190b4 <iprintf>
    altcp_accept(pcb, http_accept);
 800b7d2:	4909      	ldr	r1, [pc, #36]	; (800b7f8 <httpd_init_pcb+0x84>)
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f003 fcb3 	bl	800f140 <tcp_accept>
  }
}
 800b7da:	bf00      	nop
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	080282c8 	.word	0x080282c8
 800b7e8:	0801b120 	.word	0x0801b120
 800b7ec:	0801b2a8 	.word	0x0801b2a8
 800b7f0:	0801b168 	.word	0x0801b168
 800b7f4:	0801b2c4 	.word	0x0801b2c4
 800b7f8:	0800b6ed 	.word	0x0800b6ed

0800b7fc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b802:	202e      	movs	r0, #46	; 0x2e
 800b804:	f003 fc16 	bl	800f034 <tcp_new_ip_type>
 800b808:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d106      	bne.n	800b81e <httpd_init+0x22>
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <httpd_init+0x34>)
 800b812:	f640 2272 	movw	r2, #2674	; 0xa72
 800b816:	4907      	ldr	r1, [pc, #28]	; (800b834 <httpd_init+0x38>)
 800b818:	4807      	ldr	r0, [pc, #28]	; (800b838 <httpd_init+0x3c>)
 800b81a:	f00d fc4b 	bl	80190b4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b81e:	2150      	movs	r1, #80	; 0x50
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7ff ffa7 	bl	800b774 <httpd_init_pcb>
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	0801b120 	.word	0x0801b120
 800b834:	0801b2e4 	.word	0x0801b2e4
 800b838:	0801b168 	.word	0x0801b168

0800b83c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b846:	88fb      	ldrh	r3, [r7, #6]
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	b21a      	sxth	r2, r3
 800b84c:	88fb      	ldrh	r3, [r7, #6]
 800b84e:	0a1b      	lsrs	r3, r3, #8
 800b850:	b29b      	uxth	r3, r3
 800b852:	b21b      	sxth	r3, r3
 800b854:	4313      	orrs	r3, r2
 800b856:	b21b      	sxth	r3, r3
 800b858:	b29b      	uxth	r3, r3
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	061a      	lsls	r2, r3, #24
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b87a:	431a      	orrs	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	0a1b      	lsrs	r3, r3, #8
 800b880:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b884:	431a      	orrs	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	0e1b      	lsrs	r3, r3, #24
 800b88a:	4313      	orrs	r3, r2
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b8a4:	68b8      	ldr	r0, [r7, #8]
 800b8a6:	f7f4 fcad 	bl	8000204 <strlen>
 800b8aa:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	e022      	b.n	800b8fc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	617b      	str	r3, [r7, #20]
 800b8ba:	e012      	b.n	800b8e2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	781a      	ldrb	r2, [r3, #0]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d109      	bne.n	800b8dc <lwip_strnstr+0x44>
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	6978      	ldr	r0, [r7, #20]
 800b8ce:	f00d fd7a 	bl	80193c6 <strncmp>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	e00f      	b.n	800b8fc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d007      	beq.n	800b8fa <lwip_strnstr+0x62>
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	441a      	add	r2, r3
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	440b      	add	r3, r1
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d9e0      	bls.n	800b8bc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b90e:	f00d f955 	bl	8018bbc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b912:	f000 f8d5 	bl	800bac0 <mem_init>
  memp_init();
 800b916:	f000 fc31 	bl	800c17c <memp_init>
  pbuf_init();
  netif_init();
 800b91a:	f000 fd3d 	bl	800c398 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b91e:	f008 f9b3 	bl	8013c88 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b922:	f001 fe69 	bl	800d5f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b926:	f008 f8f5 	bl	8013b14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <ptr_to_mem+0x20>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	88fb      	ldrh	r3, [r7, #6]
 800b944:	4413      	add	r3, r2
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	2000dd84 	.word	0x2000dd84

0800b958 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b960:	4b05      	ldr	r3, [pc, #20]	; (800b978 <mem_to_ptr+0x20>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	b29b      	uxth	r3, r3
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	2000dd84 	.word	0x2000dd84

0800b97c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b984:	4b45      	ldr	r3, [pc, #276]	; (800ba9c <plug_holes+0x120>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d206      	bcs.n	800b99c <plug_holes+0x20>
 800b98e:	4b44      	ldr	r3, [pc, #272]	; (800baa0 <plug_holes+0x124>)
 800b990:	f240 12df 	movw	r2, #479	; 0x1df
 800b994:	4943      	ldr	r1, [pc, #268]	; (800baa4 <plug_holes+0x128>)
 800b996:	4844      	ldr	r0, [pc, #272]	; (800baa8 <plug_holes+0x12c>)
 800b998:	f00d fb8c 	bl	80190b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b99c:	4b43      	ldr	r3, [pc, #268]	; (800baac <plug_holes+0x130>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d306      	bcc.n	800b9b4 <plug_holes+0x38>
 800b9a6:	4b3e      	ldr	r3, [pc, #248]	; (800baa0 <plug_holes+0x124>)
 800b9a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b9ac:	4940      	ldr	r1, [pc, #256]	; (800bab0 <plug_holes+0x134>)
 800b9ae:	483e      	ldr	r0, [pc, #248]	; (800baa8 <plug_holes+0x12c>)
 800b9b0:	f00d fb80 	bl	80190b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	791b      	ldrb	r3, [r3, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d006      	beq.n	800b9ca <plug_holes+0x4e>
 800b9bc:	4b38      	ldr	r3, [pc, #224]	; (800baa0 <plug_holes+0x124>)
 800b9be:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b9c2:	493c      	ldr	r1, [pc, #240]	; (800bab4 <plug_holes+0x138>)
 800b9c4:	4838      	ldr	r0, [pc, #224]	; (800baa8 <plug_holes+0x12c>)
 800b9c6:	f00d fb75 	bl	80190b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9d2:	d906      	bls.n	800b9e2 <plug_holes+0x66>
 800b9d4:	4b32      	ldr	r3, [pc, #200]	; (800baa0 <plug_holes+0x124>)
 800b9d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b9da:	4937      	ldr	r1, [pc, #220]	; (800bab8 <plug_holes+0x13c>)
 800b9dc:	4832      	ldr	r0, [pc, #200]	; (800baa8 <plug_holes+0x12c>)
 800b9de:	f00d fb69 	bl	80190b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	881b      	ldrh	r3, [r3, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff ffa4 	bl	800b934 <ptr_to_mem>
 800b9ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d024      	beq.n	800ba40 <plug_holes+0xc4>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	791b      	ldrb	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d120      	bne.n	800ba40 <plug_holes+0xc4>
 800b9fe:	4b2b      	ldr	r3, [pc, #172]	; (800baac <plug_holes+0x130>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d01b      	beq.n	800ba40 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ba08:	4b2c      	ldr	r3, [pc, #176]	; (800babc <plug_holes+0x140>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d102      	bne.n	800ba18 <plug_holes+0x9c>
      lfree = mem;
 800ba12:	4a2a      	ldr	r2, [pc, #168]	; (800babc <plug_holes+0x140>)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	881a      	ldrh	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba28:	d00a      	beq.n	800ba40 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff ff80 	bl	800b934 <ptr_to_mem>
 800ba34:	4604      	mov	r4, r0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff ff8e 	bl	800b958 <mem_to_ptr>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	885b      	ldrh	r3, [r3, #2]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff ff75 	bl	800b934 <ptr_to_mem>
 800ba4a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d01f      	beq.n	800ba94 <plug_holes+0x118>
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	791b      	ldrb	r3, [r3, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d11b      	bne.n	800ba94 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba5c:	4b17      	ldr	r3, [pc, #92]	; (800babc <plug_holes+0x140>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d102      	bne.n	800ba6c <plug_holes+0xf0>
      lfree = pmem;
 800ba66:	4a15      	ldr	r2, [pc, #84]	; (800babc <plug_holes+0x140>)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	881a      	ldrh	r2, [r3, #0]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba7c:	d00a      	beq.n	800ba94 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff ff56 	bl	800b934 <ptr_to_mem>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	68b8      	ldr	r0, [r7, #8]
 800ba8c:	f7ff ff64 	bl	800b958 <mem_to_ptr>
 800ba90:	4603      	mov	r3, r0
 800ba92:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd90      	pop	{r4, r7, pc}
 800ba9c:	2000dd84 	.word	0x2000dd84
 800baa0:	0801b300 	.word	0x0801b300
 800baa4:	0801b330 	.word	0x0801b330
 800baa8:	0801b348 	.word	0x0801b348
 800baac:	2000dd88 	.word	0x2000dd88
 800bab0:	0801b370 	.word	0x0801b370
 800bab4:	0801b38c 	.word	0x0801b38c
 800bab8:	0801b3a8 	.word	0x0801b3a8
 800babc:	2000dd90 	.word	0x2000dd90

0800bac0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bac6:	4b1f      	ldr	r3, [pc, #124]	; (800bb44 <mem_init+0x84>)
 800bac8:	3303      	adds	r3, #3
 800baca:	f023 0303 	bic.w	r3, r3, #3
 800bace:	461a      	mov	r2, r3
 800bad0:	4b1d      	ldr	r3, [pc, #116]	; (800bb48 <mem_init+0x88>)
 800bad2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bad4:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <mem_init+0x88>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bae0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800baee:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800baf2:	f7ff ff1f 	bl	800b934 <ptr_to_mem>
 800baf6:	4603      	mov	r3, r0
 800baf8:	4a14      	ldr	r2, [pc, #80]	; (800bb4c <mem_init+0x8c>)
 800bafa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bafc:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <mem_init+0x8c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2201      	movs	r2, #1
 800bb02:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bb04:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <mem_init+0x8c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb0c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bb0e:	4b0f      	ldr	r3, [pc, #60]	; (800bb4c <mem_init+0x8c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb16:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bb18:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <mem_init+0x88>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a0c      	ldr	r2, [pc, #48]	; (800bb50 <mem_init+0x90>)
 800bb1e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bb20:	480c      	ldr	r0, [pc, #48]	; (800bb54 <mem_init+0x94>)
 800bb22:	f00d f859 	bl	8018bd8 <sys_mutex_new>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d006      	beq.n	800bb3a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <mem_init+0x98>)
 800bb2e:	f240 221f 	movw	r2, #543	; 0x21f
 800bb32:	490a      	ldr	r1, [pc, #40]	; (800bb5c <mem_init+0x9c>)
 800bb34:	480a      	ldr	r0, [pc, #40]	; (800bb60 <mem_init+0xa0>)
 800bb36:	f00d fabd 	bl	80190b4 <iprintf>
  }
}
 800bb3a:	bf00      	nop
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	2000d730 	.word	0x2000d730
 800bb48:	2000dd84 	.word	0x2000dd84
 800bb4c:	2000dd88 	.word	0x2000dd88
 800bb50:	2000dd90 	.word	0x2000dd90
 800bb54:	2000dd8c 	.word	0x2000dd8c
 800bb58:	0801b300 	.word	0x0801b300
 800bb5c:	0801b3d4 	.word	0x0801b3d4
 800bb60:	0801b348 	.word	0x0801b348

0800bb64 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff fef3 	bl	800b958 <mem_to_ptr>
 800bb72:	4603      	mov	r3, r0
 800bb74:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff feda 	bl	800b934 <ptr_to_mem>
 800bb80:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	885b      	ldrh	r3, [r3, #2]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fed4 	bl	800b934 <ptr_to_mem>
 800bb8c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb96:	d818      	bhi.n	800bbca <mem_link_valid+0x66>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bba0:	d813      	bhi.n	800bbca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bba6:	8afa      	ldrh	r2, [r7, #22]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d004      	beq.n	800bbb6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	8afa      	ldrh	r2, [r7, #22]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d109      	bne.n	800bbca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbb6:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <mem_link_valid+0x74>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d006      	beq.n	800bbce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	885b      	ldrh	r3, [r3, #2]
 800bbc4:	8afa      	ldrh	r2, [r7, #22]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d001      	beq.n	800bbce <mem_link_valid+0x6a>
    return 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e000      	b.n	800bbd0 <mem_link_valid+0x6c>
  }
  return 1;
 800bbce:	2301      	movs	r3, #1
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	2000dd88 	.word	0x2000dd88

0800bbdc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d070      	beq.n	800bccc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00d      	beq.n	800bc10 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bbf4:	4b37      	ldr	r3, [pc, #220]	; (800bcd4 <mem_free+0xf8>)
 800bbf6:	f240 2273 	movw	r2, #627	; 0x273
 800bbfa:	4937      	ldr	r1, [pc, #220]	; (800bcd8 <mem_free+0xfc>)
 800bbfc:	4837      	ldr	r0, [pc, #220]	; (800bcdc <mem_free+0x100>)
 800bbfe:	f00d fa59 	bl	80190b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc02:	f00d f847 	bl	8018c94 <sys_arch_protect>
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f00d f851 	bl	8018cb0 <sys_arch_unprotect>
    return;
 800bc0e:	e05e      	b.n	800bcce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3b08      	subs	r3, #8
 800bc14:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc16:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <mem_free+0x104>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d306      	bcc.n	800bc2e <mem_free+0x52>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f103 020c 	add.w	r2, r3, #12
 800bc26:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <mem_free+0x108>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d90d      	bls.n	800bc4a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc2e:	4b29      	ldr	r3, [pc, #164]	; (800bcd4 <mem_free+0xf8>)
 800bc30:	f240 227f 	movw	r2, #639	; 0x27f
 800bc34:	492c      	ldr	r1, [pc, #176]	; (800bce8 <mem_free+0x10c>)
 800bc36:	4829      	ldr	r0, [pc, #164]	; (800bcdc <mem_free+0x100>)
 800bc38:	f00d fa3c 	bl	80190b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc3c:	f00d f82a 	bl	8018c94 <sys_arch_protect>
 800bc40:	6138      	str	r0, [r7, #16]
 800bc42:	6938      	ldr	r0, [r7, #16]
 800bc44:	f00d f834 	bl	8018cb0 <sys_arch_unprotect>
    return;
 800bc48:	e041      	b.n	800bcce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc4a:	4828      	ldr	r0, [pc, #160]	; (800bcec <mem_free+0x110>)
 800bc4c:	f00c ffe0 	bl	8018c10 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	791b      	ldrb	r3, [r3, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d110      	bne.n	800bc7a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc58:	4b1e      	ldr	r3, [pc, #120]	; (800bcd4 <mem_free+0xf8>)
 800bc5a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bc5e:	4924      	ldr	r1, [pc, #144]	; (800bcf0 <mem_free+0x114>)
 800bc60:	481e      	ldr	r0, [pc, #120]	; (800bcdc <mem_free+0x100>)
 800bc62:	f00d fa27 	bl	80190b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc66:	4821      	ldr	r0, [pc, #132]	; (800bcec <mem_free+0x110>)
 800bc68:	f00c ffe1 	bl	8018c2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc6c:	f00d f812 	bl	8018c94 <sys_arch_protect>
 800bc70:	6178      	str	r0, [r7, #20]
 800bc72:	6978      	ldr	r0, [r7, #20]
 800bc74:	f00d f81c 	bl	8018cb0 <sys_arch_unprotect>
    return;
 800bc78:	e029      	b.n	800bcce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bc7a:	69f8      	ldr	r0, [r7, #28]
 800bc7c:	f7ff ff72 	bl	800bb64 <mem_link_valid>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d110      	bne.n	800bca8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc86:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <mem_free+0xf8>)
 800bc88:	f240 2295 	movw	r2, #661	; 0x295
 800bc8c:	4919      	ldr	r1, [pc, #100]	; (800bcf4 <mem_free+0x118>)
 800bc8e:	4813      	ldr	r0, [pc, #76]	; (800bcdc <mem_free+0x100>)
 800bc90:	f00d fa10 	bl	80190b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc94:	4815      	ldr	r0, [pc, #84]	; (800bcec <mem_free+0x110>)
 800bc96:	f00c ffca 	bl	8018c2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc9a:	f00c fffb 	bl	8018c94 <sys_arch_protect>
 800bc9e:	61b8      	str	r0, [r7, #24]
 800bca0:	69b8      	ldr	r0, [r7, #24]
 800bca2:	f00d f805 	bl	8018cb0 <sys_arch_unprotect>
    return;
 800bca6:	e012      	b.n	800bcce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bcae:	4b12      	ldr	r3, [pc, #72]	; (800bcf8 <mem_free+0x11c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	69fa      	ldr	r2, [r7, #28]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d202      	bcs.n	800bcbe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bcb8:	4a0f      	ldr	r2, [pc, #60]	; (800bcf8 <mem_free+0x11c>)
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bcbe:	69f8      	ldr	r0, [r7, #28]
 800bcc0:	f7ff fe5c 	bl	800b97c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bcc4:	4809      	ldr	r0, [pc, #36]	; (800bcec <mem_free+0x110>)
 800bcc6:	f00c ffb2 	bl	8018c2e <sys_mutex_unlock>
 800bcca:	e000      	b.n	800bcce <mem_free+0xf2>
    return;
 800bccc:	bf00      	nop
}
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0801b300 	.word	0x0801b300
 800bcd8:	0801b3f0 	.word	0x0801b3f0
 800bcdc:	0801b348 	.word	0x0801b348
 800bce0:	2000dd84 	.word	0x2000dd84
 800bce4:	2000dd88 	.word	0x2000dd88
 800bce8:	0801b414 	.word	0x0801b414
 800bcec:	2000dd8c 	.word	0x2000dd8c
 800bcf0:	0801b430 	.word	0x0801b430
 800bcf4:	0801b458 	.word	0x0801b458
 800bcf8:	2000dd90 	.word	0x2000dd90

0800bcfc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bd08:	887b      	ldrh	r3, [r7, #2]
 800bd0a:	3303      	adds	r3, #3
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	f023 0303 	bic.w	r3, r3, #3
 800bd12:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bd14:	8bfb      	ldrh	r3, [r7, #30]
 800bd16:	2b0b      	cmp	r3, #11
 800bd18:	d801      	bhi.n	800bd1e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bd1a:	230c      	movs	r3, #12
 800bd1c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bd1e:	8bfb      	ldrh	r3, [r7, #30]
 800bd20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd24:	d803      	bhi.n	800bd2e <mem_trim+0x32>
 800bd26:	8bfa      	ldrh	r2, [r7, #30]
 800bd28:	887b      	ldrh	r3, [r7, #2]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d201      	bcs.n	800bd32 <mem_trim+0x36>
    return NULL;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e0d8      	b.n	800bee4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bd32:	4b6e      	ldr	r3, [pc, #440]	; (800beec <mem_trim+0x1f0>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d304      	bcc.n	800bd46 <mem_trim+0x4a>
 800bd3c:	4b6c      	ldr	r3, [pc, #432]	; (800bef0 <mem_trim+0x1f4>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d306      	bcc.n	800bd54 <mem_trim+0x58>
 800bd46:	4b6b      	ldr	r3, [pc, #428]	; (800bef4 <mem_trim+0x1f8>)
 800bd48:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bd4c:	496a      	ldr	r1, [pc, #424]	; (800bef8 <mem_trim+0x1fc>)
 800bd4e:	486b      	ldr	r0, [pc, #428]	; (800befc <mem_trim+0x200>)
 800bd50:	f00d f9b0 	bl	80190b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd54:	4b65      	ldr	r3, [pc, #404]	; (800beec <mem_trim+0x1f0>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d304      	bcc.n	800bd68 <mem_trim+0x6c>
 800bd5e:	4b64      	ldr	r3, [pc, #400]	; (800bef0 <mem_trim+0x1f4>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d307      	bcc.n	800bd78 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd68:	f00c ff94 	bl	8018c94 <sys_arch_protect>
 800bd6c:	60b8      	str	r0, [r7, #8]
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f00c ff9e 	bl	8018cb0 <sys_arch_unprotect>
    return rmem;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	e0b5      	b.n	800bee4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3b08      	subs	r3, #8
 800bd7c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd7e:	69b8      	ldr	r0, [r7, #24]
 800bd80:	f7ff fdea 	bl	800b958 <mem_to_ptr>
 800bd84:	4603      	mov	r3, r0
 800bd86:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	881a      	ldrh	r2, [r3, #0]
 800bd8c:	8afb      	ldrh	r3, [r7, #22]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b08      	subs	r3, #8
 800bd94:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd96:	8bfa      	ldrh	r2, [r7, #30]
 800bd98:	8abb      	ldrh	r3, [r7, #20]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d906      	bls.n	800bdac <mem_trim+0xb0>
 800bd9e:	4b55      	ldr	r3, [pc, #340]	; (800bef4 <mem_trim+0x1f8>)
 800bda0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bda4:	4956      	ldr	r1, [pc, #344]	; (800bf00 <mem_trim+0x204>)
 800bda6:	4855      	ldr	r0, [pc, #340]	; (800befc <mem_trim+0x200>)
 800bda8:	f00d f984 	bl	80190b4 <iprintf>
  if (newsize > size) {
 800bdac:	8bfa      	ldrh	r2, [r7, #30]
 800bdae:	8abb      	ldrh	r3, [r7, #20]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d901      	bls.n	800bdb8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e095      	b.n	800bee4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bdb8:	8bfa      	ldrh	r2, [r7, #30]
 800bdba:	8abb      	ldrh	r3, [r7, #20]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d101      	bne.n	800bdc4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	e08f      	b.n	800bee4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bdc4:	484f      	ldr	r0, [pc, #316]	; (800bf04 <mem_trim+0x208>)
 800bdc6:	f00c ff23 	bl	8018c10 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7ff fdb0 	bl	800b934 <ptr_to_mem>
 800bdd4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	791b      	ldrb	r3, [r3, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d13f      	bne.n	800be5e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bde6:	d106      	bne.n	800bdf6 <mem_trim+0xfa>
 800bde8:	4b42      	ldr	r3, [pc, #264]	; (800bef4 <mem_trim+0x1f8>)
 800bdea:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bdee:	4946      	ldr	r1, [pc, #280]	; (800bf08 <mem_trim+0x20c>)
 800bdf0:	4842      	ldr	r0, [pc, #264]	; (800befc <mem_trim+0x200>)
 800bdf2:	f00d f95f 	bl	80190b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdfc:	8afa      	ldrh	r2, [r7, #22]
 800bdfe:	8bfb      	ldrh	r3, [r7, #30]
 800be00:	4413      	add	r3, r2
 800be02:	b29b      	uxth	r3, r3
 800be04:	3308      	adds	r3, #8
 800be06:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800be08:	4b40      	ldr	r3, [pc, #256]	; (800bf0c <mem_trim+0x210>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d106      	bne.n	800be20 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800be12:	89fb      	ldrh	r3, [r7, #14]
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fd8d 	bl	800b934 <ptr_to_mem>
 800be1a:	4603      	mov	r3, r0
 800be1c:	4a3b      	ldr	r2, [pc, #236]	; (800bf0c <mem_trim+0x210>)
 800be1e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800be20:	89fb      	ldrh	r3, [r7, #14]
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff fd86 	bl	800b934 <ptr_to_mem>
 800be28:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2200      	movs	r2, #0
 800be2e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	89ba      	ldrh	r2, [r7, #12]
 800be34:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	8afa      	ldrh	r2, [r7, #22]
 800be3a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	89fa      	ldrh	r2, [r7, #14]
 800be40:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be4a:	d047      	beq.n	800bedc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff fd6f 	bl	800b934 <ptr_to_mem>
 800be56:	4602      	mov	r2, r0
 800be58:	89fb      	ldrh	r3, [r7, #14]
 800be5a:	8053      	strh	r3, [r2, #2]
 800be5c:	e03e      	b.n	800bedc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be5e:	8bfb      	ldrh	r3, [r7, #30]
 800be60:	f103 0214 	add.w	r2, r3, #20
 800be64:	8abb      	ldrh	r3, [r7, #20]
 800be66:	429a      	cmp	r2, r3
 800be68:	d838      	bhi.n	800bedc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be6a:	8afa      	ldrh	r2, [r7, #22]
 800be6c:	8bfb      	ldrh	r3, [r7, #30]
 800be6e:	4413      	add	r3, r2
 800be70:	b29b      	uxth	r3, r3
 800be72:	3308      	adds	r3, #8
 800be74:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be7e:	d106      	bne.n	800be8e <mem_trim+0x192>
 800be80:	4b1c      	ldr	r3, [pc, #112]	; (800bef4 <mem_trim+0x1f8>)
 800be82:	f240 3216 	movw	r2, #790	; 0x316
 800be86:	4920      	ldr	r1, [pc, #128]	; (800bf08 <mem_trim+0x20c>)
 800be88:	481c      	ldr	r0, [pc, #112]	; (800befc <mem_trim+0x200>)
 800be8a:	f00d f913 	bl	80190b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be8e:	89fb      	ldrh	r3, [r7, #14]
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fd4f 	bl	800b934 <ptr_to_mem>
 800be96:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be98:	4b1c      	ldr	r3, [pc, #112]	; (800bf0c <mem_trim+0x210>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d202      	bcs.n	800bea8 <mem_trim+0x1ac>
      lfree = mem2;
 800bea2:	4a1a      	ldr	r2, [pc, #104]	; (800bf0c <mem_trim+0x210>)
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2200      	movs	r2, #0
 800beac:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	881a      	ldrh	r2, [r3, #0]
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	8afa      	ldrh	r2, [r7, #22]
 800beba:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	89fa      	ldrh	r2, [r7, #14]
 800bec0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	881b      	ldrh	r3, [r3, #0]
 800bec6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800beca:	d007      	beq.n	800bedc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff fd2f 	bl	800b934 <ptr_to_mem>
 800bed6:	4602      	mov	r2, r0
 800bed8:	89fb      	ldrh	r3, [r7, #14]
 800beda:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bedc:	4809      	ldr	r0, [pc, #36]	; (800bf04 <mem_trim+0x208>)
 800bede:	f00c fea6 	bl	8018c2e <sys_mutex_unlock>
  return rmem;
 800bee2:	687b      	ldr	r3, [r7, #4]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3720      	adds	r7, #32
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	2000dd84 	.word	0x2000dd84
 800bef0:	2000dd88 	.word	0x2000dd88
 800bef4:	0801b300 	.word	0x0801b300
 800bef8:	0801b48c 	.word	0x0801b48c
 800befc:	0801b348 	.word	0x0801b348
 800bf00:	0801b4a4 	.word	0x0801b4a4
 800bf04:	2000dd8c 	.word	0x2000dd8c
 800bf08:	0801b4c4 	.word	0x0801b4c4
 800bf0c:	2000dd90 	.word	0x2000dd90

0800bf10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	4603      	mov	r3, r0
 800bf18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bf1a:	88fb      	ldrh	r3, [r7, #6]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <mem_malloc+0x14>
    return NULL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	e0e2      	b.n	800c0ea <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bf24:	88fb      	ldrh	r3, [r7, #6]
 800bf26:	3303      	adds	r3, #3
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bf30:	8bbb      	ldrh	r3, [r7, #28]
 800bf32:	2b0b      	cmp	r3, #11
 800bf34:	d801      	bhi.n	800bf3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bf36:	230c      	movs	r3, #12
 800bf38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bf3a:	8bbb      	ldrh	r3, [r7, #28]
 800bf3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf40:	d803      	bhi.n	800bf4a <mem_malloc+0x3a>
 800bf42:	8bba      	ldrh	r2, [r7, #28]
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d201      	bcs.n	800bf4e <mem_malloc+0x3e>
    return NULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e0cd      	b.n	800c0ea <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bf4e:	4869      	ldr	r0, [pc, #420]	; (800c0f4 <mem_malloc+0x1e4>)
 800bf50:	f00c fe5e 	bl	8018c10 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf54:	4b68      	ldr	r3, [pc, #416]	; (800c0f8 <mem_malloc+0x1e8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff fcfd 	bl	800b958 <mem_to_ptr>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	83fb      	strh	r3, [r7, #30]
 800bf62:	e0b7      	b.n	800c0d4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bf64:	8bfb      	ldrh	r3, [r7, #30]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fce4 	bl	800b934 <ptr_to_mem>
 800bf6c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	791b      	ldrb	r3, [r3, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f040 80a7 	bne.w	800c0c6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	8bfb      	ldrh	r3, [r7, #30]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	f1a3 0208 	sub.w	r2, r3, #8
 800bf86:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	f0c0 809c 	bcc.w	800c0c6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	8bfb      	ldrh	r3, [r7, #30]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	f1a3 0208 	sub.w	r2, r3, #8
 800bf9c:	8bbb      	ldrh	r3, [r7, #28]
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d333      	bcc.n	800c00c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bfa4:	8bfa      	ldrh	r2, [r7, #30]
 800bfa6:	8bbb      	ldrh	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	3308      	adds	r3, #8
 800bfae:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bfb0:	8a7b      	ldrh	r3, [r7, #18]
 800bfb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfb6:	d106      	bne.n	800bfc6 <mem_malloc+0xb6>
 800bfb8:	4b50      	ldr	r3, [pc, #320]	; (800c0fc <mem_malloc+0x1ec>)
 800bfba:	f240 3287 	movw	r2, #903	; 0x387
 800bfbe:	4950      	ldr	r1, [pc, #320]	; (800c100 <mem_malloc+0x1f0>)
 800bfc0:	4850      	ldr	r0, [pc, #320]	; (800c104 <mem_malloc+0x1f4>)
 800bfc2:	f00d f877 	bl	80190b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bfc6:	8a7b      	ldrh	r3, [r7, #18]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fcb3 	bl	800b934 <ptr_to_mem>
 800bfce:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	881a      	ldrh	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	8bfa      	ldrh	r2, [r7, #30]
 800bfe2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	8a7a      	ldrh	r2, [r7, #18]
 800bfe8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2201      	movs	r2, #1
 800bfee:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bff8:	d00b      	beq.n	800c012 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fc98 	bl	800b934 <ptr_to_mem>
 800c004:	4602      	mov	r2, r0
 800c006:	8a7b      	ldrh	r3, [r7, #18]
 800c008:	8053      	strh	r3, [r2, #2]
 800c00a:	e002      	b.n	800c012 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2201      	movs	r2, #1
 800c010:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c012:	4b39      	ldr	r3, [pc, #228]	; (800c0f8 <mem_malloc+0x1e8>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d127      	bne.n	800c06c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c01c:	4b36      	ldr	r3, [pc, #216]	; (800c0f8 <mem_malloc+0x1e8>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c022:	e005      	b.n	800c030 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff fc83 	bl	800b934 <ptr_to_mem>
 800c02e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	791b      	ldrb	r3, [r3, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d004      	beq.n	800c042 <mem_malloc+0x132>
 800c038:	4b33      	ldr	r3, [pc, #204]	; (800c108 <mem_malloc+0x1f8>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d1f0      	bne.n	800c024 <mem_malloc+0x114>
          }
          lfree = cur;
 800c042:	4a2d      	ldr	r2, [pc, #180]	; (800c0f8 <mem_malloc+0x1e8>)
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c048:	4b2b      	ldr	r3, [pc, #172]	; (800c0f8 <mem_malloc+0x1e8>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	4b2e      	ldr	r3, [pc, #184]	; (800c108 <mem_malloc+0x1f8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d00b      	beq.n	800c06c <mem_malloc+0x15c>
 800c054:	4b28      	ldr	r3, [pc, #160]	; (800c0f8 <mem_malloc+0x1e8>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	791b      	ldrb	r3, [r3, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d006      	beq.n	800c06c <mem_malloc+0x15c>
 800c05e:	4b27      	ldr	r3, [pc, #156]	; (800c0fc <mem_malloc+0x1ec>)
 800c060:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c064:	4929      	ldr	r1, [pc, #164]	; (800c10c <mem_malloc+0x1fc>)
 800c066:	4827      	ldr	r0, [pc, #156]	; (800c104 <mem_malloc+0x1f4>)
 800c068:	f00d f824 	bl	80190b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c06c:	4821      	ldr	r0, [pc, #132]	; (800c0f4 <mem_malloc+0x1e4>)
 800c06e:	f00c fdde 	bl	8018c2e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c072:	8bba      	ldrh	r2, [r7, #28]
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	4413      	add	r3, r2
 800c078:	3308      	adds	r3, #8
 800c07a:	4a23      	ldr	r2, [pc, #140]	; (800c108 <mem_malloc+0x1f8>)
 800c07c:	6812      	ldr	r2, [r2, #0]
 800c07e:	4293      	cmp	r3, r2
 800c080:	d906      	bls.n	800c090 <mem_malloc+0x180>
 800c082:	4b1e      	ldr	r3, [pc, #120]	; (800c0fc <mem_malloc+0x1ec>)
 800c084:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c088:	4921      	ldr	r1, [pc, #132]	; (800c110 <mem_malloc+0x200>)
 800c08a:	481e      	ldr	r0, [pc, #120]	; (800c104 <mem_malloc+0x1f4>)
 800c08c:	f00d f812 	bl	80190b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d006      	beq.n	800c0a8 <mem_malloc+0x198>
 800c09a:	4b18      	ldr	r3, [pc, #96]	; (800c0fc <mem_malloc+0x1ec>)
 800c09c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c0a0:	491c      	ldr	r1, [pc, #112]	; (800c114 <mem_malloc+0x204>)
 800c0a2:	4818      	ldr	r0, [pc, #96]	; (800c104 <mem_malloc+0x1f4>)
 800c0a4:	f00d f806 	bl	80190b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f003 0303 	and.w	r3, r3, #3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d006      	beq.n	800c0c0 <mem_malloc+0x1b0>
 800c0b2:	4b12      	ldr	r3, [pc, #72]	; (800c0fc <mem_malloc+0x1ec>)
 800c0b4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c0b8:	4917      	ldr	r1, [pc, #92]	; (800c118 <mem_malloc+0x208>)
 800c0ba:	4812      	ldr	r0, [pc, #72]	; (800c104 <mem_malloc+0x1f4>)
 800c0bc:	f00c fffa 	bl	80190b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	e011      	b.n	800c0ea <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c0c6:	8bfb      	ldrh	r3, [r7, #30]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff fc33 	bl	800b934 <ptr_to_mem>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c0d4:	8bfa      	ldrh	r2, [r7, #30]
 800c0d6:	8bbb      	ldrh	r3, [r7, #28]
 800c0d8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	f4ff af41 	bcc.w	800bf64 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c0e2:	4804      	ldr	r0, [pc, #16]	; (800c0f4 <mem_malloc+0x1e4>)
 800c0e4:	f00c fda3 	bl	8018c2e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3720      	adds	r7, #32
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	2000dd8c 	.word	0x2000dd8c
 800c0f8:	2000dd90 	.word	0x2000dd90
 800c0fc:	0801b300 	.word	0x0801b300
 800c100:	0801b4c4 	.word	0x0801b4c4
 800c104:	0801b348 	.word	0x0801b348
 800c108:	2000dd88 	.word	0x2000dd88
 800c10c:	0801b4d8 	.word	0x0801b4d8
 800c110:	0801b4f4 	.word	0x0801b4f4
 800c114:	0801b524 	.word	0x0801b524
 800c118:	0801b554 	.word	0x0801b554

0800c11c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	2200      	movs	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	3303      	adds	r3, #3
 800c132:	f023 0303 	bic.w	r3, r3, #3
 800c136:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c138:	2300      	movs	r3, #0
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	e011      	b.n	800c162 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	881b      	ldrh	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	4413      	add	r3, r2
 800c15a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	885b      	ldrh	r3, [r3, #2]
 800c166:	461a      	mov	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4293      	cmp	r3, r2
 800c16c:	dbe7      	blt.n	800c13e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c16e:	bf00      	nop
 800c170:	bf00      	nop
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c182:	2300      	movs	r3, #0
 800c184:	80fb      	strh	r3, [r7, #6]
 800c186:	e009      	b.n	800c19c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c188:	88fb      	ldrh	r3, [r7, #6]
 800c18a:	4a08      	ldr	r2, [pc, #32]	; (800c1ac <memp_init+0x30>)
 800c18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff ffc3 	bl	800c11c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c196:	88fb      	ldrh	r3, [r7, #6]
 800c198:	3301      	adds	r3, #1
 800c19a:	80fb      	strh	r3, [r7, #6]
 800c19c:	88fb      	ldrh	r3, [r7, #6]
 800c19e:	2b0c      	cmp	r3, #12
 800c1a0:	d9f2      	bls.n	800c188 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c1a2:	bf00      	nop
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	08028244 	.word	0x08028244

0800c1b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c1b8:	f00c fd6c 	bl	8018c94 <sys_arch_protect>
 800c1bc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d015      	beq.n	800c1f8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	6812      	ldr	r2, [r2, #0]
 800c1d4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f003 0303 	and.w	r3, r3, #3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d006      	beq.n	800c1ee <do_memp_malloc_pool+0x3e>
 800c1e0:	4b09      	ldr	r3, [pc, #36]	; (800c208 <do_memp_malloc_pool+0x58>)
 800c1e2:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c1e6:	4909      	ldr	r1, [pc, #36]	; (800c20c <do_memp_malloc_pool+0x5c>)
 800c1e8:	4809      	ldr	r0, [pc, #36]	; (800c210 <do_memp_malloc_pool+0x60>)
 800c1ea:	f00c ff63 	bl	80190b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f00c fd5e 	bl	8018cb0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	e003      	b.n	800c200 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f00c fd59 	bl	8018cb0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	0801b578 	.word	0x0801b578
 800c20c:	0801b5a8 	.word	0x0801b5a8
 800c210:	0801b5cc 	.word	0x0801b5cc

0800c214 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <memp_malloc_pool+0x1c>
 800c222:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <memp_malloc_pool+0x38>)
 800c224:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c228:	4909      	ldr	r1, [pc, #36]	; (800c250 <memp_malloc_pool+0x3c>)
 800c22a:	480a      	ldr	r0, [pc, #40]	; (800c254 <memp_malloc_pool+0x40>)
 800c22c:	f00c ff42 	bl	80190b4 <iprintf>
  if (desc == NULL) {
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <memp_malloc_pool+0x26>
    return NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	e003      	b.n	800c242 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff ffb8 	bl	800c1b0 <do_memp_malloc_pool>
 800c240:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	0801b578 	.word	0x0801b578
 800c250:	0801b5f4 	.word	0x0801b5f4
 800c254:	0801b5cc 	.word	0x0801b5cc

0800c258 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	2b0c      	cmp	r3, #12
 800c266:	d908      	bls.n	800c27a <memp_malloc+0x22>
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <memp_malloc+0x3c>)
 800c26a:	f240 1257 	movw	r2, #343	; 0x157
 800c26e:	490a      	ldr	r1, [pc, #40]	; (800c298 <memp_malloc+0x40>)
 800c270:	480a      	ldr	r0, [pc, #40]	; (800c29c <memp_malloc+0x44>)
 800c272:	f00c ff1f 	bl	80190b4 <iprintf>
 800c276:	2300      	movs	r3, #0
 800c278:	e008      	b.n	800c28c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	4a08      	ldr	r2, [pc, #32]	; (800c2a0 <memp_malloc+0x48>)
 800c27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c282:	4618      	mov	r0, r3
 800c284:	f7ff ff94 	bl	800c1b0 <do_memp_malloc_pool>
 800c288:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c28a:	68fb      	ldr	r3, [r7, #12]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	0801b578 	.word	0x0801b578
 800c298:	0801b608 	.word	0x0801b608
 800c29c:	0801b5cc 	.word	0x0801b5cc
 800c2a0:	08028244 	.word	0x08028244

0800c2a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	f003 0303 	and.w	r3, r3, #3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <do_memp_free_pool+0x22>
 800c2b8:	4b0d      	ldr	r3, [pc, #52]	; (800c2f0 <do_memp_free_pool+0x4c>)
 800c2ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c2be:	490d      	ldr	r1, [pc, #52]	; (800c2f4 <do_memp_free_pool+0x50>)
 800c2c0:	480d      	ldr	r0, [pc, #52]	; (800c2f8 <do_memp_free_pool+0x54>)
 800c2c2:	f00c fef7 	bl	80190b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c2ca:	f00c fce3 	bl	8018c94 <sys_arch_protect>
 800c2ce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c2e2:	68b8      	ldr	r0, [r7, #8]
 800c2e4:	f00c fce4 	bl	8018cb0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c2e8:	bf00      	nop
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	0801b578 	.word	0x0801b578
 800c2f4:	0801b628 	.word	0x0801b628
 800c2f8:	0801b5cc 	.word	0x0801b5cc

0800c2fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <memp_free_pool+0x1e>
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <memp_free_pool+0x3c>)
 800c30e:	f240 1295 	movw	r2, #405	; 0x195
 800c312:	490a      	ldr	r1, [pc, #40]	; (800c33c <memp_free_pool+0x40>)
 800c314:	480a      	ldr	r0, [pc, #40]	; (800c340 <memp_free_pool+0x44>)
 800c316:	f00c fecd 	bl	80190b4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d007      	beq.n	800c330 <memp_free_pool+0x34>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d004      	beq.n	800c330 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff ffbb 	bl	800c2a4 <do_memp_free_pool>
 800c32e:	e000      	b.n	800c332 <memp_free_pool+0x36>
    return;
 800c330:	bf00      	nop
}
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	0801b578 	.word	0x0801b578
 800c33c:	0801b5f4 	.word	0x0801b5f4
 800c340:	0801b5cc 	.word	0x0801b5cc

0800c344 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	6039      	str	r1, [r7, #0]
 800c34e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	2b0c      	cmp	r3, #12
 800c354:	d907      	bls.n	800c366 <memp_free+0x22>
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <memp_free+0x44>)
 800c358:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c35c:	490b      	ldr	r1, [pc, #44]	; (800c38c <memp_free+0x48>)
 800c35e:	480c      	ldr	r0, [pc, #48]	; (800c390 <memp_free+0x4c>)
 800c360:	f00c fea8 	bl	80190b4 <iprintf>
 800c364:	e00c      	b.n	800c380 <memp_free+0x3c>

  if (mem == NULL) {
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d008      	beq.n	800c37e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	4a09      	ldr	r2, [pc, #36]	; (800c394 <memp_free+0x50>)
 800c370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff ff94 	bl	800c2a4 <do_memp_free_pool>
 800c37c:	e000      	b.n	800c380 <memp_free+0x3c>
    return;
 800c37e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	0801b578 	.word	0x0801b578
 800c38c:	0801b648 	.word	0x0801b648
 800c390:	0801b5cc 	.word	0x0801b5cc
 800c394:	08028244 	.word	0x08028244

0800c398 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c398:	b480      	push	{r7}
 800c39a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c39c:	bf00      	nop
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
	...

0800c3a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d108      	bne.n	800c3ce <netif_add+0x26>
 800c3bc:	4b5b      	ldr	r3, [pc, #364]	; (800c52c <netif_add+0x184>)
 800c3be:	f240 1227 	movw	r2, #295	; 0x127
 800c3c2:	495b      	ldr	r1, [pc, #364]	; (800c530 <netif_add+0x188>)
 800c3c4:	485b      	ldr	r0, [pc, #364]	; (800c534 <netif_add+0x18c>)
 800c3c6:	f00c fe75 	bl	80190b4 <iprintf>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e0a9      	b.n	800c522 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d108      	bne.n	800c3e6 <netif_add+0x3e>
 800c3d4:	4b55      	ldr	r3, [pc, #340]	; (800c52c <netif_add+0x184>)
 800c3d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c3da:	4957      	ldr	r1, [pc, #348]	; (800c538 <netif_add+0x190>)
 800c3dc:	4855      	ldr	r0, [pc, #340]	; (800c534 <netif_add+0x18c>)
 800c3de:	f00c fe69 	bl	80190b4 <iprintf>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e09d      	b.n	800c522 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c3ec:	4b53      	ldr	r3, [pc, #332]	; (800c53c <netif_add+0x194>)
 800c3ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c3f6:	4b51      	ldr	r3, [pc, #324]	; (800c53c <netif_add+0x194>)
 800c3f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c400:	4b4e      	ldr	r3, [pc, #312]	; (800c53c <netif_add+0x194>)
 800c402:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4a49      	ldr	r2, [pc, #292]	; (800c540 <netif_add+0x198>)
 800c41a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3324      	adds	r3, #36	; 0x24
 800c42e:	2204      	movs	r2, #4
 800c430:	2100      	movs	r1, #0
 800c432:	4618      	mov	r0, r3
 800c434:	f00c fda1 	bl	8018f7a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6a3a      	ldr	r2, [r7, #32]
 800c442:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c444:	4b3f      	ldr	r3, [pc, #252]	; (800c544 <netif_add+0x19c>)
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c452:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f000 f914 	bl	800c688 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	4798      	blx	r3
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <netif_add+0xc8>
    return NULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	e058      	b.n	800c522 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c476:	2bff      	cmp	r3, #255	; 0xff
 800c478:	d103      	bne.n	800c482 <netif_add+0xda>
        netif->num = 0;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c486:	4b30      	ldr	r3, [pc, #192]	; (800c548 <netif_add+0x1a0>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	617b      	str	r3, [r7, #20]
 800c48c:	e02b      	b.n	800c4e6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	429a      	cmp	r2, r3
 800c494:	d106      	bne.n	800c4a4 <netif_add+0xfc>
 800c496:	4b25      	ldr	r3, [pc, #148]	; (800c52c <netif_add+0x184>)
 800c498:	f240 128b 	movw	r2, #395	; 0x18b
 800c49c:	492b      	ldr	r1, [pc, #172]	; (800c54c <netif_add+0x1a4>)
 800c49e:	4825      	ldr	r0, [pc, #148]	; (800c534 <netif_add+0x18c>)
 800c4a0:	f00c fe08 	bl	80190b4 <iprintf>
        num_netifs++;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2bff      	cmp	r3, #255	; 0xff
 800c4ae:	dd06      	ble.n	800c4be <netif_add+0x116>
 800c4b0:	4b1e      	ldr	r3, [pc, #120]	; (800c52c <netif_add+0x184>)
 800c4b2:	f240 128d 	movw	r2, #397	; 0x18d
 800c4b6:	4926      	ldr	r1, [pc, #152]	; (800c550 <netif_add+0x1a8>)
 800c4b8:	481e      	ldr	r0, [pc, #120]	; (800c534 <netif_add+0x18c>)
 800c4ba:	f00c fdfb 	bl	80190b4 <iprintf>
        if (netif2->num == netif->num) {
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d108      	bne.n	800c4e0 <netif_add+0x138>
          netif->num++;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c4de:	e005      	b.n	800c4ec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1d0      	bne.n	800c48e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1be      	bne.n	800c470 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4f8:	2bfe      	cmp	r3, #254	; 0xfe
 800c4fa:	d103      	bne.n	800c504 <netif_add+0x15c>
    netif_num = 0;
 800c4fc:	4b11      	ldr	r3, [pc, #68]	; (800c544 <netif_add+0x19c>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	e006      	b.n	800c512 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c50a:	3301      	adds	r3, #1
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <netif_add+0x19c>)
 800c510:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c512:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <netif_add+0x1a0>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c51a:	4a0b      	ldr	r2, [pc, #44]	; (800c548 <netif_add+0x1a0>)
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	0801b664 	.word	0x0801b664
 800c530:	0801b6f8 	.word	0x0801b6f8
 800c534:	0801b6b4 	.word	0x0801b6b4
 800c538:	0801b714 	.word	0x0801b714
 800c53c:	080282c8 	.word	0x080282c8
 800c540:	0800c96b 	.word	0x0800c96b
 800c544:	20010e88 	.word	0x20010e88
 800c548:	20010e80 	.word	0x20010e80
 800c54c:	0801b738 	.word	0x0801b738
 800c550:	0801b74c 	.word	0x0801b74c

0800c554 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f002 ffab 	bl	800f4bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f008 f825 	bl	80145b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d106      	bne.n	800c598 <netif_do_set_ipaddr+0x20>
 800c58a:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <netif_do_set_ipaddr+0x88>)
 800c58c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c590:	491c      	ldr	r1, [pc, #112]	; (800c604 <netif_do_set_ipaddr+0x8c>)
 800c592:	481d      	ldr	r0, [pc, #116]	; (800c608 <netif_do_set_ipaddr+0x90>)
 800c594:	f00c fd8e 	bl	80190b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <netif_do_set_ipaddr+0x34>
 800c59e:	4b18      	ldr	r3, [pc, #96]	; (800c600 <netif_do_set_ipaddr+0x88>)
 800c5a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c5a4:	4917      	ldr	r1, [pc, #92]	; (800c604 <netif_do_set_ipaddr+0x8c>)
 800c5a6:	4818      	ldr	r0, [pc, #96]	; (800c608 <netif_do_set_ipaddr+0x90>)
 800c5a8:	f00c fd84 	bl	80190b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d01c      	beq.n	800c5f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c5ca:	f107 0314 	add.w	r3, r7, #20
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff ffbf 	bl	800c554 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <netif_do_set_ipaddr+0x6a>
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	e000      	b.n	800c5e4 <netif_do_set_ipaddr+0x6c>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 f8d2 	bl	800c794 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e000      	b.n	800c5f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	0801b664 	.word	0x0801b664
 800c604:	0801b77c 	.word	0x0801b77c
 800c608:	0801b6b4 	.word	0x0801b6b4

0800c60c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	3308      	adds	r3, #8
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d00a      	beq.n	800c63c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <netif_do_set_netmask+0x26>
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	e000      	b.n	800c634 <netif_do_set_netmask+0x28>
 800c632:	2300      	movs	r3, #0
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b085      	sub	sp, #20
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	330c      	adds	r3, #12
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	429a      	cmp	r2, r3
 800c662:	d00a      	beq.n	800c67a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <netif_do_set_gw+0x26>
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	e000      	b.n	800c672 <netif_do_set_gw+0x28>
 800c670:	2300      	movs	r3, #0
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b088      	sub	sp, #32
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c6a4:	4b1c      	ldr	r3, [pc, #112]	; (800c718 <netif_set_addr+0x90>)
 800c6a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c6ae:	4b1a      	ldr	r3, [pc, #104]	; (800c718 <netif_set_addr+0x90>)
 800c6b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c6b8:	4b17      	ldr	r3, [pc, #92]	; (800c718 <netif_set_addr+0x90>)
 800c6ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <netif_set_addr+0x42>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <netif_set_addr+0x46>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e000      	b.n	800c6d0 <netif_set_addr+0x48>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d006      	beq.n	800c6e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6d8:	f107 0310 	add.w	r3, r7, #16
 800c6dc:	461a      	mov	r2, r3
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7ff ff49 	bl	800c578 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c6e6:	69fa      	ldr	r2, [r7, #28]
 800c6e8:	6879      	ldr	r1, [r7, #4]
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7ff ff8e 	bl	800c60c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f7ff ffa8 	bl	800c64a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d106      	bne.n	800c70e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c700:	f107 0310 	add.w	r3, r7, #16
 800c704:	461a      	mov	r2, r3
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f7ff ff35 	bl	800c578 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c70e:	bf00      	nop
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	080282c8 	.word	0x080282c8

0800c71c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c724:	4a04      	ldr	r2, [pc, #16]	; (800c738 <netif_set_default+0x1c>)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c72a:	bf00      	nop
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	20010e84 	.word	0x20010e84

0800c73c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d107      	bne.n	800c75a <netif_set_up+0x1e>
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <netif_set_up+0x4c>)
 800c74c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c750:	490e      	ldr	r1, [pc, #56]	; (800c78c <netif_set_up+0x50>)
 800c752:	480f      	ldr	r0, [pc, #60]	; (800c790 <netif_set_up+0x54>)
 800c754:	f00c fcae 	bl	80190b4 <iprintf>
 800c758:	e013      	b.n	800c782 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10c      	bne.n	800c782 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c76e:	f043 0301 	orr.w	r3, r3, #1
 800c772:	b2da      	uxtb	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c77a:	2103      	movs	r1, #3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f809 	bl	800c794 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	0801b664 	.word	0x0801b664
 800c78c:	0801b7ec 	.word	0x0801b7ec
 800c790:	0801b6b4 	.word	0x0801b6b4

0800c794 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d106      	bne.n	800c7b4 <netif_issue_reports+0x20>
 800c7a6:	4b18      	ldr	r3, [pc, #96]	; (800c808 <netif_issue_reports+0x74>)
 800c7a8:	f240 326d 	movw	r2, #877	; 0x36d
 800c7ac:	4917      	ldr	r1, [pc, #92]	; (800c80c <netif_issue_reports+0x78>)
 800c7ae:	4818      	ldr	r0, [pc, #96]	; (800c810 <netif_issue_reports+0x7c>)
 800c7b0:	f00c fc80 	bl	80190b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7ba:	f003 0304 	and.w	r3, r3, #4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d01e      	beq.n	800c800 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d017      	beq.n	800c800 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c7d0:	78fb      	ldrb	r3, [r7, #3]
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d013      	beq.n	800c802 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00e      	beq.n	800c802 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7ea:	f003 0308 	and.w	r3, r3, #8
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d007      	beq.n	800c802 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f00a fcdd 	bl	80171b8 <etharp_request>
 800c7fe:	e000      	b.n	800c802 <netif_issue_reports+0x6e>
    return;
 800c800:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	0801b664 	.word	0x0801b664
 800c80c:	0801b808 	.word	0x0801b808
 800c810:	0801b6b4 	.word	0x0801b6b4

0800c814 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d107      	bne.n	800c832 <netif_set_down+0x1e>
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <netif_set_down+0x58>)
 800c824:	f240 329b 	movw	r2, #923	; 0x39b
 800c828:	4911      	ldr	r1, [pc, #68]	; (800c870 <netif_set_down+0x5c>)
 800c82a:	4812      	ldr	r0, [pc, #72]	; (800c874 <netif_set_down+0x60>)
 800c82c:	f00c fc42 	bl	80190b4 <iprintf>
 800c830:	e019      	b.n	800c866 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d012      	beq.n	800c866 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c846:	f023 0301 	bic.w	r3, r3, #1
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c858:	f003 0308 	and.w	r3, r3, #8
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f00a f863 	bl	801692c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	0801b664 	.word	0x0801b664
 800c870:	0801b82c 	.word	0x0801b82c
 800c874:	0801b6b4 	.word	0x0801b6b4

0800c878 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d107      	bne.n	800c896 <netif_set_link_up+0x1e>
 800c886:	4b15      	ldr	r3, [pc, #84]	; (800c8dc <netif_set_link_up+0x64>)
 800c888:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c88c:	4914      	ldr	r1, [pc, #80]	; (800c8e0 <netif_set_link_up+0x68>)
 800c88e:	4815      	ldr	r0, [pc, #84]	; (800c8e4 <netif_set_link_up+0x6c>)
 800c890:	f00c fc10 	bl	80190b4 <iprintf>
 800c894:	e01e      	b.n	800c8d4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c89c:	f003 0304 	and.w	r3, r3, #4
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d117      	bne.n	800c8d4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c8aa:	f043 0304 	orr.w	r3, r3, #4
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f008 faa8 	bl	8014e0c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c8bc:	2103      	movs	r1, #3
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff ff68 	bl	800c794 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	69db      	ldr	r3, [r3, #28]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <netif_set_link_up+0x5c>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	69db      	ldr	r3, [r3, #28]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	0801b664 	.word	0x0801b664
 800c8e0:	0801b84c 	.word	0x0801b84c
 800c8e4:	0801b6b4 	.word	0x0801b6b4

0800c8e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d107      	bne.n	800c906 <netif_set_link_down+0x1e>
 800c8f6:	4b11      	ldr	r3, [pc, #68]	; (800c93c <netif_set_link_down+0x54>)
 800c8f8:	f240 4206 	movw	r2, #1030	; 0x406
 800c8fc:	4910      	ldr	r1, [pc, #64]	; (800c940 <netif_set_link_down+0x58>)
 800c8fe:	4811      	ldr	r0, [pc, #68]	; (800c944 <netif_set_link_down+0x5c>)
 800c900:	f00c fbd8 	bl	80190b4 <iprintf>
 800c904:	e017      	b.n	800c936 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	2b00      	cmp	r3, #0
 800c912:	d010      	beq.n	800c936 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c91a:	f023 0304 	bic.w	r3, r3, #4
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <netif_set_link_down+0x4e>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	69db      	ldr	r3, [r3, #28]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	0801b664 	.word	0x0801b664
 800c940:	0801b870 	.word	0x0801b870
 800c944:	0801b6b4 	.word	0x0801b6b4

0800c948 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d002      	beq.n	800c95e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	61da      	str	r2, [r3, #28]
  }
}
 800c95e:	bf00      	nop
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b085      	sub	sp, #20
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c976:	f06f 030b 	mvn.w	r3, #11
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3714      	adds	r7, #20
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
	...

0800c988 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d013      	beq.n	800c9c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c998:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <netif_get_by_index+0x48>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	e00c      	b.n	800c9ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	79fa      	ldrb	r2, [r7, #7]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d101      	bne.n	800c9b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	e006      	b.n	800c9c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1ef      	bne.n	800c9a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	20010e80 	.word	0x20010e80

0800c9d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c9da:	f00c f95b 	bl	8018c94 <sys_arch_protect>
 800c9de:	6038      	str	r0, [r7, #0]
 800c9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <pbuf_free_ooseq+0x44>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	6838      	ldr	r0, [r7, #0]
 800c9e8:	f00c f962 	bl	8018cb0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9ec:	4b0b      	ldr	r3, [pc, #44]	; (800ca1c <pbuf_free_ooseq+0x48>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	607b      	str	r3, [r7, #4]
 800c9f2:	e00a      	b.n	800ca0a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f002 fd9b 	bl	800f538 <tcp_free_ooseq>
      return;
 800ca02:	e005      	b.n	800ca10 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	607b      	str	r3, [r7, #4]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f1      	bne.n	800c9f4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20010e89 	.word	0x20010e89
 800ca1c:	20010e98 	.word	0x20010e98

0800ca20 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ca28:	f7ff ffd4 	bl	800c9d4 <pbuf_free_ooseq>
}
 800ca2c:	bf00      	nop
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ca3a:	f00c f92b 	bl	8018c94 <sys_arch_protect>
 800ca3e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ca40:	4b0f      	ldr	r3, [pc, #60]	; (800ca80 <pbuf_pool_is_empty+0x4c>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ca46:	4b0e      	ldr	r3, [pc, #56]	; (800ca80 <pbuf_pool_is_empty+0x4c>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f00c f92f 	bl	8018cb0 <sys_arch_unprotect>

  if (!queued) {
 800ca52:	78fb      	ldrb	r3, [r7, #3]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10f      	bne.n	800ca78 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ca58:	2100      	movs	r1, #0
 800ca5a:	480a      	ldr	r0, [pc, #40]	; (800ca84 <pbuf_pool_is_empty+0x50>)
 800ca5c:	f7fe f834 	bl	800aac8 <tcpip_try_callback>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d008      	beq.n	800ca78 <pbuf_pool_is_empty+0x44>
 800ca66:	f00c f915 	bl	8018c94 <sys_arch_protect>
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	4b04      	ldr	r3, [pc, #16]	; (800ca80 <pbuf_pool_is_empty+0x4c>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f00c f91c 	bl	8018cb0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	20010e89 	.word	0x20010e89
 800ca84:	0800ca21 	.word	0x0800ca21

0800ca88 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4611      	mov	r1, r2
 800ca94:	461a      	mov	r2, r3
 800ca96:	460b      	mov	r3, r1
 800ca98:	80fb      	strh	r3, [r7, #6]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	88fa      	ldrh	r2, [r7, #6]
 800caae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	88ba      	ldrh	r2, [r7, #4]
 800cab4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cab6:	8b3b      	ldrh	r3, [r7, #24]
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	7f3a      	ldrb	r2, [r7, #28]
 800cac2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2201      	movs	r2, #1
 800cac8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	73da      	strb	r2, [r3, #15]
}
 800cad0:	bf00      	nop
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08c      	sub	sp, #48	; 0x30
 800cae0:	af02      	add	r7, sp, #8
 800cae2:	4603      	mov	r3, r0
 800cae4:	71fb      	strb	r3, [r7, #7]
 800cae6:	460b      	mov	r3, r1
 800cae8:	80bb      	strh	r3, [r7, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800caf2:	887b      	ldrh	r3, [r7, #2]
 800caf4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800caf8:	d07f      	beq.n	800cbfa <pbuf_alloc+0x11e>
 800cafa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cafe:	f300 80c8 	bgt.w	800cc92 <pbuf_alloc+0x1b6>
 800cb02:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cb06:	d010      	beq.n	800cb2a <pbuf_alloc+0x4e>
 800cb08:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cb0c:	f300 80c1 	bgt.w	800cc92 <pbuf_alloc+0x1b6>
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d002      	beq.n	800cb1a <pbuf_alloc+0x3e>
 800cb14:	2b41      	cmp	r3, #65	; 0x41
 800cb16:	f040 80bc 	bne.w	800cc92 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cb1a:	887a      	ldrh	r2, [r7, #2]
 800cb1c:	88bb      	ldrh	r3, [r7, #4]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	2000      	movs	r0, #0
 800cb22:	f000 f8d1 	bl	800ccc8 <pbuf_alloc_reference>
 800cb26:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cb28:	e0bd      	b.n	800cca6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cb32:	88bb      	ldrh	r3, [r7, #4]
 800cb34:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cb36:	200c      	movs	r0, #12
 800cb38:	f7ff fb8e 	bl	800c258 <memp_malloc>
 800cb3c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cb44:	f7ff ff76 	bl	800ca34 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d002      	beq.n	800cb54 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cb4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb50:	f000 faa8 	bl	800d0a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	e0a7      	b.n	800cca8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cb58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb5a:	3303      	adds	r3, #3
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	f023 0303 	bic.w	r3, r3, #3
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	8b7a      	ldrh	r2, [r7, #26]
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	bf28      	it	cs
 800cb70:	4613      	movcs	r3, r2
 800cb72:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cb74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb76:	3310      	adds	r3, #16
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	3303      	adds	r3, #3
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	4618      	mov	r0, r3
 800cb84:	89f9      	ldrh	r1, [r7, #14]
 800cb86:	8b7a      	ldrh	r2, [r7, #26]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	887b      	ldrh	r3, [r7, #2]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	460b      	mov	r3, r1
 800cb92:	4601      	mov	r1, r0
 800cb94:	6938      	ldr	r0, [r7, #16]
 800cb96:	f7ff ff77 	bl	800ca88 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f003 0303 	and.w	r3, r3, #3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d006      	beq.n	800cbb4 <pbuf_alloc+0xd8>
 800cba6:	4b42      	ldr	r3, [pc, #264]	; (800ccb0 <pbuf_alloc+0x1d4>)
 800cba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbac:	4941      	ldr	r1, [pc, #260]	; (800ccb4 <pbuf_alloc+0x1d8>)
 800cbae:	4842      	ldr	r0, [pc, #264]	; (800ccb8 <pbuf_alloc+0x1dc>)
 800cbb0:	f00c fa80 	bl	80190b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cbb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbb6:	3303      	adds	r3, #3
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
 800cbbc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cbc0:	d106      	bne.n	800cbd0 <pbuf_alloc+0xf4>
 800cbc2:	4b3b      	ldr	r3, [pc, #236]	; (800ccb0 <pbuf_alloc+0x1d4>)
 800cbc4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cbc8:	493c      	ldr	r1, [pc, #240]	; (800ccbc <pbuf_alloc+0x1e0>)
 800cbca:	483b      	ldr	r0, [pc, #236]	; (800ccb8 <pbuf_alloc+0x1dc>)
 800cbcc:	f00c fa72 	bl	80190b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbda:	e002      	b.n	800cbe2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cbe6:	8b7a      	ldrh	r2, [r7, #26]
 800cbe8:	89fb      	ldrh	r3, [r7, #14]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cbf2:	8b7b      	ldrh	r3, [r7, #26]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d19e      	bne.n	800cb36 <pbuf_alloc+0x5a>
      break;
 800cbf8:	e055      	b.n	800cca6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cbfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbfc:	3303      	adds	r3, #3
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	88bb      	ldrh	r3, [r7, #4]
 800cc08:	3303      	adds	r3, #3
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	4413      	add	r3, r2
 800cc14:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cc16:	8b3b      	ldrh	r3, [r7, #24]
 800cc18:	3310      	adds	r3, #16
 800cc1a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cc1c:	8b3a      	ldrh	r2, [r7, #24]
 800cc1e:	88bb      	ldrh	r3, [r7, #4]
 800cc20:	3303      	adds	r3, #3
 800cc22:	f023 0303 	bic.w	r3, r3, #3
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d306      	bcc.n	800cc38 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cc2a:	8afa      	ldrh	r2, [r7, #22]
 800cc2c:	88bb      	ldrh	r3, [r7, #4]
 800cc2e:	3303      	adds	r3, #3
 800cc30:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d201      	bcs.n	800cc3c <pbuf_alloc+0x160>
        return NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e035      	b.n	800cca8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cc3c:	8afb      	ldrh	r3, [r7, #22]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff f966 	bl	800bf10 <mem_malloc>
 800cc44:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d101      	bne.n	800cc50 <pbuf_alloc+0x174>
        return NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e02b      	b.n	800cca8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cc50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc52:	3310      	adds	r3, #16
 800cc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc56:	4413      	add	r3, r2
 800cc58:	3303      	adds	r3, #3
 800cc5a:	f023 0303 	bic.w	r3, r3, #3
 800cc5e:	4618      	mov	r0, r3
 800cc60:	88b9      	ldrh	r1, [r7, #4]
 800cc62:	88ba      	ldrh	r2, [r7, #4]
 800cc64:	2300      	movs	r3, #0
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	887b      	ldrh	r3, [r7, #2]
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4601      	mov	r1, r0
 800cc70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc72:	f7ff ff09 	bl	800ca88 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d010      	beq.n	800cca4 <pbuf_alloc+0x1c8>
 800cc82:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <pbuf_alloc+0x1d4>)
 800cc84:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cc88:	490d      	ldr	r1, [pc, #52]	; (800ccc0 <pbuf_alloc+0x1e4>)
 800cc8a:	480b      	ldr	r0, [pc, #44]	; (800ccb8 <pbuf_alloc+0x1dc>)
 800cc8c:	f00c fa12 	bl	80190b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cc90:	e008      	b.n	800cca4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <pbuf_alloc+0x1d4>)
 800cc94:	f240 1227 	movw	r2, #295	; 0x127
 800cc98:	490a      	ldr	r1, [pc, #40]	; (800ccc4 <pbuf_alloc+0x1e8>)
 800cc9a:	4807      	ldr	r0, [pc, #28]	; (800ccb8 <pbuf_alloc+0x1dc>)
 800cc9c:	f00c fa0a 	bl	80190b4 <iprintf>
      return NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	e001      	b.n	800cca8 <pbuf_alloc+0x1cc>
      break;
 800cca4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3728      	adds	r7, #40	; 0x28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	0801b894 	.word	0x0801b894
 800ccb4:	0801b8c4 	.word	0x0801b8c4
 800ccb8:	0801b8f4 	.word	0x0801b8f4
 800ccbc:	0801b91c 	.word	0x0801b91c
 800ccc0:	0801b950 	.word	0x0801b950
 800ccc4:	0801b97c 	.word	0x0801b97c

0800ccc8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	807b      	strh	r3, [r7, #2]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ccd8:	883b      	ldrh	r3, [r7, #0]
 800ccda:	2b41      	cmp	r3, #65	; 0x41
 800ccdc:	d009      	beq.n	800ccf2 <pbuf_alloc_reference+0x2a>
 800ccde:	883b      	ldrh	r3, [r7, #0]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d006      	beq.n	800ccf2 <pbuf_alloc_reference+0x2a>
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <pbuf_alloc_reference+0x5c>)
 800cce6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ccea:	490f      	ldr	r1, [pc, #60]	; (800cd28 <pbuf_alloc_reference+0x60>)
 800ccec:	480f      	ldr	r0, [pc, #60]	; (800cd2c <pbuf_alloc_reference+0x64>)
 800ccee:	f00c f9e1 	bl	80190b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ccf2:	200b      	movs	r0, #11
 800ccf4:	f7ff fab0 	bl	800c258 <memp_malloc>
 800ccf8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cd00:	2300      	movs	r3, #0
 800cd02:	e00b      	b.n	800cd1c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cd04:	8879      	ldrh	r1, [r7, #2]
 800cd06:	887a      	ldrh	r2, [r7, #2]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	883b      	ldrh	r3, [r7, #0]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	460b      	mov	r3, r1
 800cd12:	6879      	ldr	r1, [r7, #4]
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7ff feb7 	bl	800ca88 <pbuf_init_alloced_pbuf>
  return p;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	0801b894 	.word	0x0801b894
 800cd28:	0801b998 	.word	0x0801b998
 800cd2c:	0801b8f4 	.word	0x0801b8f4

0800cd30 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b088      	sub	sp, #32
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	607b      	str	r3, [r7, #4]
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	81bb      	strh	r3, [r7, #12]
 800cd40:	4613      	mov	r3, r2
 800cd42:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cd48:	8a7b      	ldrh	r3, [r7, #18]
 800cd4a:	3303      	adds	r3, #3
 800cd4c:	f023 0203 	bic.w	r2, r3, #3
 800cd50:	89bb      	ldrh	r3, [r7, #12]
 800cd52:	441a      	add	r2, r3
 800cd54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d901      	bls.n	800cd5e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e018      	b.n	800cd90 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cd5e:	6a3b      	ldr	r3, [r7, #32]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d007      	beq.n	800cd74 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cd64:	8a7b      	ldrh	r3, [r7, #18]
 800cd66:	3303      	adds	r3, #3
 800cd68:	f023 0303 	bic.w	r3, r3, #3
 800cd6c:	6a3a      	ldr	r2, [r7, #32]
 800cd6e:	4413      	add	r3, r2
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	e001      	b.n	800cd78 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	89b9      	ldrh	r1, [r7, #12]
 800cd7c:	89ba      	ldrh	r2, [r7, #12]
 800cd7e:	2302      	movs	r3, #2
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	897b      	ldrh	r3, [r7, #10]
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	460b      	mov	r3, r1
 800cd88:	6979      	ldr	r1, [r7, #20]
 800cd8a:	f7ff fe7d 	bl	800ca88 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cd8e:	687b      	ldr	r3, [r7, #4]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	460b      	mov	r3, r1
 800cda2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d106      	bne.n	800cdb8 <pbuf_realloc+0x20>
 800cdaa:	4b3a      	ldr	r3, [pc, #232]	; (800ce94 <pbuf_realloc+0xfc>)
 800cdac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cdb0:	4939      	ldr	r1, [pc, #228]	; (800ce98 <pbuf_realloc+0x100>)
 800cdb2:	483a      	ldr	r0, [pc, #232]	; (800ce9c <pbuf_realloc+0x104>)
 800cdb4:	f00c f97e 	bl	80190b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	891b      	ldrh	r3, [r3, #8]
 800cdbc:	887a      	ldrh	r2, [r7, #2]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d263      	bcs.n	800ce8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	891a      	ldrh	r2, [r3, #8]
 800cdc6:	887b      	ldrh	r3, [r7, #2]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cdcc:	887b      	ldrh	r3, [r7, #2]
 800cdce:	817b      	strh	r3, [r7, #10]
  q = p;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cdd4:	e018      	b.n	800ce08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	895b      	ldrh	r3, [r3, #10]
 800cdda:	897a      	ldrh	r2, [r7, #10]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	891a      	ldrh	r2, [r3, #8]
 800cde4:	893b      	ldrh	r3, [r7, #8]
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <pbuf_realloc+0x70>
 800cdfa:	4b26      	ldr	r3, [pc, #152]	; (800ce94 <pbuf_realloc+0xfc>)
 800cdfc:	f240 12af 	movw	r2, #431	; 0x1af
 800ce00:	4927      	ldr	r1, [pc, #156]	; (800cea0 <pbuf_realloc+0x108>)
 800ce02:	4826      	ldr	r0, [pc, #152]	; (800ce9c <pbuf_realloc+0x104>)
 800ce04:	f00c f956 	bl	80190b4 <iprintf>
  while (rem_len > q->len) {
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	895b      	ldrh	r3, [r3, #10]
 800ce0c:	897a      	ldrh	r2, [r7, #10]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d8e1      	bhi.n	800cdd6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	7b1b      	ldrb	r3, [r3, #12]
 800ce16:	f003 030f 	and.w	r3, r3, #15
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d121      	bne.n	800ce62 <pbuf_realloc+0xca>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	895b      	ldrh	r3, [r3, #10]
 800ce22:	897a      	ldrh	r2, [r7, #10]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d01c      	beq.n	800ce62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	7b5b      	ldrb	r3, [r3, #13]
 800ce2c:	f003 0302 	and.w	r3, r3, #2
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d116      	bne.n	800ce62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	897b      	ldrh	r3, [r7, #10]
 800ce40:	4413      	add	r3, r2
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	4619      	mov	r1, r3
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7fe ff58 	bl	800bcfc <mem_trim>
 800ce4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d106      	bne.n	800ce62 <pbuf_realloc+0xca>
 800ce54:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <pbuf_realloc+0xfc>)
 800ce56:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ce5a:	4912      	ldr	r1, [pc, #72]	; (800cea4 <pbuf_realloc+0x10c>)
 800ce5c:	480f      	ldr	r0, [pc, #60]	; (800ce9c <pbuf_realloc+0x104>)
 800ce5e:	f00c f929 	bl	80190b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	897a      	ldrh	r2, [r7, #10]
 800ce66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	895a      	ldrh	r2, [r3, #10]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d004      	beq.n	800ce82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 f911 	bl	800d0a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	e000      	b.n	800ce8c <pbuf_realloc+0xf4>
    return;
 800ce8a:	bf00      	nop

}
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	0801b894 	.word	0x0801b894
 800ce98:	0801b9ac 	.word	0x0801b9ac
 800ce9c:	0801b8f4 	.word	0x0801b8f4
 800cea0:	0801b9c4 	.word	0x0801b9c4
 800cea4:	0801b9dc 	.word	0x0801b9dc

0800cea8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <pbuf_add_header_impl+0x22>
 800cebc:	4b2b      	ldr	r3, [pc, #172]	; (800cf6c <pbuf_add_header_impl+0xc4>)
 800cebe:	f240 12df 	movw	r2, #479	; 0x1df
 800cec2:	492b      	ldr	r1, [pc, #172]	; (800cf70 <pbuf_add_header_impl+0xc8>)
 800cec4:	482b      	ldr	r0, [pc, #172]	; (800cf74 <pbuf_add_header_impl+0xcc>)
 800cec6:	f00c f8f5 	bl	80190b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <pbuf_add_header_impl+0x30>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ced6:	d301      	bcc.n	800cedc <pbuf_add_header_impl+0x34>
    return 1;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e043      	b.n	800cf64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <pbuf_add_header_impl+0x3e>
    return 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	e03e      	b.n	800cf64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	891a      	ldrh	r2, [r3, #8]
 800ceee:	8a7b      	ldrh	r3, [r7, #18]
 800cef0:	4413      	add	r3, r2
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	8a7a      	ldrh	r2, [r7, #18]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d901      	bls.n	800cefe <pbuf_add_header_impl+0x56>
    return 1;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e032      	b.n	800cf64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	7b1b      	ldrb	r3, [r3, #12]
 800cf02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cf04:	8a3b      	ldrh	r3, [r7, #16]
 800cf06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00c      	beq.n	800cf28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	685a      	ldr	r2, [r3, #4]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	425b      	negs	r3, r3
 800cf16:	4413      	add	r3, r2
 800cf18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3310      	adds	r3, #16
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d20d      	bcs.n	800cf40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e01d      	b.n	800cf64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d006      	beq.n	800cf3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	425b      	negs	r3, r3
 800cf36:	4413      	add	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	e001      	b.n	800cf40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e011      	b.n	800cf64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	895a      	ldrh	r2, [r3, #10]
 800cf4a:	8a7b      	ldrh	r3, [r7, #18]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	891a      	ldrh	r2, [r3, #8]
 800cf58:	8a7b      	ldrh	r3, [r7, #18]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	811a      	strh	r2, [r3, #8]


  return 0;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	0801b894 	.word	0x0801b894
 800cf70:	0801b9f8 	.word	0x0801b9f8
 800cf74:	0801b8f4 	.word	0x0801b8f4

0800cf78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cf82:	2200      	movs	r2, #0
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7ff ff8e 	bl	800cea8 <pbuf_add_header_impl>
 800cf8c:	4603      	mov	r3, r0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d106      	bne.n	800cfb6 <pbuf_remove_header+0x1e>
 800cfa8:	4b20      	ldr	r3, [pc, #128]	; (800d02c <pbuf_remove_header+0x94>)
 800cfaa:	f240 224b 	movw	r2, #587	; 0x24b
 800cfae:	4920      	ldr	r1, [pc, #128]	; (800d030 <pbuf_remove_header+0x98>)
 800cfb0:	4820      	ldr	r0, [pc, #128]	; (800d034 <pbuf_remove_header+0x9c>)
 800cfb2:	f00c f87f 	bl	80190b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <pbuf_remove_header+0x2c>
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc2:	d301      	bcc.n	800cfc8 <pbuf_remove_header+0x30>
    return 1;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e02c      	b.n	800d022 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <pbuf_remove_header+0x3a>
    return 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e027      	b.n	800d022 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	895b      	ldrh	r3, [r3, #10]
 800cfda:	89fa      	ldrh	r2, [r7, #14]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d908      	bls.n	800cff2 <pbuf_remove_header+0x5a>
 800cfe0:	4b12      	ldr	r3, [pc, #72]	; (800d02c <pbuf_remove_header+0x94>)
 800cfe2:	f240 2255 	movw	r2, #597	; 0x255
 800cfe6:	4914      	ldr	r1, [pc, #80]	; (800d038 <pbuf_remove_header+0xa0>)
 800cfe8:	4812      	ldr	r0, [pc, #72]	; (800d034 <pbuf_remove_header+0x9c>)
 800cfea:	f00c f863 	bl	80190b4 <iprintf>
 800cfee:	2301      	movs	r3, #1
 800cff0:	e017      	b.n	800d022 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	441a      	add	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	895a      	ldrh	r2, [r3, #10]
 800d008:	89fb      	ldrh	r3, [r7, #14]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	891a      	ldrh	r2, [r3, #8]
 800d016:	89fb      	ldrh	r3, [r7, #14]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	0801b894 	.word	0x0801b894
 800d030:	0801b9f8 	.word	0x0801b9f8
 800d034:	0801b8f4 	.word	0x0801b8f4
 800d038:	0801ba04 	.word	0x0801ba04

0800d03c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	460b      	mov	r3, r1
 800d046:	807b      	strh	r3, [r7, #2]
 800d048:	4613      	mov	r3, r2
 800d04a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d04c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d050:	2b00      	cmp	r3, #0
 800d052:	da08      	bge.n	800d066 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d058:	425b      	negs	r3, r3
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7ff ff9b 	bl	800cf98 <pbuf_remove_header>
 800d062:	4603      	mov	r3, r0
 800d064:	e007      	b.n	800d076 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d066:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d06a:	787a      	ldrb	r2, [r7, #1]
 800d06c:	4619      	mov	r1, r3
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff ff1a 	bl	800cea8 <pbuf_add_header_impl>
 800d074:	4603      	mov	r3, r0
  }
}
 800d076:	4618      	mov	r0, r3
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b082      	sub	sp, #8
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d08a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d08e:	2201      	movs	r2, #1
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff ffd2 	bl	800d03c <pbuf_header_impl>
 800d098:	4603      	mov	r3, r0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10b      	bne.n	800d0ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d106      	bne.n	800d0c6 <pbuf_free+0x22>
 800d0b8:	4b3b      	ldr	r3, [pc, #236]	; (800d1a8 <pbuf_free+0x104>)
 800d0ba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d0be:	493b      	ldr	r1, [pc, #236]	; (800d1ac <pbuf_free+0x108>)
 800d0c0:	483b      	ldr	r0, [pc, #236]	; (800d1b0 <pbuf_free+0x10c>)
 800d0c2:	f00b fff7 	bl	80190b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e069      	b.n	800d19e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d0ce:	e062      	b.n	800d196 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d0d0:	f00b fde0 	bl	8018c94 <sys_arch_protect>
 800d0d4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7b9b      	ldrb	r3, [r3, #14]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d106      	bne.n	800d0ec <pbuf_free+0x48>
 800d0de:	4b32      	ldr	r3, [pc, #200]	; (800d1a8 <pbuf_free+0x104>)
 800d0e0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d0e4:	4933      	ldr	r1, [pc, #204]	; (800d1b4 <pbuf_free+0x110>)
 800d0e6:	4832      	ldr	r0, [pc, #200]	; (800d1b0 <pbuf_free+0x10c>)
 800d0e8:	f00b ffe4 	bl	80190b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7b9b      	ldrb	r3, [r3, #14]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	739a      	strb	r2, [r3, #14]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	7b9b      	ldrb	r3, [r3, #14]
 800d0fc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d0fe:	69b8      	ldr	r0, [r7, #24]
 800d100:	f00b fdd6 	bl	8018cb0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d104:	7dfb      	ldrb	r3, [r7, #23]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d143      	bne.n	800d192 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	7b1b      	ldrb	r3, [r3, #12]
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7b5b      	ldrb	r3, [r3, #13]
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d011      	beq.n	800d14a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <pbuf_free+0x9c>
 800d132:	4b1d      	ldr	r3, [pc, #116]	; (800d1a8 <pbuf_free+0x104>)
 800d134:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d138:	491f      	ldr	r1, [pc, #124]	; (800d1b8 <pbuf_free+0x114>)
 800d13a:	481d      	ldr	r0, [pc, #116]	; (800d1b0 <pbuf_free+0x10c>)
 800d13c:	f00b ffba 	bl	80190b4 <iprintf>
        pc->custom_free_function(p);
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	4798      	blx	r3
 800d148:	e01d      	b.n	800d186 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d104      	bne.n	800d15a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d150:	6879      	ldr	r1, [r7, #4]
 800d152:	200c      	movs	r0, #12
 800d154:	f7ff f8f6 	bl	800c344 <memp_free>
 800d158:	e015      	b.n	800d186 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d104      	bne.n	800d16a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d160:	6879      	ldr	r1, [r7, #4]
 800d162:	200b      	movs	r0, #11
 800d164:	f7ff f8ee 	bl	800c344 <memp_free>
 800d168:	e00d      	b.n	800d186 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d16a:	7bfb      	ldrb	r3, [r7, #15]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d103      	bne.n	800d178 <pbuf_free+0xd4>
          mem_free(p);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7fe fd33 	bl	800bbdc <mem_free>
 800d176:	e006      	b.n	800d186 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d178:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <pbuf_free+0x104>)
 800d17a:	f240 320f 	movw	r2, #783	; 0x30f
 800d17e:	490f      	ldr	r1, [pc, #60]	; (800d1bc <pbuf_free+0x118>)
 800d180:	480b      	ldr	r0, [pc, #44]	; (800d1b0 <pbuf_free+0x10c>)
 800d182:	f00b ff97 	bl	80190b4 <iprintf>
        }
      }
      count++;
 800d186:	7ffb      	ldrb	r3, [r7, #31]
 800d188:	3301      	adds	r3, #1
 800d18a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	607b      	str	r3, [r7, #4]
 800d190:	e001      	b.n	800d196 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d192:	2300      	movs	r3, #0
 800d194:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d199      	bne.n	800d0d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d19c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3720      	adds	r7, #32
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0801b894 	.word	0x0801b894
 800d1ac:	0801b9f8 	.word	0x0801b9f8
 800d1b0:	0801b8f4 	.word	0x0801b8f4
 800d1b4:	0801ba24 	.word	0x0801ba24
 800d1b8:	0801ba3c 	.word	0x0801ba3c
 800d1bc:	0801ba60 	.word	0x0801ba60

0800d1c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d1cc:	e005      	b.n	800d1da <pbuf_clen+0x1a>
    ++len;
 800d1ce:	89fb      	ldrh	r3, [r7, #14]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1f6      	bne.n	800d1ce <pbuf_clen+0xe>
  }
  return len;
 800d1e0:	89fb      	ldrh	r3, [r7, #14]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3714      	adds	r7, #20
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d016      	beq.n	800d22c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d1fe:	f00b fd49 	bl	8018c94 <sys_arch_protect>
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	7b9b      	ldrb	r3, [r3, #14]
 800d208:	3301      	adds	r3, #1
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	739a      	strb	r2, [r3, #14]
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	f00b fd4d 	bl	8018cb0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7b9b      	ldrb	r3, [r3, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <pbuf_ref+0x3c>
 800d21e:	4b05      	ldr	r3, [pc, #20]	; (800d234 <pbuf_ref+0x44>)
 800d220:	f240 3242 	movw	r2, #834	; 0x342
 800d224:	4904      	ldr	r1, [pc, #16]	; (800d238 <pbuf_ref+0x48>)
 800d226:	4805      	ldr	r0, [pc, #20]	; (800d23c <pbuf_ref+0x4c>)
 800d228:	f00b ff44 	bl	80190b4 <iprintf>
  }
}
 800d22c:	bf00      	nop
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	0801b894 	.word	0x0801b894
 800d238:	0801ba74 	.word	0x0801ba74
 800d23c:	0801b8f4 	.word	0x0801b8f4

0800d240 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <pbuf_cat+0x16>
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d107      	bne.n	800d266 <pbuf_cat+0x26>
 800d256:	4b20      	ldr	r3, [pc, #128]	; (800d2d8 <pbuf_cat+0x98>)
 800d258:	f240 3259 	movw	r2, #857	; 0x359
 800d25c:	491f      	ldr	r1, [pc, #124]	; (800d2dc <pbuf_cat+0x9c>)
 800d25e:	4820      	ldr	r0, [pc, #128]	; (800d2e0 <pbuf_cat+0xa0>)
 800d260:	f00b ff28 	bl	80190b4 <iprintf>
 800d264:	e034      	b.n	800d2d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	e00a      	b.n	800d282 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	891a      	ldrh	r2, [r3, #8]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	891b      	ldrh	r3, [r3, #8]
 800d274:	4413      	add	r3, r2
 800d276:	b29a      	uxth	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	60fb      	str	r3, [r7, #12]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1f0      	bne.n	800d26c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	891a      	ldrh	r2, [r3, #8]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	895b      	ldrh	r3, [r3, #10]
 800d292:	429a      	cmp	r2, r3
 800d294:	d006      	beq.n	800d2a4 <pbuf_cat+0x64>
 800d296:	4b10      	ldr	r3, [pc, #64]	; (800d2d8 <pbuf_cat+0x98>)
 800d298:	f240 3262 	movw	r2, #866	; 0x362
 800d29c:	4911      	ldr	r1, [pc, #68]	; (800d2e4 <pbuf_cat+0xa4>)
 800d29e:	4810      	ldr	r0, [pc, #64]	; (800d2e0 <pbuf_cat+0xa0>)
 800d2a0:	f00b ff08 	bl	80190b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d006      	beq.n	800d2ba <pbuf_cat+0x7a>
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <pbuf_cat+0x98>)
 800d2ae:	f240 3263 	movw	r2, #867	; 0x363
 800d2b2:	490d      	ldr	r1, [pc, #52]	; (800d2e8 <pbuf_cat+0xa8>)
 800d2b4:	480a      	ldr	r0, [pc, #40]	; (800d2e0 <pbuf_cat+0xa0>)
 800d2b6:	f00b fefd 	bl	80190b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	891a      	ldrh	r2, [r3, #8]
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	891b      	ldrh	r3, [r3, #8]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0801b894 	.word	0x0801b894
 800d2dc:	0801ba88 	.word	0x0801ba88
 800d2e0:	0801b8f4 	.word	0x0801b8f4
 800d2e4:	0801bac0 	.word	0x0801bac0
 800d2e8:	0801baf0 	.word	0x0801baf0

0800d2ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7ff ffa1 	bl	800d240 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d2fe:	6838      	ldr	r0, [r7, #0]
 800d300:	f7ff ff76 	bl	800d1f0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d316:	2300      	movs	r3, #0
 800d318:	617b      	str	r3, [r7, #20]
 800d31a:	2300      	movs	r3, #0
 800d31c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d008      	beq.n	800d336 <pbuf_copy+0x2a>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d005      	beq.n	800d336 <pbuf_copy+0x2a>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	891a      	ldrh	r2, [r3, #8]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	891b      	ldrh	r3, [r3, #8]
 800d332:	429a      	cmp	r2, r3
 800d334:	d209      	bcs.n	800d34a <pbuf_copy+0x3e>
 800d336:	4b57      	ldr	r3, [pc, #348]	; (800d494 <pbuf_copy+0x188>)
 800d338:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d33c:	4956      	ldr	r1, [pc, #344]	; (800d498 <pbuf_copy+0x18c>)
 800d33e:	4857      	ldr	r0, [pc, #348]	; (800d49c <pbuf_copy+0x190>)
 800d340:	f00b feb8 	bl	80190b4 <iprintf>
 800d344:	f06f 030f 	mvn.w	r3, #15
 800d348:	e09f      	b.n	800d48a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	895b      	ldrh	r3, [r3, #10]
 800d34e:	461a      	mov	r2, r3
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	1ad2      	subs	r2, r2, r3
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	895b      	ldrh	r3, [r3, #10]
 800d358:	4619      	mov	r1, r3
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	1acb      	subs	r3, r1, r3
 800d35e:	429a      	cmp	r2, r3
 800d360:	d306      	bcc.n	800d370 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	895b      	ldrh	r3, [r3, #10]
 800d366:	461a      	mov	r2, r3
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	e005      	b.n	800d37c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	895b      	ldrh	r3, [r3, #10]
 800d374:	461a      	mov	r2, r3
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	18d0      	adds	r0, r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	685a      	ldr	r2, [r3, #4]
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	4413      	add	r3, r2
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	4619      	mov	r1, r3
 800d390:	f00b fdcb 	bl	8018f2a <memcpy>
    offset_to += len;
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	4413      	add	r3, r2
 800d39a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	895b      	ldrh	r3, [r3, #10]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d906      	bls.n	800d3be <pbuf_copy+0xb2>
 800d3b0:	4b38      	ldr	r3, [pc, #224]	; (800d494 <pbuf_copy+0x188>)
 800d3b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d3b6:	493a      	ldr	r1, [pc, #232]	; (800d4a0 <pbuf_copy+0x194>)
 800d3b8:	4838      	ldr	r0, [pc, #224]	; (800d49c <pbuf_copy+0x190>)
 800d3ba:	f00b fe7b 	bl	80190b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	895b      	ldrh	r3, [r3, #10]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d906      	bls.n	800d3d8 <pbuf_copy+0xcc>
 800d3ca:	4b32      	ldr	r3, [pc, #200]	; (800d494 <pbuf_copy+0x188>)
 800d3cc:	f240 32da 	movw	r2, #986	; 0x3da
 800d3d0:	4934      	ldr	r1, [pc, #208]	; (800d4a4 <pbuf_copy+0x198>)
 800d3d2:	4832      	ldr	r0, [pc, #200]	; (800d49c <pbuf_copy+0x190>)
 800d3d4:	f00b fe6e 	bl	80190b4 <iprintf>
    if (offset_from >= p_from->len) {
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	895b      	ldrh	r3, [r3, #10]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d304      	bcc.n	800d3ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	895b      	ldrh	r3, [r3, #10]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d114      	bne.n	800d424 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10c      	bne.n	800d424 <pbuf_copy+0x118>
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d009      	beq.n	800d424 <pbuf_copy+0x118>
 800d410:	4b20      	ldr	r3, [pc, #128]	; (800d494 <pbuf_copy+0x188>)
 800d412:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d416:	4924      	ldr	r1, [pc, #144]	; (800d4a8 <pbuf_copy+0x19c>)
 800d418:	4820      	ldr	r0, [pc, #128]	; (800d49c <pbuf_copy+0x190>)
 800d41a:	f00b fe4b 	bl	80190b4 <iprintf>
 800d41e:	f06f 030f 	mvn.w	r3, #15
 800d422:	e032      	b.n	800d48a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d013      	beq.n	800d452 <pbuf_copy+0x146>
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	895a      	ldrh	r2, [r3, #10]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	891b      	ldrh	r3, [r3, #8]
 800d432:	429a      	cmp	r2, r3
 800d434:	d10d      	bne.n	800d452 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d009      	beq.n	800d452 <pbuf_copy+0x146>
 800d43e:	4b15      	ldr	r3, [pc, #84]	; (800d494 <pbuf_copy+0x188>)
 800d440:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d444:	4919      	ldr	r1, [pc, #100]	; (800d4ac <pbuf_copy+0x1a0>)
 800d446:	4815      	ldr	r0, [pc, #84]	; (800d49c <pbuf_copy+0x190>)
 800d448:	f00b fe34 	bl	80190b4 <iprintf>
 800d44c:	f06f 0305 	mvn.w	r3, #5
 800d450:	e01b      	b.n	800d48a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d013      	beq.n	800d480 <pbuf_copy+0x174>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	895a      	ldrh	r2, [r3, #10]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	891b      	ldrh	r3, [r3, #8]
 800d460:	429a      	cmp	r2, r3
 800d462:	d10d      	bne.n	800d480 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d009      	beq.n	800d480 <pbuf_copy+0x174>
 800d46c:	4b09      	ldr	r3, [pc, #36]	; (800d494 <pbuf_copy+0x188>)
 800d46e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d472:	490e      	ldr	r1, [pc, #56]	; (800d4ac <pbuf_copy+0x1a0>)
 800d474:	4809      	ldr	r0, [pc, #36]	; (800d49c <pbuf_copy+0x190>)
 800d476:	f00b fe1d 	bl	80190b4 <iprintf>
 800d47a:	f06f 0305 	mvn.w	r3, #5
 800d47e:	e004      	b.n	800d48a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f47f af61 	bne.w	800d34a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	0801b894 	.word	0x0801b894
 800d498:	0801bb3c 	.word	0x0801bb3c
 800d49c:	0801b8f4 	.word	0x0801b8f4
 800d4a0:	0801bb6c 	.word	0x0801bb6c
 800d4a4:	0801bb84 	.word	0x0801bb84
 800d4a8:	0801bba0 	.word	0x0801bba0
 800d4ac:	0801bbb0 	.word	0x0801bbb0

0800d4b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b088      	sub	sp, #32
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	461a      	mov	r2, r3
 800d4be:	460b      	mov	r3, r1
 800d4c0:	80fb      	strh	r3, [r7, #6]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d108      	bne.n	800d4e6 <pbuf_copy_partial+0x36>
 800d4d4:	4b2b      	ldr	r3, [pc, #172]	; (800d584 <pbuf_copy_partial+0xd4>)
 800d4d6:	f240 420a 	movw	r2, #1034	; 0x40a
 800d4da:	492b      	ldr	r1, [pc, #172]	; (800d588 <pbuf_copy_partial+0xd8>)
 800d4dc:	482b      	ldr	r0, [pc, #172]	; (800d58c <pbuf_copy_partial+0xdc>)
 800d4de:	f00b fde9 	bl	80190b4 <iprintf>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e04a      	b.n	800d57c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d108      	bne.n	800d4fe <pbuf_copy_partial+0x4e>
 800d4ec:	4b25      	ldr	r3, [pc, #148]	; (800d584 <pbuf_copy_partial+0xd4>)
 800d4ee:	f240 420b 	movw	r2, #1035	; 0x40b
 800d4f2:	4927      	ldr	r1, [pc, #156]	; (800d590 <pbuf_copy_partial+0xe0>)
 800d4f4:	4825      	ldr	r0, [pc, #148]	; (800d58c <pbuf_copy_partial+0xdc>)
 800d4f6:	f00b fddd 	bl	80190b4 <iprintf>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e03e      	b.n	800d57c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	61fb      	str	r3, [r7, #28]
 800d502:	e034      	b.n	800d56e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d504:	88bb      	ldrh	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <pbuf_copy_partial+0x70>
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	895b      	ldrh	r3, [r3, #10]
 800d50e:	88ba      	ldrh	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d305      	bcc.n	800d520 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	895b      	ldrh	r3, [r3, #10]
 800d518:	88ba      	ldrh	r2, [r7, #4]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	80bb      	strh	r3, [r7, #4]
 800d51e:	e023      	b.n	800d568 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	895a      	ldrh	r2, [r3, #10]
 800d524:	88bb      	ldrh	r3, [r7, #4]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d52a:	8b3a      	ldrh	r2, [r7, #24]
 800d52c:	88fb      	ldrh	r3, [r7, #6]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d901      	bls.n	800d536 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d532:	88fb      	ldrh	r3, [r7, #6]
 800d534:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d536:	8b7b      	ldrh	r3, [r7, #26]
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	18d0      	adds	r0, r2, r3
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	88bb      	ldrh	r3, [r7, #4]
 800d542:	4413      	add	r3, r2
 800d544:	8b3a      	ldrh	r2, [r7, #24]
 800d546:	4619      	mov	r1, r3
 800d548:	f00b fcef 	bl	8018f2a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d54c:	8afa      	ldrh	r2, [r7, #22]
 800d54e:	8b3b      	ldrh	r3, [r7, #24]
 800d550:	4413      	add	r3, r2
 800d552:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d554:	8b7a      	ldrh	r2, [r7, #26]
 800d556:	8b3b      	ldrh	r3, [r7, #24]
 800d558:	4413      	add	r3, r2
 800d55a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d55c:	88fa      	ldrh	r2, [r7, #6]
 800d55e:	8b3b      	ldrh	r3, [r7, #24]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	61fb      	str	r3, [r7, #28]
 800d56e:	88fb      	ldrh	r3, [r7, #6]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <pbuf_copy_partial+0xca>
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1c4      	bne.n	800d504 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d57a:	8afb      	ldrh	r3, [r7, #22]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3720      	adds	r7, #32
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	0801b894 	.word	0x0801b894
 800d588:	0801bbdc 	.word	0x0801bbdc
 800d58c:	0801b8f4 	.word	0x0801b8f4
 800d590:	0801bbfc 	.word	0x0801bbfc

0800d594 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	603a      	str	r2, [r7, #0]
 800d59e:	71fb      	strb	r3, [r7, #7]
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	8919      	ldrh	r1, [r3, #8]
 800d5a8:	88ba      	ldrh	r2, [r7, #4]
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7ff fa95 	bl	800cadc <pbuf_alloc>
 800d5b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d101      	bne.n	800d5be <pbuf_clone+0x2a>
    return NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e011      	b.n	800d5e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff fea3 	bl	800d30c <pbuf_copy>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d5ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d006      	beq.n	800d5e0 <pbuf_clone+0x4c>
 800d5d2:	4b06      	ldr	r3, [pc, #24]	; (800d5ec <pbuf_clone+0x58>)
 800d5d4:	f240 5224 	movw	r2, #1316	; 0x524
 800d5d8:	4905      	ldr	r1, [pc, #20]	; (800d5f0 <pbuf_clone+0x5c>)
 800d5da:	4806      	ldr	r0, [pc, #24]	; (800d5f4 <pbuf_clone+0x60>)
 800d5dc:	f00b fd6a 	bl	80190b4 <iprintf>
  return q;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0801b894 	.word	0x0801b894
 800d5f0:	0801bd08 	.word	0x0801bd08
 800d5f4:	0801b8f4 	.word	0x0801b8f4

0800d5f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d5fc:	f00b fda0 	bl	8019140 <rand>
 800d600:	4603      	mov	r3, r0
 800d602:	b29b      	uxth	r3, r3
 800d604:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d60e:	b29a      	uxth	r2, r3
 800d610:	4b01      	ldr	r3, [pc, #4]	; (800d618 <tcp_init+0x20>)
 800d612:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d614:	bf00      	nop
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20000024 	.word	0x20000024

0800d61c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7d1b      	ldrb	r3, [r3, #20]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d105      	bne.n	800d638 <tcp_free+0x1c>
 800d62c:	4b06      	ldr	r3, [pc, #24]	; (800d648 <tcp_free+0x2c>)
 800d62e:	22d4      	movs	r2, #212	; 0xd4
 800d630:	4906      	ldr	r1, [pc, #24]	; (800d64c <tcp_free+0x30>)
 800d632:	4807      	ldr	r0, [pc, #28]	; (800d650 <tcp_free+0x34>)
 800d634:	f00b fd3e 	bl	80190b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d638:	6879      	ldr	r1, [r7, #4]
 800d63a:	2001      	movs	r0, #1
 800d63c:	f7fe fe82 	bl	800c344 <memp_free>
}
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	0801bd94 	.word	0x0801bd94
 800d64c:	0801bdc4 	.word	0x0801bdc4
 800d650:	0801bdd8 	.word	0x0801bdd8

0800d654 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7d1b      	ldrb	r3, [r3, #20]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d105      	bne.n	800d670 <tcp_free_listen+0x1c>
 800d664:	4b06      	ldr	r3, [pc, #24]	; (800d680 <tcp_free_listen+0x2c>)
 800d666:	22df      	movs	r2, #223	; 0xdf
 800d668:	4906      	ldr	r1, [pc, #24]	; (800d684 <tcp_free_listen+0x30>)
 800d66a:	4807      	ldr	r0, [pc, #28]	; (800d688 <tcp_free_listen+0x34>)
 800d66c:	f00b fd22 	bl	80190b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	2002      	movs	r0, #2
 800d674:	f7fe fe66 	bl	800c344 <memp_free>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0801bd94 	.word	0x0801bd94
 800d684:	0801be00 	.word	0x0801be00
 800d688:	0801bdd8 	.word	0x0801bdd8

0800d68c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d690:	f001 f9d0 	bl	800ea34 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d694:	4b07      	ldr	r3, [pc, #28]	; (800d6b4 <tcp_tmr+0x28>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	4b05      	ldr	r3, [pc, #20]	; (800d6b4 <tcp_tmr+0x28>)
 800d69e:	701a      	strb	r2, [r3, #0]
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <tcp_tmr+0x28>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d6ac:	f000 fe82 	bl	800e3b4 <tcp_slowtmr>
  }
}
 800d6b0:	bf00      	nop
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20010ea1 	.word	0x20010ea1

0800d6b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d105      	bne.n	800d6d4 <tcp_remove_listener+0x1c>
 800d6c8:	4b0d      	ldr	r3, [pc, #52]	; (800d700 <tcp_remove_listener+0x48>)
 800d6ca:	22ff      	movs	r2, #255	; 0xff
 800d6cc:	490d      	ldr	r1, [pc, #52]	; (800d704 <tcp_remove_listener+0x4c>)
 800d6ce:	480e      	ldr	r0, [pc, #56]	; (800d708 <tcp_remove_listener+0x50>)
 800d6d0:	f00b fcf0 	bl	80190b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	e00a      	b.n	800d6f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d102      	bne.n	800d6ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1f1      	bne.n	800d6da <tcp_remove_listener+0x22>
    }
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	bf00      	nop
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	0801bd94 	.word	0x0801bd94
 800d704:	0801be1c 	.word	0x0801be1c
 800d708:	0801bdd8 	.word	0x0801bdd8

0800d70c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d106      	bne.n	800d728 <tcp_listen_closed+0x1c>
 800d71a:	4b14      	ldr	r3, [pc, #80]	; (800d76c <tcp_listen_closed+0x60>)
 800d71c:	f240 1211 	movw	r2, #273	; 0x111
 800d720:	4913      	ldr	r1, [pc, #76]	; (800d770 <tcp_listen_closed+0x64>)
 800d722:	4814      	ldr	r0, [pc, #80]	; (800d774 <tcp_listen_closed+0x68>)
 800d724:	f00b fcc6 	bl	80190b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7d1b      	ldrb	r3, [r3, #20]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d006      	beq.n	800d73e <tcp_listen_closed+0x32>
 800d730:	4b0e      	ldr	r3, [pc, #56]	; (800d76c <tcp_listen_closed+0x60>)
 800d732:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d736:	4910      	ldr	r1, [pc, #64]	; (800d778 <tcp_listen_closed+0x6c>)
 800d738:	480e      	ldr	r0, [pc, #56]	; (800d774 <tcp_listen_closed+0x68>)
 800d73a:	f00b fcbb 	bl	80190b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d73e:	2301      	movs	r3, #1
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e00b      	b.n	800d75c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d744:	4a0d      	ldr	r2, [pc, #52]	; (800d77c <tcp_listen_closed+0x70>)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff ffb1 	bl	800d6b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3301      	adds	r3, #1
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2b03      	cmp	r3, #3
 800d760:	d9f0      	bls.n	800d744 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d762:	bf00      	nop
 800d764:	bf00      	nop
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	0801bd94 	.word	0x0801bd94
 800d770:	0801be44 	.word	0x0801be44
 800d774:	0801bdd8 	.word	0x0801bdd8
 800d778:	0801be50 	.word	0x0801be50
 800d77c:	08028290 	.word	0x08028290

0800d780 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d780:	b5b0      	push	{r4, r5, r7, lr}
 800d782:	b088      	sub	sp, #32
 800d784:	af04      	add	r7, sp, #16
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d106      	bne.n	800d7a0 <tcp_close_shutdown+0x20>
 800d792:	4b63      	ldr	r3, [pc, #396]	; (800d920 <tcp_close_shutdown+0x1a0>)
 800d794:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d798:	4962      	ldr	r1, [pc, #392]	; (800d924 <tcp_close_shutdown+0x1a4>)
 800d79a:	4863      	ldr	r0, [pc, #396]	; (800d928 <tcp_close_shutdown+0x1a8>)
 800d79c:	f00b fc8a 	bl	80190b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d7a0:	78fb      	ldrb	r3, [r7, #3]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d066      	beq.n	800d874 <tcp_close_shutdown+0xf4>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7d1b      	ldrb	r3, [r3, #20]
 800d7aa:	2b04      	cmp	r3, #4
 800d7ac:	d003      	beq.n	800d7b6 <tcp_close_shutdown+0x36>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7d1b      	ldrb	r3, [r3, #20]
 800d7b2:	2b07      	cmp	r3, #7
 800d7b4:	d15e      	bne.n	800d874 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d104      	bne.n	800d7c8 <tcp_close_shutdown+0x48>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d7c6:	d055      	beq.n	800d874 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	8b5b      	ldrh	r3, [r3, #26]
 800d7cc:	f003 0310 	and.w	r3, r3, #16
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d106      	bne.n	800d7e2 <tcp_close_shutdown+0x62>
 800d7d4:	4b52      	ldr	r3, [pc, #328]	; (800d920 <tcp_close_shutdown+0x1a0>)
 800d7d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d7da:	4954      	ldr	r1, [pc, #336]	; (800d92c <tcp_close_shutdown+0x1ac>)
 800d7dc:	4852      	ldr	r0, [pc, #328]	; (800d928 <tcp_close_shutdown+0x1a8>)
 800d7de:	f00b fc69 	bl	80190b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d7ea:	687d      	ldr	r5, [r7, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	8ad2      	ldrh	r2, [r2, #22]
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	8b09      	ldrh	r1, [r1, #24]
 800d7f8:	9102      	str	r1, [sp, #8]
 800d7fa:	9201      	str	r2, [sp, #4]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	462b      	mov	r3, r5
 800d800:	4622      	mov	r2, r4
 800d802:	4601      	mov	r1, r0
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f005 ff03 	bl	8013610 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f001 fce0 	bl	800f1d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d810:	4b47      	ldr	r3, [pc, #284]	; (800d930 <tcp_close_shutdown+0x1b0>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	429a      	cmp	r2, r3
 800d818:	d105      	bne.n	800d826 <tcp_close_shutdown+0xa6>
 800d81a:	4b45      	ldr	r3, [pc, #276]	; (800d930 <tcp_close_shutdown+0x1b0>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	4a43      	ldr	r2, [pc, #268]	; (800d930 <tcp_close_shutdown+0x1b0>)
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	e013      	b.n	800d84e <tcp_close_shutdown+0xce>
 800d826:	4b42      	ldr	r3, [pc, #264]	; (800d930 <tcp_close_shutdown+0x1b0>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e00c      	b.n	800d848 <tcp_close_shutdown+0xc8>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	429a      	cmp	r2, r3
 800d836:	d104      	bne.n	800d842 <tcp_close_shutdown+0xc2>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68da      	ldr	r2, [r3, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	60da      	str	r2, [r3, #12]
 800d840:	e005      	b.n	800d84e <tcp_close_shutdown+0xce>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1ef      	bne.n	800d82e <tcp_close_shutdown+0xae>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	60da      	str	r2, [r3, #12]
 800d854:	4b37      	ldr	r3, [pc, #220]	; (800d934 <tcp_close_shutdown+0x1b4>)
 800d856:	2201      	movs	r2, #1
 800d858:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d85a:	4b37      	ldr	r3, [pc, #220]	; (800d938 <tcp_close_shutdown+0x1b8>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	429a      	cmp	r2, r3
 800d862:	d102      	bne.n	800d86a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d864:	f004 f978 	bl	8011b58 <tcp_trigger_input_pcb_close>
 800d868:	e002      	b.n	800d870 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fed6 	bl	800d61c <tcp_free>
      }
      return ERR_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	e050      	b.n	800d916 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	7d1b      	ldrb	r3, [r3, #20]
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d03b      	beq.n	800d8f4 <tcp_close_shutdown+0x174>
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	dc44      	bgt.n	800d90a <tcp_close_shutdown+0x18a>
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <tcp_close_shutdown+0x10a>
 800d884:	2b01      	cmp	r3, #1
 800d886:	d02a      	beq.n	800d8de <tcp_close_shutdown+0x15e>
 800d888:	e03f      	b.n	800d90a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	8adb      	ldrh	r3, [r3, #22]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d021      	beq.n	800d8d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d892:	4b2a      	ldr	r3, [pc, #168]	; (800d93c <tcp_close_shutdown+0x1bc>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d105      	bne.n	800d8a8 <tcp_close_shutdown+0x128>
 800d89c:	4b27      	ldr	r3, [pc, #156]	; (800d93c <tcp_close_shutdown+0x1bc>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	4a26      	ldr	r2, [pc, #152]	; (800d93c <tcp_close_shutdown+0x1bc>)
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	e013      	b.n	800d8d0 <tcp_close_shutdown+0x150>
 800d8a8:	4b24      	ldr	r3, [pc, #144]	; (800d93c <tcp_close_shutdown+0x1bc>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	60bb      	str	r3, [r7, #8]
 800d8ae:	e00c      	b.n	800d8ca <tcp_close_shutdown+0x14a>
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d104      	bne.n	800d8c4 <tcp_close_shutdown+0x144>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	68da      	ldr	r2, [r3, #12]
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	60da      	str	r2, [r3, #12]
 800d8c2:	e005      	b.n	800d8d0 <tcp_close_shutdown+0x150>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	60bb      	str	r3, [r7, #8]
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1ef      	bne.n	800d8b0 <tcp_close_shutdown+0x130>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff fea0 	bl	800d61c <tcp_free>
      break;
 800d8dc:	e01a      	b.n	800d914 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7ff ff14 	bl	800d70c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	4816      	ldr	r0, [pc, #88]	; (800d940 <tcp_close_shutdown+0x1c0>)
 800d8e8:	f001 fcc2 	bl	800f270 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff feb1 	bl	800d654 <tcp_free_listen>
      break;
 800d8f2:	e00f      	b.n	800d914 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	480e      	ldr	r0, [pc, #56]	; (800d930 <tcp_close_shutdown+0x1b0>)
 800d8f8:	f001 fcba 	bl	800f270 <tcp_pcb_remove>
 800d8fc:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <tcp_close_shutdown+0x1b4>)
 800d8fe:	2201      	movs	r2, #1
 800d900:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff fe8a 	bl	800d61c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d908:	e004      	b.n	800d914 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f81a 	bl	800d944 <tcp_close_shutdown_fin>
 800d910:	4603      	mov	r3, r0
 800d912:	e000      	b.n	800d916 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bdb0      	pop	{r4, r5, r7, pc}
 800d91e:	bf00      	nop
 800d920:	0801bd94 	.word	0x0801bd94
 800d924:	0801be68 	.word	0x0801be68
 800d928:	0801bdd8 	.word	0x0801bdd8
 800d92c:	0801be88 	.word	0x0801be88
 800d930:	20010e98 	.word	0x20010e98
 800d934:	20010ea0 	.word	0x20010ea0
 800d938:	20010ed8 	.word	0x20010ed8
 800d93c:	20010e90 	.word	0x20010e90
 800d940:	20010e94 	.word	0x20010e94

0800d944 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <tcp_close_shutdown_fin+0x1c>
 800d952:	4b2e      	ldr	r3, [pc, #184]	; (800da0c <tcp_close_shutdown_fin+0xc8>)
 800d954:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d958:	492d      	ldr	r1, [pc, #180]	; (800da10 <tcp_close_shutdown_fin+0xcc>)
 800d95a:	482e      	ldr	r0, [pc, #184]	; (800da14 <tcp_close_shutdown_fin+0xd0>)
 800d95c:	f00b fbaa 	bl	80190b4 <iprintf>

  switch (pcb->state) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7d1b      	ldrb	r3, [r3, #20]
 800d964:	2b07      	cmp	r3, #7
 800d966:	d020      	beq.n	800d9aa <tcp_close_shutdown_fin+0x66>
 800d968:	2b07      	cmp	r3, #7
 800d96a:	dc2b      	bgt.n	800d9c4 <tcp_close_shutdown_fin+0x80>
 800d96c:	2b03      	cmp	r3, #3
 800d96e:	d002      	beq.n	800d976 <tcp_close_shutdown_fin+0x32>
 800d970:	2b04      	cmp	r3, #4
 800d972:	d00d      	beq.n	800d990 <tcp_close_shutdown_fin+0x4c>
 800d974:	e026      	b.n	800d9c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f004 ff58 	bl	801282c <tcp_send_fin>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d11f      	bne.n	800d9c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2205      	movs	r2, #5
 800d98c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d98e:	e01b      	b.n	800d9c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f004 ff4b 	bl	801282c <tcp_send_fin>
 800d996:	4603      	mov	r3, r0
 800d998:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d114      	bne.n	800d9cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2205      	movs	r2, #5
 800d9a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d9a8:	e010      	b.n	800d9cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f004 ff3e 	bl	801282c <tcp_send_fin>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d9b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d109      	bne.n	800d9d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2209      	movs	r2, #9
 800d9c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d9c2:	e005      	b.n	800d9d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e01c      	b.n	800da02 <tcp_close_shutdown_fin+0xbe>
      break;
 800d9c8:	bf00      	nop
 800d9ca:	e002      	b.n	800d9d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800d9cc:	bf00      	nop
 800d9ce:	e000      	b.n	800d9d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800d9d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d103      	bne.n	800d9e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f005 f864 	bl	8012aa8 <tcp_output>
 800d9e0:	e00d      	b.n	800d9fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ea:	d108      	bne.n	800d9fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	8b5b      	ldrh	r3, [r3, #26]
 800d9f0:	f043 0308 	orr.w	r3, r3, #8
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e001      	b.n	800da02 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	0801bd94 	.word	0x0801bd94
 800da10:	0801be44 	.word	0x0801be44
 800da14:	0801bdd8 	.word	0x0801bdd8

0800da18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d109      	bne.n	800da3a <tcp_close+0x22>
 800da26:	4b0f      	ldr	r3, [pc, #60]	; (800da64 <tcp_close+0x4c>)
 800da28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800da2c:	490e      	ldr	r1, [pc, #56]	; (800da68 <tcp_close+0x50>)
 800da2e:	480f      	ldr	r0, [pc, #60]	; (800da6c <tcp_close+0x54>)
 800da30:	f00b fb40 	bl	80190b4 <iprintf>
 800da34:	f06f 030f 	mvn.w	r3, #15
 800da38:	e00f      	b.n	800da5a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	7d1b      	ldrb	r3, [r3, #20]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d006      	beq.n	800da50 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8b5b      	ldrh	r3, [r3, #26]
 800da46:	f043 0310 	orr.w	r3, r3, #16
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800da50:	2101      	movs	r1, #1
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fe94 	bl	800d780 <tcp_close_shutdown>
 800da58:	4603      	mov	r3, r0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	0801bd94 	.word	0x0801bd94
 800da68:	0801bea4 	.word	0x0801bea4
 800da6c:	0801bdd8 	.word	0x0801bdd8

0800da70 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d109      	bne.n	800da96 <tcp_shutdown+0x26>
 800da82:	4b26      	ldr	r3, [pc, #152]	; (800db1c <tcp_shutdown+0xac>)
 800da84:	f240 2207 	movw	r2, #519	; 0x207
 800da88:	4925      	ldr	r1, [pc, #148]	; (800db20 <tcp_shutdown+0xb0>)
 800da8a:	4826      	ldr	r0, [pc, #152]	; (800db24 <tcp_shutdown+0xb4>)
 800da8c:	f00b fb12 	bl	80190b4 <iprintf>
 800da90:	f06f 030f 	mvn.w	r3, #15
 800da94:	e03d      	b.n	800db12 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	7d1b      	ldrb	r3, [r3, #20]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d102      	bne.n	800daa4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800da9e:	f06f 030a 	mvn.w	r3, #10
 800daa2:	e036      	b.n	800db12 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d01b      	beq.n	800dae2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	8b5b      	ldrh	r3, [r3, #26]
 800daae:	f043 0310 	orr.w	r3, r3, #16
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d005      	beq.n	800daca <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dabe:	2101      	movs	r1, #1
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f7ff fe5d 	bl	800d780 <tcp_close_shutdown>
 800dac6:	4603      	mov	r3, r0
 800dac8:	e023      	b.n	800db12 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d007      	beq.n	800dae2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff fae4 	bl	800d0a4 <pbuf_free>
      pcb->refused_data = NULL;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d013      	beq.n	800db10 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	7d1b      	ldrb	r3, [r3, #20]
 800daec:	2b04      	cmp	r3, #4
 800daee:	dc02      	bgt.n	800daf6 <tcp_shutdown+0x86>
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	da02      	bge.n	800dafa <tcp_shutdown+0x8a>
 800daf4:	e009      	b.n	800db0a <tcp_shutdown+0x9a>
 800daf6:	2b07      	cmp	r3, #7
 800daf8:	d107      	bne.n	800db0a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	4619      	mov	r1, r3
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff fe3d 	bl	800d780 <tcp_close_shutdown>
 800db06:	4603      	mov	r3, r0
 800db08:	e003      	b.n	800db12 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800db0a:	f06f 030a 	mvn.w	r3, #10
 800db0e:	e000      	b.n	800db12 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	0801bd94 	.word	0x0801bd94
 800db20:	0801bebc 	.word	0x0801bebc
 800db24:	0801bdd8 	.word	0x0801bdd8

0800db28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08e      	sub	sp, #56	; 0x38
 800db2c:	af04      	add	r7, sp, #16
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d107      	bne.n	800db48 <tcp_abandon+0x20>
 800db38:	4b52      	ldr	r3, [pc, #328]	; (800dc84 <tcp_abandon+0x15c>)
 800db3a:	f240 223d 	movw	r2, #573	; 0x23d
 800db3e:	4952      	ldr	r1, [pc, #328]	; (800dc88 <tcp_abandon+0x160>)
 800db40:	4852      	ldr	r0, [pc, #328]	; (800dc8c <tcp_abandon+0x164>)
 800db42:	f00b fab7 	bl	80190b4 <iprintf>
 800db46:	e099      	b.n	800dc7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7d1b      	ldrb	r3, [r3, #20]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d106      	bne.n	800db5e <tcp_abandon+0x36>
 800db50:	4b4c      	ldr	r3, [pc, #304]	; (800dc84 <tcp_abandon+0x15c>)
 800db52:	f44f 7210 	mov.w	r2, #576	; 0x240
 800db56:	494e      	ldr	r1, [pc, #312]	; (800dc90 <tcp_abandon+0x168>)
 800db58:	484c      	ldr	r0, [pc, #304]	; (800dc8c <tcp_abandon+0x164>)
 800db5a:	f00b faab 	bl	80190b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	7d1b      	ldrb	r3, [r3, #20]
 800db62:	2b0a      	cmp	r3, #10
 800db64:	d107      	bne.n	800db76 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800db66:	6879      	ldr	r1, [r7, #4]
 800db68:	484a      	ldr	r0, [pc, #296]	; (800dc94 <tcp_abandon+0x16c>)
 800db6a:	f001 fb81 	bl	800f270 <tcp_pcb_remove>
    tcp_free(pcb);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff fd54 	bl	800d61c <tcp_free>
 800db74:	e082      	b.n	800dc7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db82:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db88:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db90:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	691b      	ldr	r3, [r3, #16]
 800db96:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	7d1b      	ldrb	r3, [r3, #20]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d126      	bne.n	800dbee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	8adb      	ldrh	r3, [r3, #22]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d02e      	beq.n	800dc06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dba8:	4b3b      	ldr	r3, [pc, #236]	; (800dc98 <tcp_abandon+0x170>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d105      	bne.n	800dbbe <tcp_abandon+0x96>
 800dbb2:	4b39      	ldr	r3, [pc, #228]	; (800dc98 <tcp_abandon+0x170>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	4a37      	ldr	r2, [pc, #220]	; (800dc98 <tcp_abandon+0x170>)
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	e013      	b.n	800dbe6 <tcp_abandon+0xbe>
 800dbbe:	4b36      	ldr	r3, [pc, #216]	; (800dc98 <tcp_abandon+0x170>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	61fb      	str	r3, [r7, #28]
 800dbc4:	e00c      	b.n	800dbe0 <tcp_abandon+0xb8>
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d104      	bne.n	800dbda <tcp_abandon+0xb2>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	60da      	str	r2, [r3, #12]
 800dbd8:	e005      	b.n	800dbe6 <tcp_abandon+0xbe>
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	61fb      	str	r3, [r7, #28]
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1ef      	bne.n	800dbc6 <tcp_abandon+0x9e>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	60da      	str	r2, [r3, #12]
 800dbec:	e00b      	b.n	800dc06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	8adb      	ldrh	r3, [r3, #22]
 800dbf6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dbf8:	6879      	ldr	r1, [r7, #4]
 800dbfa:	4828      	ldr	r0, [pc, #160]	; (800dc9c <tcp_abandon+0x174>)
 800dbfc:	f001 fb38 	bl	800f270 <tcp_pcb_remove>
 800dc00:	4b27      	ldr	r3, [pc, #156]	; (800dca0 <tcp_abandon+0x178>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d004      	beq.n	800dc18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 ffee 	bl	800ebf4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 ffe5 	bl	800ebf4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d004      	beq.n	800dc3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 ffdc 	bl	800ebf4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00e      	beq.n	800dc60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dc42:	6879      	ldr	r1, [r7, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3304      	adds	r3, #4
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	8b12      	ldrh	r2, [r2, #24]
 800dc4c:	9202      	str	r2, [sp, #8]
 800dc4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc50:	9201      	str	r2, [sp, #4]
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	460b      	mov	r3, r1
 800dc56:	697a      	ldr	r2, [r7, #20]
 800dc58:	69b9      	ldr	r1, [r7, #24]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f005 fcd8 	bl	8013610 <tcp_rst>
    }
    last_state = pcb->state;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff fcd8 	bl	800d61c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d004      	beq.n	800dc7c <tcp_abandon+0x154>
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	f06f 010c 	mvn.w	r1, #12
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	4798      	blx	r3
  }
}
 800dc7c:	3728      	adds	r7, #40	; 0x28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	0801bd94 	.word	0x0801bd94
 800dc88:	0801bed8 	.word	0x0801bed8
 800dc8c:	0801bdd8 	.word	0x0801bdd8
 800dc90:	0801bef4 	.word	0x0801bef4
 800dc94:	20010e9c 	.word	0x20010e9c
 800dc98:	20010e90 	.word	0x20010e90
 800dc9c:	20010e98 	.word	0x20010e98
 800dca0:	20010ea0 	.word	0x20010ea0

0800dca4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dcac:	2101      	movs	r1, #1
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff ff3a 	bl	800db28 <tcp_abandon>
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b088      	sub	sp, #32
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dcca:	2304      	movs	r3, #4
 800dccc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dcd4:	4b3e      	ldr	r3, [pc, #248]	; (800ddd0 <tcp_bind+0x114>)
 800dcd6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d109      	bne.n	800dcf2 <tcp_bind+0x36>
 800dcde:	4b3d      	ldr	r3, [pc, #244]	; (800ddd4 <tcp_bind+0x118>)
 800dce0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dce4:	493c      	ldr	r1, [pc, #240]	; (800ddd8 <tcp_bind+0x11c>)
 800dce6:	483d      	ldr	r0, [pc, #244]	; (800dddc <tcp_bind+0x120>)
 800dce8:	f00b f9e4 	bl	80190b4 <iprintf>
 800dcec:	f06f 030f 	mvn.w	r3, #15
 800dcf0:	e06a      	b.n	800ddc8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	7d1b      	ldrb	r3, [r3, #20]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d009      	beq.n	800dd0e <tcp_bind+0x52>
 800dcfa:	4b36      	ldr	r3, [pc, #216]	; (800ddd4 <tcp_bind+0x118>)
 800dcfc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dd00:	4937      	ldr	r1, [pc, #220]	; (800dde0 <tcp_bind+0x124>)
 800dd02:	4836      	ldr	r0, [pc, #216]	; (800dddc <tcp_bind+0x120>)
 800dd04:	f00b f9d6 	bl	80190b4 <iprintf>
 800dd08:	f06f 0305 	mvn.w	r3, #5
 800dd0c:	e05c      	b.n	800ddc8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dd0e:	88fb      	ldrh	r3, [r7, #6]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d109      	bne.n	800dd28 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dd14:	f000 f9f0 	bl	800e0f8 <tcp_new_port>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dd1c:	88fb      	ldrh	r3, [r7, #6]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d135      	bne.n	800dd8e <tcp_bind+0xd2>
      return ERR_BUF;
 800dd22:	f06f 0301 	mvn.w	r3, #1
 800dd26:	e04f      	b.n	800ddc8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dd28:	2300      	movs	r3, #0
 800dd2a:	61fb      	str	r3, [r7, #28]
 800dd2c:	e02b      	b.n	800dd86 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dd2e:	4a2d      	ldr	r2, [pc, #180]	; (800dde4 <tcp_bind+0x128>)
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	61bb      	str	r3, [r7, #24]
 800dd3a:	e01e      	b.n	800dd7a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	8adb      	ldrh	r3, [r3, #22]
 800dd40:	88fa      	ldrh	r2, [r7, #6]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d116      	bne.n	800dd74 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dd46:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d010      	beq.n	800dd6e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00c      	beq.n	800dd6e <tcp_bind+0xb2>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d009      	beq.n	800dd6e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d005      	beq.n	800dd6e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d102      	bne.n	800dd74 <tcp_bind+0xb8>
              return ERR_USE;
 800dd6e:	f06f 0307 	mvn.w	r3, #7
 800dd72:	e029      	b.n	800ddc8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	61bb      	str	r3, [r7, #24]
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1dd      	bne.n	800dd3c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	3301      	adds	r3, #1
 800dd84:	61fb      	str	r3, [r7, #28]
 800dd86:	69fa      	ldr	r2, [r7, #28]
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	dbcf      	blt.n	800dd2e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00c      	beq.n	800ddae <tcp_bind+0xf2>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d008      	beq.n	800ddae <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <tcp_bind+0xec>
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	e000      	b.n	800ddaa <tcp_bind+0xee>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	88fa      	ldrh	r2, [r7, #6]
 800ddb2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ddb4:	4b0c      	ldr	r3, [pc, #48]	; (800dde8 <tcp_bind+0x12c>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	60da      	str	r2, [r3, #12]
 800ddbc:	4a0a      	ldr	r2, [pc, #40]	; (800dde8 <tcp_bind+0x12c>)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6013      	str	r3, [r2, #0]
 800ddc2:	f005 fde7 	bl	8013994 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3720      	adds	r7, #32
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	080282c8 	.word	0x080282c8
 800ddd4:	0801bd94 	.word	0x0801bd94
 800ddd8:	0801bf28 	.word	0x0801bf28
 800dddc:	0801bdd8 	.word	0x0801bdd8
 800dde0:	0801bf40 	.word	0x0801bf40
 800dde4:	08028290 	.word	0x08028290
 800dde8:	20010e90 	.word	0x20010e90

0800ddec <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d106      	bne.n	800de0e <tcp_accept_null+0x22>
 800de00:	4b07      	ldr	r3, [pc, #28]	; (800de20 <tcp_accept_null+0x34>)
 800de02:	f240 320f 	movw	r2, #783	; 0x30f
 800de06:	4907      	ldr	r1, [pc, #28]	; (800de24 <tcp_accept_null+0x38>)
 800de08:	4807      	ldr	r0, [pc, #28]	; (800de28 <tcp_accept_null+0x3c>)
 800de0a:	f00b f953 	bl	80190b4 <iprintf>

  tcp_abort(pcb);
 800de0e:	68b8      	ldr	r0, [r7, #8]
 800de10:	f7ff ff48 	bl	800dca4 <tcp_abort>

  return ERR_ABRT;
 800de14:	f06f 030c 	mvn.w	r3, #12
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	0801bd94 	.word	0x0801bd94
 800de24:	0801bf68 	.word	0x0801bf68
 800de28:	0801bdd8 	.word	0x0801bdd8

0800de2c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	460b      	mov	r3, r1
 800de36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800de38:	78fb      	ldrb	r3, [r7, #3]
 800de3a:	2200      	movs	r2, #0
 800de3c:	4619      	mov	r1, r3
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f806 	bl	800de50 <tcp_listen_with_backlog_and_err>
 800de44:	4603      	mov	r3, r0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b088      	sub	sp, #32
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	460b      	mov	r3, r1
 800de5a:	607a      	str	r2, [r7, #4]
 800de5c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800de5e:	2300      	movs	r3, #0
 800de60:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d109      	bne.n	800de7c <tcp_listen_with_backlog_and_err+0x2c>
 800de68:	4b47      	ldr	r3, [pc, #284]	; (800df88 <tcp_listen_with_backlog_and_err+0x138>)
 800de6a:	f240 3259 	movw	r2, #857	; 0x359
 800de6e:	4947      	ldr	r1, [pc, #284]	; (800df8c <tcp_listen_with_backlog_and_err+0x13c>)
 800de70:	4847      	ldr	r0, [pc, #284]	; (800df90 <tcp_listen_with_backlog_and_err+0x140>)
 800de72:	f00b f91f 	bl	80190b4 <iprintf>
 800de76:	23f0      	movs	r3, #240	; 0xf0
 800de78:	76fb      	strb	r3, [r7, #27]
 800de7a:	e079      	b.n	800df70 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	7d1b      	ldrb	r3, [r3, #20]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d009      	beq.n	800de98 <tcp_listen_with_backlog_and_err+0x48>
 800de84:	4b40      	ldr	r3, [pc, #256]	; (800df88 <tcp_listen_with_backlog_and_err+0x138>)
 800de86:	f240 325a 	movw	r2, #858	; 0x35a
 800de8a:	4942      	ldr	r1, [pc, #264]	; (800df94 <tcp_listen_with_backlog_and_err+0x144>)
 800de8c:	4840      	ldr	r0, [pc, #256]	; (800df90 <tcp_listen_with_backlog_and_err+0x140>)
 800de8e:	f00b f911 	bl	80190b4 <iprintf>
 800de92:	23f1      	movs	r3, #241	; 0xf1
 800de94:	76fb      	strb	r3, [r7, #27]
 800de96:	e06b      	b.n	800df70 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	7d1b      	ldrb	r3, [r3, #20]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d104      	bne.n	800deaa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dea4:	23f7      	movs	r3, #247	; 0xf7
 800dea6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dea8:	e062      	b.n	800df70 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800deaa:	2002      	movs	r0, #2
 800deac:	f7fe f9d4 	bl	800c258 <memp_malloc>
 800deb0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d102      	bne.n	800debe <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800deb8:	23ff      	movs	r3, #255	; 0xff
 800deba:	76fb      	strb	r3, [r7, #27]
    goto done;
 800debc:	e058      	b.n	800df70 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	691a      	ldr	r2, [r3, #16]
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	8ada      	ldrh	r2, [r3, #22]
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	2201      	movs	r2, #1
 800ded2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	7d5a      	ldrb	r2, [r3, #21]
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7a5a      	ldrb	r2, [r3, #9]
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	2200      	movs	r2, #0
 800dee8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	7ada      	ldrb	r2, [r3, #11]
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	7a9a      	ldrb	r2, [r3, #10]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	8adb      	ldrh	r3, [r3, #22]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d021      	beq.n	800df4e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800df0a:	4b23      	ldr	r3, [pc, #140]	; (800df98 <tcp_listen_with_backlog_and_err+0x148>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	429a      	cmp	r2, r3
 800df12:	d105      	bne.n	800df20 <tcp_listen_with_backlog_and_err+0xd0>
 800df14:	4b20      	ldr	r3, [pc, #128]	; (800df98 <tcp_listen_with_backlog_and_err+0x148>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	4a1f      	ldr	r2, [pc, #124]	; (800df98 <tcp_listen_with_backlog_and_err+0x148>)
 800df1c:	6013      	str	r3, [r2, #0]
 800df1e:	e013      	b.n	800df48 <tcp_listen_with_backlog_and_err+0xf8>
 800df20:	4b1d      	ldr	r3, [pc, #116]	; (800df98 <tcp_listen_with_backlog_and_err+0x148>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	617b      	str	r3, [r7, #20]
 800df26:	e00c      	b.n	800df42 <tcp_listen_with_backlog_and_err+0xf2>
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d104      	bne.n	800df3c <tcp_listen_with_backlog_and_err+0xec>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	68da      	ldr	r2, [r3, #12]
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	60da      	str	r2, [r3, #12]
 800df3a:	e005      	b.n	800df48 <tcp_listen_with_backlog_and_err+0xf8>
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1ef      	bne.n	800df28 <tcp_listen_with_backlog_and_err+0xd8>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff fb64 	bl	800d61c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	4a11      	ldr	r2, [pc, #68]	; (800df9c <tcp_listen_with_backlog_and_err+0x14c>)
 800df58:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <tcp_listen_with_backlog_and_err+0x150>)
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	60da      	str	r2, [r3, #12]
 800df62:	4a0f      	ldr	r2, [pc, #60]	; (800dfa0 <tcp_listen_with_backlog_and_err+0x150>)
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	f005 fd14 	bl	8013994 <tcp_timer_needed>
  res = ERR_OK;
 800df6c:	2300      	movs	r3, #0
 800df6e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7efa      	ldrb	r2, [r7, #27]
 800df7a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800df7c:	69fb      	ldr	r3, [r7, #28]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3720      	adds	r7, #32
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	0801bd94 	.word	0x0801bd94
 800df8c:	0801bf88 	.word	0x0801bf88
 800df90:	0801bdd8 	.word	0x0801bdd8
 800df94:	0801bfb8 	.word	0x0801bfb8
 800df98:	20010e90 	.word	0x20010e90
 800df9c:	0800dded 	.word	0x0800dded
 800dfa0:	20010e94 	.word	0x20010e94

0800dfa4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <tcp_update_rcv_ann_wnd+0x1c>
 800dfb2:	4b25      	ldr	r3, [pc, #148]	; (800e048 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfb4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dfb8:	4924      	ldr	r1, [pc, #144]	; (800e04c <tcp_update_rcv_ann_wnd+0xa8>)
 800dfba:	4825      	ldr	r0, [pc, #148]	; (800e050 <tcp_update_rcv_ann_wnd+0xac>)
 800dfbc:	f00b f87a 	bl	80190b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfc8:	4413      	add	r3, r2
 800dfca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dfd4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dfd8:	bf28      	it	cs
 800dfda:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dfde:	b292      	uxth	r2, r2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	db08      	blt.n	800dffc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	e020      	b.n	800e03e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	2b00      	cmp	r3, #0
 800e008:	dd03      	ble.n	800e012 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e010:	e014      	b.n	800e03c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e024:	d306      	bcc.n	800e034 <tcp_update_rcv_ann_wnd+0x90>
 800e026:	4b08      	ldr	r3, [pc, #32]	; (800e048 <tcp_update_rcv_ann_wnd+0xa4>)
 800e028:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e02c:	4909      	ldr	r1, [pc, #36]	; (800e054 <tcp_update_rcv_ann_wnd+0xb0>)
 800e02e:	4808      	ldr	r0, [pc, #32]	; (800e050 <tcp_update_rcv_ann_wnd+0xac>)
 800e030:	f00b f840 	bl	80190b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	b29a      	uxth	r2, r3
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e03c:	2300      	movs	r3, #0
  }
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	0801bd94 	.word	0x0801bd94
 800e04c:	0801bff0 	.word	0x0801bff0
 800e050:	0801bdd8 	.word	0x0801bdd8
 800e054:	0801c014 	.word	0x0801c014

0800e058 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d107      	bne.n	800e07a <tcp_recved+0x22>
 800e06a:	4b1f      	ldr	r3, [pc, #124]	; (800e0e8 <tcp_recved+0x90>)
 800e06c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e070:	491e      	ldr	r1, [pc, #120]	; (800e0ec <tcp_recved+0x94>)
 800e072:	481f      	ldr	r0, [pc, #124]	; (800e0f0 <tcp_recved+0x98>)
 800e074:	f00b f81e 	bl	80190b4 <iprintf>
 800e078:	e032      	b.n	800e0e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7d1b      	ldrb	r3, [r3, #20]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d106      	bne.n	800e090 <tcp_recved+0x38>
 800e082:	4b19      	ldr	r3, [pc, #100]	; (800e0e8 <tcp_recved+0x90>)
 800e084:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e088:	491a      	ldr	r1, [pc, #104]	; (800e0f4 <tcp_recved+0x9c>)
 800e08a:	4819      	ldr	r0, [pc, #100]	; (800e0f0 <tcp_recved+0x98>)
 800e08c:	f00b f812 	bl	80190b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e094:	887b      	ldrh	r3, [r7, #2]
 800e096:	4413      	add	r3, r2
 800e098:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e09a:	89fb      	ldrh	r3, [r7, #14]
 800e09c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0a0:	d804      	bhi.n	800e0ac <tcp_recved+0x54>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0a6:	89fa      	ldrh	r2, [r7, #14]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d204      	bcs.n	800e0b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0b2:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0b4:	e002      	b.n	800e0bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	89fa      	ldrh	r2, [r7, #14]
 800e0ba:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff ff71 	bl	800dfa4 <tcp_update_rcv_ann_wnd>
 800e0c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0ca:	d309      	bcc.n	800e0e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	8b5b      	ldrh	r3, [r3, #26]
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f004 fce4 	bl	8012aa8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	0801bd94 	.word	0x0801bd94
 800e0ec:	0801c030 	.word	0x0801c030
 800e0f0:	0801bdd8 	.word	0x0801bdd8
 800e0f4:	0801c048 	.word	0x0801c048

0800e0f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e0fe:	2300      	movs	r3, #0
 800e100:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e102:	4b1e      	ldr	r3, [pc, #120]	; (800e17c <tcp_new_port+0x84>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	3301      	adds	r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	4b1c      	ldr	r3, [pc, #112]	; (800e17c <tcp_new_port+0x84>)
 800e10c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e10e:	4b1b      	ldr	r3, [pc, #108]	; (800e17c <tcp_new_port+0x84>)
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e116:	4293      	cmp	r3, r2
 800e118:	d103      	bne.n	800e122 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e11a:	4b18      	ldr	r3, [pc, #96]	; (800e17c <tcp_new_port+0x84>)
 800e11c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e120:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e122:	2300      	movs	r3, #0
 800e124:	71fb      	strb	r3, [r7, #7]
 800e126:	e01e      	b.n	800e166 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	4a15      	ldr	r2, [pc, #84]	; (800e180 <tcp_new_port+0x88>)
 800e12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	e011      	b.n	800e15a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	8ada      	ldrh	r2, [r3, #22]
 800e13a:	4b10      	ldr	r3, [pc, #64]	; (800e17c <tcp_new_port+0x84>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d108      	bne.n	800e154 <tcp_new_port+0x5c>
        n++;
 800e142:	88bb      	ldrh	r3, [r7, #4]
 800e144:	3301      	adds	r3, #1
 800e146:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e148:	88bb      	ldrh	r3, [r7, #4]
 800e14a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e14e:	d3d8      	bcc.n	800e102 <tcp_new_port+0xa>
          return 0;
 800e150:	2300      	movs	r3, #0
 800e152:	e00d      	b.n	800e170 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	603b      	str	r3, [r7, #0]
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1ea      	bne.n	800e136 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	3301      	adds	r3, #1
 800e164:	71fb      	strb	r3, [r7, #7]
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d9dd      	bls.n	800e128 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e16c:	4b03      	ldr	r3, [pc, #12]	; (800e17c <tcp_new_port+0x84>)
 800e16e:	881b      	ldrh	r3, [r3, #0]
}
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	20000024 	.word	0x20000024
 800e180:	08028290 	.word	0x08028290

0800e184 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08a      	sub	sp, #40	; 0x28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	4613      	mov	r3, r2
 800e192:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d109      	bne.n	800e1b2 <tcp_connect+0x2e>
 800e19e:	4b7d      	ldr	r3, [pc, #500]	; (800e394 <tcp_connect+0x210>)
 800e1a0:	f240 4235 	movw	r2, #1077	; 0x435
 800e1a4:	497c      	ldr	r1, [pc, #496]	; (800e398 <tcp_connect+0x214>)
 800e1a6:	487d      	ldr	r0, [pc, #500]	; (800e39c <tcp_connect+0x218>)
 800e1a8:	f00a ff84 	bl	80190b4 <iprintf>
 800e1ac:	f06f 030f 	mvn.w	r3, #15
 800e1b0:	e0ec      	b.n	800e38c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <tcp_connect+0x48>
 800e1b8:	4b76      	ldr	r3, [pc, #472]	; (800e394 <tcp_connect+0x210>)
 800e1ba:	f240 4236 	movw	r2, #1078	; 0x436
 800e1be:	4978      	ldr	r1, [pc, #480]	; (800e3a0 <tcp_connect+0x21c>)
 800e1c0:	4876      	ldr	r0, [pc, #472]	; (800e39c <tcp_connect+0x218>)
 800e1c2:	f00a ff77 	bl	80190b4 <iprintf>
 800e1c6:	f06f 030f 	mvn.w	r3, #15
 800e1ca:	e0df      	b.n	800e38c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	7d1b      	ldrb	r3, [r3, #20]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d009      	beq.n	800e1e8 <tcp_connect+0x64>
 800e1d4:	4b6f      	ldr	r3, [pc, #444]	; (800e394 <tcp_connect+0x210>)
 800e1d6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e1da:	4972      	ldr	r1, [pc, #456]	; (800e3a4 <tcp_connect+0x220>)
 800e1dc:	486f      	ldr	r0, [pc, #444]	; (800e39c <tcp_connect+0x218>)
 800e1de:	f00a ff69 	bl	80190b4 <iprintf>
 800e1e2:	f06f 0309 	mvn.w	r3, #9
 800e1e6:	e0d1      	b.n	800e38c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <tcp_connect+0x70>
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	e000      	b.n	800e1f6 <tcp_connect+0x72>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	88fa      	ldrh	r2, [r7, #6]
 800e1fe:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	7a1b      	ldrb	r3, [r3, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d006      	beq.n	800e216 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	7a1b      	ldrb	r3, [r3, #8]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe fbbb 	bl	800c988 <netif_get_by_index>
 800e212:	6278      	str	r0, [r7, #36]	; 0x24
 800e214:	e005      	b.n	800e222 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3304      	adds	r3, #4
 800e21a:	4618      	mov	r0, r3
 800e21c:	f009 f96c 	bl	80174f8 <ip4_route>
 800e220:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	2b00      	cmp	r3, #0
 800e226:	d102      	bne.n	800e22e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e228:	f06f 0303 	mvn.w	r3, #3
 800e22c:	e0ae      	b.n	800e38c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d003      	beq.n	800e23c <tcp_connect+0xb8>
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d111      	bne.n	800e260 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <tcp_connect+0xc4>
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	3304      	adds	r3, #4
 800e246:	e000      	b.n	800e24a <tcp_connect+0xc6>
 800e248:	2300      	movs	r3, #0
 800e24a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <tcp_connect+0xd4>
      return ERR_RTE;
 800e252:	f06f 0303 	mvn.w	r3, #3
 800e256:	e099      	b.n	800e38c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	8adb      	ldrh	r3, [r3, #22]
 800e264:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	8adb      	ldrh	r3, [r3, #22]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10c      	bne.n	800e288 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e26e:	f7ff ff43 	bl	800e0f8 <tcp_new_port>
 800e272:	4603      	mov	r3, r0
 800e274:	461a      	mov	r2, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	8adb      	ldrh	r3, [r3, #22]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <tcp_connect+0x104>
      return ERR_BUF;
 800e282:	f06f 0301 	mvn.w	r3, #1
 800e286:	e081      	b.n	800e38c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f001 f885 	bl	800f398 <tcp_next_iss>
 800e28e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	697a      	ldr	r2, [r7, #20]
 800e29a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	1e5a      	subs	r2, r3, #1
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	1e5a      	subs	r2, r3, #1
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e2dc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2ea:	f001 f87b 	bl	800f3e4 <tcp_eff_send_mss_netif>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e306:	2102      	movs	r1, #2
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f004 fadf 	bl	80128cc <tcp_enqueue_flags>
 800e30e:	4603      	mov	r3, r0
 800e310:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e312:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d136      	bne.n	800e388 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2202      	movs	r2, #2
 800e31e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e320:	8b7b      	ldrh	r3, [r7, #26]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d021      	beq.n	800e36a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e326:	4b20      	ldr	r3, [pc, #128]	; (800e3a8 <tcp_connect+0x224>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68fa      	ldr	r2, [r7, #12]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d105      	bne.n	800e33c <tcp_connect+0x1b8>
 800e330:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <tcp_connect+0x224>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	4a1c      	ldr	r2, [pc, #112]	; (800e3a8 <tcp_connect+0x224>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	e013      	b.n	800e364 <tcp_connect+0x1e0>
 800e33c:	4b1a      	ldr	r3, [pc, #104]	; (800e3a8 <tcp_connect+0x224>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	623b      	str	r3, [r7, #32]
 800e342:	e00c      	b.n	800e35e <tcp_connect+0x1da>
 800e344:	6a3b      	ldr	r3, [r7, #32]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d104      	bne.n	800e358 <tcp_connect+0x1d4>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	60da      	str	r2, [r3, #12]
 800e356:	e005      	b.n	800e364 <tcp_connect+0x1e0>
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	623b      	str	r3, [r7, #32]
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1ef      	bne.n	800e344 <tcp_connect+0x1c0>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e36a:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <tcp_connect+0x228>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	4a0e      	ldr	r2, [pc, #56]	; (800e3ac <tcp_connect+0x228>)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	f005 fb0c 	bl	8013994 <tcp_timer_needed>
 800e37c:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <tcp_connect+0x22c>)
 800e37e:	2201      	movs	r2, #1
 800e380:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f004 fb90 	bl	8012aa8 <tcp_output>
  }
  return ret;
 800e388:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3728      	adds	r7, #40	; 0x28
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	0801bd94 	.word	0x0801bd94
 800e398:	0801c070 	.word	0x0801c070
 800e39c:	0801bdd8 	.word	0x0801bdd8
 800e3a0:	0801c08c 	.word	0x0801c08c
 800e3a4:	0801c0a8 	.word	0x0801c0a8
 800e3a8:	20010e90 	.word	0x20010e90
 800e3ac:	20010e98 	.word	0x20010e98
 800e3b0:	20010ea0 	.word	0x20010ea0

0800e3b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3b4:	b5b0      	push	{r4, r5, r7, lr}
 800e3b6:	b090      	sub	sp, #64	; 0x40
 800e3b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e3c0:	4b94      	ldr	r3, [pc, #592]	; (800e614 <tcp_slowtmr+0x260>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	4a93      	ldr	r2, [pc, #588]	; (800e614 <tcp_slowtmr+0x260>)
 800e3c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e3ca:	4b93      	ldr	r3, [pc, #588]	; (800e618 <tcp_slowtmr+0x264>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	4b91      	ldr	r3, [pc, #580]	; (800e618 <tcp_slowtmr+0x264>)
 800e3d4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e3da:	4b90      	ldr	r3, [pc, #576]	; (800e61c <tcp_slowtmr+0x268>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e3e0:	e29f      	b.n	800e922 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	7d1b      	ldrb	r3, [r3, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d106      	bne.n	800e3f8 <tcp_slowtmr+0x44>
 800e3ea:	4b8d      	ldr	r3, [pc, #564]	; (800e620 <tcp_slowtmr+0x26c>)
 800e3ec:	f240 42be 	movw	r2, #1214	; 0x4be
 800e3f0:	498c      	ldr	r1, [pc, #560]	; (800e624 <tcp_slowtmr+0x270>)
 800e3f2:	488d      	ldr	r0, [pc, #564]	; (800e628 <tcp_slowtmr+0x274>)
 800e3f4:	f00a fe5e 	bl	80190b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	7d1b      	ldrb	r3, [r3, #20]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d106      	bne.n	800e40e <tcp_slowtmr+0x5a>
 800e400:	4b87      	ldr	r3, [pc, #540]	; (800e620 <tcp_slowtmr+0x26c>)
 800e402:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e406:	4989      	ldr	r1, [pc, #548]	; (800e62c <tcp_slowtmr+0x278>)
 800e408:	4887      	ldr	r0, [pc, #540]	; (800e628 <tcp_slowtmr+0x274>)
 800e40a:	f00a fe53 	bl	80190b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	7d1b      	ldrb	r3, [r3, #20]
 800e412:	2b0a      	cmp	r3, #10
 800e414:	d106      	bne.n	800e424 <tcp_slowtmr+0x70>
 800e416:	4b82      	ldr	r3, [pc, #520]	; (800e620 <tcp_slowtmr+0x26c>)
 800e418:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e41c:	4984      	ldr	r1, [pc, #528]	; (800e630 <tcp_slowtmr+0x27c>)
 800e41e:	4882      	ldr	r0, [pc, #520]	; (800e628 <tcp_slowtmr+0x274>)
 800e420:	f00a fe48 	bl	80190b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	7f9a      	ldrb	r2, [r3, #30]
 800e428:	4b7b      	ldr	r3, [pc, #492]	; (800e618 <tcp_slowtmr+0x264>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d105      	bne.n	800e43c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e43a:	e272      	b.n	800e922 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e43c:	4b76      	ldr	r3, [pc, #472]	; (800e618 <tcp_slowtmr+0x264>)
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	7d1b      	ldrb	r3, [r3, #20]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d10a      	bne.n	800e46e <tcp_slowtmr+0xba>
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d905      	bls.n	800e46e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e466:	3301      	adds	r3, #1
 800e468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e46c:	e11e      	b.n	800e6ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e474:	2b0b      	cmp	r3, #11
 800e476:	d905      	bls.n	800e484 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e47c:	3301      	adds	r3, #1
 800e47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e482:	e113      	b.n	800e6ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d075      	beq.n	800e57a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e492:	2b00      	cmp	r3, #0
 800e494:	d006      	beq.n	800e4a4 <tcp_slowtmr+0xf0>
 800e496:	4b62      	ldr	r3, [pc, #392]	; (800e620 <tcp_slowtmr+0x26c>)
 800e498:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e49c:	4965      	ldr	r1, [pc, #404]	; (800e634 <tcp_slowtmr+0x280>)
 800e49e:	4862      	ldr	r0, [pc, #392]	; (800e628 <tcp_slowtmr+0x274>)
 800e4a0:	f00a fe08 	bl	80190b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d106      	bne.n	800e4ba <tcp_slowtmr+0x106>
 800e4ac:	4b5c      	ldr	r3, [pc, #368]	; (800e620 <tcp_slowtmr+0x26c>)
 800e4ae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4b2:	4961      	ldr	r1, [pc, #388]	; (800e638 <tcp_slowtmr+0x284>)
 800e4b4:	485c      	ldr	r0, [pc, #368]	; (800e628 <tcp_slowtmr+0x274>)
 800e4b6:	f00a fdfd 	bl	80190b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e4c0:	2b0b      	cmp	r3, #11
 800e4c2:	d905      	bls.n	800e4d0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ce:	e0ed      	b.n	800e6ac <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	4a58      	ldr	r2, [pc, #352]	; (800e63c <tcp_slowtmr+0x288>)
 800e4da:	5cd3      	ldrb	r3, [r2, r3]
 800e4dc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4e4:	7c7a      	ldrb	r2, [r7, #17]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d907      	bls.n	800e4fa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e500:	7c7a      	ldrb	r2, [r7, #17]
 800e502:	429a      	cmp	r2, r3
 800e504:	f200 80d2 	bhi.w	800e6ac <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e508:	2301      	movs	r3, #1
 800e50a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e512:	2b00      	cmp	r3, #0
 800e514:	d108      	bne.n	800e528 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e518:	f005 f96e 	bl	80137f8 <tcp_zero_window_probe>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d014      	beq.n	800e54c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e522:	2300      	movs	r3, #0
 800e524:	623b      	str	r3, [r7, #32]
 800e526:	e011      	b.n	800e54c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e52e:	4619      	mov	r1, r3
 800e530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e532:	f004 f833 	bl	801259c <tcp_split_unsent_seg>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d107      	bne.n	800e54c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e53c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e53e:	f004 fab3 	bl	8012aa8 <tcp_output>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e548:	2300      	movs	r3, #0
 800e54a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 80ac 	beq.w	800e6ac <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	2200      	movs	r2, #0
 800e558:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e562:	2b06      	cmp	r3, #6
 800e564:	f200 80a2 	bhi.w	800e6ac <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e56e:	3301      	adds	r3, #1
 800e570:	b2da      	uxtb	r2, r3
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e578:	e098      	b.n	800e6ac <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e580:	2b00      	cmp	r3, #0
 800e582:	db0f      	blt.n	800e5a4 <tcp_slowtmr+0x1f0>
 800e584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e586:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e58a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e58e:	4293      	cmp	r3, r2
 800e590:	d008      	beq.n	800e5a4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e594:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e598:	b29b      	uxth	r3, r3
 800e59a:	3301      	adds	r3, #1
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	b21a      	sxth	r2, r3
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	db7b      	blt.n	800e6ac <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b6:	f004 fd69 	bl	801308c <tcp_rexmit_rto_prepare>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <tcp_slowtmr+0x21c>
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d171      	bne.n	800e6ac <tcp_slowtmr+0x2f8>
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d06d      	beq.n	800e6ac <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	7d1b      	ldrb	r3, [r3, #20]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d03a      	beq.n	800e64e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5de:	2b0c      	cmp	r3, #12
 800e5e0:	bf28      	it	cs
 800e5e2:	230c      	movcs	r3, #12
 800e5e4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5ec:	10db      	asrs	r3, r3, #3
 800e5ee:	b21b      	sxth	r3, r3
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5f8:	4413      	add	r3, r2
 800e5fa:	7efa      	ldrb	r2, [r7, #27]
 800e5fc:	4910      	ldr	r1, [pc, #64]	; (800e640 <tcp_slowtmr+0x28c>)
 800e5fe:	5c8a      	ldrb	r2, [r1, r2]
 800e600:	4093      	lsls	r3, r2
 800e602:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e60a:	4293      	cmp	r3, r2
 800e60c:	dc1a      	bgt.n	800e644 <tcp_slowtmr+0x290>
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	b21a      	sxth	r2, r3
 800e612:	e019      	b.n	800e648 <tcp_slowtmr+0x294>
 800e614:	20010e8c 	.word	0x20010e8c
 800e618:	20010ea2 	.word	0x20010ea2
 800e61c:	20010e98 	.word	0x20010e98
 800e620:	0801bd94 	.word	0x0801bd94
 800e624:	0801c0d8 	.word	0x0801c0d8
 800e628:	0801bdd8 	.word	0x0801bdd8
 800e62c:	0801c104 	.word	0x0801c104
 800e630:	0801c130 	.word	0x0801c130
 800e634:	0801c160 	.word	0x0801c160
 800e638:	0801c194 	.word	0x0801c194
 800e63c:	08028288 	.word	0x08028288
 800e640:	08028278 	.word	0x08028278
 800e644:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	2200      	movs	r2, #0
 800e652:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e656:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e660:	4293      	cmp	r3, r2
 800e662:	bf28      	it	cs
 800e664:	4613      	movcs	r3, r2
 800e666:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e668:	8a7b      	ldrh	r3, [r7, #18]
 800e66a:	085b      	lsrs	r3, r3, #1
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	b29b      	uxth	r3, r3
 800e682:	429a      	cmp	r2, r3
 800e684:	d206      	bcs.n	800e694 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e6a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6a8:	f004 fd60 	bl	801316c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
 800e6b0:	2b06      	cmp	r3, #6
 800e6b2:	d111      	bne.n	800e6d8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	8b5b      	ldrh	r3, [r3, #26]
 800e6b8:	f003 0310 	and.w	r3, r3, #16
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6c0:	4b9d      	ldr	r3, [pc, #628]	; (800e938 <tcp_slowtmr+0x584>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	6a1b      	ldr	r3, [r3, #32]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	2b28      	cmp	r3, #40	; 0x28
 800e6cc:	d904      	bls.n	800e6d8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	7a5b      	ldrb	r3, [r3, #9]
 800e6dc:	f003 0308 	and.w	r3, r3, #8
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d04c      	beq.n	800e77e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6e8:	2b04      	cmp	r3, #4
 800e6ea:	d003      	beq.n	800e6f4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e6f0:	2b07      	cmp	r3, #7
 800e6f2:	d144      	bne.n	800e77e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6f4:	4b90      	ldr	r3, [pc, #576]	; (800e938 <tcp_slowtmr+0x584>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e704:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e708:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e70c:	498b      	ldr	r1, [pc, #556]	; (800e93c <tcp_slowtmr+0x588>)
 800e70e:	fba1 1303 	umull	r1, r3, r1, r3
 800e712:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e714:	429a      	cmp	r2, r3
 800e716:	d90a      	bls.n	800e72e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e71c:	3301      	adds	r3, #1
 800e71e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e722:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e726:	3301      	adds	r3, #1
 800e728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e72c:	e027      	b.n	800e77e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e72e:	4b82      	ldr	r3, [pc, #520]	; (800e938 <tcp_slowtmr+0x584>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e740:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e744:	4618      	mov	r0, r3
 800e746:	4b7e      	ldr	r3, [pc, #504]	; (800e940 <tcp_slowtmr+0x58c>)
 800e748:	fb00 f303 	mul.w	r3, r0, r3
 800e74c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e74e:	497b      	ldr	r1, [pc, #492]	; (800e93c <tcp_slowtmr+0x588>)
 800e750:	fba1 1303 	umull	r1, r3, r1, r3
 800e754:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e756:	429a      	cmp	r2, r3
 800e758:	d911      	bls.n	800e77e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e75a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e75c:	f005 f80c 	bl	8013778 <tcp_keepalive>
 800e760:	4603      	mov	r3, r0
 800e762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e766:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d107      	bne.n	800e77e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e774:	3301      	adds	r3, #1
 800e776:	b2da      	uxtb	r2, r3
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e782:	2b00      	cmp	r3, #0
 800e784:	d011      	beq.n	800e7aa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e786:	4b6c      	ldr	r3, [pc, #432]	; (800e938 <tcp_slowtmr+0x584>)
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	6a1b      	ldr	r3, [r3, #32]
 800e78e:	1ad2      	subs	r2, r2, r3
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e796:	4619      	mov	r1, r3
 800e798:	460b      	mov	r3, r1
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	440b      	add	r3, r1
 800e79e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d302      	bcc.n	800e7aa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e7a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7a6:	f000 fec7 	bl	800f538 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	7d1b      	ldrb	r3, [r3, #20]
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d10b      	bne.n	800e7ca <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7b2:	4b61      	ldr	r3, [pc, #388]	; (800e938 <tcp_slowtmr+0x584>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	2b28      	cmp	r3, #40	; 0x28
 800e7be:	d904      	bls.n	800e7ca <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	7d1b      	ldrb	r3, [r3, #20]
 800e7ce:	2b09      	cmp	r3, #9
 800e7d0:	d10b      	bne.n	800e7ea <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7d2:	4b59      	ldr	r3, [pc, #356]	; (800e938 <tcp_slowtmr+0x584>)
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	2bf0      	cmp	r3, #240	; 0xf0
 800e7de:	d904      	bls.n	800e7ea <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d060      	beq.n	800e8b4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e7fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7fc:	f000 fce8 	bl	800f1d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e802:	2b00      	cmp	r3, #0
 800e804:	d010      	beq.n	800e828 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e806:	4b4f      	ldr	r3, [pc, #316]	; (800e944 <tcp_slowtmr+0x590>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d106      	bne.n	800e81e <tcp_slowtmr+0x46a>
 800e810:	4b4d      	ldr	r3, [pc, #308]	; (800e948 <tcp_slowtmr+0x594>)
 800e812:	f240 526d 	movw	r2, #1389	; 0x56d
 800e816:	494d      	ldr	r1, [pc, #308]	; (800e94c <tcp_slowtmr+0x598>)
 800e818:	484d      	ldr	r0, [pc, #308]	; (800e950 <tcp_slowtmr+0x59c>)
 800e81a:	f00a fc4b 	bl	80190b4 <iprintf>
        prev->next = pcb->next;
 800e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e820:	68da      	ldr	r2, [r3, #12]
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	60da      	str	r2, [r3, #12]
 800e826:	e00f      	b.n	800e848 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e828:	4b46      	ldr	r3, [pc, #280]	; (800e944 <tcp_slowtmr+0x590>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e82e:	429a      	cmp	r2, r3
 800e830:	d006      	beq.n	800e840 <tcp_slowtmr+0x48c>
 800e832:	4b45      	ldr	r3, [pc, #276]	; (800e948 <tcp_slowtmr+0x594>)
 800e834:	f240 5271 	movw	r2, #1393	; 0x571
 800e838:	4946      	ldr	r1, [pc, #280]	; (800e954 <tcp_slowtmr+0x5a0>)
 800e83a:	4845      	ldr	r0, [pc, #276]	; (800e950 <tcp_slowtmr+0x59c>)
 800e83c:	f00a fc3a 	bl	80190b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	4a3f      	ldr	r2, [pc, #252]	; (800e944 <tcp_slowtmr+0x590>)
 800e846:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e848:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d013      	beq.n	800e878 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e858:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	3304      	adds	r3, #4
 800e85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e860:	8ad2      	ldrh	r2, [r2, #22]
 800e862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e864:	8b09      	ldrh	r1, [r1, #24]
 800e866:	9102      	str	r1, [sp, #8]
 800e868:	9201      	str	r2, [sp, #4]
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	462b      	mov	r3, r5
 800e86e:	4622      	mov	r2, r4
 800e870:	4601      	mov	r1, r0
 800e872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e874:	f004 fecc 	bl	8013610 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	691b      	ldr	r3, [r3, #16]
 800e87c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	7d1b      	ldrb	r3, [r3, #20]
 800e882:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e88e:	6838      	ldr	r0, [r7, #0]
 800e890:	f7fe fec4 	bl	800d61c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e894:	4b30      	ldr	r3, [pc, #192]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e896:	2200      	movs	r2, #0
 800e898:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d004      	beq.n	800e8aa <tcp_slowtmr+0x4f6>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f06f 010c 	mvn.w	r1, #12
 800e8a6:	68b8      	ldr	r0, [r7, #8]
 800e8a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8aa:	4b2b      	ldr	r3, [pc, #172]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d037      	beq.n	800e922 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e8b2:	e590      	b.n	800e3d6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	7f1b      	ldrb	r3, [r3, #28]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	b2da      	uxtb	r2, r3
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	7f1a      	ldrb	r2, [r3, #28]
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	7f5b      	ldrb	r3, [r3, #29]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d325      	bcc.n	800e922 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d8:	2200      	movs	r2, #0
 800e8da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e8dc:	4b1e      	ldr	r3, [pc, #120]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e8de:	2200      	movs	r2, #0
 800e8e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00b      	beq.n	800e904 <tcp_slowtmr+0x550>
 800e8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f4:	6912      	ldr	r2, [r2, #16]
 800e8f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8f8:	4610      	mov	r0, r2
 800e8fa:	4798      	blx	r3
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e902:	e002      	b.n	800e90a <tcp_slowtmr+0x556>
 800e904:	2300      	movs	r3, #0
 800e906:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e90a:	4b13      	ldr	r3, [pc, #76]	; (800e958 <tcp_slowtmr+0x5a4>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d000      	beq.n	800e914 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e912:	e560      	b.n	800e3d6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e914:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e91e:	f004 f8c3 	bl	8012aa8 <tcp_output>
  while (pcb != NULL) {
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	2b00      	cmp	r3, #0
 800e926:	f47f ad5c 	bne.w	800e3e2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e92e:	4b0b      	ldr	r3, [pc, #44]	; (800e95c <tcp_slowtmr+0x5a8>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e934:	e067      	b.n	800ea06 <tcp_slowtmr+0x652>
 800e936:	bf00      	nop
 800e938:	20010e8c 	.word	0x20010e8c
 800e93c:	10624dd3 	.word	0x10624dd3
 800e940:	000124f8 	.word	0x000124f8
 800e944:	20010e98 	.word	0x20010e98
 800e948:	0801bd94 	.word	0x0801bd94
 800e94c:	0801c1cc 	.word	0x0801c1cc
 800e950:	0801bdd8 	.word	0x0801bdd8
 800e954:	0801c1f8 	.word	0x0801c1f8
 800e958:	20010ea0 	.word	0x20010ea0
 800e95c:	20010e9c 	.word	0x20010e9c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	7d1b      	ldrb	r3, [r3, #20]
 800e964:	2b0a      	cmp	r3, #10
 800e966:	d006      	beq.n	800e976 <tcp_slowtmr+0x5c2>
 800e968:	4b2b      	ldr	r3, [pc, #172]	; (800ea18 <tcp_slowtmr+0x664>)
 800e96a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e96e:	492b      	ldr	r1, [pc, #172]	; (800ea1c <tcp_slowtmr+0x668>)
 800e970:	482b      	ldr	r0, [pc, #172]	; (800ea20 <tcp_slowtmr+0x66c>)
 800e972:	f00a fb9f 	bl	80190b4 <iprintf>
    pcb_remove = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e97c:	4b29      	ldr	r3, [pc, #164]	; (800ea24 <tcp_slowtmr+0x670>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	6a1b      	ldr	r3, [r3, #32]
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	2bf0      	cmp	r3, #240	; 0xf0
 800e988:	d904      	bls.n	800e994 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e98a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98e:	3301      	adds	r3, #1
 800e990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d02f      	beq.n	800e9fc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e99c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e99e:	f000 fc17 	bl	800f1d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d010      	beq.n	800e9ca <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9a8:	4b1f      	ldr	r3, [pc, #124]	; (800ea28 <tcp_slowtmr+0x674>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d106      	bne.n	800e9c0 <tcp_slowtmr+0x60c>
 800e9b2:	4b19      	ldr	r3, [pc, #100]	; (800ea18 <tcp_slowtmr+0x664>)
 800e9b4:	f240 52af 	movw	r2, #1455	; 0x5af
 800e9b8:	491c      	ldr	r1, [pc, #112]	; (800ea2c <tcp_slowtmr+0x678>)
 800e9ba:	4819      	ldr	r0, [pc, #100]	; (800ea20 <tcp_slowtmr+0x66c>)
 800e9bc:	f00a fb7a 	bl	80190b4 <iprintf>
        prev->next = pcb->next;
 800e9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c2:	68da      	ldr	r2, [r3, #12]
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	60da      	str	r2, [r3, #12]
 800e9c8:	e00f      	b.n	800e9ea <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9ca:	4b17      	ldr	r3, [pc, #92]	; (800ea28 <tcp_slowtmr+0x674>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d006      	beq.n	800e9e2 <tcp_slowtmr+0x62e>
 800e9d4:	4b10      	ldr	r3, [pc, #64]	; (800ea18 <tcp_slowtmr+0x664>)
 800e9d6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9da:	4915      	ldr	r1, [pc, #84]	; (800ea30 <tcp_slowtmr+0x67c>)
 800e9dc:	4810      	ldr	r0, [pc, #64]	; (800ea20 <tcp_slowtmr+0x66c>)
 800e9de:	f00a fb69 	bl	80190b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	4a10      	ldr	r2, [pc, #64]	; (800ea28 <tcp_slowtmr+0x674>)
 800e9e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e9f4:	69f8      	ldr	r0, [r7, #28]
 800e9f6:	f7fe fe11 	bl	800d61c <tcp_free>
 800e9fa:	e004      	b.n	800ea06 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1a9      	bne.n	800e960 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	bf00      	nop
 800ea10:	3730      	adds	r7, #48	; 0x30
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bdb0      	pop	{r4, r5, r7, pc}
 800ea16:	bf00      	nop
 800ea18:	0801bd94 	.word	0x0801bd94
 800ea1c:	0801c224 	.word	0x0801c224
 800ea20:	0801bdd8 	.word	0x0801bdd8
 800ea24:	20010e8c 	.word	0x20010e8c
 800ea28:	20010e9c 	.word	0x20010e9c
 800ea2c:	0801c254 	.word	0x0801c254
 800ea30:	0801c27c 	.word	0x0801c27c

0800ea34 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea3a:	4b2d      	ldr	r3, [pc, #180]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	4b2b      	ldr	r3, [pc, #172]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea44:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea46:	4b2b      	ldr	r3, [pc, #172]	; (800eaf4 <tcp_fasttmr+0xc0>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea4c:	e048      	b.n	800eae0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	7f9a      	ldrb	r2, [r3, #30]
 800ea52:	4b27      	ldr	r3, [pc, #156]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d03f      	beq.n	800eada <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea5a:	4b25      	ldr	r3, [pc, #148]	; (800eaf0 <tcp_fasttmr+0xbc>)
 800ea5c:	781a      	ldrb	r2, [r3, #0]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8b5b      	ldrh	r3, [r3, #26]
 800ea66:	f003 0301 	and.w	r3, r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d010      	beq.n	800ea90 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8b5b      	ldrh	r3, [r3, #26]
 800ea72:	f043 0302 	orr.w	r3, r3, #2
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f004 f813 	bl	8012aa8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8b5b      	ldrh	r3, [r3, #26]
 800ea86:	f023 0303 	bic.w	r3, r3, #3
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f003 0308 	and.w	r3, r3, #8
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d009      	beq.n	800eab0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8b5b      	ldrh	r3, [r3, #26]
 800eaa0:	f023 0308 	bic.w	r3, r3, #8
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7fe ff4a 	bl	800d944 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d00a      	beq.n	800ead4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eabe:	4b0e      	ldr	r3, [pc, #56]	; (800eaf8 <tcp_fasttmr+0xc4>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f819 	bl	800eafc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eaca:	4b0b      	ldr	r3, [pc, #44]	; (800eaf8 <tcp_fasttmr+0xc4>)
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d000      	beq.n	800ead4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ead2:	e7b8      	b.n	800ea46 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	607b      	str	r3, [r7, #4]
 800ead8:	e002      	b.n	800eae0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1b3      	bne.n	800ea4e <tcp_fasttmr+0x1a>
    }
  }
}
 800eae6:	bf00      	nop
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	20010ea2 	.word	0x20010ea2
 800eaf4:	20010e98 	.word	0x20010e98
 800eaf8:	20010ea0 	.word	0x20010ea0

0800eafc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eafc:	b590      	push	{r4, r7, lr}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <tcp_process_refused_data+0x22>
 800eb0a:	4b37      	ldr	r3, [pc, #220]	; (800ebe8 <tcp_process_refused_data+0xec>)
 800eb0c:	f240 6209 	movw	r2, #1545	; 0x609
 800eb10:	4936      	ldr	r1, [pc, #216]	; (800ebec <tcp_process_refused_data+0xf0>)
 800eb12:	4837      	ldr	r0, [pc, #220]	; (800ebf0 <tcp_process_refused_data+0xf4>)
 800eb14:	f00a face 	bl	80190b4 <iprintf>
 800eb18:	f06f 030f 	mvn.w	r3, #15
 800eb1c:	e060      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb22:	7b5b      	ldrb	r3, [r3, #13]
 800eb24:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb2a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00b      	beq.n	800eb54 <tcp_process_refused_data+0x58>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6918      	ldr	r0, [r3, #16]
 800eb46:	2300      	movs	r3, #0
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	47a0      	blx	r4
 800eb4e:	4603      	mov	r3, r0
 800eb50:	73fb      	strb	r3, [r7, #15]
 800eb52:	e007      	b.n	800eb64 <tcp_process_refused_data+0x68>
 800eb54:	2300      	movs	r3, #0
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	6879      	ldr	r1, [r7, #4]
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	f000 f8c2 	bl	800ece4 <tcp_recv_null>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d12a      	bne.n	800ebc2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb6c:	7bbb      	ldrb	r3, [r7, #14]
 800eb6e:	f003 0320 	and.w	r3, r3, #32
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d033      	beq.n	800ebde <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb7e:	d005      	beq.n	800eb8c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb84:	3301      	adds	r3, #1
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <tcp_process_refused_data+0xb2>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6918      	ldr	r0, [r3, #16]
 800eba0:	2300      	movs	r3, #0
 800eba2:	2200      	movs	r2, #0
 800eba4:	6879      	ldr	r1, [r7, #4]
 800eba6:	47a0      	blx	r4
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73fb      	strb	r3, [r7, #15]
 800ebac:	e001      	b.n	800ebb2 <tcp_process_refused_data+0xb6>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebb6:	f113 0f0d 	cmn.w	r3, #13
 800ebba:	d110      	bne.n	800ebde <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ebbc:	f06f 030c 	mvn.w	r3, #12
 800ebc0:	e00e      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc6:	f113 0f0d 	cmn.w	r3, #13
 800ebca:	d102      	bne.n	800ebd2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebcc:	f06f 030c 	mvn.w	r3, #12
 800ebd0:	e006      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ebd8:	f06f 0304 	mvn.w	r3, #4
 800ebdc:	e000      	b.n	800ebe0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3714      	adds	r7, #20
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd90      	pop	{r4, r7, pc}
 800ebe8:	0801bd94 	.word	0x0801bd94
 800ebec:	0801c2a4 	.word	0x0801c2a4
 800ebf0:	0801bdd8 	.word	0x0801bdd8

0800ebf4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ebfc:	e007      	b.n	800ec0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f80a 	bl	800ec1e <tcp_seg_free>
    seg = next;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1f4      	bne.n	800ebfe <tcp_segs_free+0xa>
  }
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00c      	beq.n	800ec46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d004      	beq.n	800ec3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fe fa33 	bl	800d0a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec3e:	6879      	ldr	r1, [r7, #4]
 800ec40:	2003      	movs	r0, #3
 800ec42:	f7fd fb7f 	bl	800c344 <memp_free>
  }
}
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d107      	bne.n	800ec72 <tcp_setprio+0x22>
 800ec62:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <tcp_setprio+0x30>)
 800ec64:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ec68:	4906      	ldr	r1, [pc, #24]	; (800ec84 <tcp_setprio+0x34>)
 800ec6a:	4807      	ldr	r0, [pc, #28]	; (800ec88 <tcp_setprio+0x38>)
 800ec6c:	f00a fa22 	bl	80190b4 <iprintf>
 800ec70:	e002      	b.n	800ec78 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	78fa      	ldrb	r2, [r7, #3]
 800ec76:	755a      	strb	r2, [r3, #21]
}
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	0801bd94 	.word	0x0801bd94
 800ec84:	0801c2cc 	.word	0x0801c2cc
 800ec88:	0801bdd8 	.word	0x0801bdd8

0800ec8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d106      	bne.n	800eca8 <tcp_seg_copy+0x1c>
 800ec9a:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <tcp_seg_copy+0x4c>)
 800ec9c:	f240 6282 	movw	r2, #1666	; 0x682
 800eca0:	490e      	ldr	r1, [pc, #56]	; (800ecdc <tcp_seg_copy+0x50>)
 800eca2:	480f      	ldr	r0, [pc, #60]	; (800ece0 <tcp_seg_copy+0x54>)
 800eca4:	f00a fa06 	bl	80190b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eca8:	2003      	movs	r0, #3
 800ecaa:	f7fd fad5 	bl	800c258 <memp_malloc>
 800ecae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <tcp_seg_copy+0x2e>
    return NULL;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e00a      	b.n	800ecd0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ecba:	2210      	movs	r2, #16
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f00a f933 	bl	8018f2a <memcpy>
  pbuf_ref(cseg->p);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fe fa91 	bl	800d1f0 <pbuf_ref>
  return cseg;
 800ecce:	68fb      	ldr	r3, [r7, #12]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	0801bd94 	.word	0x0801bd94
 800ecdc:	0801c2e8 	.word	0x0801c2e8
 800ece0:	0801bdd8 	.word	0x0801bdd8

0800ece4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d109      	bne.n	800ed0c <tcp_recv_null+0x28>
 800ecf8:	4b12      	ldr	r3, [pc, #72]	; (800ed44 <tcp_recv_null+0x60>)
 800ecfa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecfe:	4912      	ldr	r1, [pc, #72]	; (800ed48 <tcp_recv_null+0x64>)
 800ed00:	4812      	ldr	r0, [pc, #72]	; (800ed4c <tcp_recv_null+0x68>)
 800ed02:	f00a f9d7 	bl	80190b4 <iprintf>
 800ed06:	f06f 030f 	mvn.w	r3, #15
 800ed0a:	e016      	b.n	800ed3a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d009      	beq.n	800ed26 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	891b      	ldrh	r3, [r3, #8]
 800ed16:	4619      	mov	r1, r3
 800ed18:	68b8      	ldr	r0, [r7, #8]
 800ed1a:	f7ff f99d 	bl	800e058 <tcp_recved>
    pbuf_free(p);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7fe f9c0 	bl	800d0a4 <pbuf_free>
 800ed24:	e008      	b.n	800ed38 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ed26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d104      	bne.n	800ed38 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ed2e:	68b8      	ldr	r0, [r7, #8]
 800ed30:	f7fe fe72 	bl	800da18 <tcp_close>
 800ed34:	4603      	mov	r3, r0
 800ed36:	e000      	b.n	800ed3a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	0801bd94 	.word	0x0801bd94
 800ed48:	0801c304 	.word	0x0801c304
 800ed4c:	0801bdd8 	.word	0x0801bdd8

0800ed50 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	4603      	mov	r3, r0
 800ed58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	db01      	blt.n	800ed66 <tcp_kill_prio+0x16>
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	e000      	b.n	800ed68 <tcp_kill_prio+0x18>
 800ed66:	237f      	movs	r3, #127	; 0x7f
 800ed68:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed6a:	7afb      	ldrb	r3, [r7, #11]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d034      	beq.n	800edda <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed70:	7afb      	ldrb	r3, [r7, #11]
 800ed72:	3b01      	subs	r3, #1
 800ed74:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed7e:	4b19      	ldr	r3, [pc, #100]	; (800ede4 <tcp_kill_prio+0x94>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	e01f      	b.n	800edc6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	7d5b      	ldrb	r3, [r3, #21]
 800ed8a:	7afa      	ldrb	r2, [r7, #11]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d80c      	bhi.n	800edaa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed94:	7afa      	ldrb	r2, [r7, #11]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d112      	bne.n	800edc0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed9a:	4b13      	ldr	r3, [pc, #76]	; (800ede8 <tcp_kill_prio+0x98>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d80a      	bhi.n	800edc0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800edaa:	4b0f      	ldr	r3, [pc, #60]	; (800ede8 <tcp_kill_prio+0x98>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	7d5b      	ldrb	r3, [r3, #21]
 800edbe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	617b      	str	r3, [r7, #20]
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1dc      	bne.n	800ed86 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d004      	beq.n	800eddc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800edd2:	6938      	ldr	r0, [r7, #16]
 800edd4:	f7fe ff66 	bl	800dca4 <tcp_abort>
 800edd8:	e000      	b.n	800eddc <tcp_kill_prio+0x8c>
    return;
 800edda:	bf00      	nop
  }
}
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	20010e98 	.word	0x20010e98
 800ede8:	20010e8c 	.word	0x20010e8c

0800edec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edf6:	79fb      	ldrb	r3, [r7, #7]
 800edf8:	2b08      	cmp	r3, #8
 800edfa:	d009      	beq.n	800ee10 <tcp_kill_state+0x24>
 800edfc:	79fb      	ldrb	r3, [r7, #7]
 800edfe:	2b09      	cmp	r3, #9
 800ee00:	d006      	beq.n	800ee10 <tcp_kill_state+0x24>
 800ee02:	4b1a      	ldr	r3, [pc, #104]	; (800ee6c <tcp_kill_state+0x80>)
 800ee04:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ee08:	4919      	ldr	r1, [pc, #100]	; (800ee70 <tcp_kill_state+0x84>)
 800ee0a:	481a      	ldr	r0, [pc, #104]	; (800ee74 <tcp_kill_state+0x88>)
 800ee0c:	f00a f952 	bl	80190b4 <iprintf>

  inactivity = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee14:	2300      	movs	r3, #0
 800ee16:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee18:	4b17      	ldr	r3, [pc, #92]	; (800ee78 <tcp_kill_state+0x8c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	617b      	str	r3, [r7, #20]
 800ee1e:	e017      	b.n	800ee50 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	7d1b      	ldrb	r3, [r3, #20]
 800ee24:	79fa      	ldrb	r2, [r7, #7]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d10f      	bne.n	800ee4a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee2a:	4b14      	ldr	r3, [pc, #80]	; (800ee7c <tcp_kill_state+0x90>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	6a1b      	ldr	r3, [r3, #32]
 800ee32:	1ad3      	subs	r3, r2, r3
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d807      	bhi.n	800ee4a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ee3a:	4b10      	ldr	r3, [pc, #64]	; (800ee7c <tcp_kill_state+0x90>)
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1e4      	bne.n	800ee20 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d003      	beq.n	800ee64 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	6938      	ldr	r0, [r7, #16]
 800ee60:	f7fe fe62 	bl	800db28 <tcp_abandon>
  }
}
 800ee64:	bf00      	nop
 800ee66:	3718      	adds	r7, #24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	0801bd94 	.word	0x0801bd94
 800ee70:	0801c320 	.word	0x0801c320
 800ee74:	0801bdd8 	.word	0x0801bdd8
 800ee78:	20010e98 	.word	0x20010e98
 800ee7c:	20010e8c 	.word	0x20010e8c

0800ee80 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee86:	2300      	movs	r3, #0
 800ee88:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee8e:	4b12      	ldr	r3, [pc, #72]	; (800eed8 <tcp_kill_timewait+0x58>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e012      	b.n	800eebc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee96:	4b11      	ldr	r3, [pc, #68]	; (800eedc <tcp_kill_timewait+0x5c>)
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d807      	bhi.n	800eeb6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eea6:	4b0d      	ldr	r3, [pc, #52]	; (800eedc <tcp_kill_timewait+0x5c>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1e9      	bne.n	800ee96 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eec8:	68b8      	ldr	r0, [r7, #8]
 800eeca:	f7fe feeb 	bl	800dca4 <tcp_abort>
  }
}
 800eece:	bf00      	nop
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20010e9c 	.word	0x20010e9c
 800eedc:	20010e8c 	.word	0x20010e8c

0800eee0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eee6:	4b10      	ldr	r3, [pc, #64]	; (800ef28 <tcp_handle_closepend+0x48>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeec:	e014      	b.n	800ef18 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	8b5b      	ldrh	r3, [r3, #26]
 800eef8:	f003 0308 	and.w	r3, r3, #8
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d009      	beq.n	800ef14 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8b5b      	ldrh	r3, [r3, #26]
 800ef04:	f023 0308 	bic.w	r3, r3, #8
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7fe fd18 	bl	800d944 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1e7      	bne.n	800eeee <tcp_handle_closepend+0xe>
  }
}
 800ef1e:	bf00      	nop
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20010e98 	.word	0x20010e98

0800ef2c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef36:	2001      	movs	r0, #1
 800ef38:	f7fd f98e 	bl	800c258 <memp_malloc>
 800ef3c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d126      	bne.n	800ef92 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef44:	f7ff ffcc 	bl	800eee0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef48:	f7ff ff9a 	bl	800ee80 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef4c:	2001      	movs	r0, #1
 800ef4e:	f7fd f983 	bl	800c258 <memp_malloc>
 800ef52:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d11b      	bne.n	800ef92 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef5a:	2009      	movs	r0, #9
 800ef5c:	f7ff ff46 	bl	800edec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef60:	2001      	movs	r0, #1
 800ef62:	f7fd f979 	bl	800c258 <memp_malloc>
 800ef66:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d111      	bne.n	800ef92 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef6e:	2008      	movs	r0, #8
 800ef70:	f7ff ff3c 	bl	800edec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef74:	2001      	movs	r0, #1
 800ef76:	f7fd f96f 	bl	800c258 <memp_malloc>
 800ef7a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d107      	bne.n	800ef92 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef82:	79fb      	ldrb	r3, [r7, #7]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7ff fee3 	bl	800ed50 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef8a:	2001      	movs	r0, #1
 800ef8c:	f7fd f964 	bl	800c258 <memp_malloc>
 800ef90:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d03f      	beq.n	800f018 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef98:	229c      	movs	r2, #156	; 0x9c
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f009 ffec 	bl	8018f7a <memset>
    pcb->prio = prio;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	79fa      	ldrb	r2, [r7, #7]
 800efa6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800efb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	22ff      	movs	r2, #255	; 0xff
 800efc6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f44f 7206 	mov.w	r2, #536	; 0x218
 800efce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2206      	movs	r2, #6
 800efd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2206      	movs	r2, #6
 800efdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2201      	movs	r2, #1
 800efea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800efee:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <tcp_alloc+0xf8>)
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eff6:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <tcp_alloc+0xfc>)
 800eff8:	781a      	ldrb	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f004:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	4a08      	ldr	r2, [pc, #32]	; (800f02c <tcp_alloc+0x100>)
 800f00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4a07      	ldr	r2, [pc, #28]	; (800f030 <tcp_alloc+0x104>)
 800f014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f018:	68fb      	ldr	r3, [r7, #12]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20010e8c 	.word	0x20010e8c
 800f028:	20010ea2 	.word	0x20010ea2
 800f02c:	0800ece5 	.word	0x0800ece5
 800f030:	006ddd00 	.word	0x006ddd00

0800f034 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f03e:	2040      	movs	r0, #64	; 0x40
 800f040:	f7ff ff74 	bl	800ef2c <tcp_alloc>
 800f044:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f046:	68fb      	ldr	r3, [r7, #12]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	611a      	str	r2, [r3, #16]
  }
}
 800f066:	bf00      	nop
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
	...

0800f074 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00e      	beq.n	800f0a2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	7d1b      	ldrb	r3, [r3, #20]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d106      	bne.n	800f09a <tcp_recv+0x26>
 800f08c:	4b07      	ldr	r3, [pc, #28]	; (800f0ac <tcp_recv+0x38>)
 800f08e:	f240 72df 	movw	r2, #2015	; 0x7df
 800f092:	4907      	ldr	r1, [pc, #28]	; (800f0b0 <tcp_recv+0x3c>)
 800f094:	4807      	ldr	r0, [pc, #28]	; (800f0b4 <tcp_recv+0x40>)
 800f096:	f00a f80d 	bl	80190b4 <iprintf>
    pcb->recv = recv;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f0a2:	bf00      	nop
 800f0a4:	3708      	adds	r7, #8
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	0801bd94 	.word	0x0801bd94
 800f0b0:	0801c330 	.word	0x0801c330
 800f0b4:	0801bdd8 	.word	0x0801bdd8

0800f0b8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00e      	beq.n	800f0e6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	7d1b      	ldrb	r3, [r3, #20]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d106      	bne.n	800f0de <tcp_sent+0x26>
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <tcp_sent+0x38>)
 800f0d2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f0d6:	4907      	ldr	r1, [pc, #28]	; (800f0f4 <tcp_sent+0x3c>)
 800f0d8:	4807      	ldr	r0, [pc, #28]	; (800f0f8 <tcp_sent+0x40>)
 800f0da:	f009 ffeb 	bl	80190b4 <iprintf>
    pcb->sent = sent;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f0e6:	bf00      	nop
 800f0e8:	3708      	adds	r7, #8
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	0801bd94 	.word	0x0801bd94
 800f0f4:	0801c358 	.word	0x0801c358
 800f0f8:	0801bdd8 	.word	0x0801bdd8

0800f0fc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00e      	beq.n	800f12a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	7d1b      	ldrb	r3, [r3, #20]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d106      	bne.n	800f122 <tcp_err+0x26>
 800f114:	4b07      	ldr	r3, [pc, #28]	; (800f134 <tcp_err+0x38>)
 800f116:	f640 020d 	movw	r2, #2061	; 0x80d
 800f11a:	4907      	ldr	r1, [pc, #28]	; (800f138 <tcp_err+0x3c>)
 800f11c:	4807      	ldr	r0, [pc, #28]	; (800f13c <tcp_err+0x40>)
 800f11e:	f009 ffc9 	bl	80190b4 <iprintf>
    pcb->errf = err;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f12a:	bf00      	nop
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	0801bd94 	.word	0x0801bd94
 800f138:	0801c380 	.word	0x0801c380
 800f13c:	0801bdd8 	.word	0x0801bdd8

0800f140 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d008      	beq.n	800f162 <tcp_accept+0x22>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	7d1b      	ldrb	r3, [r3, #20]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d104      	bne.n	800f162 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	619a      	str	r2, [r3, #24]
  }
}
 800f162:	bf00      	nop
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
	...

0800f170 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	4613      	mov	r3, r2
 800f17c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d107      	bne.n	800f194 <tcp_poll+0x24>
 800f184:	4b0e      	ldr	r3, [pc, #56]	; (800f1c0 <tcp_poll+0x50>)
 800f186:	f640 023d 	movw	r2, #2109	; 0x83d
 800f18a:	490e      	ldr	r1, [pc, #56]	; (800f1c4 <tcp_poll+0x54>)
 800f18c:	480e      	ldr	r0, [pc, #56]	; (800f1c8 <tcp_poll+0x58>)
 800f18e:	f009 ff91 	bl	80190b4 <iprintf>
 800f192:	e011      	b.n	800f1b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	7d1b      	ldrb	r3, [r3, #20]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d106      	bne.n	800f1aa <tcp_poll+0x3a>
 800f19c:	4b08      	ldr	r3, [pc, #32]	; (800f1c0 <tcp_poll+0x50>)
 800f19e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f1a2:	490a      	ldr	r1, [pc, #40]	; (800f1cc <tcp_poll+0x5c>)
 800f1a4:	4808      	ldr	r0, [pc, #32]	; (800f1c8 <tcp_poll+0x58>)
 800f1a6:	f009 ff85 	bl	80190b4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	79fa      	ldrb	r2, [r7, #7]
 800f1b6:	775a      	strb	r2, [r3, #29]
}
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	0801bd94 	.word	0x0801bd94
 800f1c4:	0801c3a8 	.word	0x0801c3a8
 800f1c8:	0801bdd8 	.word	0x0801bdd8
 800f1cc:	0801c3c0 	.word	0x0801c3c0

0800f1d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d107      	bne.n	800f1ee <tcp_pcb_purge+0x1e>
 800f1de:	4b21      	ldr	r3, [pc, #132]	; (800f264 <tcp_pcb_purge+0x94>)
 800f1e0:	f640 0251 	movw	r2, #2129	; 0x851
 800f1e4:	4920      	ldr	r1, [pc, #128]	; (800f268 <tcp_pcb_purge+0x98>)
 800f1e6:	4821      	ldr	r0, [pc, #132]	; (800f26c <tcp_pcb_purge+0x9c>)
 800f1e8:	f009 ff64 	bl	80190b4 <iprintf>
 800f1ec:	e037      	b.n	800f25e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	7d1b      	ldrb	r3, [r3, #20]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d033      	beq.n	800f25e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1fa:	2b0a      	cmp	r3, #10
 800f1fc:	d02f      	beq.n	800f25e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f202:	2b01      	cmp	r3, #1
 800f204:	d02b      	beq.n	800f25e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d007      	beq.n	800f21e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd ff46 	bl	800d0a4 <pbuf_free>
      pcb->refused_data = NULL;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f222:	2b00      	cmp	r3, #0
 800f224:	d002      	beq.n	800f22c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f986 	bl	800f538 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f232:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff fcdb 	bl	800ebf4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff fcd6 	bl	800ebf4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2200      	movs	r2, #0
 800f25a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	0801bd94 	.word	0x0801bd94
 800f268:	0801c3e0 	.word	0x0801c3e0
 800f26c:	0801bdd8 	.word	0x0801bdd8

0800f270 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d106      	bne.n	800f28e <tcp_pcb_remove+0x1e>
 800f280:	4b3e      	ldr	r3, [pc, #248]	; (800f37c <tcp_pcb_remove+0x10c>)
 800f282:	f640 0283 	movw	r2, #2179	; 0x883
 800f286:	493e      	ldr	r1, [pc, #248]	; (800f380 <tcp_pcb_remove+0x110>)
 800f288:	483e      	ldr	r0, [pc, #248]	; (800f384 <tcp_pcb_remove+0x114>)
 800f28a:	f009 ff13 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d106      	bne.n	800f2a2 <tcp_pcb_remove+0x32>
 800f294:	4b39      	ldr	r3, [pc, #228]	; (800f37c <tcp_pcb_remove+0x10c>)
 800f296:	f640 0284 	movw	r2, #2180	; 0x884
 800f29a:	493b      	ldr	r1, [pc, #236]	; (800f388 <tcp_pcb_remove+0x118>)
 800f29c:	4839      	ldr	r0, [pc, #228]	; (800f384 <tcp_pcb_remove+0x114>)
 800f29e:	f009 ff09 	bl	80190b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d105      	bne.n	800f2b8 <tcp_pcb_remove+0x48>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	68da      	ldr	r2, [r3, #12]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	601a      	str	r2, [r3, #0]
 800f2b6:	e013      	b.n	800f2e0 <tcp_pcb_remove+0x70>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	e00c      	b.n	800f2da <tcp_pcb_remove+0x6a>
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d104      	bne.n	800f2d4 <tcp_pcb_remove+0x64>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	68da      	ldr	r2, [r3, #12]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	60da      	str	r2, [r3, #12]
 800f2d2:	e005      	b.n	800f2e0 <tcp_pcb_remove+0x70>
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	60fb      	str	r3, [r7, #12]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1ef      	bne.n	800f2c0 <tcp_pcb_remove+0x50>
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2e6:	6838      	ldr	r0, [r7, #0]
 800f2e8:	f7ff ff72 	bl	800f1d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	7d1b      	ldrb	r3, [r3, #20]
 800f2f0:	2b0a      	cmp	r3, #10
 800f2f2:	d013      	beq.n	800f31c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d00f      	beq.n	800f31c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	8b5b      	ldrh	r3, [r3, #26]
 800f300:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f304:	2b00      	cmp	r3, #0
 800f306:	d009      	beq.n	800f31c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	8b5b      	ldrh	r3, [r3, #26]
 800f30c:	f043 0302 	orr.w	r3, r3, #2
 800f310:	b29a      	uxth	r2, r3
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f316:	6838      	ldr	r0, [r7, #0]
 800f318:	f003 fbc6 	bl	8012aa8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	7d1b      	ldrb	r3, [r3, #20]
 800f320:	2b01      	cmp	r3, #1
 800f322:	d020      	beq.n	800f366 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d006      	beq.n	800f33a <tcp_pcb_remove+0xca>
 800f32c:	4b13      	ldr	r3, [pc, #76]	; (800f37c <tcp_pcb_remove+0x10c>)
 800f32e:	f640 0293 	movw	r2, #2195	; 0x893
 800f332:	4916      	ldr	r1, [pc, #88]	; (800f38c <tcp_pcb_remove+0x11c>)
 800f334:	4813      	ldr	r0, [pc, #76]	; (800f384 <tcp_pcb_remove+0x114>)
 800f336:	f009 febd 	bl	80190b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d006      	beq.n	800f350 <tcp_pcb_remove+0xe0>
 800f342:	4b0e      	ldr	r3, [pc, #56]	; (800f37c <tcp_pcb_remove+0x10c>)
 800f344:	f640 0294 	movw	r2, #2196	; 0x894
 800f348:	4911      	ldr	r1, [pc, #68]	; (800f390 <tcp_pcb_remove+0x120>)
 800f34a:	480e      	ldr	r0, [pc, #56]	; (800f384 <tcp_pcb_remove+0x114>)
 800f34c:	f009 feb2 	bl	80190b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f354:	2b00      	cmp	r3, #0
 800f356:	d006      	beq.n	800f366 <tcp_pcb_remove+0xf6>
 800f358:	4b08      	ldr	r3, [pc, #32]	; (800f37c <tcp_pcb_remove+0x10c>)
 800f35a:	f640 0296 	movw	r2, #2198	; 0x896
 800f35e:	490d      	ldr	r1, [pc, #52]	; (800f394 <tcp_pcb_remove+0x124>)
 800f360:	4808      	ldr	r0, [pc, #32]	; (800f384 <tcp_pcb_remove+0x114>)
 800f362:	f009 fea7 	bl	80190b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2200      	movs	r2, #0
 800f36a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	2200      	movs	r2, #0
 800f370:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f372:	bf00      	nop
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	0801bd94 	.word	0x0801bd94
 800f380:	0801c3fc 	.word	0x0801c3fc
 800f384:	0801bdd8 	.word	0x0801bdd8
 800f388:	0801c418 	.word	0x0801c418
 800f38c:	0801c438 	.word	0x0801c438
 800f390:	0801c450 	.word	0x0801c450
 800f394:	0801c46c 	.word	0x0801c46c

0800f398 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d106      	bne.n	800f3b4 <tcp_next_iss+0x1c>
 800f3a6:	4b0a      	ldr	r3, [pc, #40]	; (800f3d0 <tcp_next_iss+0x38>)
 800f3a8:	f640 02af 	movw	r2, #2223	; 0x8af
 800f3ac:	4909      	ldr	r1, [pc, #36]	; (800f3d4 <tcp_next_iss+0x3c>)
 800f3ae:	480a      	ldr	r0, [pc, #40]	; (800f3d8 <tcp_next_iss+0x40>)
 800f3b0:	f009 fe80 	bl	80190b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f3b4:	4b09      	ldr	r3, [pc, #36]	; (800f3dc <tcp_next_iss+0x44>)
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <tcp_next_iss+0x48>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4413      	add	r3, r2
 800f3be:	4a07      	ldr	r2, [pc, #28]	; (800f3dc <tcp_next_iss+0x44>)
 800f3c0:	6013      	str	r3, [r2, #0]
  return iss;
 800f3c2:	4b06      	ldr	r3, [pc, #24]	; (800f3dc <tcp_next_iss+0x44>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3708      	adds	r7, #8
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	0801bd94 	.word	0x0801bd94
 800f3d4:	0801c484 	.word	0x0801c484
 800f3d8:	0801bdd8 	.word	0x0801bdd8
 800f3dc:	20000028 	.word	0x20000028
 800f3e0:	20010e8c 	.word	0x20010e8c

0800f3e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
 800f3f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d106      	bne.n	800f406 <tcp_eff_send_mss_netif+0x22>
 800f3f8:	4b14      	ldr	r3, [pc, #80]	; (800f44c <tcp_eff_send_mss_netif+0x68>)
 800f3fa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f3fe:	4914      	ldr	r1, [pc, #80]	; (800f450 <tcp_eff_send_mss_netif+0x6c>)
 800f400:	4814      	ldr	r0, [pc, #80]	; (800f454 <tcp_eff_send_mss_netif+0x70>)
 800f402:	f009 fe57 	bl	80190b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f40c:	89fb      	ldrh	r3, [r7, #14]
 800f40e:	e019      	b.n	800f444 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f414:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f416:	8afb      	ldrh	r3, [r7, #22]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d012      	beq.n	800f442 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f41c:	2328      	movs	r3, #40	; 0x28
 800f41e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f420:	8afa      	ldrh	r2, [r7, #22]
 800f422:	8abb      	ldrh	r3, [r7, #20]
 800f424:	429a      	cmp	r2, r3
 800f426:	d904      	bls.n	800f432 <tcp_eff_send_mss_netif+0x4e>
 800f428:	8afa      	ldrh	r2, [r7, #22]
 800f42a:	8abb      	ldrh	r3, [r7, #20]
 800f42c:	1ad3      	subs	r3, r2, r3
 800f42e:	b29b      	uxth	r3, r3
 800f430:	e000      	b.n	800f434 <tcp_eff_send_mss_netif+0x50>
 800f432:	2300      	movs	r3, #0
 800f434:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f436:	8a7a      	ldrh	r2, [r7, #18]
 800f438:	89fb      	ldrh	r3, [r7, #14]
 800f43a:	4293      	cmp	r3, r2
 800f43c:	bf28      	it	cs
 800f43e:	4613      	movcs	r3, r2
 800f440:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f442:	89fb      	ldrh	r3, [r7, #14]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	0801bd94 	.word	0x0801bd94
 800f450:	0801c4a0 	.word	0x0801c4a0
 800f454:	0801bdd8 	.word	0x0801bdd8

0800f458 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d119      	bne.n	800f4a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f46c:	4b10      	ldr	r3, [pc, #64]	; (800f4b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f46e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f472:	4910      	ldr	r1, [pc, #64]	; (800f4b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f474:	4810      	ldr	r0, [pc, #64]	; (800f4b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f476:	f009 fe1d 	bl	80190b4 <iprintf>

  while (pcb != NULL) {
 800f47a:	e011      	b.n	800f4a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	429a      	cmp	r2, r3
 800f486:	d108      	bne.n	800f49a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7fe fc08 	bl	800dca4 <tcp_abort>
      pcb = next;
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	e002      	b.n	800f4a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1ea      	bne.n	800f47c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f4a6:	bf00      	nop
 800f4a8:	bf00      	nop
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0801bd94 	.word	0x0801bd94
 800f4b4:	0801c4c8 	.word	0x0801c4c8
 800f4b8:	0801bdd8 	.word	0x0801bdd8

0800f4bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d02a      	beq.n	800f522 <tcp_netif_ip_addr_changed+0x66>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d026      	beq.n	800f522 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f4d4:	4b15      	ldr	r3, [pc, #84]	; (800f52c <tcp_netif_ip_addr_changed+0x70>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7ff ffbc 	bl	800f458 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4e0:	4b13      	ldr	r3, [pc, #76]	; (800f530 <tcp_netif_ip_addr_changed+0x74>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff ffb6 	bl	800f458 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d017      	beq.n	800f522 <tcp_netif_ip_addr_changed+0x66>
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d013      	beq.n	800f522 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4fa:	4b0e      	ldr	r3, [pc, #56]	; (800f534 <tcp_netif_ip_addr_changed+0x78>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	e00c      	b.n	800f51c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d103      	bne.n	800f516 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1ef      	bne.n	800f502 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f522:	bf00      	nop
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	20010e98 	.word	0x20010e98
 800f530:	20010e90 	.word	0x20010e90
 800f534:	20010e94 	.word	0x20010e94

0800f538 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f544:	2b00      	cmp	r3, #0
 800f546:	d007      	beq.n	800f558 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7ff fb51 	bl	800ebf4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f560:	b590      	push	{r4, r7, lr}
 800f562:	b08d      	sub	sp, #52	; 0x34
 800f564:	af04      	add	r7, sp, #16
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d105      	bne.n	800f57c <tcp_input+0x1c>
 800f570:	4b9b      	ldr	r3, [pc, #620]	; (800f7e0 <tcp_input+0x280>)
 800f572:	2283      	movs	r2, #131	; 0x83
 800f574:	499b      	ldr	r1, [pc, #620]	; (800f7e4 <tcp_input+0x284>)
 800f576:	489c      	ldr	r0, [pc, #624]	; (800f7e8 <tcp_input+0x288>)
 800f578:	f009 fd9c 	bl	80190b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	4a9a      	ldr	r2, [pc, #616]	; (800f7ec <tcp_input+0x28c>)
 800f582:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	2b13      	cmp	r3, #19
 800f58a:	f240 83d1 	bls.w	800fd30 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f58e:	4b98      	ldr	r3, [pc, #608]	; (800f7f0 <tcp_input+0x290>)
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	4a97      	ldr	r2, [pc, #604]	; (800f7f0 <tcp_input+0x290>)
 800f594:	6812      	ldr	r2, [r2, #0]
 800f596:	4611      	mov	r1, r2
 800f598:	4618      	mov	r0, r3
 800f59a:	f008 fa61 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f040 83c7 	bne.w	800fd34 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f5a6:	4b92      	ldr	r3, [pc, #584]	; (800f7f0 <tcp_input+0x290>)
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f5ae:	2be0      	cmp	r3, #224	; 0xe0
 800f5b0:	f000 83c0 	beq.w	800fd34 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f5b4:	4b8d      	ldr	r3, [pc, #564]	; (800f7ec <tcp_input+0x28c>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	899b      	ldrh	r3, [r3, #12]
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fc f93d 	bl	800b83c <lwip_htons>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	0b1b      	lsrs	r3, r3, #12
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f5ce:	7cbb      	ldrb	r3, [r7, #18]
 800f5d0:	2b13      	cmp	r3, #19
 800f5d2:	f240 83b1 	bls.w	800fd38 <tcp_input+0x7d8>
 800f5d6:	7cbb      	ldrb	r3, [r7, #18]
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	891b      	ldrh	r3, [r3, #8]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	f200 83aa 	bhi.w	800fd38 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5e4:	7cbb      	ldrb	r3, [r7, #18]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	3b14      	subs	r3, #20
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	4b81      	ldr	r3, [pc, #516]	; (800f7f4 <tcp_input+0x294>)
 800f5ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5f0:	4b81      	ldr	r3, [pc, #516]	; (800f7f8 <tcp_input+0x298>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	895a      	ldrh	r2, [r3, #10]
 800f5fa:	7cbb      	ldrb	r3, [r7, #18]
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d309      	bcc.n	800f616 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f602:	4b7c      	ldr	r3, [pc, #496]	; (800f7f4 <tcp_input+0x294>)
 800f604:	881a      	ldrh	r2, [r3, #0]
 800f606:	4b7d      	ldr	r3, [pc, #500]	; (800f7fc <tcp_input+0x29c>)
 800f608:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f60a:	7cbb      	ldrb	r3, [r7, #18]
 800f60c:	4619      	mov	r1, r3
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f7fd fcc2 	bl	800cf98 <pbuf_remove_header>
 800f614:	e04e      	b.n	800f6b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d105      	bne.n	800f62a <tcp_input+0xca>
 800f61e:	4b70      	ldr	r3, [pc, #448]	; (800f7e0 <tcp_input+0x280>)
 800f620:	22c2      	movs	r2, #194	; 0xc2
 800f622:	4977      	ldr	r1, [pc, #476]	; (800f800 <tcp_input+0x2a0>)
 800f624:	4870      	ldr	r0, [pc, #448]	; (800f7e8 <tcp_input+0x288>)
 800f626:	f009 fd45 	bl	80190b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f62a:	2114      	movs	r1, #20
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7fd fcb3 	bl	800cf98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	895a      	ldrh	r2, [r3, #10]
 800f636:	4b71      	ldr	r3, [pc, #452]	; (800f7fc <tcp_input+0x29c>)
 800f638:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f63a:	4b6e      	ldr	r3, [pc, #440]	; (800f7f4 <tcp_input+0x294>)
 800f63c:	881a      	ldrh	r2, [r3, #0]
 800f63e:	4b6f      	ldr	r3, [pc, #444]	; (800f7fc <tcp_input+0x29c>)
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f646:	4b6d      	ldr	r3, [pc, #436]	; (800f7fc <tcp_input+0x29c>)
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7fd fca3 	bl	800cf98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	895b      	ldrh	r3, [r3, #10]
 800f658:	8a3a      	ldrh	r2, [r7, #16]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	f200 836e 	bhi.w	800fd3c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	4a64      	ldr	r2, [pc, #400]	; (800f7f8 <tcp_input+0x298>)
 800f668:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	8a3a      	ldrh	r2, [r7, #16]
 800f670:	4611      	mov	r1, r2
 800f672:	4618      	mov	r0, r3
 800f674:	f7fd fc90 	bl	800cf98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	891a      	ldrh	r2, [r3, #8]
 800f67c:	8a3b      	ldrh	r3, [r7, #16]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	b29a      	uxth	r2, r3
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	895b      	ldrh	r3, [r3, #10]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d005      	beq.n	800f69a <tcp_input+0x13a>
 800f68e:	4b54      	ldr	r3, [pc, #336]	; (800f7e0 <tcp_input+0x280>)
 800f690:	22df      	movs	r2, #223	; 0xdf
 800f692:	495c      	ldr	r1, [pc, #368]	; (800f804 <tcp_input+0x2a4>)
 800f694:	4854      	ldr	r0, [pc, #336]	; (800f7e8 <tcp_input+0x288>)
 800f696:	f009 fd0d 	bl	80190b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	891a      	ldrh	r2, [r3, #8]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	891b      	ldrh	r3, [r3, #8]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d005      	beq.n	800f6b4 <tcp_input+0x154>
 800f6a8:	4b4d      	ldr	r3, [pc, #308]	; (800f7e0 <tcp_input+0x280>)
 800f6aa:	22e0      	movs	r2, #224	; 0xe0
 800f6ac:	4956      	ldr	r1, [pc, #344]	; (800f808 <tcp_input+0x2a8>)
 800f6ae:	484e      	ldr	r0, [pc, #312]	; (800f7e8 <tcp_input+0x288>)
 800f6b0:	f009 fd00 	bl	80190b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f6b4:	4b4d      	ldr	r3, [pc, #308]	; (800f7ec <tcp_input+0x28c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	4a4b      	ldr	r2, [pc, #300]	; (800f7ec <tcp_input+0x28c>)
 800f6be:	6814      	ldr	r4, [r2, #0]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fc f8bb 	bl	800b83c <lwip_htons>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f6ca:	4b48      	ldr	r3, [pc, #288]	; (800f7ec <tcp_input+0x28c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	885b      	ldrh	r3, [r3, #2]
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	4a46      	ldr	r2, [pc, #280]	; (800f7ec <tcp_input+0x28c>)
 800f6d4:	6814      	ldr	r4, [r2, #0]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fc f8b0 	bl	800b83c <lwip_htons>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6e0:	4b42      	ldr	r3, [pc, #264]	; (800f7ec <tcp_input+0x28c>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	4a41      	ldr	r2, [pc, #260]	; (800f7ec <tcp_input+0x28c>)
 800f6e8:	6814      	ldr	r4, [r2, #0]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fc f8bb 	bl	800b866 <lwip_htonl>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	6063      	str	r3, [r4, #4]
 800f6f4:	6863      	ldr	r3, [r4, #4]
 800f6f6:	4a45      	ldr	r2, [pc, #276]	; (800f80c <tcp_input+0x2ac>)
 800f6f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6fa:	4b3c      	ldr	r3, [pc, #240]	; (800f7ec <tcp_input+0x28c>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	4a3a      	ldr	r2, [pc, #232]	; (800f7ec <tcp_input+0x28c>)
 800f702:	6814      	ldr	r4, [r2, #0]
 800f704:	4618      	mov	r0, r3
 800f706:	f7fc f8ae 	bl	800b866 <lwip_htonl>
 800f70a:	4603      	mov	r3, r0
 800f70c:	60a3      	str	r3, [r4, #8]
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	4a3f      	ldr	r2, [pc, #252]	; (800f810 <tcp_input+0x2b0>)
 800f712:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f714:	4b35      	ldr	r3, [pc, #212]	; (800f7ec <tcp_input+0x28c>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	89db      	ldrh	r3, [r3, #14]
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	4a33      	ldr	r2, [pc, #204]	; (800f7ec <tcp_input+0x28c>)
 800f71e:	6814      	ldr	r4, [r2, #0]
 800f720:	4618      	mov	r0, r3
 800f722:	f7fc f88b 	bl	800b83c <lwip_htons>
 800f726:	4603      	mov	r3, r0
 800f728:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f72a:	4b30      	ldr	r3, [pc, #192]	; (800f7ec <tcp_input+0x28c>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	899b      	ldrh	r3, [r3, #12]
 800f730:	b29b      	uxth	r3, r3
 800f732:	4618      	mov	r0, r3
 800f734:	f7fc f882 	bl	800b83c <lwip_htons>
 800f738:	4603      	mov	r3, r0
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f740:	b2da      	uxtb	r2, r3
 800f742:	4b34      	ldr	r3, [pc, #208]	; (800f814 <tcp_input+0x2b4>)
 800f744:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	891a      	ldrh	r2, [r3, #8]
 800f74a:	4b33      	ldr	r3, [pc, #204]	; (800f818 <tcp_input+0x2b8>)
 800f74c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f74e:	4b31      	ldr	r3, [pc, #196]	; (800f814 <tcp_input+0x2b4>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	f003 0303 	and.w	r3, r3, #3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00c      	beq.n	800f774 <tcp_input+0x214>
    tcplen++;
 800f75a:	4b2f      	ldr	r3, [pc, #188]	; (800f818 <tcp_input+0x2b8>)
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	3301      	adds	r3, #1
 800f760:	b29a      	uxth	r2, r3
 800f762:	4b2d      	ldr	r3, [pc, #180]	; (800f818 <tcp_input+0x2b8>)
 800f764:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	891a      	ldrh	r2, [r3, #8]
 800f76a:	4b2b      	ldr	r3, [pc, #172]	; (800f818 <tcp_input+0x2b8>)
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	429a      	cmp	r2, r3
 800f770:	f200 82e6 	bhi.w	800fd40 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f774:	2300      	movs	r3, #0
 800f776:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f778:	4b28      	ldr	r3, [pc, #160]	; (800f81c <tcp_input+0x2bc>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	61fb      	str	r3, [r7, #28]
 800f77e:	e09d      	b.n	800f8bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d105      	bne.n	800f794 <tcp_input+0x234>
 800f788:	4b15      	ldr	r3, [pc, #84]	; (800f7e0 <tcp_input+0x280>)
 800f78a:	22fb      	movs	r2, #251	; 0xfb
 800f78c:	4924      	ldr	r1, [pc, #144]	; (800f820 <tcp_input+0x2c0>)
 800f78e:	4816      	ldr	r0, [pc, #88]	; (800f7e8 <tcp_input+0x288>)
 800f790:	f009 fc90 	bl	80190b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	7d1b      	ldrb	r3, [r3, #20]
 800f798:	2b0a      	cmp	r3, #10
 800f79a:	d105      	bne.n	800f7a8 <tcp_input+0x248>
 800f79c:	4b10      	ldr	r3, [pc, #64]	; (800f7e0 <tcp_input+0x280>)
 800f79e:	22fc      	movs	r2, #252	; 0xfc
 800f7a0:	4920      	ldr	r1, [pc, #128]	; (800f824 <tcp_input+0x2c4>)
 800f7a2:	4811      	ldr	r0, [pc, #68]	; (800f7e8 <tcp_input+0x288>)
 800f7a4:	f009 fc86 	bl	80190b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	7d1b      	ldrb	r3, [r3, #20]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d105      	bne.n	800f7bc <tcp_input+0x25c>
 800f7b0:	4b0b      	ldr	r3, [pc, #44]	; (800f7e0 <tcp_input+0x280>)
 800f7b2:	22fd      	movs	r2, #253	; 0xfd
 800f7b4:	491c      	ldr	r1, [pc, #112]	; (800f828 <tcp_input+0x2c8>)
 800f7b6:	480c      	ldr	r0, [pc, #48]	; (800f7e8 <tcp_input+0x288>)
 800f7b8:	f009 fc7c 	bl	80190b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	7a1b      	ldrb	r3, [r3, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d033      	beq.n	800f82c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	7a1a      	ldrb	r2, [r3, #8]
 800f7c8:	4b09      	ldr	r3, [pc, #36]	; (800f7f0 <tcp_input+0x290>)
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d029      	beq.n	800f82c <tcp_input+0x2cc>
      prev = pcb;
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	61bb      	str	r3, [r7, #24]
      continue;
 800f7dc:	e06b      	b.n	800f8b6 <tcp_input+0x356>
 800f7de:	bf00      	nop
 800f7e0:	0801c4fc 	.word	0x0801c4fc
 800f7e4:	0801c530 	.word	0x0801c530
 800f7e8:	0801c548 	.word	0x0801c548
 800f7ec:	20010eb4 	.word	0x20010eb4
 800f7f0:	2000d718 	.word	0x2000d718
 800f7f4:	20010eb8 	.word	0x20010eb8
 800f7f8:	20010ebc 	.word	0x20010ebc
 800f7fc:	20010eba 	.word	0x20010eba
 800f800:	0801c570 	.word	0x0801c570
 800f804:	0801c580 	.word	0x0801c580
 800f808:	0801c58c 	.word	0x0801c58c
 800f80c:	20010ec4 	.word	0x20010ec4
 800f810:	20010ec8 	.word	0x20010ec8
 800f814:	20010ed0 	.word	0x20010ed0
 800f818:	20010ece 	.word	0x20010ece
 800f81c:	20010e98 	.word	0x20010e98
 800f820:	0801c5ac 	.word	0x0801c5ac
 800f824:	0801c5d4 	.word	0x0801c5d4
 800f828:	0801c600 	.word	0x0801c600
    }

    if (pcb->remote_port == tcphdr->src &&
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	8b1a      	ldrh	r2, [r3, #24]
 800f830:	4b72      	ldr	r3, [pc, #456]	; (800f9fc <tcp_input+0x49c>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	881b      	ldrh	r3, [r3, #0]
 800f836:	b29b      	uxth	r3, r3
 800f838:	429a      	cmp	r2, r3
 800f83a:	d13a      	bne.n	800f8b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	8ada      	ldrh	r2, [r3, #22]
 800f840:	4b6e      	ldr	r3, [pc, #440]	; (800f9fc <tcp_input+0x49c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	885b      	ldrh	r3, [r3, #2]
 800f846:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f848:	429a      	cmp	r2, r3
 800f84a:	d132      	bne.n	800f8b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	685a      	ldr	r2, [r3, #4]
 800f850:	4b6b      	ldr	r3, [pc, #428]	; (800fa00 <tcp_input+0x4a0>)
 800f852:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f854:	429a      	cmp	r2, r3
 800f856:	d12c      	bne.n	800f8b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	4b68      	ldr	r3, [pc, #416]	; (800fa00 <tcp_input+0x4a0>)
 800f85e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f860:	429a      	cmp	r2, r3
 800f862:	d126      	bne.n	800f8b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	69fa      	ldr	r2, [r7, #28]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d106      	bne.n	800f87c <tcp_input+0x31c>
 800f86e:	4b65      	ldr	r3, [pc, #404]	; (800fa04 <tcp_input+0x4a4>)
 800f870:	f240 120d 	movw	r2, #269	; 0x10d
 800f874:	4964      	ldr	r1, [pc, #400]	; (800fa08 <tcp_input+0x4a8>)
 800f876:	4865      	ldr	r0, [pc, #404]	; (800fa0c <tcp_input+0x4ac>)
 800f878:	f009 fc1c 	bl	80190b4 <iprintf>
      if (prev != NULL) {
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00a      	beq.n	800f898 <tcp_input+0x338>
        prev->next = pcb->next;
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	68da      	ldr	r2, [r3, #12]
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f88a:	4b61      	ldr	r3, [pc, #388]	; (800fa10 <tcp_input+0x4b0>)
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f892:	4a5f      	ldr	r2, [pc, #380]	; (800fa10 <tcp_input+0x4b0>)
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	69fa      	ldr	r2, [r7, #28]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d111      	bne.n	800f8c6 <tcp_input+0x366>
 800f8a2:	4b58      	ldr	r3, [pc, #352]	; (800fa04 <tcp_input+0x4a4>)
 800f8a4:	f240 1215 	movw	r2, #277	; 0x115
 800f8a8:	495a      	ldr	r1, [pc, #360]	; (800fa14 <tcp_input+0x4b4>)
 800f8aa:	4858      	ldr	r0, [pc, #352]	; (800fa0c <tcp_input+0x4ac>)
 800f8ac:	f009 fc02 	bl	80190b4 <iprintf>
      break;
 800f8b0:	e009      	b.n	800f8c6 <tcp_input+0x366>
    }
    prev = pcb;
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	61fb      	str	r3, [r7, #28]
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f47f af5e 	bne.w	800f780 <tcp_input+0x220>
 800f8c4:	e000      	b.n	800f8c8 <tcp_input+0x368>
      break;
 800f8c6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f040 80aa 	bne.w	800fa24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8d0:	4b51      	ldr	r3, [pc, #324]	; (800fa18 <tcp_input+0x4b8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	61fb      	str	r3, [r7, #28]
 800f8d6:	e03f      	b.n	800f958 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	7d1b      	ldrb	r3, [r3, #20]
 800f8dc:	2b0a      	cmp	r3, #10
 800f8de:	d006      	beq.n	800f8ee <tcp_input+0x38e>
 800f8e0:	4b48      	ldr	r3, [pc, #288]	; (800fa04 <tcp_input+0x4a4>)
 800f8e2:	f240 121f 	movw	r2, #287	; 0x11f
 800f8e6:	494d      	ldr	r1, [pc, #308]	; (800fa1c <tcp_input+0x4bc>)
 800f8e8:	4848      	ldr	r0, [pc, #288]	; (800fa0c <tcp_input+0x4ac>)
 800f8ea:	f009 fbe3 	bl	80190b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	7a1b      	ldrb	r3, [r3, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d009      	beq.n	800f90a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	7a1a      	ldrb	r2, [r3, #8]
 800f8fa:	4b41      	ldr	r3, [pc, #260]	; (800fa00 <tcp_input+0x4a0>)
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f902:	3301      	adds	r3, #1
 800f904:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f906:	429a      	cmp	r2, r3
 800f908:	d122      	bne.n	800f950 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	8b1a      	ldrh	r2, [r3, #24]
 800f90e:	4b3b      	ldr	r3, [pc, #236]	; (800f9fc <tcp_input+0x49c>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	881b      	ldrh	r3, [r3, #0]
 800f914:	b29b      	uxth	r3, r3
 800f916:	429a      	cmp	r2, r3
 800f918:	d11b      	bne.n	800f952 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	8ada      	ldrh	r2, [r3, #22]
 800f91e:	4b37      	ldr	r3, [pc, #220]	; (800f9fc <tcp_input+0x49c>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	885b      	ldrh	r3, [r3, #2]
 800f924:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f926:	429a      	cmp	r2, r3
 800f928:	d113      	bne.n	800f952 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	4b34      	ldr	r3, [pc, #208]	; (800fa00 <tcp_input+0x4a0>)
 800f930:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f932:	429a      	cmp	r2, r3
 800f934:	d10d      	bne.n	800f952 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	4b31      	ldr	r3, [pc, #196]	; (800fa00 <tcp_input+0x4a0>)
 800f93c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f93e:	429a      	cmp	r2, r3
 800f940:	d107      	bne.n	800f952 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f942:	69f8      	ldr	r0, [r7, #28]
 800f944:	f000 fb56 	bl	800fff4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7fd fbab 	bl	800d0a4 <pbuf_free>
        return;
 800f94e:	e1fd      	b.n	800fd4c <tcp_input+0x7ec>
        continue;
 800f950:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	61fb      	str	r3, [r7, #28]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1bc      	bne.n	800f8d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f962:	4b2f      	ldr	r3, [pc, #188]	; (800fa20 <tcp_input+0x4c0>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	617b      	str	r3, [r7, #20]
 800f968:	e02a      	b.n	800f9c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	7a1b      	ldrb	r3, [r3, #8]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00c      	beq.n	800f98c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	7a1a      	ldrb	r2, [r3, #8]
 800f976:	4b22      	ldr	r3, [pc, #136]	; (800fa00 <tcp_input+0x4a0>)
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f97e:	3301      	adds	r3, #1
 800f980:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f982:	429a      	cmp	r2, r3
 800f984:	d002      	beq.n	800f98c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	61bb      	str	r3, [r7, #24]
        continue;
 800f98a:	e016      	b.n	800f9ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	8ada      	ldrh	r2, [r3, #22]
 800f990:	4b1a      	ldr	r3, [pc, #104]	; (800f9fc <tcp_input+0x49c>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	885b      	ldrh	r3, [r3, #2]
 800f996:	b29b      	uxth	r3, r3
 800f998:	429a      	cmp	r2, r3
 800f99a:	d10c      	bne.n	800f9b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	4b17      	ldr	r3, [pc, #92]	; (800fa00 <tcp_input+0x4a0>)
 800f9a2:	695b      	ldr	r3, [r3, #20]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d00f      	beq.n	800f9c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00d      	beq.n	800f9ca <tcp_input+0x46a>
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d009      	beq.n	800f9ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	617b      	str	r3, [r7, #20]
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1d1      	bne.n	800f96a <tcp_input+0x40a>
 800f9c6:	e000      	b.n	800f9ca <tcp_input+0x46a>
            break;
 800f9c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d029      	beq.n	800fa24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00a      	beq.n	800f9ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	68da      	ldr	r2, [r3, #12]
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9de:	4b10      	ldr	r3, [pc, #64]	; (800fa20 <tcp_input+0x4c0>)
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9e6:	4a0e      	ldr	r2, [pc, #56]	; (800fa20 <tcp_input+0x4c0>)
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9ec:	6978      	ldr	r0, [r7, #20]
 800f9ee:	f000 fa03 	bl	800fdf8 <tcp_listen_input>
      }
      pbuf_free(p);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7fd fb56 	bl	800d0a4 <pbuf_free>
      return;
 800f9f8:	e1a8      	b.n	800fd4c <tcp_input+0x7ec>
 800f9fa:	bf00      	nop
 800f9fc:	20010eb4 	.word	0x20010eb4
 800fa00:	2000d718 	.word	0x2000d718
 800fa04:	0801c4fc 	.word	0x0801c4fc
 800fa08:	0801c628 	.word	0x0801c628
 800fa0c:	0801c548 	.word	0x0801c548
 800fa10:	20010e98 	.word	0x20010e98
 800fa14:	0801c654 	.word	0x0801c654
 800fa18:	20010e9c 	.word	0x20010e9c
 800fa1c:	0801c680 	.word	0x0801c680
 800fa20:	20010e94 	.word	0x20010e94
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f000 8158 	beq.w	800fcdc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa2c:	4b95      	ldr	r3, [pc, #596]	; (800fc84 <tcp_input+0x724>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	891a      	ldrh	r2, [r3, #8]
 800fa36:	4b93      	ldr	r3, [pc, #588]	; (800fc84 <tcp_input+0x724>)
 800fa38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fa3a:	4a92      	ldr	r2, [pc, #584]	; (800fc84 <tcp_input+0x724>)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa40:	4b91      	ldr	r3, [pc, #580]	; (800fc88 <tcp_input+0x728>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a8f      	ldr	r2, [pc, #572]	; (800fc84 <tcp_input+0x724>)
 800fa46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa48:	4b90      	ldr	r3, [pc, #576]	; (800fc8c <tcp_input+0x72c>)
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa4e:	4b90      	ldr	r3, [pc, #576]	; (800fc90 <tcp_input+0x730>)
 800fa50:	2200      	movs	r2, #0
 800fa52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa54:	4b8f      	ldr	r3, [pc, #572]	; (800fc94 <tcp_input+0x734>)
 800fa56:	2200      	movs	r2, #0
 800fa58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa5a:	4b8f      	ldr	r3, [pc, #572]	; (800fc98 <tcp_input+0x738>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	f003 0308 	and.w	r3, r3, #8
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d006      	beq.n	800fa74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	7b5b      	ldrb	r3, [r3, #13]
 800fa6a:	f043 0301 	orr.w	r3, r3, #1
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d017      	beq.n	800faac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa7c:	69f8      	ldr	r0, [r7, #28]
 800fa7e:	f7ff f83d 	bl	800eafc <tcp_process_refused_data>
 800fa82:	4603      	mov	r3, r0
 800fa84:	f113 0f0d 	cmn.w	r3, #13
 800fa88:	d007      	beq.n	800fa9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00c      	beq.n	800faac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa92:	4b82      	ldr	r3, [pc, #520]	; (800fc9c <tcp_input+0x73c>)
 800fa94:	881b      	ldrh	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d008      	beq.n	800faac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f040 80e3 	bne.w	800fc6a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800faa4:	69f8      	ldr	r0, [r7, #28]
 800faa6:	f003 fe05 	bl	80136b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800faaa:	e0de      	b.n	800fc6a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800faac:	4a7c      	ldr	r2, [pc, #496]	; (800fca0 <tcp_input+0x740>)
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fab2:	69f8      	ldr	r0, [r7, #28]
 800fab4:	f000 fb18 	bl	80100e8 <tcp_process>
 800fab8:	4603      	mov	r3, r0
 800faba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fabc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fac0:	f113 0f0d 	cmn.w	r3, #13
 800fac4:	f000 80d3 	beq.w	800fc6e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fac8:	4b71      	ldr	r3, [pc, #452]	; (800fc90 <tcp_input+0x730>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	f003 0308 	and.w	r3, r3, #8
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d015      	beq.n	800fb00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d008      	beq.n	800faf0 <tcp_input+0x590>
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fae4:	69fa      	ldr	r2, [r7, #28]
 800fae6:	6912      	ldr	r2, [r2, #16]
 800fae8:	f06f 010d 	mvn.w	r1, #13
 800faec:	4610      	mov	r0, r2
 800faee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800faf0:	69f9      	ldr	r1, [r7, #28]
 800faf2:	486c      	ldr	r0, [pc, #432]	; (800fca4 <tcp_input+0x744>)
 800faf4:	f7ff fbbc 	bl	800f270 <tcp_pcb_remove>
        tcp_free(pcb);
 800faf8:	69f8      	ldr	r0, [r7, #28]
 800fafa:	f7fd fd8f 	bl	800d61c <tcp_free>
 800fafe:	e0da      	b.n	800fcb6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fb04:	4b63      	ldr	r3, [pc, #396]	; (800fc94 <tcp_input+0x734>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d01d      	beq.n	800fb48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fb0c:	4b61      	ldr	r3, [pc, #388]	; (800fc94 <tcp_input+0x734>)
 800fb0e:	881b      	ldrh	r3, [r3, #0]
 800fb10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00a      	beq.n	800fb32 <tcp_input+0x5d2>
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb22:	69fa      	ldr	r2, [r7, #28]
 800fb24:	6910      	ldr	r0, [r2, #16]
 800fb26:	89fa      	ldrh	r2, [r7, #14]
 800fb28:	69f9      	ldr	r1, [r7, #28]
 800fb2a:	4798      	blx	r3
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	74fb      	strb	r3, [r7, #19]
 800fb30:	e001      	b.n	800fb36 <tcp_input+0x5d6>
 800fb32:	2300      	movs	r3, #0
 800fb34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb3a:	f113 0f0d 	cmn.w	r3, #13
 800fb3e:	f000 8098 	beq.w	800fc72 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb42:	4b54      	ldr	r3, [pc, #336]	; (800fc94 <tcp_input+0x734>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb48:	69f8      	ldr	r0, [r7, #28]
 800fb4a:	f000 f915 	bl	800fd78 <tcp_input_delayed_close>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f040 8090 	bne.w	800fc76 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb56:	4b4d      	ldr	r3, [pc, #308]	; (800fc8c <tcp_input+0x72c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d041      	beq.n	800fbe2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d006      	beq.n	800fb74 <tcp_input+0x614>
 800fb66:	4b50      	ldr	r3, [pc, #320]	; (800fca8 <tcp_input+0x748>)
 800fb68:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb6c:	494f      	ldr	r1, [pc, #316]	; (800fcac <tcp_input+0x74c>)
 800fb6e:	4850      	ldr	r0, [pc, #320]	; (800fcb0 <tcp_input+0x750>)
 800fb70:	f009 faa0 	bl	80190b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	8b5b      	ldrh	r3, [r3, #26]
 800fb78:	f003 0310 	and.w	r3, r3, #16
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d008      	beq.n	800fb92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb80:	4b42      	ldr	r3, [pc, #264]	; (800fc8c <tcp_input+0x72c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fd fa8d 	bl	800d0a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb8a:	69f8      	ldr	r0, [r7, #28]
 800fb8c:	f7fe f88a 	bl	800dca4 <tcp_abort>
            goto aborted;
 800fb90:	e091      	b.n	800fcb6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00c      	beq.n	800fbb6 <tcp_input+0x656>
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	6918      	ldr	r0, [r3, #16]
 800fba6:	4b39      	ldr	r3, [pc, #228]	; (800fc8c <tcp_input+0x72c>)
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	2300      	movs	r3, #0
 800fbac:	69f9      	ldr	r1, [r7, #28]
 800fbae:	47a0      	blx	r4
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	74fb      	strb	r3, [r7, #19]
 800fbb4:	e008      	b.n	800fbc8 <tcp_input+0x668>
 800fbb6:	4b35      	ldr	r3, [pc, #212]	; (800fc8c <tcp_input+0x72c>)
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	69f9      	ldr	r1, [r7, #28]
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	f7ff f890 	bl	800ece4 <tcp_recv_null>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fbc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbcc:	f113 0f0d 	cmn.w	r3, #13
 800fbd0:	d053      	beq.n	800fc7a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fbd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d003      	beq.n	800fbe2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fbda:	4b2c      	ldr	r3, [pc, #176]	; (800fc8c <tcp_input+0x72c>)
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fbe2:	4b2b      	ldr	r3, [pc, #172]	; (800fc90 <tcp_input+0x730>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f003 0320 	and.w	r3, r3, #32
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d030      	beq.n	800fc50 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d009      	beq.n	800fc0a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbfa:	7b5a      	ldrb	r2, [r3, #13]
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc00:	f042 0220 	orr.w	r2, r2, #32
 800fc04:	b2d2      	uxtb	r2, r2
 800fc06:	735a      	strb	r2, [r3, #13]
 800fc08:	e022      	b.n	800fc50 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fc12:	d005      	beq.n	800fc20 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc18:	3301      	adds	r3, #1
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d00b      	beq.n	800fc42 <tcp_input+0x6e2>
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	6918      	ldr	r0, [r3, #16]
 800fc34:	2300      	movs	r3, #0
 800fc36:	2200      	movs	r2, #0
 800fc38:	69f9      	ldr	r1, [r7, #28]
 800fc3a:	47a0      	blx	r4
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	74fb      	strb	r3, [r7, #19]
 800fc40:	e001      	b.n	800fc46 <tcp_input+0x6e6>
 800fc42:	2300      	movs	r3, #0
 800fc44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc4a:	f113 0f0d 	cmn.w	r3, #13
 800fc4e:	d016      	beq.n	800fc7e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc50:	4b13      	ldr	r3, [pc, #76]	; (800fca0 <tcp_input+0x740>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc56:	69f8      	ldr	r0, [r7, #28]
 800fc58:	f000 f88e 	bl	800fd78 <tcp_input_delayed_close>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d128      	bne.n	800fcb4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc62:	69f8      	ldr	r0, [r7, #28]
 800fc64:	f002 ff20 	bl	8012aa8 <tcp_output>
 800fc68:	e025      	b.n	800fcb6 <tcp_input+0x756>
        goto aborted;
 800fc6a:	bf00      	nop
 800fc6c:	e023      	b.n	800fcb6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc6e:	bf00      	nop
 800fc70:	e021      	b.n	800fcb6 <tcp_input+0x756>
              goto aborted;
 800fc72:	bf00      	nop
 800fc74:	e01f      	b.n	800fcb6 <tcp_input+0x756>
          goto aborted;
 800fc76:	bf00      	nop
 800fc78:	e01d      	b.n	800fcb6 <tcp_input+0x756>
            goto aborted;
 800fc7a:	bf00      	nop
 800fc7c:	e01b      	b.n	800fcb6 <tcp_input+0x756>
              goto aborted;
 800fc7e:	bf00      	nop
 800fc80:	e019      	b.n	800fcb6 <tcp_input+0x756>
 800fc82:	bf00      	nop
 800fc84:	20010ea4 	.word	0x20010ea4
 800fc88:	20010eb4 	.word	0x20010eb4
 800fc8c:	20010ed4 	.word	0x20010ed4
 800fc90:	20010ed1 	.word	0x20010ed1
 800fc94:	20010ecc 	.word	0x20010ecc
 800fc98:	20010ed0 	.word	0x20010ed0
 800fc9c:	20010ece 	.word	0x20010ece
 800fca0:	20010ed8 	.word	0x20010ed8
 800fca4:	20010e98 	.word	0x20010e98
 800fca8:	0801c4fc 	.word	0x0801c4fc
 800fcac:	0801c6b0 	.word	0x0801c6b0
 800fcb0:	0801c548 	.word	0x0801c548
          goto aborted;
 800fcb4:	bf00      	nop
    tcp_input_pcb = NULL;
 800fcb6:	4b27      	ldr	r3, [pc, #156]	; (800fd54 <tcp_input+0x7f4>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fcbc:	4b26      	ldr	r3, [pc, #152]	; (800fd58 <tcp_input+0x7f8>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fcc2:	4b26      	ldr	r3, [pc, #152]	; (800fd5c <tcp_input+0x7fc>)
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d03f      	beq.n	800fd4a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fcca:	4b24      	ldr	r3, [pc, #144]	; (800fd5c <tcp_input+0x7fc>)
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fd f9e8 	bl	800d0a4 <pbuf_free>
      inseg.p = NULL;
 800fcd4:	4b21      	ldr	r3, [pc, #132]	; (800fd5c <tcp_input+0x7fc>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fcda:	e036      	b.n	800fd4a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fcdc:	4b20      	ldr	r3, [pc, #128]	; (800fd60 <tcp_input+0x800>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	899b      	ldrh	r3, [r3, #12]
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fb fda9 	bl	800b83c <lwip_htons>
 800fcea:	4603      	mov	r3, r0
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	f003 0304 	and.w	r3, r3, #4
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d118      	bne.n	800fd28 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf6:	4b1b      	ldr	r3, [pc, #108]	; (800fd64 <tcp_input+0x804>)
 800fcf8:	6819      	ldr	r1, [r3, #0]
 800fcfa:	4b1b      	ldr	r3, [pc, #108]	; (800fd68 <tcp_input+0x808>)
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	4b1a      	ldr	r3, [pc, #104]	; (800fd6c <tcp_input+0x80c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd06:	4b16      	ldr	r3, [pc, #88]	; (800fd60 <tcp_input+0x800>)
 800fd08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd0a:	885b      	ldrh	r3, [r3, #2]
 800fd0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd0e:	4a14      	ldr	r2, [pc, #80]	; (800fd60 <tcp_input+0x800>)
 800fd10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd12:	8812      	ldrh	r2, [r2, #0]
 800fd14:	b292      	uxth	r2, r2
 800fd16:	9202      	str	r2, [sp, #8]
 800fd18:	9301      	str	r3, [sp, #4]
 800fd1a:	4b15      	ldr	r3, [pc, #84]	; (800fd70 <tcp_input+0x810>)
 800fd1c:	9300      	str	r3, [sp, #0]
 800fd1e:	4b15      	ldr	r3, [pc, #84]	; (800fd74 <tcp_input+0x814>)
 800fd20:	4602      	mov	r2, r0
 800fd22:	2000      	movs	r0, #0
 800fd24:	f003 fc74 	bl	8013610 <tcp_rst>
    pbuf_free(p);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7fd f9bb 	bl	800d0a4 <pbuf_free>
  return;
 800fd2e:	e00c      	b.n	800fd4a <tcp_input+0x7ea>
    goto dropped;
 800fd30:	bf00      	nop
 800fd32:	e006      	b.n	800fd42 <tcp_input+0x7e2>
    goto dropped;
 800fd34:	bf00      	nop
 800fd36:	e004      	b.n	800fd42 <tcp_input+0x7e2>
    goto dropped;
 800fd38:	bf00      	nop
 800fd3a:	e002      	b.n	800fd42 <tcp_input+0x7e2>
      goto dropped;
 800fd3c:	bf00      	nop
 800fd3e:	e000      	b.n	800fd42 <tcp_input+0x7e2>
      goto dropped;
 800fd40:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7fd f9ae 	bl	800d0a4 <pbuf_free>
 800fd48:	e000      	b.n	800fd4c <tcp_input+0x7ec>
  return;
 800fd4a:	bf00      	nop
}
 800fd4c:	3724      	adds	r7, #36	; 0x24
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd90      	pop	{r4, r7, pc}
 800fd52:	bf00      	nop
 800fd54:	20010ed8 	.word	0x20010ed8
 800fd58:	20010ed4 	.word	0x20010ed4
 800fd5c:	20010ea4 	.word	0x20010ea4
 800fd60:	20010eb4 	.word	0x20010eb4
 800fd64:	20010ec8 	.word	0x20010ec8
 800fd68:	20010ece 	.word	0x20010ece
 800fd6c:	20010ec4 	.word	0x20010ec4
 800fd70:	2000d728 	.word	0x2000d728
 800fd74:	2000d72c 	.word	0x2000d72c

0800fd78 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <tcp_input_delayed_close+0x1c>
 800fd86:	4b17      	ldr	r3, [pc, #92]	; (800fde4 <tcp_input_delayed_close+0x6c>)
 800fd88:	f240 225a 	movw	r2, #602	; 0x25a
 800fd8c:	4916      	ldr	r1, [pc, #88]	; (800fde8 <tcp_input_delayed_close+0x70>)
 800fd8e:	4817      	ldr	r0, [pc, #92]	; (800fdec <tcp_input_delayed_close+0x74>)
 800fd90:	f009 f990 	bl	80190b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd94:	4b16      	ldr	r3, [pc, #88]	; (800fdf0 <tcp_input_delayed_close+0x78>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	f003 0310 	and.w	r3, r3, #16
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d01c      	beq.n	800fdda <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	8b5b      	ldrh	r3, [r3, #26]
 800fda4:	f003 0310 	and.w	r3, r3, #16
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d10d      	bne.n	800fdc8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d008      	beq.n	800fdc8 <tcp_input_delayed_close+0x50>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	6912      	ldr	r2, [r2, #16]
 800fdc0:	f06f 010e 	mvn.w	r1, #14
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fdc8:	6879      	ldr	r1, [r7, #4]
 800fdca:	480a      	ldr	r0, [pc, #40]	; (800fdf4 <tcp_input_delayed_close+0x7c>)
 800fdcc:	f7ff fa50 	bl	800f270 <tcp_pcb_remove>
    tcp_free(pcb);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7fd fc23 	bl	800d61c <tcp_free>
    return 1;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e000      	b.n	800fddc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	0801c4fc 	.word	0x0801c4fc
 800fde8:	0801c6cc 	.word	0x0801c6cc
 800fdec:	0801c548 	.word	0x0801c548
 800fdf0:	20010ed1 	.word	0x20010ed1
 800fdf4:	20010e98 	.word	0x20010e98

0800fdf8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdf8:	b590      	push	{r4, r7, lr}
 800fdfa:	b08b      	sub	sp, #44	; 0x2c
 800fdfc:	af04      	add	r7, sp, #16
 800fdfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fe00:	4b6f      	ldr	r3, [pc, #444]	; (800ffc0 <tcp_listen_input+0x1c8>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	f003 0304 	and.w	r3, r3, #4
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f040 80d2 	bne.w	800ffb2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d106      	bne.n	800fe22 <tcp_listen_input+0x2a>
 800fe14:	4b6b      	ldr	r3, [pc, #428]	; (800ffc4 <tcp_listen_input+0x1cc>)
 800fe16:	f240 2281 	movw	r2, #641	; 0x281
 800fe1a:	496b      	ldr	r1, [pc, #428]	; (800ffc8 <tcp_listen_input+0x1d0>)
 800fe1c:	486b      	ldr	r0, [pc, #428]	; (800ffcc <tcp_listen_input+0x1d4>)
 800fe1e:	f009 f949 	bl	80190b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fe22:	4b67      	ldr	r3, [pc, #412]	; (800ffc0 <tcp_listen_input+0x1c8>)
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	f003 0310 	and.w	r3, r3, #16
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d019      	beq.n	800fe62 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe2e:	4b68      	ldr	r3, [pc, #416]	; (800ffd0 <tcp_listen_input+0x1d8>)
 800fe30:	6819      	ldr	r1, [r3, #0]
 800fe32:	4b68      	ldr	r3, [pc, #416]	; (800ffd4 <tcp_listen_input+0x1dc>)
 800fe34:	881b      	ldrh	r3, [r3, #0]
 800fe36:	461a      	mov	r2, r3
 800fe38:	4b67      	ldr	r3, [pc, #412]	; (800ffd8 <tcp_listen_input+0x1e0>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe3e:	4b67      	ldr	r3, [pc, #412]	; (800ffdc <tcp_listen_input+0x1e4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe42:	885b      	ldrh	r3, [r3, #2]
 800fe44:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe46:	4a65      	ldr	r2, [pc, #404]	; (800ffdc <tcp_listen_input+0x1e4>)
 800fe48:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe4a:	8812      	ldrh	r2, [r2, #0]
 800fe4c:	b292      	uxth	r2, r2
 800fe4e:	9202      	str	r2, [sp, #8]
 800fe50:	9301      	str	r3, [sp, #4]
 800fe52:	4b63      	ldr	r3, [pc, #396]	; (800ffe0 <tcp_listen_input+0x1e8>)
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	4b63      	ldr	r3, [pc, #396]	; (800ffe4 <tcp_listen_input+0x1ec>)
 800fe58:	4602      	mov	r2, r0
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f003 fbd8 	bl	8013610 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe60:	e0a9      	b.n	800ffb6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe62:	4b57      	ldr	r3, [pc, #348]	; (800ffc0 <tcp_listen_input+0x1c8>)
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	f003 0302 	and.w	r3, r3, #2
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 80a3 	beq.w	800ffb6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	7d5b      	ldrb	r3, [r3, #21]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff f859 	bl	800ef2c <tcp_alloc>
 800fe7a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d111      	bne.n	800fea6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	699b      	ldr	r3, [r3, #24]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00a      	beq.n	800fea0 <tcp_listen_input+0xa8>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	699b      	ldr	r3, [r3, #24]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	6910      	ldr	r0, [r2, #16]
 800fe92:	f04f 32ff 	mov.w	r2, #4294967295
 800fe96:	2100      	movs	r1, #0
 800fe98:	4798      	blx	r3
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	73bb      	strb	r3, [r7, #14]
      return;
 800fe9e:	e08b      	b.n	800ffb8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fea0:	23f0      	movs	r3, #240	; 0xf0
 800fea2:	73bb      	strb	r3, [r7, #14]
      return;
 800fea4:	e088      	b.n	800ffb8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fea6:	4b50      	ldr	r3, [pc, #320]	; (800ffe8 <tcp_listen_input+0x1f0>)
 800fea8:	695a      	ldr	r2, [r3, #20]
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800feae:	4b4e      	ldr	r3, [pc, #312]	; (800ffe8 <tcp_listen_input+0x1f0>)
 800feb0:	691a      	ldr	r2, [r3, #16]
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	8ada      	ldrh	r2, [r3, #22]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800febe:	4b47      	ldr	r3, [pc, #284]	; (800ffdc <tcp_listen_input+0x1e4>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	2203      	movs	r2, #3
 800fece:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fed0:	4b41      	ldr	r3, [pc, #260]	; (800ffd8 <tcp_listen_input+0x1e0>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	1c5a      	adds	r2, r3, #1
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fee2:	6978      	ldr	r0, [r7, #20]
 800fee4:	f7ff fa58 	bl	800f398 <tcp_next_iss>
 800fee8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	693a      	ldr	r2, [r7, #16]
 800feee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	693a      	ldr	r2, [r7, #16]
 800fef4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	693a      	ldr	r2, [r7, #16]
 800fefa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	693a      	ldr	r2, [r7, #16]
 800ff00:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ff02:	4b35      	ldr	r3, [pc, #212]	; (800ffd8 <tcp_listen_input+0x1e0>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	1e5a      	subs	r2, r3, #1
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	691a      	ldr	r2, [r3, #16]
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7a5b      	ldrb	r3, [r3, #9]
 800ff1e:	f003 030c 	and.w	r3, r3, #12
 800ff22:	b2da      	uxtb	r2, r3
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	7a1a      	ldrb	r2, [r3, #8]
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ff30:	4b2e      	ldr	r3, [pc, #184]	; (800ffec <tcp_listen_input+0x1f4>)
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	60da      	str	r2, [r3, #12]
 800ff38:	4a2c      	ldr	r2, [pc, #176]	; (800ffec <tcp_listen_input+0x1f4>)
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	6013      	str	r3, [r2, #0]
 800ff3e:	f003 fd29 	bl	8013994 <tcp_timer_needed>
 800ff42:	4b2b      	ldr	r3, [pc, #172]	; (800fff0 <tcp_listen_input+0x1f8>)
 800ff44:	2201      	movs	r2, #1
 800ff46:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff48:	6978      	ldr	r0, [r7, #20]
 800ff4a:	f001 fd8f 	bl	8011a6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff4e:	4b23      	ldr	r3, [pc, #140]	; (800ffdc <tcp_listen_input+0x1e4>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	89db      	ldrh	r3, [r3, #14]
 800ff54:	b29a      	uxth	r2, r3
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	3304      	adds	r3, #4
 800ff70:	4618      	mov	r0, r3
 800ff72:	f007 fac1 	bl	80174f8 <ip4_route>
 800ff76:	4601      	mov	r1, r0
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	3304      	adds	r3, #4
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f7ff fa30 	bl	800f3e4 <tcp_eff_send_mss_netif>
 800ff84:	4603      	mov	r3, r0
 800ff86:	461a      	mov	r2, r3
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff8c:	2112      	movs	r1, #18
 800ff8e:	6978      	ldr	r0, [r7, #20]
 800ff90:	f002 fc9c 	bl	80128cc <tcp_enqueue_flags>
 800ff94:	4603      	mov	r3, r0
 800ff96:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d004      	beq.n	800ffaa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	6978      	ldr	r0, [r7, #20]
 800ffa4:	f7fd fdc0 	bl	800db28 <tcp_abandon>
      return;
 800ffa8:	e006      	b.n	800ffb8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ffaa:	6978      	ldr	r0, [r7, #20]
 800ffac:	f002 fd7c 	bl	8012aa8 <tcp_output>
  return;
 800ffb0:	e001      	b.n	800ffb6 <tcp_listen_input+0x1be>
    return;
 800ffb2:	bf00      	nop
 800ffb4:	e000      	b.n	800ffb8 <tcp_listen_input+0x1c0>
  return;
 800ffb6:	bf00      	nop
}
 800ffb8:	371c      	adds	r7, #28
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd90      	pop	{r4, r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20010ed0 	.word	0x20010ed0
 800ffc4:	0801c4fc 	.word	0x0801c4fc
 800ffc8:	0801c6f4 	.word	0x0801c6f4
 800ffcc:	0801c548 	.word	0x0801c548
 800ffd0:	20010ec8 	.word	0x20010ec8
 800ffd4:	20010ece 	.word	0x20010ece
 800ffd8:	20010ec4 	.word	0x20010ec4
 800ffdc:	20010eb4 	.word	0x20010eb4
 800ffe0:	2000d728 	.word	0x2000d728
 800ffe4:	2000d72c 	.word	0x2000d72c
 800ffe8:	2000d718 	.word	0x2000d718
 800ffec:	20010e98 	.word	0x20010e98
 800fff0:	20010ea0 	.word	0x20010ea0

0800fff4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af04      	add	r7, sp, #16
 800fffa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fffc:	4b2f      	ldr	r3, [pc, #188]	; (80100bc <tcp_timewait_input+0xc8>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f003 0304 	and.w	r3, r3, #4
 8010004:	2b00      	cmp	r3, #0
 8010006:	d153      	bne.n	80100b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d106      	bne.n	801001c <tcp_timewait_input+0x28>
 801000e:	4b2c      	ldr	r3, [pc, #176]	; (80100c0 <tcp_timewait_input+0xcc>)
 8010010:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010014:	492b      	ldr	r1, [pc, #172]	; (80100c4 <tcp_timewait_input+0xd0>)
 8010016:	482c      	ldr	r0, [pc, #176]	; (80100c8 <tcp_timewait_input+0xd4>)
 8010018:	f009 f84c 	bl	80190b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801001c:	4b27      	ldr	r3, [pc, #156]	; (80100bc <tcp_timewait_input+0xc8>)
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	f003 0302 	and.w	r3, r3, #2
 8010024:	2b00      	cmp	r3, #0
 8010026:	d02a      	beq.n	801007e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010028:	4b28      	ldr	r3, [pc, #160]	; (80100cc <tcp_timewait_input+0xd8>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010030:	1ad3      	subs	r3, r2, r3
 8010032:	2b00      	cmp	r3, #0
 8010034:	db2d      	blt.n	8010092 <tcp_timewait_input+0x9e>
 8010036:	4b25      	ldr	r3, [pc, #148]	; (80100cc <tcp_timewait_input+0xd8>)
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003e:	6879      	ldr	r1, [r7, #4]
 8010040:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010042:	440b      	add	r3, r1
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	2b00      	cmp	r3, #0
 8010048:	dc23      	bgt.n	8010092 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801004a:	4b21      	ldr	r3, [pc, #132]	; (80100d0 <tcp_timewait_input+0xdc>)
 801004c:	6819      	ldr	r1, [r3, #0]
 801004e:	4b21      	ldr	r3, [pc, #132]	; (80100d4 <tcp_timewait_input+0xe0>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	4b1d      	ldr	r3, [pc, #116]	; (80100cc <tcp_timewait_input+0xd8>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801005a:	4b1f      	ldr	r3, [pc, #124]	; (80100d8 <tcp_timewait_input+0xe4>)
 801005c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801005e:	885b      	ldrh	r3, [r3, #2]
 8010060:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010062:	4a1d      	ldr	r2, [pc, #116]	; (80100d8 <tcp_timewait_input+0xe4>)
 8010064:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010066:	8812      	ldrh	r2, [r2, #0]
 8010068:	b292      	uxth	r2, r2
 801006a:	9202      	str	r2, [sp, #8]
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	4b1b      	ldr	r3, [pc, #108]	; (80100dc <tcp_timewait_input+0xe8>)
 8010070:	9300      	str	r3, [sp, #0]
 8010072:	4b1b      	ldr	r3, [pc, #108]	; (80100e0 <tcp_timewait_input+0xec>)
 8010074:	4602      	mov	r2, r0
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f003 faca 	bl	8013610 <tcp_rst>
      return;
 801007c:	e01b      	b.n	80100b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801007e:	4b0f      	ldr	r3, [pc, #60]	; (80100bc <tcp_timewait_input+0xc8>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f003 0301 	and.w	r3, r3, #1
 8010086:	2b00      	cmp	r3, #0
 8010088:	d003      	beq.n	8010092 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801008a:	4b16      	ldr	r3, [pc, #88]	; (80100e4 <tcp_timewait_input+0xf0>)
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010092:	4b10      	ldr	r3, [pc, #64]	; (80100d4 <tcp_timewait_input+0xe0>)
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00c      	beq.n	80100b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8b5b      	ldrh	r3, [r3, #26]
 801009e:	f043 0302 	orr.w	r3, r3, #2
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f002 fcfd 	bl	8012aa8 <tcp_output>
  }
  return;
 80100ae:	e001      	b.n	80100b4 <tcp_timewait_input+0xc0>
    return;
 80100b0:	bf00      	nop
 80100b2:	e000      	b.n	80100b6 <tcp_timewait_input+0xc2>
  return;
 80100b4:	bf00      	nop
}
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	20010ed0 	.word	0x20010ed0
 80100c0:	0801c4fc 	.word	0x0801c4fc
 80100c4:	0801c714 	.word	0x0801c714
 80100c8:	0801c548 	.word	0x0801c548
 80100cc:	20010ec4 	.word	0x20010ec4
 80100d0:	20010ec8 	.word	0x20010ec8
 80100d4:	20010ece 	.word	0x20010ece
 80100d8:	20010eb4 	.word	0x20010eb4
 80100dc:	2000d728 	.word	0x2000d728
 80100e0:	2000d72c 	.word	0x2000d72c
 80100e4:	20010e8c 	.word	0x20010e8c

080100e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b08d      	sub	sp, #52	; 0x34
 80100ec:	af04      	add	r7, sp, #16
 80100ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100f4:	2300      	movs	r3, #0
 80100f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d106      	bne.n	801010c <tcp_process+0x24>
 80100fe:	4b9d      	ldr	r3, [pc, #628]	; (8010374 <tcp_process+0x28c>)
 8010100:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010104:	499c      	ldr	r1, [pc, #624]	; (8010378 <tcp_process+0x290>)
 8010106:	489d      	ldr	r0, [pc, #628]	; (801037c <tcp_process+0x294>)
 8010108:	f008 ffd4 	bl	80190b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801010c:	4b9c      	ldr	r3, [pc, #624]	; (8010380 <tcp_process+0x298>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f003 0304 	and.w	r3, r3, #4
 8010114:	2b00      	cmp	r3, #0
 8010116:	d04e      	beq.n	80101b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	7d1b      	ldrb	r3, [r3, #20]
 801011c:	2b02      	cmp	r3, #2
 801011e:	d108      	bne.n	8010132 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010124:	4b97      	ldr	r3, [pc, #604]	; (8010384 <tcp_process+0x29c>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	429a      	cmp	r2, r3
 801012a:	d123      	bne.n	8010174 <tcp_process+0x8c>
        acceptable = 1;
 801012c:	2301      	movs	r3, #1
 801012e:	76fb      	strb	r3, [r7, #27]
 8010130:	e020      	b.n	8010174 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010136:	4b94      	ldr	r3, [pc, #592]	; (8010388 <tcp_process+0x2a0>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	429a      	cmp	r2, r3
 801013c:	d102      	bne.n	8010144 <tcp_process+0x5c>
        acceptable = 1;
 801013e:	2301      	movs	r3, #1
 8010140:	76fb      	strb	r3, [r7, #27]
 8010142:	e017      	b.n	8010174 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010144:	4b90      	ldr	r3, [pc, #576]	; (8010388 <tcp_process+0x2a0>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	2b00      	cmp	r3, #0
 8010150:	db10      	blt.n	8010174 <tcp_process+0x8c>
 8010152:	4b8d      	ldr	r3, [pc, #564]	; (8010388 <tcp_process+0x2a0>)
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801015a:	6879      	ldr	r1, [r7, #4]
 801015c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801015e:	440b      	add	r3, r1
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	2b00      	cmp	r3, #0
 8010164:	dc06      	bgt.n	8010174 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	8b5b      	ldrh	r3, [r3, #26]
 801016a:	f043 0302 	orr.w	r3, r3, #2
 801016e:	b29a      	uxth	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010174:	7efb      	ldrb	r3, [r7, #27]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d01b      	beq.n	80101b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	7d1b      	ldrb	r3, [r3, #20]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d106      	bne.n	8010190 <tcp_process+0xa8>
 8010182:	4b7c      	ldr	r3, [pc, #496]	; (8010374 <tcp_process+0x28c>)
 8010184:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010188:	4980      	ldr	r1, [pc, #512]	; (801038c <tcp_process+0x2a4>)
 801018a:	487c      	ldr	r0, [pc, #496]	; (801037c <tcp_process+0x294>)
 801018c:	f008 ff92 	bl	80190b4 <iprintf>
      recv_flags |= TF_RESET;
 8010190:	4b7f      	ldr	r3, [pc, #508]	; (8010390 <tcp_process+0x2a8>)
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f043 0308 	orr.w	r3, r3, #8
 8010198:	b2da      	uxtb	r2, r3
 801019a:	4b7d      	ldr	r3, [pc, #500]	; (8010390 <tcp_process+0x2a8>)
 801019c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8b5b      	ldrh	r3, [r3, #26]
 80101a2:	f023 0301 	bic.w	r3, r3, #1
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80101ac:	f06f 030d 	mvn.w	r3, #13
 80101b0:	e37a      	b.n	80108a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80101b2:	2300      	movs	r3, #0
 80101b4:	e378      	b.n	80108a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80101b6:	4b72      	ldr	r3, [pc, #456]	; (8010380 <tcp_process+0x298>)
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	f003 0302 	and.w	r3, r3, #2
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d010      	beq.n	80101e4 <tcp_process+0xfc>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	7d1b      	ldrb	r3, [r3, #20]
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	d00c      	beq.n	80101e4 <tcp_process+0xfc>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	7d1b      	ldrb	r3, [r3, #20]
 80101ce:	2b03      	cmp	r3, #3
 80101d0:	d008      	beq.n	80101e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	8b5b      	ldrh	r3, [r3, #26]
 80101d6:	f043 0302 	orr.w	r3, r3, #2
 80101da:	b29a      	uxth	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	e361      	b.n	80108a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	8b5b      	ldrh	r3, [r3, #26]
 80101e8:	f003 0310 	and.w	r3, r3, #16
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d103      	bne.n	80101f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101f0:	4b68      	ldr	r3, [pc, #416]	; (8010394 <tcp_process+0x2ac>)
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f001 fc2f 	bl	8011a6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	7d1b      	ldrb	r3, [r3, #20]
 8010212:	3b02      	subs	r3, #2
 8010214:	2b07      	cmp	r3, #7
 8010216:	f200 8337 	bhi.w	8010888 <tcp_process+0x7a0>
 801021a:	a201      	add	r2, pc, #4	; (adr r2, 8010220 <tcp_process+0x138>)
 801021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010220:	08010241 	.word	0x08010241
 8010224:	08010471 	.word	0x08010471
 8010228:	080105e9 	.word	0x080105e9
 801022c:	08010613 	.word	0x08010613
 8010230:	08010737 	.word	0x08010737
 8010234:	080105e9 	.word	0x080105e9
 8010238:	080107c3 	.word	0x080107c3
 801023c:	08010853 	.word	0x08010853
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010240:	4b4f      	ldr	r3, [pc, #316]	; (8010380 <tcp_process+0x298>)
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	f003 0310 	and.w	r3, r3, #16
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 80e4 	beq.w	8010416 <tcp_process+0x32e>
 801024e:	4b4c      	ldr	r3, [pc, #304]	; (8010380 <tcp_process+0x298>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	f003 0302 	and.w	r3, r3, #2
 8010256:	2b00      	cmp	r3, #0
 8010258:	f000 80dd 	beq.w	8010416 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	4b48      	ldr	r3, [pc, #288]	; (8010384 <tcp_process+0x29c>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	f040 80d5 	bne.w	8010416 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801026c:	4b46      	ldr	r3, [pc, #280]	; (8010388 <tcp_process+0x2a0>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801027e:	4b41      	ldr	r3, [pc, #260]	; (8010384 <tcp_process+0x29c>)
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010286:	4b44      	ldr	r3, [pc, #272]	; (8010398 <tcp_process+0x2b0>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	89db      	ldrh	r3, [r3, #14]
 801028c:	b29a      	uxth	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80102a0:	4b39      	ldr	r3, [pc, #228]	; (8010388 <tcp_process+0x2a0>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	1e5a      	subs	r2, r3, #1
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2204      	movs	r2, #4
 80102ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	3304      	adds	r3, #4
 80102b8:	4618      	mov	r0, r3
 80102ba:	f007 f91d 	bl	80174f8 <ip4_route>
 80102be:	4601      	mov	r1, r0
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	3304      	adds	r3, #4
 80102c4:	461a      	mov	r2, r3
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7ff f88c 	bl	800f3e4 <tcp_eff_send_mss_netif>
 80102cc:	4603      	mov	r3, r0
 80102ce:	461a      	mov	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d8:	009a      	lsls	r2, r3, #2
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102de:	005b      	lsls	r3, r3, #1
 80102e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80102e4:	428b      	cmp	r3, r1
 80102e6:	bf38      	it	cc
 80102e8:	460b      	movcc	r3, r1
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d204      	bcs.n	80102f8 <tcp_process+0x210>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	e00d      	b.n	8010314 <tcp_process+0x22c>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8010302:	4293      	cmp	r3, r2
 8010304:	d904      	bls.n	8010310 <tcp_process+0x228>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	b29b      	uxth	r3, r3
 801030e:	e001      	b.n	8010314 <tcp_process+0x22c>
 8010310:	f241 131c 	movw	r3, #4380	; 0x111c
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010320:	2b00      	cmp	r3, #0
 8010322:	d106      	bne.n	8010332 <tcp_process+0x24a>
 8010324:	4b13      	ldr	r3, [pc, #76]	; (8010374 <tcp_process+0x28c>)
 8010326:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801032a:	491c      	ldr	r1, [pc, #112]	; (801039c <tcp_process+0x2b4>)
 801032c:	4813      	ldr	r0, [pc, #76]	; (801037c <tcp_process+0x294>)
 801032e:	f008 fec1 	bl	80190b4 <iprintf>
        --pcb->snd_queuelen;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010338:	3b01      	subs	r3, #1
 801033a:	b29a      	uxth	r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010346:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d12a      	bne.n	80103a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010352:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d106      	bne.n	8010368 <tcp_process+0x280>
 801035a:	4b06      	ldr	r3, [pc, #24]	; (8010374 <tcp_process+0x28c>)
 801035c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010360:	490f      	ldr	r1, [pc, #60]	; (80103a0 <tcp_process+0x2b8>)
 8010362:	4806      	ldr	r0, [pc, #24]	; (801037c <tcp_process+0x294>)
 8010364:	f008 fea6 	bl	80190b4 <iprintf>
          pcb->unsent = rseg->next;
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010370:	e01c      	b.n	80103ac <tcp_process+0x2c4>
 8010372:	bf00      	nop
 8010374:	0801c4fc 	.word	0x0801c4fc
 8010378:	0801c734 	.word	0x0801c734
 801037c:	0801c548 	.word	0x0801c548
 8010380:	20010ed0 	.word	0x20010ed0
 8010384:	20010ec8 	.word	0x20010ec8
 8010388:	20010ec4 	.word	0x20010ec4
 801038c:	0801c750 	.word	0x0801c750
 8010390:	20010ed1 	.word	0x20010ed1
 8010394:	20010e8c 	.word	0x20010e8c
 8010398:	20010eb4 	.word	0x20010eb4
 801039c:	0801c770 	.word	0x0801c770
 80103a0:	0801c788 	.word	0x0801c788
        } else {
          pcb->unacked = rseg->next;
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80103ac:	69f8      	ldr	r0, [r7, #28]
 80103ae:	f7fe fc36 	bl	800ec1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d104      	bne.n	80103c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103c0:	861a      	strh	r2, [r3, #48]	; 0x30
 80103c2:	e006      	b.n	80103d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00a      	beq.n	80103f2 <tcp_process+0x30a>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	6910      	ldr	r0, [r2, #16]
 80103e6:	2200      	movs	r2, #0
 80103e8:	6879      	ldr	r1, [r7, #4]
 80103ea:	4798      	blx	r3
 80103ec:	4603      	mov	r3, r0
 80103ee:	76bb      	strb	r3, [r7, #26]
 80103f0:	e001      	b.n	80103f6 <tcp_process+0x30e>
 80103f2:	2300      	movs	r3, #0
 80103f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103fa:	f113 0f0d 	cmn.w	r3, #13
 80103fe:	d102      	bne.n	8010406 <tcp_process+0x31e>
          return ERR_ABRT;
 8010400:	f06f 030c 	mvn.w	r3, #12
 8010404:	e250      	b.n	80108a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	8b5b      	ldrh	r3, [r3, #26]
 801040a:	f043 0302 	orr.w	r3, r3, #2
 801040e:	b29a      	uxth	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010414:	e23a      	b.n	801088c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010416:	4b98      	ldr	r3, [pc, #608]	; (8010678 <tcp_process+0x590>)
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f003 0310 	and.w	r3, r3, #16
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 8234 	beq.w	801088c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010424:	4b95      	ldr	r3, [pc, #596]	; (801067c <tcp_process+0x594>)
 8010426:	6819      	ldr	r1, [r3, #0]
 8010428:	4b95      	ldr	r3, [pc, #596]	; (8010680 <tcp_process+0x598>)
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	461a      	mov	r2, r3
 801042e:	4b95      	ldr	r3, [pc, #596]	; (8010684 <tcp_process+0x59c>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010434:	4b94      	ldr	r3, [pc, #592]	; (8010688 <tcp_process+0x5a0>)
 8010436:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010438:	885b      	ldrh	r3, [r3, #2]
 801043a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801043c:	4a92      	ldr	r2, [pc, #584]	; (8010688 <tcp_process+0x5a0>)
 801043e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010440:	8812      	ldrh	r2, [r2, #0]
 8010442:	b292      	uxth	r2, r2
 8010444:	9202      	str	r2, [sp, #8]
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	4b90      	ldr	r3, [pc, #576]	; (801068c <tcp_process+0x5a4>)
 801044a:	9300      	str	r3, [sp, #0]
 801044c:	4b90      	ldr	r3, [pc, #576]	; (8010690 <tcp_process+0x5a8>)
 801044e:	4602      	mov	r2, r0
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f003 f8dd 	bl	8013610 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801045c:	2b05      	cmp	r3, #5
 801045e:	f200 8215 	bhi.w	801088c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f002 fea7 	bl	80131bc <tcp_rexmit_rto>
      break;
 801046e:	e20d      	b.n	801088c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010470:	4b81      	ldr	r3, [pc, #516]	; (8010678 <tcp_process+0x590>)
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	f003 0310 	and.w	r3, r3, #16
 8010478:	2b00      	cmp	r3, #0
 801047a:	f000 80a1 	beq.w	80105c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801047e:	4b7f      	ldr	r3, [pc, #508]	; (801067c <tcp_process+0x594>)
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	3b01      	subs	r3, #1
 801048a:	2b00      	cmp	r3, #0
 801048c:	db7e      	blt.n	801058c <tcp_process+0x4a4>
 801048e:	4b7b      	ldr	r3, [pc, #492]	; (801067c <tcp_process+0x594>)
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	2b00      	cmp	r3, #0
 801049a:	dc77      	bgt.n	801058c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2204      	movs	r2, #4
 80104a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d102      	bne.n	80104b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80104aa:	23fa      	movs	r3, #250	; 0xfa
 80104ac:	76bb      	strb	r3, [r7, #26]
 80104ae:	e01d      	b.n	80104ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d106      	bne.n	80104c8 <tcp_process+0x3e0>
 80104ba:	4b76      	ldr	r3, [pc, #472]	; (8010694 <tcp_process+0x5ac>)
 80104bc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80104c0:	4975      	ldr	r1, [pc, #468]	; (8010698 <tcp_process+0x5b0>)
 80104c2:	4876      	ldr	r0, [pc, #472]	; (801069c <tcp_process+0x5b4>)
 80104c4:	f008 fdf6 	bl	80190b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104cc:	699b      	ldr	r3, [r3, #24]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d00a      	beq.n	80104e8 <tcp_process+0x400>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104d6:	699b      	ldr	r3, [r3, #24]
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	6910      	ldr	r0, [r2, #16]
 80104dc:	2200      	movs	r2, #0
 80104de:	6879      	ldr	r1, [r7, #4]
 80104e0:	4798      	blx	r3
 80104e2:	4603      	mov	r3, r0
 80104e4:	76bb      	strb	r3, [r7, #26]
 80104e6:	e001      	b.n	80104ec <tcp_process+0x404>
 80104e8:	23f0      	movs	r3, #240	; 0xf0
 80104ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00a      	beq.n	801050a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104f8:	f113 0f0d 	cmn.w	r3, #13
 80104fc:	d002      	beq.n	8010504 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7fd fbd0 	bl	800dca4 <tcp_abort>
            }
            return ERR_ABRT;
 8010504:	f06f 030c 	mvn.w	r3, #12
 8010508:	e1ce      	b.n	80108a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f000 fae0 	bl	8010ad0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010510:	4b63      	ldr	r3, [pc, #396]	; (80106a0 <tcp_process+0x5b8>)
 8010512:	881b      	ldrh	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d005      	beq.n	8010524 <tcp_process+0x43c>
            recv_acked--;
 8010518:	4b61      	ldr	r3, [pc, #388]	; (80106a0 <tcp_process+0x5b8>)
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	3b01      	subs	r3, #1
 801051e:	b29a      	uxth	r2, r3
 8010520:	4b5f      	ldr	r3, [pc, #380]	; (80106a0 <tcp_process+0x5b8>)
 8010522:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010528:	009a      	lsls	r2, r3, #2
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	f241 111c 	movw	r1, #4380	; 0x111c
 8010534:	428b      	cmp	r3, r1
 8010536:	bf38      	it	cc
 8010538:	460b      	movcc	r3, r1
 801053a:	429a      	cmp	r2, r3
 801053c:	d204      	bcs.n	8010548 <tcp_process+0x460>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	b29b      	uxth	r3, r3
 8010546:	e00d      	b.n	8010564 <tcp_process+0x47c>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010552:	4293      	cmp	r3, r2
 8010554:	d904      	bls.n	8010560 <tcp_process+0x478>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	b29b      	uxth	r3, r3
 801055e:	e001      	b.n	8010564 <tcp_process+0x47c>
 8010560:	f241 131c 	movw	r3, #4380	; 0x111c
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801056a:	4b4e      	ldr	r3, [pc, #312]	; (80106a4 <tcp_process+0x5bc>)
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	f003 0320 	and.w	r3, r3, #32
 8010572:	2b00      	cmp	r3, #0
 8010574:	d037      	beq.n	80105e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8b5b      	ldrh	r3, [r3, #26]
 801057a:	f043 0302 	orr.w	r3, r3, #2
 801057e:	b29a      	uxth	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2207      	movs	r2, #7
 8010588:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801058a:	e02c      	b.n	80105e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801058c:	4b3b      	ldr	r3, [pc, #236]	; (801067c <tcp_process+0x594>)
 801058e:	6819      	ldr	r1, [r3, #0]
 8010590:	4b3b      	ldr	r3, [pc, #236]	; (8010680 <tcp_process+0x598>)
 8010592:	881b      	ldrh	r3, [r3, #0]
 8010594:	461a      	mov	r2, r3
 8010596:	4b3b      	ldr	r3, [pc, #236]	; (8010684 <tcp_process+0x59c>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801059c:	4b3a      	ldr	r3, [pc, #232]	; (8010688 <tcp_process+0x5a0>)
 801059e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105a0:	885b      	ldrh	r3, [r3, #2]
 80105a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105a4:	4a38      	ldr	r2, [pc, #224]	; (8010688 <tcp_process+0x5a0>)
 80105a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105a8:	8812      	ldrh	r2, [r2, #0]
 80105aa:	b292      	uxth	r2, r2
 80105ac:	9202      	str	r2, [sp, #8]
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	4b36      	ldr	r3, [pc, #216]	; (801068c <tcp_process+0x5a4>)
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	4b36      	ldr	r3, [pc, #216]	; (8010690 <tcp_process+0x5a8>)
 80105b6:	4602      	mov	r2, r0
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f003 f829 	bl	8013610 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80105be:	e167      	b.n	8010890 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80105c0:	4b2d      	ldr	r3, [pc, #180]	; (8010678 <tcp_process+0x590>)
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	f003 0302 	and.w	r3, r3, #2
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 8161 	beq.w	8010890 <tcp_process+0x7a8>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d2:	1e5a      	subs	r2, r3, #1
 80105d4:	4b2b      	ldr	r3, [pc, #172]	; (8010684 <tcp_process+0x59c>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	429a      	cmp	r2, r3
 80105da:	f040 8159 	bne.w	8010890 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f002 fe0e 	bl	8013200 <tcp_rexmit>
      break;
 80105e4:	e154      	b.n	8010890 <tcp_process+0x7a8>
 80105e6:	e153      	b.n	8010890 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f000 fa71 	bl	8010ad0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105ee:	4b2d      	ldr	r3, [pc, #180]	; (80106a4 <tcp_process+0x5bc>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 0320 	and.w	r3, r3, #32
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 814c 	beq.w	8010894 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f043 0302 	orr.w	r3, r3, #2
 8010604:	b29a      	uxth	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2207      	movs	r2, #7
 801060e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010610:	e140      	b.n	8010894 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fa5c 	bl	8010ad0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010618:	4b22      	ldr	r3, [pc, #136]	; (80106a4 <tcp_process+0x5bc>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f003 0320 	and.w	r3, r3, #32
 8010620:	2b00      	cmp	r3, #0
 8010622:	d071      	beq.n	8010708 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010624:	4b14      	ldr	r3, [pc, #80]	; (8010678 <tcp_process+0x590>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 0310 	and.w	r3, r3, #16
 801062c:	2b00      	cmp	r3, #0
 801062e:	d060      	beq.n	80106f2 <tcp_process+0x60a>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010634:	4b11      	ldr	r3, [pc, #68]	; (801067c <tcp_process+0x594>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	429a      	cmp	r2, r3
 801063a:	d15a      	bne.n	80106f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010640:	2b00      	cmp	r3, #0
 8010642:	d156      	bne.n	80106f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	8b5b      	ldrh	r3, [r3, #26]
 8010648:	f043 0302 	orr.w	r3, r3, #2
 801064c:	b29a      	uxth	r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7fe fdbc 	bl	800f1d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010658:	4b13      	ldr	r3, [pc, #76]	; (80106a8 <tcp_process+0x5c0>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	429a      	cmp	r2, r3
 8010660:	d105      	bne.n	801066e <tcp_process+0x586>
 8010662:	4b11      	ldr	r3, [pc, #68]	; (80106a8 <tcp_process+0x5c0>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	4a0f      	ldr	r2, [pc, #60]	; (80106a8 <tcp_process+0x5c0>)
 801066a:	6013      	str	r3, [r2, #0]
 801066c:	e02e      	b.n	80106cc <tcp_process+0x5e4>
 801066e:	4b0e      	ldr	r3, [pc, #56]	; (80106a8 <tcp_process+0x5c0>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	617b      	str	r3, [r7, #20]
 8010674:	e027      	b.n	80106c6 <tcp_process+0x5de>
 8010676:	bf00      	nop
 8010678:	20010ed0 	.word	0x20010ed0
 801067c:	20010ec8 	.word	0x20010ec8
 8010680:	20010ece 	.word	0x20010ece
 8010684:	20010ec4 	.word	0x20010ec4
 8010688:	20010eb4 	.word	0x20010eb4
 801068c:	2000d728 	.word	0x2000d728
 8010690:	2000d72c 	.word	0x2000d72c
 8010694:	0801c4fc 	.word	0x0801c4fc
 8010698:	0801c79c 	.word	0x0801c79c
 801069c:	0801c548 	.word	0x0801c548
 80106a0:	20010ecc 	.word	0x20010ecc
 80106a4:	20010ed1 	.word	0x20010ed1
 80106a8:	20010e98 	.word	0x20010e98
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d104      	bne.n	80106c0 <tcp_process+0x5d8>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	68da      	ldr	r2, [r3, #12]
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	60da      	str	r2, [r3, #12]
 80106be:	e005      	b.n	80106cc <tcp_process+0x5e4>
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	617b      	str	r3, [r7, #20]
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1ef      	bne.n	80106ac <tcp_process+0x5c4>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	60da      	str	r2, [r3, #12]
 80106d2:	4b77      	ldr	r3, [pc, #476]	; (80108b0 <tcp_process+0x7c8>)
 80106d4:	2201      	movs	r2, #1
 80106d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	220a      	movs	r2, #10
 80106dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80106de:	4b75      	ldr	r3, [pc, #468]	; (80108b4 <tcp_process+0x7cc>)
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	60da      	str	r2, [r3, #12]
 80106e6:	4a73      	ldr	r2, [pc, #460]	; (80108b4 <tcp_process+0x7cc>)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6013      	str	r3, [r2, #0]
 80106ec:	f003 f952 	bl	8013994 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106f0:	e0d2      	b.n	8010898 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	8b5b      	ldrh	r3, [r3, #26]
 80106f6:	f043 0302 	orr.w	r3, r3, #2
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2208      	movs	r2, #8
 8010704:	751a      	strb	r2, [r3, #20]
      break;
 8010706:	e0c7      	b.n	8010898 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010708:	4b6b      	ldr	r3, [pc, #428]	; (80108b8 <tcp_process+0x7d0>)
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	f003 0310 	and.w	r3, r3, #16
 8010710:	2b00      	cmp	r3, #0
 8010712:	f000 80c1 	beq.w	8010898 <tcp_process+0x7b0>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801071a:	4b68      	ldr	r3, [pc, #416]	; (80108bc <tcp_process+0x7d4>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	429a      	cmp	r2, r3
 8010720:	f040 80ba 	bne.w	8010898 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010728:	2b00      	cmp	r3, #0
 801072a:	f040 80b5 	bne.w	8010898 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2206      	movs	r2, #6
 8010732:	751a      	strb	r2, [r3, #20]
      break;
 8010734:	e0b0      	b.n	8010898 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 f9ca 	bl	8010ad0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801073c:	4b60      	ldr	r3, [pc, #384]	; (80108c0 <tcp_process+0x7d8>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f003 0320 	and.w	r3, r3, #32
 8010744:	2b00      	cmp	r3, #0
 8010746:	f000 80a9 	beq.w	801089c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	8b5b      	ldrh	r3, [r3, #26]
 801074e:	f043 0302 	orr.w	r3, r3, #2
 8010752:	b29a      	uxth	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f7fe fd39 	bl	800f1d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801075e:	4b59      	ldr	r3, [pc, #356]	; (80108c4 <tcp_process+0x7dc>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	429a      	cmp	r2, r3
 8010766:	d105      	bne.n	8010774 <tcp_process+0x68c>
 8010768:	4b56      	ldr	r3, [pc, #344]	; (80108c4 <tcp_process+0x7dc>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	4a55      	ldr	r2, [pc, #340]	; (80108c4 <tcp_process+0x7dc>)
 8010770:	6013      	str	r3, [r2, #0]
 8010772:	e013      	b.n	801079c <tcp_process+0x6b4>
 8010774:	4b53      	ldr	r3, [pc, #332]	; (80108c4 <tcp_process+0x7dc>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	613b      	str	r3, [r7, #16]
 801077a:	e00c      	b.n	8010796 <tcp_process+0x6ae>
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	429a      	cmp	r2, r3
 8010784:	d104      	bne.n	8010790 <tcp_process+0x6a8>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68da      	ldr	r2, [r3, #12]
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	60da      	str	r2, [r3, #12]
 801078e:	e005      	b.n	801079c <tcp_process+0x6b4>
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	613b      	str	r3, [r7, #16]
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1ef      	bne.n	801077c <tcp_process+0x694>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	60da      	str	r2, [r3, #12]
 80107a2:	4b43      	ldr	r3, [pc, #268]	; (80108b0 <tcp_process+0x7c8>)
 80107a4:	2201      	movs	r2, #1
 80107a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	220a      	movs	r2, #10
 80107ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107ae:	4b41      	ldr	r3, [pc, #260]	; (80108b4 <tcp_process+0x7cc>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	60da      	str	r2, [r3, #12]
 80107b6:	4a3f      	ldr	r2, [pc, #252]	; (80108b4 <tcp_process+0x7cc>)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6013      	str	r3, [r2, #0]
 80107bc:	f003 f8ea 	bl	8013994 <tcp_timer_needed>
      }
      break;
 80107c0:	e06c      	b.n	801089c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 f984 	bl	8010ad0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80107c8:	4b3b      	ldr	r3, [pc, #236]	; (80108b8 <tcp_process+0x7d0>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	f003 0310 	and.w	r3, r3, #16
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d065      	beq.n	80108a0 <tcp_process+0x7b8>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107d8:	4b38      	ldr	r3, [pc, #224]	; (80108bc <tcp_process+0x7d4>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d15f      	bne.n	80108a0 <tcp_process+0x7b8>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d15b      	bne.n	80108a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7fe fcf1 	bl	800f1d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107ee:	4b35      	ldr	r3, [pc, #212]	; (80108c4 <tcp_process+0x7dc>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d105      	bne.n	8010804 <tcp_process+0x71c>
 80107f8:	4b32      	ldr	r3, [pc, #200]	; (80108c4 <tcp_process+0x7dc>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	4a31      	ldr	r2, [pc, #196]	; (80108c4 <tcp_process+0x7dc>)
 8010800:	6013      	str	r3, [r2, #0]
 8010802:	e013      	b.n	801082c <tcp_process+0x744>
 8010804:	4b2f      	ldr	r3, [pc, #188]	; (80108c4 <tcp_process+0x7dc>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	e00c      	b.n	8010826 <tcp_process+0x73e>
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	429a      	cmp	r2, r3
 8010814:	d104      	bne.n	8010820 <tcp_process+0x738>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68da      	ldr	r2, [r3, #12]
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	60da      	str	r2, [r3, #12]
 801081e:	e005      	b.n	801082c <tcp_process+0x744>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	60fb      	str	r3, [r7, #12]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1ef      	bne.n	801080c <tcp_process+0x724>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	60da      	str	r2, [r3, #12]
 8010832:	4b1f      	ldr	r3, [pc, #124]	; (80108b0 <tcp_process+0x7c8>)
 8010834:	2201      	movs	r2, #1
 8010836:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	220a      	movs	r2, #10
 801083c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801083e:	4b1d      	ldr	r3, [pc, #116]	; (80108b4 <tcp_process+0x7cc>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	60da      	str	r2, [r3, #12]
 8010846:	4a1b      	ldr	r2, [pc, #108]	; (80108b4 <tcp_process+0x7cc>)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6013      	str	r3, [r2, #0]
 801084c:	f003 f8a2 	bl	8013994 <tcp_timer_needed>
      }
      break;
 8010850:	e026      	b.n	80108a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f93c 	bl	8010ad0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010858:	4b17      	ldr	r3, [pc, #92]	; (80108b8 <tcp_process+0x7d0>)
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f003 0310 	and.w	r3, r3, #16
 8010860:	2b00      	cmp	r3, #0
 8010862:	d01f      	beq.n	80108a4 <tcp_process+0x7bc>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010868:	4b14      	ldr	r3, [pc, #80]	; (80108bc <tcp_process+0x7d4>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	429a      	cmp	r2, r3
 801086e:	d119      	bne.n	80108a4 <tcp_process+0x7bc>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010874:	2b00      	cmp	r3, #0
 8010876:	d115      	bne.n	80108a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010878:	4b11      	ldr	r3, [pc, #68]	; (80108c0 <tcp_process+0x7d8>)
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	f043 0310 	orr.w	r3, r3, #16
 8010880:	b2da      	uxtb	r2, r3
 8010882:	4b0f      	ldr	r3, [pc, #60]	; (80108c0 <tcp_process+0x7d8>)
 8010884:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010886:	e00d      	b.n	80108a4 <tcp_process+0x7bc>
    default:
      break;
 8010888:	bf00      	nop
 801088a:	e00c      	b.n	80108a6 <tcp_process+0x7be>
      break;
 801088c:	bf00      	nop
 801088e:	e00a      	b.n	80108a6 <tcp_process+0x7be>
      break;
 8010890:	bf00      	nop
 8010892:	e008      	b.n	80108a6 <tcp_process+0x7be>
      break;
 8010894:	bf00      	nop
 8010896:	e006      	b.n	80108a6 <tcp_process+0x7be>
      break;
 8010898:	bf00      	nop
 801089a:	e004      	b.n	80108a6 <tcp_process+0x7be>
      break;
 801089c:	bf00      	nop
 801089e:	e002      	b.n	80108a6 <tcp_process+0x7be>
      break;
 80108a0:	bf00      	nop
 80108a2:	e000      	b.n	80108a6 <tcp_process+0x7be>
      break;
 80108a4:	bf00      	nop
  }
  return ERR_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3724      	adds	r7, #36	; 0x24
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd90      	pop	{r4, r7, pc}
 80108b0:	20010ea0 	.word	0x20010ea0
 80108b4:	20010e9c 	.word	0x20010e9c
 80108b8:	20010ed0 	.word	0x20010ed0
 80108bc:	20010ec8 	.word	0x20010ec8
 80108c0:	20010ed1 	.word	0x20010ed1
 80108c4:	20010e98 	.word	0x20010e98

080108c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80108c8:	b590      	push	{r4, r7, lr}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d106      	bne.n	80108e6 <tcp_oos_insert_segment+0x1e>
 80108d8:	4b3b      	ldr	r3, [pc, #236]	; (80109c8 <tcp_oos_insert_segment+0x100>)
 80108da:	f240 421f 	movw	r2, #1055	; 0x41f
 80108de:	493b      	ldr	r1, [pc, #236]	; (80109cc <tcp_oos_insert_segment+0x104>)
 80108e0:	483b      	ldr	r0, [pc, #236]	; (80109d0 <tcp_oos_insert_segment+0x108>)
 80108e2:	f008 fbe7 	bl	80190b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	899b      	ldrh	r3, [r3, #12]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fa ffa4 	bl	800b83c <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	f003 0301 	and.w	r3, r3, #1
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d028      	beq.n	8010952 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010900:	6838      	ldr	r0, [r7, #0]
 8010902:	f7fe f977 	bl	800ebf4 <tcp_segs_free>
    next = NULL;
 8010906:	2300      	movs	r3, #0
 8010908:	603b      	str	r3, [r7, #0]
 801090a:	e056      	b.n	80109ba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	899b      	ldrh	r3, [r3, #12]
 8010912:	b29b      	uxth	r3, r3
 8010914:	4618      	mov	r0, r3
 8010916:	f7fa ff91 	bl	800b83c <lwip_htons>
 801091a:	4603      	mov	r3, r0
 801091c:	b2db      	uxtb	r3, r3
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00d      	beq.n	8010942 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	899b      	ldrh	r3, [r3, #12]
 801092c:	b29c      	uxth	r4, r3
 801092e:	2001      	movs	r0, #1
 8010930:	f7fa ff84 	bl	800b83c <lwip_htons>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	4322      	orrs	r2, r4
 801093e:	b292      	uxth	r2, r2
 8010940:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	f7fe f966 	bl	800ec1e <tcp_seg_free>
    while (next &&
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00e      	beq.n	8010976 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	891b      	ldrh	r3, [r3, #8]
 801095c:	461a      	mov	r2, r3
 801095e:	4b1d      	ldr	r3, [pc, #116]	; (80109d4 <tcp_oos_insert_segment+0x10c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	441a      	add	r2, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	6839      	ldr	r1, [r7, #0]
 801096c:	8909      	ldrh	r1, [r1, #8]
 801096e:	440b      	add	r3, r1
 8010970:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010972:	2b00      	cmp	r3, #0
 8010974:	daca      	bge.n	801090c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d01e      	beq.n	80109ba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	891b      	ldrh	r3, [r3, #8]
 8010980:	461a      	mov	r2, r3
 8010982:	4b14      	ldr	r3, [pc, #80]	; (80109d4 <tcp_oos_insert_segment+0x10c>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	441a      	add	r2, r3
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010990:	2b00      	cmp	r3, #0
 8010992:	dd12      	ble.n	80109ba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	b29a      	uxth	r2, r3
 801099c:	4b0d      	ldr	r3, [pc, #52]	; (80109d4 <tcp_oos_insert_segment+0x10c>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	685a      	ldr	r2, [r3, #4]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	891b      	ldrh	r3, [r3, #8]
 80109b2:	4619      	mov	r1, r3
 80109b4:	4610      	mov	r0, r2
 80109b6:	f7fc f9ef 	bl	800cd98 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	601a      	str	r2, [r3, #0]
}
 80109c0:	bf00      	nop
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd90      	pop	{r4, r7, pc}
 80109c8:	0801c4fc 	.word	0x0801c4fc
 80109cc:	0801c7bc 	.word	0x0801c7bc
 80109d0:	0801c548 	.word	0x0801c548
 80109d4:	20010ec4 	.word	0x20010ec4

080109d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80109d8:	b5b0      	push	{r4, r5, r7, lr}
 80109da:	b086      	sub	sp, #24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
 80109e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109e6:	e03e      	b.n	8010a66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fc fbe2 	bl	800d1c0 <pbuf_clen>
 80109fc:	4603      	mov	r3, r0
 80109fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a06:	8a7a      	ldrh	r2, [r7, #18]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d906      	bls.n	8010a1a <tcp_free_acked_segments+0x42>
 8010a0c:	4b2a      	ldr	r3, [pc, #168]	; (8010ab8 <tcp_free_acked_segments+0xe0>)
 8010a0e:	f240 4257 	movw	r2, #1111	; 0x457
 8010a12:	492a      	ldr	r1, [pc, #168]	; (8010abc <tcp_free_acked_segments+0xe4>)
 8010a14:	482a      	ldr	r0, [pc, #168]	; (8010ac0 <tcp_free_acked_segments+0xe8>)
 8010a16:	f008 fb4d 	bl	80190b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010a20:	8a7b      	ldrh	r3, [r7, #18]
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	891a      	ldrh	r2, [r3, #8]
 8010a30:	4b24      	ldr	r3, [pc, #144]	; (8010ac4 <tcp_free_acked_segments+0xec>)
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	4413      	add	r3, r2
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	4b22      	ldr	r3, [pc, #136]	; (8010ac4 <tcp_free_acked_segments+0xec>)
 8010a3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010a3c:	6978      	ldr	r0, [r7, #20]
 8010a3e:	f7fe f8ee 	bl	800ec1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00c      	beq.n	8010a66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <tcp_free_acked_segments+0x8e>
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d106      	bne.n	8010a66 <tcp_free_acked_segments+0x8e>
 8010a58:	4b17      	ldr	r3, [pc, #92]	; (8010ab8 <tcp_free_acked_segments+0xe0>)
 8010a5a:	f240 4261 	movw	r2, #1121	; 0x461
 8010a5e:	491a      	ldr	r1, [pc, #104]	; (8010ac8 <tcp_free_acked_segments+0xf0>)
 8010a60:	4817      	ldr	r0, [pc, #92]	; (8010ac0 <tcp_free_acked_segments+0xe8>)
 8010a62:	f008 fb27 	bl	80190b4 <iprintf>
  while (seg_list != NULL &&
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d020      	beq.n	8010aae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fa fef7 	bl	800b866 <lwip_htonl>
 8010a78:	4604      	mov	r4, r0
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	891b      	ldrh	r3, [r3, #8]
 8010a7e:	461d      	mov	r5, r3
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	899b      	ldrh	r3, [r3, #12]
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fa fed7 	bl	800b83c <lwip_htons>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	f003 0303 	and.w	r3, r3, #3
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d001      	beq.n	8010a9e <tcp_free_acked_segments+0xc6>
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e000      	b.n	8010aa0 <tcp_free_acked_segments+0xc8>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	442b      	add	r3, r5
 8010aa2:	18e2      	adds	r2, r4, r3
 8010aa4:	4b09      	ldr	r3, [pc, #36]	; (8010acc <tcp_free_acked_segments+0xf4>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	dd9c      	ble.n	80109e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010aae:	68bb      	ldr	r3, [r7, #8]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3718      	adds	r7, #24
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8010ab8:	0801c4fc 	.word	0x0801c4fc
 8010abc:	0801c7e4 	.word	0x0801c7e4
 8010ac0:	0801c548 	.word	0x0801c548
 8010ac4:	20010ecc 	.word	0x20010ecc
 8010ac8:	0801c80c 	.word	0x0801c80c
 8010acc:	20010ec8 	.word	0x20010ec8

08010ad0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010ad0:	b5b0      	push	{r4, r5, r7, lr}
 8010ad2:	b094      	sub	sp, #80	; 0x50
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_receive+0x20>
 8010ae2:	4b91      	ldr	r3, [pc, #580]	; (8010d28 <tcp_receive+0x258>)
 8010ae4:	f240 427b 	movw	r2, #1147	; 0x47b
 8010ae8:	4990      	ldr	r1, [pc, #576]	; (8010d2c <tcp_receive+0x25c>)
 8010aea:	4891      	ldr	r0, [pc, #580]	; (8010d30 <tcp_receive+0x260>)
 8010aec:	f008 fae2 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	7d1b      	ldrb	r3, [r3, #20]
 8010af4:	2b03      	cmp	r3, #3
 8010af6:	d806      	bhi.n	8010b06 <tcp_receive+0x36>
 8010af8:	4b8b      	ldr	r3, [pc, #556]	; (8010d28 <tcp_receive+0x258>)
 8010afa:	f240 427c 	movw	r2, #1148	; 0x47c
 8010afe:	498d      	ldr	r1, [pc, #564]	; (8010d34 <tcp_receive+0x264>)
 8010b00:	488b      	ldr	r0, [pc, #556]	; (8010d30 <tcp_receive+0x260>)
 8010b02:	f008 fad7 	bl	80190b4 <iprintf>

  if (flags & TCP_ACK) {
 8010b06:	4b8c      	ldr	r3, [pc, #560]	; (8010d38 <tcp_receive+0x268>)
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	f003 0310 	and.w	r3, r3, #16
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 8264 	beq.w	8010fdc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b20:	4413      	add	r3, r2
 8010b22:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b28:	4b84      	ldr	r3, [pc, #528]	; (8010d3c <tcp_receive+0x26c>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	1ad3      	subs	r3, r2, r3
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	db1b      	blt.n	8010b6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b36:	4b81      	ldr	r3, [pc, #516]	; (8010d3c <tcp_receive+0x26c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d106      	bne.n	8010b4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b42:	4b7f      	ldr	r3, [pc, #508]	; (8010d40 <tcp_receive+0x270>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	1ad3      	subs	r3, r2, r3
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	db0e      	blt.n	8010b6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b50:	4b7b      	ldr	r3, [pc, #492]	; (8010d40 <tcp_receive+0x270>)
 8010b52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d125      	bne.n	8010ba4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b58:	4b7a      	ldr	r3, [pc, #488]	; (8010d44 <tcp_receive+0x274>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	89db      	ldrh	r3, [r3, #14]
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d91c      	bls.n	8010ba4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b6a:	4b76      	ldr	r3, [pc, #472]	; (8010d44 <tcp_receive+0x274>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	89db      	ldrh	r3, [r3, #14]
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d205      	bcs.n	8010b94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b94:	4b69      	ldr	r3, [pc, #420]	; (8010d3c <tcp_receive+0x26c>)
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b9c:	4b68      	ldr	r3, [pc, #416]	; (8010d40 <tcp_receive+0x270>)
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010ba4:	4b66      	ldr	r3, [pc, #408]	; (8010d40 <tcp_receive+0x270>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dc58      	bgt.n	8010c64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010bb2:	4b65      	ldr	r3, [pc, #404]	; (8010d48 <tcp_receive+0x278>)
 8010bb4:	881b      	ldrh	r3, [r3, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d14b      	bne.n	8010c52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010bc4:	4413      	add	r3, r2
 8010bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d142      	bne.n	8010c52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	db3d      	blt.n	8010c52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bda:	4b59      	ldr	r3, [pc, #356]	; (8010d40 <tcp_receive+0x270>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d137      	bne.n	8010c52 <tcp_receive+0x182>
              found_dupack = 1;
 8010be2:	2301      	movs	r3, #1
 8010be4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bec:	2bff      	cmp	r3, #255	; 0xff
 8010bee:	d007      	beq.n	8010c00 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c06:	2b03      	cmp	r3, #3
 8010c08:	d91b      	bls.n	8010c42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c14:	4413      	add	r3, r2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d30a      	bcc.n	8010c38 <tcp_receive+0x168>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c2c:	4413      	add	r3, r2
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c36:	e004      	b.n	8010c42 <tcp_receive+0x172>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d902      	bls.n	8010c52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f002 fb43 	bl	80132d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f040 8161 	bne.w	8010f1c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c62:	e15b      	b.n	8010f1c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c64:	4b36      	ldr	r3, [pc, #216]	; (8010d40 <tcp_receive+0x270>)
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f2c0 814e 	blt.w	8010f12 <tcp_receive+0x442>
 8010c76:	4b32      	ldr	r3, [pc, #200]	; (8010d40 <tcp_receive+0x270>)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f300 8146 	bgt.w	8010f12 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	8b5b      	ldrh	r3, [r3, #26]
 8010c8a:	f003 0304 	and.w	r3, r3, #4
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d010      	beq.n	8010cb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	8b5b      	ldrh	r3, [r3, #26]
 8010c96:	f023 0304 	bic.w	r3, r3, #4
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010cc2:	10db      	asrs	r3, r3, #3
 8010cc4:	b21b      	sxth	r3, r3
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	4413      	add	r3, r2
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	b21a      	sxth	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010cdc:	4b18      	ldr	r3, [pc, #96]	; (8010d40 <tcp_receive+0x270>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	1ad3      	subs	r3, r2, r3
 8010cea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010cf4:	4b12      	ldr	r3, [pc, #72]	; (8010d40 <tcp_receive+0x270>)
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	7d1b      	ldrb	r3, [r3, #20]
 8010d00:	2b03      	cmp	r3, #3
 8010d02:	f240 8097 	bls.w	8010e34 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d245      	bcs.n	8010da2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8b5b      	ldrh	r3, [r3, #26]
 8010d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d014      	beq.n	8010d4c <tcp_receive+0x27c>
 8010d22:	2301      	movs	r3, #1
 8010d24:	e013      	b.n	8010d4e <tcp_receive+0x27e>
 8010d26:	bf00      	nop
 8010d28:	0801c4fc 	.word	0x0801c4fc
 8010d2c:	0801c82c 	.word	0x0801c82c
 8010d30:	0801c548 	.word	0x0801c548
 8010d34:	0801c848 	.word	0x0801c848
 8010d38:	20010ed0 	.word	0x20010ed0
 8010d3c:	20010ec4 	.word	0x20010ec4
 8010d40:	20010ec8 	.word	0x20010ec8
 8010d44:	20010eb4 	.word	0x20010eb4
 8010d48:	20010ece 	.word	0x20010ece
 8010d4c:	2302      	movs	r3, #2
 8010d4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d5c:	fb12 f303 	smulbb	r3, r2, r3
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d64:	4293      	cmp	r3, r2
 8010d66:	bf28      	it	cs
 8010d68:	4613      	movcs	r3, r2
 8010d6a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d74:	4413      	add	r3, r2
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d309      	bcc.n	8010d96 <tcp_receive+0x2c6>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d8a:	4413      	add	r3, r2
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d94:	e04e      	b.n	8010e34 <tcp_receive+0x364>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010da0:	e048      	b.n	8010e34 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010da8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010daa:	4413      	add	r3, r2
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d309      	bcc.n	8010dcc <tcp_receive+0x2fc>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010dbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010dc0:	4413      	add	r3, r2
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010dca:	e004      	b.n	8010dd6 <tcp_receive+0x306>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d326      	bcc.n	8010e34 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e06:	4413      	add	r3, r2
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d30a      	bcc.n	8010e2a <tcp_receive+0x35a>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e1e:	4413      	add	r3, r2
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e28:	e004      	b.n	8010e34 <tcp_receive+0x364>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3c:	4a98      	ldr	r2, [pc, #608]	; (80110a0 <tcp_receive+0x5d0>)
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7ff fdca 	bl	80109d8 <tcp_free_acked_segments>
 8010e44:	4602      	mov	r2, r0
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e52:	4a94      	ldr	r2, [pc, #592]	; (80110a4 <tcp_receive+0x5d4>)
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff fdbf 	bl	80109d8 <tcp_free_acked_segments>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d104      	bne.n	8010e72 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e6e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e70:	e002      	b.n	8010e78 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d103      	bne.n	8010e8e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e94:	4b84      	ldr	r3, [pc, #528]	; (80110a8 <tcp_receive+0x5d8>)
 8010e96:	881b      	ldrh	r3, [r3, #0]
 8010e98:	4413      	add	r3, r2
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8b5b      	ldrh	r3, [r3, #26]
 8010ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d035      	beq.n	8010f1a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d118      	bne.n	8010ee8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00c      	beq.n	8010ed8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fa fccb 	bl	800b866 <lwip_htonl>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	dc20      	bgt.n	8010f1a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	8b5b      	ldrh	r3, [r3, #26]
 8010edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ee6:	e018      	b.n	8010f1a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fa fcb6 	bl	800b866 <lwip_htonl>
 8010efa:	4603      	mov	r3, r0
 8010efc:	1ae3      	subs	r3, r4, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	dc0b      	bgt.n	8010f1a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8b5b      	ldrh	r3, [r3, #26]
 8010f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f10:	e003      	b.n	8010f1a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f002 fbce 	bl	80136b4 <tcp_send_empty_ack>
 8010f18:	e000      	b.n	8010f1c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f1a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d05b      	beq.n	8010fdc <tcp_receive+0x50c>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f28:	4b60      	ldr	r3, [pc, #384]	; (80110ac <tcp_receive+0x5dc>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	da54      	bge.n	8010fdc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010f32:	4b5f      	ldr	r3, [pc, #380]	; (80110b0 <tcp_receive+0x5e0>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	1ad3      	subs	r3, r2, r3
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f46:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f50:	10db      	asrs	r3, r3, #3
 8010f52:	b21b      	sxth	r3, r3
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f6a:	4413      	add	r3, r2
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	b21a      	sxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f74:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	da05      	bge.n	8010f88 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f80:	425b      	negs	r3, r3
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f88:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f92:	109b      	asrs	r3, r3, #2
 8010f94:	b21b      	sxth	r3, r3
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010fac:	4413      	add	r3, r2
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	b21a      	sxth	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010fbc:	10db      	asrs	r3, r3, #3
 8010fbe:	b21b      	sxth	r3, r3
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	4413      	add	r3, r2
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	b21a      	sxth	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010fdc:	4b35      	ldr	r3, [pc, #212]	; (80110b4 <tcp_receive+0x5e4>)
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f000 84e2 	beq.w	80119aa <tcp_receive+0xeda>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	7d1b      	ldrb	r3, [r3, #20]
 8010fea:	2b06      	cmp	r3, #6
 8010fec:	f200 84dd 	bhi.w	80119aa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ff4:	4b30      	ldr	r3, [pc, #192]	; (80110b8 <tcp_receive+0x5e8>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f2c0 808f 	blt.w	8011120 <tcp_receive+0x650>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011006:	4b2b      	ldr	r3, [pc, #172]	; (80110b4 <tcp_receive+0x5e4>)
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	4619      	mov	r1, r3
 801100c:	4b2a      	ldr	r3, [pc, #168]	; (80110b8 <tcp_receive+0x5e8>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	440b      	add	r3, r1
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	3301      	adds	r3, #1
 8011016:	2b00      	cmp	r3, #0
 8011018:	f300 8082 	bgt.w	8011120 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801101c:	4b27      	ldr	r3, [pc, #156]	; (80110bc <tcp_receive+0x5ec>)
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011026:	4b24      	ldr	r3, [pc, #144]	; (80110b8 <tcp_receive+0x5e8>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801102e:	4b23      	ldr	r3, [pc, #140]	; (80110bc <tcp_receive+0x5ec>)
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d106      	bne.n	8011044 <tcp_receive+0x574>
 8011036:	4b22      	ldr	r3, [pc, #136]	; (80110c0 <tcp_receive+0x5f0>)
 8011038:	f240 5294 	movw	r2, #1428	; 0x594
 801103c:	4921      	ldr	r1, [pc, #132]	; (80110c4 <tcp_receive+0x5f4>)
 801103e:	4822      	ldr	r0, [pc, #136]	; (80110c8 <tcp_receive+0x5f8>)
 8011040:	f008 f838 	bl	80190b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801104a:	4293      	cmp	r3, r2
 801104c:	d906      	bls.n	801105c <tcp_receive+0x58c>
 801104e:	4b1c      	ldr	r3, [pc, #112]	; (80110c0 <tcp_receive+0x5f0>)
 8011050:	f240 5295 	movw	r2, #1429	; 0x595
 8011054:	491d      	ldr	r1, [pc, #116]	; (80110cc <tcp_receive+0x5fc>)
 8011056:	481c      	ldr	r0, [pc, #112]	; (80110c8 <tcp_receive+0x5f8>)
 8011058:	f008 f82c 	bl	80190b4 <iprintf>
      off = (u16_t)off32;
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011062:	4b16      	ldr	r3, [pc, #88]	; (80110bc <tcp_receive+0x5ec>)
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	891b      	ldrh	r3, [r3, #8]
 8011068:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801106c:	429a      	cmp	r2, r3
 801106e:	d906      	bls.n	801107e <tcp_receive+0x5ae>
 8011070:	4b13      	ldr	r3, [pc, #76]	; (80110c0 <tcp_receive+0x5f0>)
 8011072:	f240 5297 	movw	r2, #1431	; 0x597
 8011076:	4916      	ldr	r1, [pc, #88]	; (80110d0 <tcp_receive+0x600>)
 8011078:	4813      	ldr	r0, [pc, #76]	; (80110c8 <tcp_receive+0x5f8>)
 801107a:	f008 f81b 	bl	80190b4 <iprintf>
      inseg.len -= off;
 801107e:	4b0f      	ldr	r3, [pc, #60]	; (80110bc <tcp_receive+0x5ec>)
 8011080:	891a      	ldrh	r2, [r3, #8]
 8011082:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	b29a      	uxth	r2, r3
 801108a:	4b0c      	ldr	r3, [pc, #48]	; (80110bc <tcp_receive+0x5ec>)
 801108c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801108e:	4b0b      	ldr	r3, [pc, #44]	; (80110bc <tcp_receive+0x5ec>)
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	891a      	ldrh	r2, [r3, #8]
 8011094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801109c:	e02a      	b.n	80110f4 <tcp_receive+0x624>
 801109e:	bf00      	nop
 80110a0:	0801c864 	.word	0x0801c864
 80110a4:	0801c86c 	.word	0x0801c86c
 80110a8:	20010ecc 	.word	0x20010ecc
 80110ac:	20010ec8 	.word	0x20010ec8
 80110b0:	20010e8c 	.word	0x20010e8c
 80110b4:	20010ece 	.word	0x20010ece
 80110b8:	20010ec4 	.word	0x20010ec4
 80110bc:	20010ea4 	.word	0x20010ea4
 80110c0:	0801c4fc 	.word	0x0801c4fc
 80110c4:	0801c874 	.word	0x0801c874
 80110c8:	0801c548 	.word	0x0801c548
 80110cc:	0801c884 	.word	0x0801c884
 80110d0:	0801c894 	.word	0x0801c894
        off -= p->len;
 80110d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d6:	895b      	ldrh	r3, [r3, #10]
 80110d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80110e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ea:	2200      	movs	r2, #0
 80110ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80110f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110f6:	895b      	ldrh	r3, [r3, #10]
 80110f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d8e9      	bhi.n	80110d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011100:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011104:	4619      	mov	r1, r3
 8011106:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011108:	f7fb ff46 	bl	800cf98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011110:	4a91      	ldr	r2, [pc, #580]	; (8011358 <tcp_receive+0x888>)
 8011112:	6013      	str	r3, [r2, #0]
 8011114:	4b91      	ldr	r3, [pc, #580]	; (801135c <tcp_receive+0x88c>)
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	4a8f      	ldr	r2, [pc, #572]	; (8011358 <tcp_receive+0x888>)
 801111a:	6812      	ldr	r2, [r2, #0]
 801111c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801111e:	e00d      	b.n	801113c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011120:	4b8d      	ldr	r3, [pc, #564]	; (8011358 <tcp_receive+0x888>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	da06      	bge.n	801113c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	8b5b      	ldrh	r3, [r3, #26]
 8011132:	f043 0302 	orr.w	r3, r3, #2
 8011136:	b29a      	uxth	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801113c:	4b86      	ldr	r3, [pc, #536]	; (8011358 <tcp_receive+0x888>)
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	f2c0 842a 	blt.w	80119a0 <tcp_receive+0xed0>
 801114c:	4b82      	ldr	r3, [pc, #520]	; (8011358 <tcp_receive+0x888>)
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011154:	6879      	ldr	r1, [r7, #4]
 8011156:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011158:	440b      	add	r3, r1
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	3301      	adds	r3, #1
 801115e:	2b00      	cmp	r3, #0
 8011160:	f300 841e 	bgt.w	80119a0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011168:	4b7b      	ldr	r3, [pc, #492]	; (8011358 <tcp_receive+0x888>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	429a      	cmp	r2, r3
 801116e:	f040 829a 	bne.w	80116a6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011172:	4b7a      	ldr	r3, [pc, #488]	; (801135c <tcp_receive+0x88c>)
 8011174:	891c      	ldrh	r4, [r3, #8]
 8011176:	4b79      	ldr	r3, [pc, #484]	; (801135c <tcp_receive+0x88c>)
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	899b      	ldrh	r3, [r3, #12]
 801117c:	b29b      	uxth	r3, r3
 801117e:	4618      	mov	r0, r3
 8011180:	f7fa fb5c 	bl	800b83c <lwip_htons>
 8011184:	4603      	mov	r3, r0
 8011186:	b2db      	uxtb	r3, r3
 8011188:	f003 0303 	and.w	r3, r3, #3
 801118c:	2b00      	cmp	r3, #0
 801118e:	d001      	beq.n	8011194 <tcp_receive+0x6c4>
 8011190:	2301      	movs	r3, #1
 8011192:	e000      	b.n	8011196 <tcp_receive+0x6c6>
 8011194:	2300      	movs	r3, #0
 8011196:	4423      	add	r3, r4
 8011198:	b29a      	uxth	r2, r3
 801119a:	4b71      	ldr	r3, [pc, #452]	; (8011360 <tcp_receive+0x890>)
 801119c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111a2:	4b6f      	ldr	r3, [pc, #444]	; (8011360 <tcp_receive+0x890>)
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d275      	bcs.n	8011296 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111aa:	4b6c      	ldr	r3, [pc, #432]	; (801135c <tcp_receive+0x88c>)
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	899b      	ldrh	r3, [r3, #12]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fa fb42 	bl	800b83c <lwip_htons>
 80111b8:	4603      	mov	r3, r0
 80111ba:	b2db      	uxtb	r3, r3
 80111bc:	f003 0301 	and.w	r3, r3, #1
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d01f      	beq.n	8011204 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80111c4:	4b65      	ldr	r3, [pc, #404]	; (801135c <tcp_receive+0x88c>)
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	899b      	ldrh	r3, [r3, #12]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	b21b      	sxth	r3, r3
 80111ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111d2:	b21c      	sxth	r4, r3
 80111d4:	4b61      	ldr	r3, [pc, #388]	; (801135c <tcp_receive+0x88c>)
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	899b      	ldrh	r3, [r3, #12]
 80111da:	b29b      	uxth	r3, r3
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fa fb2d 	bl	800b83c <lwip_htons>
 80111e2:	4603      	mov	r3, r0
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fa fb24 	bl	800b83c <lwip_htons>
 80111f4:	4603      	mov	r3, r0
 80111f6:	b21b      	sxth	r3, r3
 80111f8:	4323      	orrs	r3, r4
 80111fa:	b21a      	sxth	r2, r3
 80111fc:	4b57      	ldr	r3, [pc, #348]	; (801135c <tcp_receive+0x88c>)
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	b292      	uxth	r2, r2
 8011202:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011208:	4b54      	ldr	r3, [pc, #336]	; (801135c <tcp_receive+0x88c>)
 801120a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801120c:	4b53      	ldr	r3, [pc, #332]	; (801135c <tcp_receive+0x88c>)
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	b29b      	uxth	r3, r3
 8011214:	4618      	mov	r0, r3
 8011216:	f7fa fb11 	bl	800b83c <lwip_htons>
 801121a:	4603      	mov	r3, r0
 801121c:	b2db      	uxtb	r3, r3
 801121e:	f003 0302 	and.w	r3, r3, #2
 8011222:	2b00      	cmp	r3, #0
 8011224:	d005      	beq.n	8011232 <tcp_receive+0x762>
            inseg.len -= 1;
 8011226:	4b4d      	ldr	r3, [pc, #308]	; (801135c <tcp_receive+0x88c>)
 8011228:	891b      	ldrh	r3, [r3, #8]
 801122a:	3b01      	subs	r3, #1
 801122c:	b29a      	uxth	r2, r3
 801122e:	4b4b      	ldr	r3, [pc, #300]	; (801135c <tcp_receive+0x88c>)
 8011230:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011232:	4b4a      	ldr	r3, [pc, #296]	; (801135c <tcp_receive+0x88c>)
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	4a49      	ldr	r2, [pc, #292]	; (801135c <tcp_receive+0x88c>)
 8011238:	8912      	ldrh	r2, [r2, #8]
 801123a:	4611      	mov	r1, r2
 801123c:	4618      	mov	r0, r3
 801123e:	f7fb fdab 	bl	800cd98 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011242:	4b46      	ldr	r3, [pc, #280]	; (801135c <tcp_receive+0x88c>)
 8011244:	891c      	ldrh	r4, [r3, #8]
 8011246:	4b45      	ldr	r3, [pc, #276]	; (801135c <tcp_receive+0x88c>)
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	899b      	ldrh	r3, [r3, #12]
 801124c:	b29b      	uxth	r3, r3
 801124e:	4618      	mov	r0, r3
 8011250:	f7fa faf4 	bl	800b83c <lwip_htons>
 8011254:	4603      	mov	r3, r0
 8011256:	b2db      	uxtb	r3, r3
 8011258:	f003 0303 	and.w	r3, r3, #3
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <tcp_receive+0x794>
 8011260:	2301      	movs	r3, #1
 8011262:	e000      	b.n	8011266 <tcp_receive+0x796>
 8011264:	2300      	movs	r3, #0
 8011266:	4423      	add	r3, r4
 8011268:	b29a      	uxth	r2, r3
 801126a:	4b3d      	ldr	r3, [pc, #244]	; (8011360 <tcp_receive+0x890>)
 801126c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801126e:	4b3c      	ldr	r3, [pc, #240]	; (8011360 <tcp_receive+0x890>)
 8011270:	881b      	ldrh	r3, [r3, #0]
 8011272:	461a      	mov	r2, r3
 8011274:	4b38      	ldr	r3, [pc, #224]	; (8011358 <tcp_receive+0x888>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	441a      	add	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127e:	6879      	ldr	r1, [r7, #4]
 8011280:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011282:	440b      	add	r3, r1
 8011284:	429a      	cmp	r2, r3
 8011286:	d006      	beq.n	8011296 <tcp_receive+0x7c6>
 8011288:	4b36      	ldr	r3, [pc, #216]	; (8011364 <tcp_receive+0x894>)
 801128a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801128e:	4936      	ldr	r1, [pc, #216]	; (8011368 <tcp_receive+0x898>)
 8011290:	4836      	ldr	r0, [pc, #216]	; (801136c <tcp_receive+0x89c>)
 8011292:	f007 ff0f 	bl	80190b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801129a:	2b00      	cmp	r3, #0
 801129c:	f000 80e7 	beq.w	801146e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80112a0:	4b2e      	ldr	r3, [pc, #184]	; (801135c <tcp_receive+0x88c>)
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fa fac7 	bl	800b83c <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d010      	beq.n	80112dc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80112ba:	e00a      	b.n	80112d2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f7fd fca6 	bl	800ec1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d1f0      	bne.n	80112bc <tcp_receive+0x7ec>
 80112da:	e0c8      	b.n	801146e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80112e2:	e052      	b.n	801138a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	899b      	ldrh	r3, [r3, #12]
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fa faa5 	bl	800b83c <lwip_htons>
 80112f2:	4603      	mov	r3, r0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	f003 0301 	and.w	r3, r3, #1
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d03d      	beq.n	801137a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112fe:	4b17      	ldr	r3, [pc, #92]	; (801135c <tcp_receive+0x88c>)
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	899b      	ldrh	r3, [r3, #12]
 8011304:	b29b      	uxth	r3, r3
 8011306:	4618      	mov	r0, r3
 8011308:	f7fa fa98 	bl	800b83c <lwip_htons>
 801130c:	4603      	mov	r3, r0
 801130e:	b2db      	uxtb	r3, r3
 8011310:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011314:	2b00      	cmp	r3, #0
 8011316:	d130      	bne.n	801137a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011318:	4b10      	ldr	r3, [pc, #64]	; (801135c <tcp_receive+0x88c>)
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	899b      	ldrh	r3, [r3, #12]
 801131e:	b29c      	uxth	r4, r3
 8011320:	2001      	movs	r0, #1
 8011322:	f7fa fa8b 	bl	800b83c <lwip_htons>
 8011326:	4603      	mov	r3, r0
 8011328:	461a      	mov	r2, r3
 801132a:	4b0c      	ldr	r3, [pc, #48]	; (801135c <tcp_receive+0x88c>)
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	4322      	orrs	r2, r4
 8011330:	b292      	uxth	r2, r2
 8011332:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011334:	4b09      	ldr	r3, [pc, #36]	; (801135c <tcp_receive+0x88c>)
 8011336:	891c      	ldrh	r4, [r3, #8]
 8011338:	4b08      	ldr	r3, [pc, #32]	; (801135c <tcp_receive+0x88c>)
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	899b      	ldrh	r3, [r3, #12]
 801133e:	b29b      	uxth	r3, r3
 8011340:	4618      	mov	r0, r3
 8011342:	f7fa fa7b 	bl	800b83c <lwip_htons>
 8011346:	4603      	mov	r3, r0
 8011348:	b2db      	uxtb	r3, r3
 801134a:	f003 0303 	and.w	r3, r3, #3
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00e      	beq.n	8011370 <tcp_receive+0x8a0>
 8011352:	2301      	movs	r3, #1
 8011354:	e00d      	b.n	8011372 <tcp_receive+0x8a2>
 8011356:	bf00      	nop
 8011358:	20010ec4 	.word	0x20010ec4
 801135c:	20010ea4 	.word	0x20010ea4
 8011360:	20010ece 	.word	0x20010ece
 8011364:	0801c4fc 	.word	0x0801c4fc
 8011368:	0801c8a4 	.word	0x0801c8a4
 801136c:	0801c548 	.word	0x0801c548
 8011370:	2300      	movs	r3, #0
 8011372:	4423      	add	r3, r4
 8011374:	b29a      	uxth	r2, r3
 8011376:	4b98      	ldr	r3, [pc, #608]	; (80115d8 <tcp_receive+0xb08>)
 8011378:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801137a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801137e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011384:	6938      	ldr	r0, [r7, #16]
 8011386:	f7fd fc4a 	bl	800ec1e <tcp_seg_free>
            while (next &&
 801138a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00e      	beq.n	80113ae <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011390:	4b91      	ldr	r3, [pc, #580]	; (80115d8 <tcp_receive+0xb08>)
 8011392:	881b      	ldrh	r3, [r3, #0]
 8011394:	461a      	mov	r2, r3
 8011396:	4b91      	ldr	r3, [pc, #580]	; (80115dc <tcp_receive+0xb0c>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	441a      	add	r2, r3
 801139c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80113a4:	8909      	ldrh	r1, [r1, #8]
 80113a6:	440b      	add	r3, r1
 80113a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	da9a      	bge.n	80112e4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80113ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d059      	beq.n	8011468 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80113b4:	4b88      	ldr	r3, [pc, #544]	; (80115d8 <tcp_receive+0xb08>)
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	461a      	mov	r2, r3
 80113ba:	4b88      	ldr	r3, [pc, #544]	; (80115dc <tcp_receive+0xb0c>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	441a      	add	r2, r3
 80113c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	dd4d      	ble.n	8011468 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80113cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	4b81      	ldr	r3, [pc, #516]	; (80115dc <tcp_receive+0xb0c>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	b29b      	uxth	r3, r3
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	b29a      	uxth	r2, r3
 80113de:	4b80      	ldr	r3, [pc, #512]	; (80115e0 <tcp_receive+0xb10>)
 80113e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113e2:	4b7f      	ldr	r3, [pc, #508]	; (80115e0 <tcp_receive+0xb10>)
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	899b      	ldrh	r3, [r3, #12]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fa fa26 	bl	800b83c <lwip_htons>
 80113f0:	4603      	mov	r3, r0
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	f003 0302 	and.w	r3, r3, #2
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d005      	beq.n	8011408 <tcp_receive+0x938>
                inseg.len -= 1;
 80113fc:	4b78      	ldr	r3, [pc, #480]	; (80115e0 <tcp_receive+0xb10>)
 80113fe:	891b      	ldrh	r3, [r3, #8]
 8011400:	3b01      	subs	r3, #1
 8011402:	b29a      	uxth	r2, r3
 8011404:	4b76      	ldr	r3, [pc, #472]	; (80115e0 <tcp_receive+0xb10>)
 8011406:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011408:	4b75      	ldr	r3, [pc, #468]	; (80115e0 <tcp_receive+0xb10>)
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	4a74      	ldr	r2, [pc, #464]	; (80115e0 <tcp_receive+0xb10>)
 801140e:	8912      	ldrh	r2, [r2, #8]
 8011410:	4611      	mov	r1, r2
 8011412:	4618      	mov	r0, r3
 8011414:	f7fb fcc0 	bl	800cd98 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011418:	4b71      	ldr	r3, [pc, #452]	; (80115e0 <tcp_receive+0xb10>)
 801141a:	891c      	ldrh	r4, [r3, #8]
 801141c:	4b70      	ldr	r3, [pc, #448]	; (80115e0 <tcp_receive+0xb10>)
 801141e:	68db      	ldr	r3, [r3, #12]
 8011420:	899b      	ldrh	r3, [r3, #12]
 8011422:	b29b      	uxth	r3, r3
 8011424:	4618      	mov	r0, r3
 8011426:	f7fa fa09 	bl	800b83c <lwip_htons>
 801142a:	4603      	mov	r3, r0
 801142c:	b2db      	uxtb	r3, r3
 801142e:	f003 0303 	and.w	r3, r3, #3
 8011432:	2b00      	cmp	r3, #0
 8011434:	d001      	beq.n	801143a <tcp_receive+0x96a>
 8011436:	2301      	movs	r3, #1
 8011438:	e000      	b.n	801143c <tcp_receive+0x96c>
 801143a:	2300      	movs	r3, #0
 801143c:	4423      	add	r3, r4
 801143e:	b29a      	uxth	r2, r3
 8011440:	4b65      	ldr	r3, [pc, #404]	; (80115d8 <tcp_receive+0xb08>)
 8011442:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011444:	4b64      	ldr	r3, [pc, #400]	; (80115d8 <tcp_receive+0xb08>)
 8011446:	881b      	ldrh	r3, [r3, #0]
 8011448:	461a      	mov	r2, r3
 801144a:	4b64      	ldr	r3, [pc, #400]	; (80115dc <tcp_receive+0xb0c>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	441a      	add	r2, r3
 8011450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	685b      	ldr	r3, [r3, #4]
 8011456:	429a      	cmp	r2, r3
 8011458:	d006      	beq.n	8011468 <tcp_receive+0x998>
 801145a:	4b62      	ldr	r3, [pc, #392]	; (80115e4 <tcp_receive+0xb14>)
 801145c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011460:	4961      	ldr	r1, [pc, #388]	; (80115e8 <tcp_receive+0xb18>)
 8011462:	4862      	ldr	r0, [pc, #392]	; (80115ec <tcp_receive+0xb1c>)
 8011464:	f007 fe26 	bl	80190b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801146c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801146e:	4b5a      	ldr	r3, [pc, #360]	; (80115d8 <tcp_receive+0xb08>)
 8011470:	881b      	ldrh	r3, [r3, #0]
 8011472:	461a      	mov	r2, r3
 8011474:	4b59      	ldr	r3, [pc, #356]	; (80115dc <tcp_receive+0xb0c>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	441a      	add	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011482:	4b55      	ldr	r3, [pc, #340]	; (80115d8 <tcp_receive+0xb08>)
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	429a      	cmp	r2, r3
 8011488:	d206      	bcs.n	8011498 <tcp_receive+0x9c8>
 801148a:	4b56      	ldr	r3, [pc, #344]	; (80115e4 <tcp_receive+0xb14>)
 801148c:	f240 6207 	movw	r2, #1543	; 0x607
 8011490:	4957      	ldr	r1, [pc, #348]	; (80115f0 <tcp_receive+0xb20>)
 8011492:	4856      	ldr	r0, [pc, #344]	; (80115ec <tcp_receive+0xb1c>)
 8011494:	f007 fe0e 	bl	80190b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801149c:	4b4e      	ldr	r3, [pc, #312]	; (80115d8 <tcp_receive+0xb08>)
 801149e:	881b      	ldrh	r3, [r3, #0]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7fc fd7b 	bl	800dfa4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80114ae:	4b4c      	ldr	r3, [pc, #304]	; (80115e0 <tcp_receive+0xb10>)
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	891b      	ldrh	r3, [r3, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80114b8:	4b49      	ldr	r3, [pc, #292]	; (80115e0 <tcp_receive+0xb10>)
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	4a4d      	ldr	r2, [pc, #308]	; (80115f4 <tcp_receive+0xb24>)
 80114be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80114c0:	4b47      	ldr	r3, [pc, #284]	; (80115e0 <tcp_receive+0xb10>)
 80114c2:	2200      	movs	r2, #0
 80114c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80114c6:	4b46      	ldr	r3, [pc, #280]	; (80115e0 <tcp_receive+0xb10>)
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	899b      	ldrh	r3, [r3, #12]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fa f9b4 	bl	800b83c <lwip_htons>
 80114d4:	4603      	mov	r3, r0
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	f003 0301 	and.w	r3, r3, #1
 80114dc:	2b00      	cmp	r3, #0
 80114de:	f000 80b8 	beq.w	8011652 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80114e2:	4b45      	ldr	r3, [pc, #276]	; (80115f8 <tcp_receive+0xb28>)
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	f043 0320 	orr.w	r3, r3, #32
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	4b42      	ldr	r3, [pc, #264]	; (80115f8 <tcp_receive+0xb28>)
 80114ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114f0:	e0af      	b.n	8011652 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	4a36      	ldr	r2, [pc, #216]	; (80115dc <tcp_receive+0xb0c>)
 8011502:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	891b      	ldrh	r3, [r3, #8]
 8011508:	461c      	mov	r4, r3
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	899b      	ldrh	r3, [r3, #12]
 8011510:	b29b      	uxth	r3, r3
 8011512:	4618      	mov	r0, r3
 8011514:	f7fa f992 	bl	800b83c <lwip_htons>
 8011518:	4603      	mov	r3, r0
 801151a:	b2db      	uxtb	r3, r3
 801151c:	f003 0303 	and.w	r3, r3, #3
 8011520:	2b00      	cmp	r3, #0
 8011522:	d001      	beq.n	8011528 <tcp_receive+0xa58>
 8011524:	2301      	movs	r3, #1
 8011526:	e000      	b.n	801152a <tcp_receive+0xa5a>
 8011528:	2300      	movs	r3, #0
 801152a:	191a      	adds	r2, r3, r4
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011530:	441a      	add	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801153a:	461c      	mov	r4, r3
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	891b      	ldrh	r3, [r3, #8]
 8011540:	461d      	mov	r5, r3
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	899b      	ldrh	r3, [r3, #12]
 8011548:	b29b      	uxth	r3, r3
 801154a:	4618      	mov	r0, r3
 801154c:	f7fa f976 	bl	800b83c <lwip_htons>
 8011550:	4603      	mov	r3, r0
 8011552:	b2db      	uxtb	r3, r3
 8011554:	f003 0303 	and.w	r3, r3, #3
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <tcp_receive+0xa90>
 801155c:	2301      	movs	r3, #1
 801155e:	e000      	b.n	8011562 <tcp_receive+0xa92>
 8011560:	2300      	movs	r3, #0
 8011562:	442b      	add	r3, r5
 8011564:	429c      	cmp	r4, r3
 8011566:	d206      	bcs.n	8011576 <tcp_receive+0xaa6>
 8011568:	4b1e      	ldr	r3, [pc, #120]	; (80115e4 <tcp_receive+0xb14>)
 801156a:	f240 622b 	movw	r2, #1579	; 0x62b
 801156e:	4923      	ldr	r1, [pc, #140]	; (80115fc <tcp_receive+0xb2c>)
 8011570:	481e      	ldr	r0, [pc, #120]	; (80115ec <tcp_receive+0xb1c>)
 8011572:	f007 fd9f 	bl	80190b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	891b      	ldrh	r3, [r3, #8]
 801157a:	461c      	mov	r4, r3
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	899b      	ldrh	r3, [r3, #12]
 8011582:	b29b      	uxth	r3, r3
 8011584:	4618      	mov	r0, r3
 8011586:	f7fa f959 	bl	800b83c <lwip_htons>
 801158a:	4603      	mov	r3, r0
 801158c:	b2db      	uxtb	r3, r3
 801158e:	f003 0303 	and.w	r3, r3, #3
 8011592:	2b00      	cmp	r3, #0
 8011594:	d001      	beq.n	801159a <tcp_receive+0xaca>
 8011596:	2301      	movs	r3, #1
 8011598:	e000      	b.n	801159c <tcp_receive+0xacc>
 801159a:	2300      	movs	r3, #0
 801159c:	1919      	adds	r1, r3, r4
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115a2:	b28b      	uxth	r3, r1
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f7fc fcf9 	bl	800dfa4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	891b      	ldrh	r3, [r3, #8]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d028      	beq.n	801160e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80115bc:	4b0d      	ldr	r3, [pc, #52]	; (80115f4 <tcp_receive+0xb24>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d01d      	beq.n	8011600 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80115c4:	4b0b      	ldr	r3, [pc, #44]	; (80115f4 <tcp_receive+0xb24>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	4619      	mov	r1, r3
 80115ce:	4610      	mov	r0, r2
 80115d0:	f7fb fe36 	bl	800d240 <pbuf_cat>
 80115d4:	e018      	b.n	8011608 <tcp_receive+0xb38>
 80115d6:	bf00      	nop
 80115d8:	20010ece 	.word	0x20010ece
 80115dc:	20010ec4 	.word	0x20010ec4
 80115e0:	20010ea4 	.word	0x20010ea4
 80115e4:	0801c4fc 	.word	0x0801c4fc
 80115e8:	0801c8dc 	.word	0x0801c8dc
 80115ec:	0801c548 	.word	0x0801c548
 80115f0:	0801c918 	.word	0x0801c918
 80115f4:	20010ed4 	.word	0x20010ed4
 80115f8:	20010ed1 	.word	0x20010ed1
 80115fc:	0801c938 	.word	0x0801c938
            } else {
              recv_data = cseg->p;
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	4a70      	ldr	r2, [pc, #448]	; (80117c8 <tcp_receive+0xcf8>)
 8011606:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2200      	movs	r2, #0
 801160c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	899b      	ldrh	r3, [r3, #12]
 8011614:	b29b      	uxth	r3, r3
 8011616:	4618      	mov	r0, r3
 8011618:	f7fa f910 	bl	800b83c <lwip_htons>
 801161c:	4603      	mov	r3, r0
 801161e:	b2db      	uxtb	r3, r3
 8011620:	f003 0301 	and.w	r3, r3, #1
 8011624:	2b00      	cmp	r3, #0
 8011626:	d00d      	beq.n	8011644 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011628:	4b68      	ldr	r3, [pc, #416]	; (80117cc <tcp_receive+0xcfc>)
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	f043 0320 	orr.w	r3, r3, #32
 8011630:	b2da      	uxtb	r2, r3
 8011632:	4b66      	ldr	r3, [pc, #408]	; (80117cc <tcp_receive+0xcfc>)
 8011634:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	7d1b      	ldrb	r3, [r3, #20]
 801163a:	2b04      	cmp	r3, #4
 801163c:	d102      	bne.n	8011644 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2207      	movs	r2, #7
 8011642:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801164c:	68b8      	ldr	r0, [r7, #8]
 801164e:	f7fd fae6 	bl	800ec1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011656:	2b00      	cmp	r3, #0
 8011658:	d008      	beq.n	801166c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	685a      	ldr	r2, [r3, #4]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011666:	429a      	cmp	r2, r3
 8011668:	f43f af43 	beq.w	80114f2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	8b5b      	ldrh	r3, [r3, #26]
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	d00e      	beq.n	8011696 <tcp_receive+0xbc6>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8b5b      	ldrh	r3, [r3, #26]
 801167c:	f023 0301 	bic.w	r3, r3, #1
 8011680:	b29a      	uxth	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	835a      	strh	r2, [r3, #26]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	8b5b      	ldrh	r3, [r3, #26]
 801168a:	f043 0302 	orr.w	r3, r3, #2
 801168e:	b29a      	uxth	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011694:	e188      	b.n	80119a8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8b5b      	ldrh	r3, [r3, #26]
 801169a:	f043 0301 	orr.w	r3, r3, #1
 801169e:	b29a      	uxth	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80116a4:	e180      	b.n	80119a8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d106      	bne.n	80116bc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80116ae:	4848      	ldr	r0, [pc, #288]	; (80117d0 <tcp_receive+0xd00>)
 80116b0:	f7fd faec 	bl	800ec8c <tcp_seg_copy>
 80116b4:	4602      	mov	r2, r0
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	675a      	str	r2, [r3, #116]	; 0x74
 80116ba:	e16d      	b.n	8011998 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80116bc:	2300      	movs	r3, #0
 80116be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80116c6:	e157      	b.n	8011978 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80116c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	4b41      	ldr	r3, [pc, #260]	; (80117d4 <tcp_receive+0xd04>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d11d      	bne.n	8011712 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80116d6:	4b3e      	ldr	r3, [pc, #248]	; (80117d0 <tcp_receive+0xd00>)
 80116d8:	891a      	ldrh	r2, [r3, #8]
 80116da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116dc:	891b      	ldrh	r3, [r3, #8]
 80116de:	429a      	cmp	r2, r3
 80116e0:	f240 814f 	bls.w	8011982 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116e4:	483a      	ldr	r0, [pc, #232]	; (80117d0 <tcp_receive+0xd00>)
 80116e6:	f7fd fad1 	bl	800ec8c <tcp_seg_copy>
 80116ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 8149 	beq.w	8011986 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80116f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d003      	beq.n	8011702 <tcp_receive+0xc32>
                    prev->next = cseg;
 80116fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116fc:	697a      	ldr	r2, [r7, #20]
 80116fe:	601a      	str	r2, [r3, #0]
 8011700:	e002      	b.n	8011708 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	697a      	ldr	r2, [r7, #20]
 8011706:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801170a:	6978      	ldr	r0, [r7, #20]
 801170c:	f7ff f8dc 	bl	80108c8 <tcp_oos_insert_segment>
                }
                break;
 8011710:	e139      	b.n	8011986 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011714:	2b00      	cmp	r3, #0
 8011716:	d117      	bne.n	8011748 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011718:	4b2e      	ldr	r3, [pc, #184]	; (80117d4 <tcp_receive+0xd04>)
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	da57      	bge.n	80117d8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011728:	4829      	ldr	r0, [pc, #164]	; (80117d0 <tcp_receive+0xd00>)
 801172a:	f7fd faaf 	bl	800ec8c <tcp_seg_copy>
 801172e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	2b00      	cmp	r3, #0
 8011734:	f000 8129 	beq.w	801198a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	69ba      	ldr	r2, [r7, #24]
 801173c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801173e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011740:	69b8      	ldr	r0, [r7, #24]
 8011742:	f7ff f8c1 	bl	80108c8 <tcp_oos_insert_segment>
                  }
                  break;
 8011746:	e120      	b.n	801198a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011748:	4b22      	ldr	r3, [pc, #136]	; (80117d4 <tcp_receive+0xd04>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801174e:	68db      	ldr	r3, [r3, #12]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	1ad3      	subs	r3, r2, r3
 8011754:	3b01      	subs	r3, #1
 8011756:	2b00      	cmp	r3, #0
 8011758:	db3e      	blt.n	80117d8 <tcp_receive+0xd08>
 801175a:	4b1e      	ldr	r3, [pc, #120]	; (80117d4 <tcp_receive+0xd04>)
 801175c:	681a      	ldr	r2, [r3, #0]
 801175e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	3301      	adds	r3, #1
 8011768:	2b00      	cmp	r3, #0
 801176a:	dc35      	bgt.n	80117d8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801176c:	4818      	ldr	r0, [pc, #96]	; (80117d0 <tcp_receive+0xd00>)
 801176e:	f7fd fa8d 	bl	800ec8c <tcp_seg_copy>
 8011772:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	2b00      	cmp	r3, #0
 8011778:	f000 8109 	beq.w	801198e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011784:	8912      	ldrh	r2, [r2, #8]
 8011786:	441a      	add	r2, r3
 8011788:	4b12      	ldr	r3, [pc, #72]	; (80117d4 <tcp_receive+0xd04>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	1ad3      	subs	r3, r2, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	dd12      	ble.n	80117b8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011792:	4b10      	ldr	r3, [pc, #64]	; (80117d4 <tcp_receive+0xd04>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	b29a      	uxth	r2, r3
 8011798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	b29b      	uxth	r3, r3
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80117a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117aa:	685a      	ldr	r2, [r3, #4]
 80117ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ae:	891b      	ldrh	r3, [r3, #8]
 80117b0:	4619      	mov	r1, r3
 80117b2:	4610      	mov	r0, r2
 80117b4:	f7fb faf0 	bl	800cd98 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80117b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ba:	69fa      	ldr	r2, [r7, #28]
 80117bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80117be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117c0:	69f8      	ldr	r0, [r7, #28]
 80117c2:	f7ff f881 	bl	80108c8 <tcp_oos_insert_segment>
                  }
                  break;
 80117c6:	e0e2      	b.n	801198e <tcp_receive+0xebe>
 80117c8:	20010ed4 	.word	0x20010ed4
 80117cc:	20010ed1 	.word	0x20010ed1
 80117d0:	20010ea4 	.word	0x20010ea4
 80117d4:	20010ec4 	.word	0x20010ec4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80117d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117da:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80117dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f040 80c6 	bne.w	8011972 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80117e6:	4b80      	ldr	r3, [pc, #512]	; (80119e8 <tcp_receive+0xf18>)
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f340 80bd 	ble.w	8011972 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	899b      	ldrh	r3, [r3, #12]
 80117fe:	b29b      	uxth	r3, r3
 8011800:	4618      	mov	r0, r3
 8011802:	f7fa f81b 	bl	800b83c <lwip_htons>
 8011806:	4603      	mov	r3, r0
 8011808:	b2db      	uxtb	r3, r3
 801180a:	f003 0301 	and.w	r3, r3, #1
 801180e:	2b00      	cmp	r3, #0
 8011810:	f040 80bf 	bne.w	8011992 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011814:	4875      	ldr	r0, [pc, #468]	; (80119ec <tcp_receive+0xf1c>)
 8011816:	f7fd fa39 	bl	800ec8c <tcp_seg_copy>
 801181a:	4602      	mov	r2, r0
 801181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 80b6 	beq.w	8011996 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011832:	8912      	ldrh	r2, [r2, #8]
 8011834:	441a      	add	r2, r3
 8011836:	4b6c      	ldr	r3, [pc, #432]	; (80119e8 <tcp_receive+0xf18>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	1ad3      	subs	r3, r2, r3
 801183c:	2b00      	cmp	r3, #0
 801183e:	dd12      	ble.n	8011866 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011840:	4b69      	ldr	r3, [pc, #420]	; (80119e8 <tcp_receive+0xf18>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	b29a      	uxth	r2, r3
 8011846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	b29b      	uxth	r3, r3
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	b29a      	uxth	r2, r3
 8011852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011854:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011858:	685a      	ldr	r2, [r3, #4]
 801185a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185c:	891b      	ldrh	r3, [r3, #8]
 801185e:	4619      	mov	r1, r3
 8011860:	4610      	mov	r0, r2
 8011862:	f7fb fa99 	bl	800cd98 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011866:	4b62      	ldr	r3, [pc, #392]	; (80119f0 <tcp_receive+0xf20>)
 8011868:	881b      	ldrh	r3, [r3, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	4b5e      	ldr	r3, [pc, #376]	; (80119e8 <tcp_receive+0xf18>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	441a      	add	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011876:	6879      	ldr	r1, [r7, #4]
 8011878:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801187a:	440b      	add	r3, r1
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	2b00      	cmp	r3, #0
 8011880:	f340 8089 	ble.w	8011996 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	899b      	ldrh	r3, [r3, #12]
 801188c:	b29b      	uxth	r3, r3
 801188e:	4618      	mov	r0, r3
 8011890:	f7f9 ffd4 	bl	800b83c <lwip_htons>
 8011894:	4603      	mov	r3, r0
 8011896:	b2db      	uxtb	r3, r3
 8011898:	f003 0301 	and.w	r3, r3, #1
 801189c:	2b00      	cmp	r3, #0
 801189e:	d022      	beq.n	80118e6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	b21b      	sxth	r3, r3
 80118ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80118b0:	b21c      	sxth	r4, r3
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	4618      	mov	r0, r3
 80118be:	f7f9 ffbd 	bl	800b83c <lwip_htons>
 80118c2:	4603      	mov	r3, r0
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7f9 ffb4 	bl	800b83c <lwip_htons>
 80118d4:	4603      	mov	r3, r0
 80118d6:	b21b      	sxth	r3, r3
 80118d8:	4323      	orrs	r3, r4
 80118da:	b21a      	sxth	r2, r3
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	b292      	uxth	r2, r2
 80118e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118f0:	4413      	add	r3, r2
 80118f2:	b299      	uxth	r1, r3
 80118f4:	4b3c      	ldr	r3, [pc, #240]	; (80119e8 <tcp_receive+0xf18>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	1a8a      	subs	r2, r1, r2
 8011900:	b292      	uxth	r2, r2
 8011902:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	685a      	ldr	r2, [r3, #4]
 801190a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	891b      	ldrh	r3, [r3, #8]
 8011910:	4619      	mov	r1, r3
 8011912:	4610      	mov	r0, r2
 8011914:	f7fb fa40 	bl	800cd98 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	891c      	ldrh	r4, [r3, #8]
 801191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	899b      	ldrh	r3, [r3, #12]
 8011926:	b29b      	uxth	r3, r3
 8011928:	4618      	mov	r0, r3
 801192a:	f7f9 ff87 	bl	800b83c <lwip_htons>
 801192e:	4603      	mov	r3, r0
 8011930:	b2db      	uxtb	r3, r3
 8011932:	f003 0303 	and.w	r3, r3, #3
 8011936:	2b00      	cmp	r3, #0
 8011938:	d001      	beq.n	801193e <tcp_receive+0xe6e>
 801193a:	2301      	movs	r3, #1
 801193c:	e000      	b.n	8011940 <tcp_receive+0xe70>
 801193e:	2300      	movs	r3, #0
 8011940:	4423      	add	r3, r4
 8011942:	b29a      	uxth	r2, r3
 8011944:	4b2a      	ldr	r3, [pc, #168]	; (80119f0 <tcp_receive+0xf20>)
 8011946:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011948:	4b29      	ldr	r3, [pc, #164]	; (80119f0 <tcp_receive+0xf20>)
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	461a      	mov	r2, r3
 801194e:	4b26      	ldr	r3, [pc, #152]	; (80119e8 <tcp_receive+0xf18>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	441a      	add	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011958:	6879      	ldr	r1, [r7, #4]
 801195a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801195c:	440b      	add	r3, r1
 801195e:	429a      	cmp	r2, r3
 8011960:	d019      	beq.n	8011996 <tcp_receive+0xec6>
 8011962:	4b24      	ldr	r3, [pc, #144]	; (80119f4 <tcp_receive+0xf24>)
 8011964:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011968:	4923      	ldr	r1, [pc, #140]	; (80119f8 <tcp_receive+0xf28>)
 801196a:	4824      	ldr	r0, [pc, #144]	; (80119fc <tcp_receive+0xf2c>)
 801196c:	f007 fba2 	bl	80190b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011970:	e011      	b.n	8011996 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	63bb      	str	r3, [r7, #56]	; 0x38
 8011978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197a:	2b00      	cmp	r3, #0
 801197c:	f47f aea4 	bne.w	80116c8 <tcp_receive+0xbf8>
 8011980:	e00a      	b.n	8011998 <tcp_receive+0xec8>
                break;
 8011982:	bf00      	nop
 8011984:	e008      	b.n	8011998 <tcp_receive+0xec8>
                break;
 8011986:	bf00      	nop
 8011988:	e006      	b.n	8011998 <tcp_receive+0xec8>
                  break;
 801198a:	bf00      	nop
 801198c:	e004      	b.n	8011998 <tcp_receive+0xec8>
                  break;
 801198e:	bf00      	nop
 8011990:	e002      	b.n	8011998 <tcp_receive+0xec8>
                  break;
 8011992:	bf00      	nop
 8011994:	e000      	b.n	8011998 <tcp_receive+0xec8>
                break;
 8011996:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f001 fe8b 	bl	80136b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801199e:	e003      	b.n	80119a8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f001 fe87 	bl	80136b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80119a6:	e01a      	b.n	80119de <tcp_receive+0xf0e>
 80119a8:	e019      	b.n	80119de <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80119aa:	4b0f      	ldr	r3, [pc, #60]	; (80119e8 <tcp_receive+0xf18>)
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	db0a      	blt.n	80119ce <tcp_receive+0xefe>
 80119b8:	4b0b      	ldr	r3, [pc, #44]	; (80119e8 <tcp_receive+0xf18>)
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c0:	6879      	ldr	r1, [r7, #4]
 80119c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119c4:	440b      	add	r3, r1
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	3301      	adds	r3, #1
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	dd07      	ble.n	80119de <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	8b5b      	ldrh	r3, [r3, #26]
 80119d2:	f043 0302 	orr.w	r3, r3, #2
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80119dc:	e7ff      	b.n	80119de <tcp_receive+0xf0e>
 80119de:	bf00      	nop
 80119e0:	3750      	adds	r7, #80	; 0x50
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bdb0      	pop	{r4, r5, r7, pc}
 80119e6:	bf00      	nop
 80119e8:	20010ec4 	.word	0x20010ec4
 80119ec:	20010ea4 	.word	0x20010ea4
 80119f0:	20010ece 	.word	0x20010ece
 80119f4:	0801c4fc 	.word	0x0801c4fc
 80119f8:	0801c8a4 	.word	0x0801c8a4
 80119fc:	0801c548 	.word	0x0801c548

08011a00 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011a06:	4b15      	ldr	r3, [pc, #84]	; (8011a5c <tcp_get_next_optbyte+0x5c>)
 8011a08:	881b      	ldrh	r3, [r3, #0]
 8011a0a:	1c5a      	adds	r2, r3, #1
 8011a0c:	b291      	uxth	r1, r2
 8011a0e:	4a13      	ldr	r2, [pc, #76]	; (8011a5c <tcp_get_next_optbyte+0x5c>)
 8011a10:	8011      	strh	r1, [r2, #0]
 8011a12:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011a14:	4b12      	ldr	r3, [pc, #72]	; (8011a60 <tcp_get_next_optbyte+0x60>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d004      	beq.n	8011a26 <tcp_get_next_optbyte+0x26>
 8011a1c:	4b11      	ldr	r3, [pc, #68]	; (8011a64 <tcp_get_next_optbyte+0x64>)
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	88fa      	ldrh	r2, [r7, #6]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d208      	bcs.n	8011a38 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011a26:	4b10      	ldr	r3, [pc, #64]	; (8011a68 <tcp_get_next_optbyte+0x68>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	3314      	adds	r3, #20
 8011a2c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011a2e:	88fb      	ldrh	r3, [r7, #6]
 8011a30:	683a      	ldr	r2, [r7, #0]
 8011a32:	4413      	add	r3, r2
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	e00b      	b.n	8011a50 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011a38:	88fb      	ldrh	r3, [r7, #6]
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	4b09      	ldr	r3, [pc, #36]	; (8011a64 <tcp_get_next_optbyte+0x64>)
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a46:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <tcp_get_next_optbyte+0x60>)
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	797b      	ldrb	r3, [r7, #5]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr
 8011a5c:	20010ec0 	.word	0x20010ec0
 8011a60:	20010ebc 	.word	0x20010ebc
 8011a64:	20010eba 	.word	0x20010eba
 8011a68:	20010eb4 	.word	0x20010eb4

08011a6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d106      	bne.n	8011a88 <tcp_parseopt+0x1c>
 8011a7a:	4b32      	ldr	r3, [pc, #200]	; (8011b44 <tcp_parseopt+0xd8>)
 8011a7c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a80:	4931      	ldr	r1, [pc, #196]	; (8011b48 <tcp_parseopt+0xdc>)
 8011a82:	4832      	ldr	r0, [pc, #200]	; (8011b4c <tcp_parseopt+0xe0>)
 8011a84:	f007 fb16 	bl	80190b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a88:	4b31      	ldr	r3, [pc, #196]	; (8011b50 <tcp_parseopt+0xe4>)
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d055      	beq.n	8011b3c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a90:	4b30      	ldr	r3, [pc, #192]	; (8011b54 <tcp_parseopt+0xe8>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	801a      	strh	r2, [r3, #0]
 8011a96:	e045      	b.n	8011b24 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011a98:	f7ff ffb2 	bl	8011a00 <tcp_get_next_optbyte>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011aa0:	7bfb      	ldrb	r3, [r7, #15]
 8011aa2:	2b02      	cmp	r3, #2
 8011aa4:	d006      	beq.n	8011ab4 <tcp_parseopt+0x48>
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	dc2b      	bgt.n	8011b02 <tcp_parseopt+0x96>
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d041      	beq.n	8011b32 <tcp_parseopt+0xc6>
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d127      	bne.n	8011b02 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011ab2:	e037      	b.n	8011b24 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011ab4:	f7ff ffa4 	bl	8011a00 <tcp_get_next_optbyte>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b04      	cmp	r3, #4
 8011abc:	d13b      	bne.n	8011b36 <tcp_parseopt+0xca>
 8011abe:	4b25      	ldr	r3, [pc, #148]	; (8011b54 <tcp_parseopt+0xe8>)
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	4a22      	ldr	r2, [pc, #136]	; (8011b50 <tcp_parseopt+0xe4>)
 8011ac6:	8812      	ldrh	r2, [r2, #0]
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	da34      	bge.n	8011b36 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011acc:	f7ff ff98 	bl	8011a00 <tcp_get_next_optbyte>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	021b      	lsls	r3, r3, #8
 8011ad6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011ad8:	f7ff ff92 	bl	8011a00 <tcp_get_next_optbyte>
 8011adc:	4603      	mov	r3, r0
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	89bb      	ldrh	r3, [r7, #12]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011ae6:	89bb      	ldrh	r3, [r7, #12]
 8011ae8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011aec:	d804      	bhi.n	8011af8 <tcp_parseopt+0x8c>
 8011aee:	89bb      	ldrh	r3, [r7, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d001      	beq.n	8011af8 <tcp_parseopt+0x8c>
 8011af4:	89ba      	ldrh	r2, [r7, #12]
 8011af6:	e001      	b.n	8011afc <tcp_parseopt+0x90>
 8011af8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011b00:	e010      	b.n	8011b24 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011b02:	f7ff ff7d 	bl	8011a00 <tcp_get_next_optbyte>
 8011b06:	4603      	mov	r3, r0
 8011b08:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011b0a:	7afb      	ldrb	r3, [r7, #11]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d914      	bls.n	8011b3a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011b10:	7afb      	ldrb	r3, [r7, #11]
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	4b0f      	ldr	r3, [pc, #60]	; (8011b54 <tcp_parseopt+0xe8>)
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	4413      	add	r3, r2
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	3b02      	subs	r3, #2
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	4b0c      	ldr	r3, [pc, #48]	; (8011b54 <tcp_parseopt+0xe8>)
 8011b22:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011b24:	4b0b      	ldr	r3, [pc, #44]	; (8011b54 <tcp_parseopt+0xe8>)
 8011b26:	881a      	ldrh	r2, [r3, #0]
 8011b28:	4b09      	ldr	r3, [pc, #36]	; (8011b50 <tcp_parseopt+0xe4>)
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d3b3      	bcc.n	8011a98 <tcp_parseopt+0x2c>
 8011b30:	e004      	b.n	8011b3c <tcp_parseopt+0xd0>
          return;
 8011b32:	bf00      	nop
 8011b34:	e002      	b.n	8011b3c <tcp_parseopt+0xd0>
            return;
 8011b36:	bf00      	nop
 8011b38:	e000      	b.n	8011b3c <tcp_parseopt+0xd0>
            return;
 8011b3a:	bf00      	nop
      }
    }
  }
}
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	0801c4fc 	.word	0x0801c4fc
 8011b48:	0801c960 	.word	0x0801c960
 8011b4c:	0801c548 	.word	0x0801c548
 8011b50:	20010eb8 	.word	0x20010eb8
 8011b54:	20010ec0 	.word	0x20010ec0

08011b58 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b5c:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <tcp_trigger_input_pcb_close+0x1c>)
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	f043 0310 	orr.w	r3, r3, #16
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	4b03      	ldr	r3, [pc, #12]	; (8011b74 <tcp_trigger_input_pcb_close+0x1c>)
 8011b68:	701a      	strb	r2, [r3, #0]
}
 8011b6a:	bf00      	nop
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	20010ed1 	.word	0x20010ed1

08011b78 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00a      	beq.n	8011ba0 <tcp_route+0x28>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	7a1b      	ldrb	r3, [r3, #8]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d006      	beq.n	8011ba0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	7a1b      	ldrb	r3, [r3, #8]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fa fef6 	bl	800c988 <netif_get_by_index>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	e003      	b.n	8011ba8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f005 fca9 	bl	80174f8 <ip4_route>
 8011ba6:	4603      	mov	r3, r0
  }
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b087      	sub	sp, #28
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	603b      	str	r3, [r7, #0]
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d105      	bne.n	8011bd2 <tcp_create_segment+0x22>
 8011bc6:	4b44      	ldr	r3, [pc, #272]	; (8011cd8 <tcp_create_segment+0x128>)
 8011bc8:	22a3      	movs	r2, #163	; 0xa3
 8011bca:	4944      	ldr	r1, [pc, #272]	; (8011cdc <tcp_create_segment+0x12c>)
 8011bcc:	4844      	ldr	r0, [pc, #272]	; (8011ce0 <tcp_create_segment+0x130>)
 8011bce:	f007 fa71 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d105      	bne.n	8011be4 <tcp_create_segment+0x34>
 8011bd8:	4b3f      	ldr	r3, [pc, #252]	; (8011cd8 <tcp_create_segment+0x128>)
 8011bda:	22a4      	movs	r2, #164	; 0xa4
 8011bdc:	4941      	ldr	r1, [pc, #260]	; (8011ce4 <tcp_create_segment+0x134>)
 8011bde:	4840      	ldr	r0, [pc, #256]	; (8011ce0 <tcp_create_segment+0x130>)
 8011be0:	f007 fa68 	bl	80190b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011be4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	f003 0304 	and.w	r3, r3, #4
 8011bf0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011bf2:	2003      	movs	r0, #3
 8011bf4:	f7fa fb30 	bl	800c258 <memp_malloc>
 8011bf8:	6138      	str	r0, [r7, #16]
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d104      	bne.n	8011c0a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f7fb fa4f 	bl	800d0a4 <pbuf_free>
    return NULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	e061      	b.n	8011cce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011c10:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	2200      	movs	r2, #0
 8011c16:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	891a      	ldrh	r2, [r3, #8]
 8011c22:	7dfb      	ldrb	r3, [r7, #23]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d205      	bcs.n	8011c36 <tcp_create_segment+0x86>
 8011c2a:	4b2b      	ldr	r3, [pc, #172]	; (8011cd8 <tcp_create_segment+0x128>)
 8011c2c:	22b0      	movs	r2, #176	; 0xb0
 8011c2e:	492e      	ldr	r1, [pc, #184]	; (8011ce8 <tcp_create_segment+0x138>)
 8011c30:	482b      	ldr	r0, [pc, #172]	; (8011ce0 <tcp_create_segment+0x130>)
 8011c32:	f007 fa3f 	bl	80190b4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	891a      	ldrh	r2, [r3, #8]
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	b29a      	uxth	r2, r3
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011c46:	2114      	movs	r1, #20
 8011c48:	68b8      	ldr	r0, [r7, #8]
 8011c4a:	f7fb f995 	bl	800cf78 <pbuf_add_header>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d004      	beq.n	8011c5e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c54:	6938      	ldr	r0, [r7, #16]
 8011c56:	f7fc ffe2 	bl	800ec1e <tcp_seg_free>
    return NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e037      	b.n	8011cce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	685a      	ldr	r2, [r3, #4]
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	8ada      	ldrh	r2, [r3, #22]
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	68dc      	ldr	r4, [r3, #12]
 8011c70:	4610      	mov	r0, r2
 8011c72:	f7f9 fde3 	bl	800b83c <lwip_htons>
 8011c76:	4603      	mov	r3, r0
 8011c78:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	8b1a      	ldrh	r2, [r3, #24]
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	68dc      	ldr	r4, [r3, #12]
 8011c82:	4610      	mov	r0, r2
 8011c84:	f7f9 fdda 	bl	800b83c <lwip_htons>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	68dc      	ldr	r4, [r3, #12]
 8011c90:	6838      	ldr	r0, [r7, #0]
 8011c92:	f7f9 fde8 	bl	800b866 <lwip_htonl>
 8011c96:	4603      	mov	r3, r0
 8011c98:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
 8011c9c:	089b      	lsrs	r3, r3, #2
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	3305      	adds	r3, #5
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	031b      	lsls	r3, r3, #12
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	79fb      	ldrb	r3, [r7, #7]
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	68dc      	ldr	r4, [r3, #12]
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f7f9 fdc0 	bl	800b83c <lwip_htons>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	749a      	strb	r2, [r3, #18]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	74da      	strb	r2, [r3, #19]
  return seg;
 8011ccc:	693b      	ldr	r3, [r7, #16]
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	371c      	adds	r7, #28
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd90      	pop	{r4, r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	0801c97c 	.word	0x0801c97c
 8011cdc:	0801c9b0 	.word	0x0801c9b0
 8011ce0:	0801c9d0 	.word	0x0801c9d0
 8011ce4:	0801c9f8 	.word	0x0801c9f8
 8011ce8:	0801ca1c 	.word	0x0801ca1c

08011cec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	607b      	str	r3, [r7, #4]
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	73fb      	strb	r3, [r7, #15]
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	81bb      	strh	r3, [r7, #12]
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011d00:	89bb      	ldrh	r3, [r7, #12]
 8011d02:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d105      	bne.n	8011d16 <tcp_pbuf_prealloc+0x2a>
 8011d0a:	4b30      	ldr	r3, [pc, #192]	; (8011dcc <tcp_pbuf_prealloc+0xe0>)
 8011d0c:	22e8      	movs	r2, #232	; 0xe8
 8011d0e:	4930      	ldr	r1, [pc, #192]	; (8011dd0 <tcp_pbuf_prealloc+0xe4>)
 8011d10:	4830      	ldr	r0, [pc, #192]	; (8011dd4 <tcp_pbuf_prealloc+0xe8>)
 8011d12:	f007 f9cf 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011d16:	6a3b      	ldr	r3, [r7, #32]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d105      	bne.n	8011d28 <tcp_pbuf_prealloc+0x3c>
 8011d1c:	4b2b      	ldr	r3, [pc, #172]	; (8011dcc <tcp_pbuf_prealloc+0xe0>)
 8011d1e:	22e9      	movs	r2, #233	; 0xe9
 8011d20:	492d      	ldr	r1, [pc, #180]	; (8011dd8 <tcp_pbuf_prealloc+0xec>)
 8011d22:	482c      	ldr	r0, [pc, #176]	; (8011dd4 <tcp_pbuf_prealloc+0xe8>)
 8011d24:	f007 f9c6 	bl	80190b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011d28:	89ba      	ldrh	r2, [r7, #12]
 8011d2a:	897b      	ldrh	r3, [r7, #10]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d221      	bcs.n	8011d74 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d34:	f003 0302 	and.w	r3, r3, #2
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d111      	bne.n	8011d60 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011d3c:	6a3b      	ldr	r3, [r7, #32]
 8011d3e:	8b5b      	ldrh	r3, [r3, #26]
 8011d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d115      	bne.n	8011d74 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d007      	beq.n	8011d60 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d50:	6a3b      	ldr	r3, [r7, #32]
 8011d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d103      	bne.n	8011d60 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d009      	beq.n	8011d74 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d60:	89bb      	ldrh	r3, [r7, #12]
 8011d62:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011d66:	f023 0203 	bic.w	r2, r3, #3
 8011d6a:	897b      	ldrh	r3, [r7, #10]
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	bf28      	it	cs
 8011d70:	4613      	movcs	r3, r2
 8011d72:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d74:	8af9      	ldrh	r1, [r7, #22]
 8011d76:	7bfb      	ldrb	r3, [r7, #15]
 8011d78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fa fead 	bl	800cadc <pbuf_alloc>
 8011d82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d101      	bne.n	8011d8e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	e019      	b.n	8011dc2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d006      	beq.n	8011da4 <tcp_pbuf_prealloc+0xb8>
 8011d96:	4b0d      	ldr	r3, [pc, #52]	; (8011dcc <tcp_pbuf_prealloc+0xe0>)
 8011d98:	f240 120b 	movw	r2, #267	; 0x10b
 8011d9c:	490f      	ldr	r1, [pc, #60]	; (8011ddc <tcp_pbuf_prealloc+0xf0>)
 8011d9e:	480d      	ldr	r0, [pc, #52]	; (8011dd4 <tcp_pbuf_prealloc+0xe8>)
 8011da0:	f007 f988 	bl	80190b4 <iprintf>
  *oversize = p->len - length;
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	895a      	ldrh	r2, [r3, #10]
 8011da8:	89bb      	ldrh	r3, [r7, #12]
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	89ba      	ldrh	r2, [r7, #12]
 8011db6:	811a      	strh	r2, [r3, #8]
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	891a      	ldrh	r2, [r3, #8]
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	815a      	strh	r2, [r3, #10]
  return p;
 8011dc0:	693b      	ldr	r3, [r7, #16]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3718      	adds	r7, #24
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	0801c97c 	.word	0x0801c97c
 8011dd0:	0801ca34 	.word	0x0801ca34
 8011dd4:	0801c9d0 	.word	0x0801c9d0
 8011dd8:	0801ca58 	.word	0x0801ca58
 8011ddc:	0801ca78 	.word	0x0801ca78

08011de0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	460b      	mov	r3, r1
 8011dea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d106      	bne.n	8011e00 <tcp_write_checks+0x20>
 8011df2:	4b33      	ldr	r3, [pc, #204]	; (8011ec0 <tcp_write_checks+0xe0>)
 8011df4:	f240 1233 	movw	r2, #307	; 0x133
 8011df8:	4932      	ldr	r1, [pc, #200]	; (8011ec4 <tcp_write_checks+0xe4>)
 8011dfa:	4833      	ldr	r0, [pc, #204]	; (8011ec8 <tcp_write_checks+0xe8>)
 8011dfc:	f007 f95a 	bl	80190b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	7d1b      	ldrb	r3, [r3, #20]
 8011e04:	2b04      	cmp	r3, #4
 8011e06:	d00e      	beq.n	8011e26 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011e0c:	2b07      	cmp	r3, #7
 8011e0e:	d00a      	beq.n	8011e26 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d006      	beq.n	8011e26 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011e1c:	2b03      	cmp	r3, #3
 8011e1e:	d002      	beq.n	8011e26 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011e20:	f06f 030a 	mvn.w	r3, #10
 8011e24:	e048      	b.n	8011eb8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011e26:	887b      	ldrh	r3, [r7, #2]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d101      	bne.n	8011e30 <tcp_write_checks+0x50>
    return ERR_OK;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	e043      	b.n	8011eb8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e36:	887a      	ldrh	r2, [r7, #2]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d909      	bls.n	8011e50 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	8b5b      	ldrh	r3, [r3, #26]
 8011e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e4e:	e033      	b.n	8011eb8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e56:	2b08      	cmp	r3, #8
 8011e58:	d909      	bls.n	8011e6e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8b5b      	ldrh	r3, [r3, #26]
 8011e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e68:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6c:	e024      	b.n	8011eb8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d00f      	beq.n	8011e98 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d11a      	bne.n	8011eb6 <tcp_write_checks+0xd6>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d116      	bne.n	8011eb6 <tcp_write_checks+0xd6>
 8011e88:	4b0d      	ldr	r3, [pc, #52]	; (8011ec0 <tcp_write_checks+0xe0>)
 8011e8a:	f240 1255 	movw	r2, #341	; 0x155
 8011e8e:	490f      	ldr	r1, [pc, #60]	; (8011ecc <tcp_write_checks+0xec>)
 8011e90:	480d      	ldr	r0, [pc, #52]	; (8011ec8 <tcp_write_checks+0xe8>)
 8011e92:	f007 f90f 	bl	80190b4 <iprintf>
 8011e96:	e00e      	b.n	8011eb6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d103      	bne.n	8011ea8 <tcp_write_checks+0xc8>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d006      	beq.n	8011eb6 <tcp_write_checks+0xd6>
 8011ea8:	4b05      	ldr	r3, [pc, #20]	; (8011ec0 <tcp_write_checks+0xe0>)
 8011eaa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011eae:	4908      	ldr	r1, [pc, #32]	; (8011ed0 <tcp_write_checks+0xf0>)
 8011eb0:	4805      	ldr	r0, [pc, #20]	; (8011ec8 <tcp_write_checks+0xe8>)
 8011eb2:	f007 f8ff 	bl	80190b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011eb6:	2300      	movs	r3, #0
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	0801c97c 	.word	0x0801c97c
 8011ec4:	0801ca8c 	.word	0x0801ca8c
 8011ec8:	0801c9d0 	.word	0x0801c9d0
 8011ecc:	0801caac 	.word	0x0801caac
 8011ed0:	0801cae8 	.word	0x0801cae8

08011ed4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011ed4:	b590      	push	{r4, r7, lr}
 8011ed6:	b09b      	sub	sp, #108	; 0x6c
 8011ed8:	af04      	add	r7, sp, #16
 8011eda:	60f8      	str	r0, [r7, #12]
 8011edc:	60b9      	str	r1, [r7, #8]
 8011ede:	4611      	mov	r1, r2
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	80fb      	strh	r3, [r7, #6]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011eea:	2300      	movs	r3, #0
 8011eec:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011efa:	2300      	movs	r3, #0
 8011efc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011efe:	2300      	movs	r3, #0
 8011f00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011f04:	2300      	movs	r3, #0
 8011f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d109      	bne.n	8011f30 <tcp_write+0x5c>
 8011f1c:	4ba4      	ldr	r3, [pc, #656]	; (80121b0 <tcp_write+0x2dc>)
 8011f1e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011f22:	49a4      	ldr	r1, [pc, #656]	; (80121b4 <tcp_write+0x2e0>)
 8011f24:	48a4      	ldr	r0, [pc, #656]	; (80121b8 <tcp_write+0x2e4>)
 8011f26:	f007 f8c5 	bl	80190b4 <iprintf>
 8011f2a:	f06f 030f 	mvn.w	r3, #15
 8011f2e:	e32a      	b.n	8012586 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f36:	085b      	lsrs	r3, r3, #1
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	bf28      	it	cs
 8011f42:	4613      	movcs	r3, r2
 8011f44:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d102      	bne.n	8011f52 <tcp_write+0x7e>
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f50:	e000      	b.n	8011f54 <tcp_write+0x80>
 8011f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f54:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d109      	bne.n	8011f70 <tcp_write+0x9c>
 8011f5c:	4b94      	ldr	r3, [pc, #592]	; (80121b0 <tcp_write+0x2dc>)
 8011f5e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011f62:	4996      	ldr	r1, [pc, #600]	; (80121bc <tcp_write+0x2e8>)
 8011f64:	4894      	ldr	r0, [pc, #592]	; (80121b8 <tcp_write+0x2e4>)
 8011f66:	f007 f8a5 	bl	80190b4 <iprintf>
 8011f6a:	f06f 030f 	mvn.w	r3, #15
 8011f6e:	e30a      	b.n	8012586 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f70:	88fb      	ldrh	r3, [r7, #6]
 8011f72:	4619      	mov	r1, r3
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7ff ff33 	bl	8011de0 <tcp_write_checks>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011f80:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d002      	beq.n	8011f8e <tcp_write+0xba>
    return err;
 8011f88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f8c:	e2fb      	b.n	8012586 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f98:	2300      	movs	r3, #0
 8011f9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 80f6 	beq.w	8012194 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fac:	653b      	str	r3, [r7, #80]	; 0x50
 8011fae:	e002      	b.n	8011fb6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d1f8      	bne.n	8011fb0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fc0:	7a9b      	ldrb	r3, [r3, #10]
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	f003 0304 	and.w	r3, r3, #4
 8011fca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011fcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd0:	891b      	ldrh	r3, [r3, #8]
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	8c3b      	ldrh	r3, [r7, #32]
 8011fd6:	440b      	add	r3, r1
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	da06      	bge.n	8011fea <tcp_write+0x116>
 8011fdc:	4b74      	ldr	r3, [pc, #464]	; (80121b0 <tcp_write+0x2dc>)
 8011fde:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011fe2:	4977      	ldr	r1, [pc, #476]	; (80121c0 <tcp_write+0x2ec>)
 8011fe4:	4874      	ldr	r0, [pc, #464]	; (80121b8 <tcp_write+0x2e4>)
 8011fe6:	f007 f865 	bl	80190b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fec:	891a      	ldrh	r2, [r3, #8]
 8011fee:	8c3b      	ldrh	r3, [r7, #32]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ff6:	1ad3      	subs	r3, r2, r3
 8011ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012000:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012002:	8a7b      	ldrh	r3, [r7, #18]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d026      	beq.n	8012056 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012008:	8a7b      	ldrh	r3, [r7, #18]
 801200a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801200c:	429a      	cmp	r2, r3
 801200e:	d206      	bcs.n	801201e <tcp_write+0x14a>
 8012010:	4b67      	ldr	r3, [pc, #412]	; (80121b0 <tcp_write+0x2dc>)
 8012012:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012016:	496b      	ldr	r1, [pc, #428]	; (80121c4 <tcp_write+0x2f0>)
 8012018:	4867      	ldr	r0, [pc, #412]	; (80121b8 <tcp_write+0x2e4>)
 801201a:	f007 f84b 	bl	80190b4 <iprintf>
      seg = last_unsent;
 801201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012020:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012022:	8a7b      	ldrh	r3, [r7, #18]
 8012024:	88fa      	ldrh	r2, [r7, #6]
 8012026:	4293      	cmp	r3, r2
 8012028:	bf28      	it	cs
 801202a:	4613      	movcs	r3, r2
 801202c:	b29b      	uxth	r3, r3
 801202e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012030:	4293      	cmp	r3, r2
 8012032:	bf28      	it	cs
 8012034:	4613      	movcs	r3, r2
 8012036:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012038:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801203c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801203e:	4413      	add	r3, r2
 8012040:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012044:	8a7a      	ldrh	r2, [r7, #18]
 8012046:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	b29b      	uxth	r3, r3
 801204c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801204e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012050:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012056:	8a7b      	ldrh	r3, [r7, #18]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00b      	beq.n	8012074 <tcp_write+0x1a0>
 801205c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012060:	88fb      	ldrh	r3, [r7, #6]
 8012062:	429a      	cmp	r2, r3
 8012064:	d006      	beq.n	8012074 <tcp_write+0x1a0>
 8012066:	4b52      	ldr	r3, [pc, #328]	; (80121b0 <tcp_write+0x2dc>)
 8012068:	f44f 7200 	mov.w	r2, #512	; 0x200
 801206c:	4956      	ldr	r1, [pc, #344]	; (80121c8 <tcp_write+0x2f4>)
 801206e:	4852      	ldr	r0, [pc, #328]	; (80121b8 <tcp_write+0x2e4>)
 8012070:	f007 f820 	bl	80190b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012078:	88fb      	ldrh	r3, [r7, #6]
 801207a:	429a      	cmp	r2, r3
 801207c:	f080 8167 	bcs.w	801234e <tcp_write+0x47a>
 8012080:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012082:	2b00      	cmp	r3, #0
 8012084:	f000 8163 	beq.w	801234e <tcp_write+0x47a>
 8012088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801208a:	891b      	ldrh	r3, [r3, #8]
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 815e 	beq.w	801234e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012092:	88fa      	ldrh	r2, [r7, #6]
 8012094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012098:	1ad2      	subs	r2, r2, r3
 801209a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801209c:	4293      	cmp	r3, r2
 801209e:	bfa8      	it	ge
 80120a0:	4613      	movge	r3, r2
 80120a2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80120a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80120a8:	797b      	ldrb	r3, [r7, #5]
 80120aa:	f003 0301 	and.w	r3, r3, #1
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d027      	beq.n	8012102 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80120b2:	f107 0012 	add.w	r0, r7, #18
 80120b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120b8:	8bf9      	ldrh	r1, [r7, #30]
 80120ba:	2301      	movs	r3, #1
 80120bc:	9302      	str	r3, [sp, #8]
 80120be:	797b      	ldrb	r3, [r7, #5]
 80120c0:	9301      	str	r3, [sp, #4]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	4603      	mov	r3, r0
 80120c8:	2000      	movs	r0, #0
 80120ca:	f7ff fe0f 	bl	8011cec <tcp_pbuf_prealloc>
 80120ce:	6578      	str	r0, [r7, #84]	; 0x54
 80120d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f000 8225 	beq.w	8012522 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80120d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120da:	6858      	ldr	r0, [r3, #4]
 80120dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	4413      	add	r3, r2
 80120e4:	8bfa      	ldrh	r2, [r7, #30]
 80120e6:	4619      	mov	r1, r3
 80120e8:	f006 ff1f 	bl	8018f2a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120ee:	f7fb f867 	bl	800d1c0 <pbuf_clen>
 80120f2:	4603      	mov	r3, r0
 80120f4:	461a      	mov	r2, r3
 80120f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120fa:	4413      	add	r3, r2
 80120fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012100:	e041      	b.n	8012186 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	637b      	str	r3, [r7, #52]	; 0x34
 8012108:	e002      	b.n	8012110 <tcp_write+0x23c>
 801210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	637b      	str	r3, [r7, #52]	; 0x34
 8012110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1f8      	bne.n	801210a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801211a:	7b1b      	ldrb	r3, [r3, #12]
 801211c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d115      	bne.n	8012150 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801212a:	8952      	ldrh	r2, [r2, #10]
 801212c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801212e:	68ba      	ldr	r2, [r7, #8]
 8012130:	429a      	cmp	r2, r3
 8012132:	d10d      	bne.n	8012150 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012138:	2b00      	cmp	r3, #0
 801213a:	d006      	beq.n	801214a <tcp_write+0x276>
 801213c:	4b1c      	ldr	r3, [pc, #112]	; (80121b0 <tcp_write+0x2dc>)
 801213e:	f240 2231 	movw	r2, #561	; 0x231
 8012142:	4922      	ldr	r1, [pc, #136]	; (80121cc <tcp_write+0x2f8>)
 8012144:	481c      	ldr	r0, [pc, #112]	; (80121b8 <tcp_write+0x2e4>)
 8012146:	f006 ffb5 	bl	80190b4 <iprintf>
          extendlen = seglen;
 801214a:	8bfb      	ldrh	r3, [r7, #30]
 801214c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801214e:	e01a      	b.n	8012186 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012150:	8bfb      	ldrh	r3, [r7, #30]
 8012152:	2201      	movs	r2, #1
 8012154:	4619      	mov	r1, r3
 8012156:	2000      	movs	r0, #0
 8012158:	f7fa fcc0 	bl	800cadc <pbuf_alloc>
 801215c:	6578      	str	r0, [r7, #84]	; 0x54
 801215e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012160:	2b00      	cmp	r3, #0
 8012162:	f000 81e0 	beq.w	8012526 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012166:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	441a      	add	r2, r3
 801216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012170:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012172:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012174:	f7fb f824 	bl	800d1c0 <pbuf_clen>
 8012178:	4603      	mov	r3, r0
 801217a:	461a      	mov	r2, r3
 801217c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012180:	4413      	add	r3, r2
 8012182:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012186:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801218a:	8bfb      	ldrh	r3, [r7, #30]
 801218c:	4413      	add	r3, r2
 801218e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012192:	e0dc      	b.n	801234e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 80d7 	beq.w	801234e <tcp_write+0x47a>
 80121a0:	4b03      	ldr	r3, [pc, #12]	; (80121b0 <tcp_write+0x2dc>)
 80121a2:	f240 224a 	movw	r2, #586	; 0x24a
 80121a6:	490a      	ldr	r1, [pc, #40]	; (80121d0 <tcp_write+0x2fc>)
 80121a8:	4803      	ldr	r0, [pc, #12]	; (80121b8 <tcp_write+0x2e4>)
 80121aa:	f006 ff83 	bl	80190b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80121ae:	e0ce      	b.n	801234e <tcp_write+0x47a>
 80121b0:	0801c97c 	.word	0x0801c97c
 80121b4:	0801cb1c 	.word	0x0801cb1c
 80121b8:	0801c9d0 	.word	0x0801c9d0
 80121bc:	0801cb34 	.word	0x0801cb34
 80121c0:	0801cb68 	.word	0x0801cb68
 80121c4:	0801cb80 	.word	0x0801cb80
 80121c8:	0801cba0 	.word	0x0801cba0
 80121cc:	0801cbc0 	.word	0x0801cbc0
 80121d0:	0801cbec 	.word	0x0801cbec
    struct pbuf *p;
    u16_t left = len - pos;
 80121d4:	88fa      	ldrh	r2, [r7, #6]
 80121d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121da:	1ad3      	subs	r3, r2, r3
 80121dc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80121de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80121ea:	8b7a      	ldrh	r2, [r7, #26]
 80121ec:	8bbb      	ldrh	r3, [r7, #28]
 80121ee:	4293      	cmp	r3, r2
 80121f0:	bf28      	it	cs
 80121f2:	4613      	movcs	r3, r2
 80121f4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121f6:	797b      	ldrb	r3, [r7, #5]
 80121f8:	f003 0301 	and.w	r3, r3, #1
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d036      	beq.n	801226e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012200:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012204:	b29a      	uxth	r2, r3
 8012206:	8b3b      	ldrh	r3, [r7, #24]
 8012208:	4413      	add	r3, r2
 801220a:	b299      	uxth	r1, r3
 801220c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801220e:	2b00      	cmp	r3, #0
 8012210:	bf0c      	ite	eq
 8012212:	2301      	moveq	r3, #1
 8012214:	2300      	movne	r3, #0
 8012216:	b2db      	uxtb	r3, r3
 8012218:	f107 0012 	add.w	r0, r7, #18
 801221c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801221e:	9302      	str	r3, [sp, #8]
 8012220:	797b      	ldrb	r3, [r7, #5]
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	4603      	mov	r3, r0
 801222a:	2036      	movs	r0, #54	; 0x36
 801222c:	f7ff fd5e 	bl	8011cec <tcp_pbuf_prealloc>
 8012230:	6338      	str	r0, [r7, #48]	; 0x30
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	2b00      	cmp	r3, #0
 8012236:	f000 8178 	beq.w	801252a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	895b      	ldrh	r3, [r3, #10]
 801223e:	8b3a      	ldrh	r2, [r7, #24]
 8012240:	429a      	cmp	r2, r3
 8012242:	d906      	bls.n	8012252 <tcp_write+0x37e>
 8012244:	4b8c      	ldr	r3, [pc, #560]	; (8012478 <tcp_write+0x5a4>)
 8012246:	f240 2266 	movw	r2, #614	; 0x266
 801224a:	498c      	ldr	r1, [pc, #560]	; (801247c <tcp_write+0x5a8>)
 801224c:	488c      	ldr	r0, [pc, #560]	; (8012480 <tcp_write+0x5ac>)
 801224e:	f006 ff31 	bl	80190b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012254:	685a      	ldr	r2, [r3, #4]
 8012256:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801225a:	18d0      	adds	r0, r2, r3
 801225c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	4413      	add	r3, r2
 8012264:	8b3a      	ldrh	r2, [r7, #24]
 8012266:	4619      	mov	r1, r3
 8012268:	f006 fe5f 	bl	8018f2a <memcpy>
 801226c:	e02f      	b.n	80122ce <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801226e:	8a7b      	ldrh	r3, [r7, #18]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d006      	beq.n	8012282 <tcp_write+0x3ae>
 8012274:	4b80      	ldr	r3, [pc, #512]	; (8012478 <tcp_write+0x5a4>)
 8012276:	f240 2271 	movw	r2, #625	; 0x271
 801227a:	4982      	ldr	r1, [pc, #520]	; (8012484 <tcp_write+0x5b0>)
 801227c:	4880      	ldr	r0, [pc, #512]	; (8012480 <tcp_write+0x5ac>)
 801227e:	f006 ff19 	bl	80190b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012282:	8b3b      	ldrh	r3, [r7, #24]
 8012284:	2201      	movs	r2, #1
 8012286:	4619      	mov	r1, r3
 8012288:	2036      	movs	r0, #54	; 0x36
 801228a:	f7fa fc27 	bl	800cadc <pbuf_alloc>
 801228e:	6178      	str	r0, [r7, #20]
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	f000 814b 	beq.w	801252e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012298:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801229c:	68ba      	ldr	r2, [r7, #8]
 801229e:	441a      	add	r2, r3
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80122a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122ae:	4619      	mov	r1, r3
 80122b0:	2036      	movs	r0, #54	; 0x36
 80122b2:	f7fa fc13 	bl	800cadc <pbuf_alloc>
 80122b6:	6338      	str	r0, [r7, #48]	; 0x30
 80122b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d103      	bne.n	80122c6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80122be:	6978      	ldr	r0, [r7, #20]
 80122c0:	f7fa fef0 	bl	800d0a4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80122c4:	e136      	b.n	8012534 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80122c6:	6979      	ldr	r1, [r7, #20]
 80122c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ca:	f7fa ffb9 	bl	800d240 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80122ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122d0:	f7fa ff76 	bl	800d1c0 <pbuf_clen>
 80122d4:	4603      	mov	r3, r0
 80122d6:	461a      	mov	r2, r3
 80122d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122dc:	4413      	add	r3, r2
 80122de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80122e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122e6:	2b09      	cmp	r3, #9
 80122e8:	d903      	bls.n	80122f2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80122ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ec:	f7fa feda 	bl	800d0a4 <pbuf_free>
      goto memerr;
 80122f0:	e120      	b.n	8012534 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122fa:	441a      	add	r2, r3
 80122fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	4613      	mov	r3, r2
 8012304:	2200      	movs	r2, #0
 8012306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012308:	68f8      	ldr	r0, [r7, #12]
 801230a:	f7ff fc51 	bl	8011bb0 <tcp_create_segment>
 801230e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012312:	2b00      	cmp	r3, #0
 8012314:	f000 810d 	beq.w	8012532 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801231a:	2b00      	cmp	r3, #0
 801231c:	d102      	bne.n	8012324 <tcp_write+0x450>
      queue = seg;
 801231e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012320:	647b      	str	r3, [r7, #68]	; 0x44
 8012322:	e00c      	b.n	801233e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012326:	2b00      	cmp	r3, #0
 8012328:	d106      	bne.n	8012338 <tcp_write+0x464>
 801232a:	4b53      	ldr	r3, [pc, #332]	; (8012478 <tcp_write+0x5a4>)
 801232c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012330:	4955      	ldr	r1, [pc, #340]	; (8012488 <tcp_write+0x5b4>)
 8012332:	4853      	ldr	r0, [pc, #332]	; (8012480 <tcp_write+0x5ac>)
 8012334:	f006 febe 	bl	80190b4 <iprintf>
      prev_seg->next = seg;
 8012338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801233a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801233c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012340:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012342:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012346:	8b3b      	ldrh	r3, [r7, #24]
 8012348:	4413      	add	r3, r2
 801234a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801234e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012352:	88fb      	ldrh	r3, [r7, #6]
 8012354:	429a      	cmp	r2, r3
 8012356:	f4ff af3d 	bcc.w	80121d4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801235a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801235c:	2b00      	cmp	r3, #0
 801235e:	d02c      	beq.n	80123ba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012366:	e01e      	b.n	80123a6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236a:	891a      	ldrh	r2, [r3, #8]
 801236c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801236e:	4413      	add	r3, r2
 8012370:	b29a      	uxth	r2, r3
 8012372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012374:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d110      	bne.n	80123a0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012384:	8952      	ldrh	r2, [r2, #10]
 8012386:	4413      	add	r3, r2
 8012388:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801238a:	68b9      	ldr	r1, [r7, #8]
 801238c:	4618      	mov	r0, r3
 801238e:	f006 fdcc 	bl	8018f2a <memcpy>
        p->len += oversize_used;
 8012392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012394:	895a      	ldrh	r2, [r3, #10]
 8012396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012398:	4413      	add	r3, r2
 801239a:	b29a      	uxth	r2, r3
 801239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d1dd      	bne.n	8012368 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80123ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ae:	891a      	ldrh	r2, [r3, #8]
 80123b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123b2:	4413      	add	r3, r2
 80123b4:	b29a      	uxth	r2, r3
 80123b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80123ba:	8a7a      	ldrh	r2, [r7, #18]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80123c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d018      	beq.n	80123fa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80123c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d106      	bne.n	80123dc <tcp_write+0x508>
 80123ce:	4b2a      	ldr	r3, [pc, #168]	; (8012478 <tcp_write+0x5a4>)
 80123d0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80123d4:	492d      	ldr	r1, [pc, #180]	; (801248c <tcp_write+0x5b8>)
 80123d6:	482a      	ldr	r0, [pc, #168]	; (8012480 <tcp_write+0x5ac>)
 80123d8:	f006 fe6c 	bl	80190b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80123dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fa ff2c 	bl	800d240 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80123e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ea:	891a      	ldrh	r2, [r3, #8]
 80123ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123ee:	891b      	ldrh	r3, [r3, #8]
 80123f0:	4413      	add	r3, r2
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f6:	811a      	strh	r2, [r3, #8]
 80123f8:	e037      	b.n	801246a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80123fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d034      	beq.n	801246a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012402:	2b00      	cmp	r3, #0
 8012404:	d003      	beq.n	801240e <tcp_write+0x53a>
 8012406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d106      	bne.n	801241c <tcp_write+0x548>
 801240e:	4b1a      	ldr	r3, [pc, #104]	; (8012478 <tcp_write+0x5a4>)
 8012410:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012414:	491e      	ldr	r1, [pc, #120]	; (8012490 <tcp_write+0x5bc>)
 8012416:	481a      	ldr	r0, [pc, #104]	; (8012480 <tcp_write+0x5ac>)
 8012418:	f006 fe4c 	bl	80190b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801241c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	62bb      	str	r3, [r7, #40]	; 0x28
 8012422:	e009      	b.n	8012438 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012426:	891a      	ldrh	r2, [r3, #8]
 8012428:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801242a:	4413      	add	r3, r2
 801242c:	b29a      	uxth	r2, r3
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	62bb      	str	r3, [r7, #40]	; 0x28
 8012438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1f1      	bne.n	8012424 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012442:	891a      	ldrh	r2, [r3, #8]
 8012444:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012446:	4413      	add	r3, r2
 8012448:	b29a      	uxth	r2, r3
 801244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012450:	895a      	ldrh	r2, [r3, #10]
 8012452:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012454:	4413      	add	r3, r2
 8012456:	b29a      	uxth	r2, r3
 8012458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801245c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801245e:	891a      	ldrh	r2, [r3, #8]
 8012460:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012462:	4413      	add	r3, r2
 8012464:	b29a      	uxth	r2, r3
 8012466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012468:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801246a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801246c:	2b00      	cmp	r3, #0
 801246e:	d111      	bne.n	8012494 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012474:	66da      	str	r2, [r3, #108]	; 0x6c
 8012476:	e010      	b.n	801249a <tcp_write+0x5c6>
 8012478:	0801c97c 	.word	0x0801c97c
 801247c:	0801cc1c 	.word	0x0801cc1c
 8012480:	0801c9d0 	.word	0x0801c9d0
 8012484:	0801cc5c 	.word	0x0801cc5c
 8012488:	0801cc6c 	.word	0x0801cc6c
 801248c:	0801cc80 	.word	0x0801cc80
 8012490:	0801ccb8 	.word	0x0801ccb8
  } else {
    last_unsent->next = queue;
 8012494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012498:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801249e:	88fb      	ldrh	r3, [r7, #6]
 80124a0:	441a      	add	r2, r3
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80124ac:	88fb      	ldrh	r3, [r7, #6]
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80124be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d00e      	beq.n	80124ea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d10a      	bne.n	80124ea <tcp_write+0x616>
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d106      	bne.n	80124ea <tcp_write+0x616>
 80124dc:	4b2c      	ldr	r3, [pc, #176]	; (8012590 <tcp_write+0x6bc>)
 80124de:	f240 3212 	movw	r2, #786	; 0x312
 80124e2:	492c      	ldr	r1, [pc, #176]	; (8012594 <tcp_write+0x6c0>)
 80124e4:	482c      	ldr	r0, [pc, #176]	; (8012598 <tcp_write+0x6c4>)
 80124e6:	f006 fde5 	bl	80190b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80124ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d016      	beq.n	801251e <tcp_write+0x64a>
 80124f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d012      	beq.n	801251e <tcp_write+0x64a>
 80124f8:	797b      	ldrb	r3, [r7, #5]
 80124fa:	f003 0302 	and.w	r3, r3, #2
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d10d      	bne.n	801251e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012504:	68db      	ldr	r3, [r3, #12]
 8012506:	899b      	ldrh	r3, [r3, #12]
 8012508:	b29c      	uxth	r4, r3
 801250a:	2008      	movs	r0, #8
 801250c:	f7f9 f996 	bl	800b83c <lwip_htons>
 8012510:	4603      	mov	r3, r0
 8012512:	461a      	mov	r2, r3
 8012514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	4322      	orrs	r2, r4
 801251a:	b292      	uxth	r2, r2
 801251c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801251e:	2300      	movs	r3, #0
 8012520:	e031      	b.n	8012586 <tcp_write+0x6b2>
          goto memerr;
 8012522:	bf00      	nop
 8012524:	e006      	b.n	8012534 <tcp_write+0x660>
            goto memerr;
 8012526:	bf00      	nop
 8012528:	e004      	b.n	8012534 <tcp_write+0x660>
        goto memerr;
 801252a:	bf00      	nop
 801252c:	e002      	b.n	8012534 <tcp_write+0x660>
        goto memerr;
 801252e:	bf00      	nop
 8012530:	e000      	b.n	8012534 <tcp_write+0x660>
      goto memerr;
 8012532:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	8b5b      	ldrh	r3, [r3, #26]
 8012538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801253c:	b29a      	uxth	r2, r3
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012548:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801254a:	f7fa fdab 	bl	800d0a4 <pbuf_free>
  }
  if (queue != NULL) {
 801254e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012550:	2b00      	cmp	r3, #0
 8012552:	d002      	beq.n	801255a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012554:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012556:	f7fc fb4d 	bl	800ebf4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00e      	beq.n	8012582 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10a      	bne.n	8012582 <tcp_write+0x6ae>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012570:	2b00      	cmp	r3, #0
 8012572:	d106      	bne.n	8012582 <tcp_write+0x6ae>
 8012574:	4b06      	ldr	r3, [pc, #24]	; (8012590 <tcp_write+0x6bc>)
 8012576:	f240 3227 	movw	r2, #807	; 0x327
 801257a:	4906      	ldr	r1, [pc, #24]	; (8012594 <tcp_write+0x6c0>)
 801257c:	4806      	ldr	r0, [pc, #24]	; (8012598 <tcp_write+0x6c4>)
 801257e:	f006 fd99 	bl	80190b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012586:	4618      	mov	r0, r3
 8012588:	375c      	adds	r7, #92	; 0x5c
 801258a:	46bd      	mov	sp, r7
 801258c:	bd90      	pop	{r4, r7, pc}
 801258e:	bf00      	nop
 8012590:	0801c97c 	.word	0x0801c97c
 8012594:	0801ccf0 	.word	0x0801ccf0
 8012598:	0801c9d0 	.word	0x0801c9d0

0801259c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b08b      	sub	sp, #44	; 0x2c
 80125a0:	af02      	add	r7, sp, #8
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	460b      	mov	r3, r1
 80125a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80125a8:	2300      	movs	r3, #0
 80125aa:	61fb      	str	r3, [r7, #28]
 80125ac:	2300      	movs	r3, #0
 80125ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80125b0:	2300      	movs	r3, #0
 80125b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <tcp_split_unsent_seg+0x2c>
 80125ba:	4b95      	ldr	r3, [pc, #596]	; (8012810 <tcp_split_unsent_seg+0x274>)
 80125bc:	f240 324b 	movw	r2, #843	; 0x34b
 80125c0:	4994      	ldr	r1, [pc, #592]	; (8012814 <tcp_split_unsent_seg+0x278>)
 80125c2:	4895      	ldr	r0, [pc, #596]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 80125c4:	f006 fd76 	bl	80190b4 <iprintf>

  useg = pcb->unsent;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d102      	bne.n	80125da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80125d4:	f04f 33ff 	mov.w	r3, #4294967295
 80125d8:	e116      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80125da:	887b      	ldrh	r3, [r7, #2]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d109      	bne.n	80125f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80125e0:	4b8b      	ldr	r3, [pc, #556]	; (8012810 <tcp_split_unsent_seg+0x274>)
 80125e2:	f240 3253 	movw	r2, #851	; 0x353
 80125e6:	498d      	ldr	r1, [pc, #564]	; (801281c <tcp_split_unsent_seg+0x280>)
 80125e8:	488b      	ldr	r0, [pc, #556]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 80125ea:	f006 fd63 	bl	80190b4 <iprintf>
    return ERR_VAL;
 80125ee:	f06f 0305 	mvn.w	r3, #5
 80125f2:	e109      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	891b      	ldrh	r3, [r3, #8]
 80125f8:	887a      	ldrh	r2, [r7, #2]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d301      	bcc.n	8012602 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	e102      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012606:	887a      	ldrh	r2, [r7, #2]
 8012608:	429a      	cmp	r2, r3
 801260a:	d906      	bls.n	801261a <tcp_split_unsent_seg+0x7e>
 801260c:	4b80      	ldr	r3, [pc, #512]	; (8012810 <tcp_split_unsent_seg+0x274>)
 801260e:	f240 325b 	movw	r2, #859	; 0x35b
 8012612:	4983      	ldr	r1, [pc, #524]	; (8012820 <tcp_split_unsent_seg+0x284>)
 8012614:	4880      	ldr	r0, [pc, #512]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 8012616:	f006 fd4d 	bl	80190b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	891b      	ldrh	r3, [r3, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d106      	bne.n	8012630 <tcp_split_unsent_seg+0x94>
 8012622:	4b7b      	ldr	r3, [pc, #492]	; (8012810 <tcp_split_unsent_seg+0x274>)
 8012624:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012628:	497e      	ldr	r1, [pc, #504]	; (8012824 <tcp_split_unsent_seg+0x288>)
 801262a:	487b      	ldr	r0, [pc, #492]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 801262c:	f006 fd42 	bl	80190b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	7a9b      	ldrb	r3, [r3, #10]
 8012634:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012636:	7bfb      	ldrb	r3, [r7, #15]
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	b2db      	uxtb	r3, r3
 801263c:	f003 0304 	and.w	r3, r3, #4
 8012640:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	891a      	ldrh	r2, [r3, #8]
 8012646:	887b      	ldrh	r3, [r7, #2]
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801264c:	7bbb      	ldrb	r3, [r7, #14]
 801264e:	b29a      	uxth	r2, r3
 8012650:	89bb      	ldrh	r3, [r7, #12]
 8012652:	4413      	add	r3, r2
 8012654:	b29b      	uxth	r3, r3
 8012656:	f44f 7220 	mov.w	r2, #640	; 0x280
 801265a:	4619      	mov	r1, r3
 801265c:	2036      	movs	r0, #54	; 0x36
 801265e:	f7fa fa3d 	bl	800cadc <pbuf_alloc>
 8012662:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	2b00      	cmp	r3, #0
 8012668:	f000 80b7 	beq.w	80127da <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	891a      	ldrh	r2, [r3, #8]
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	891b      	ldrh	r3, [r3, #8]
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	b29a      	uxth	r2, r3
 801267a:	887b      	ldrh	r3, [r7, #2]
 801267c:	4413      	add	r3, r2
 801267e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	6858      	ldr	r0, [r3, #4]
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	685a      	ldr	r2, [r3, #4]
 8012688:	7bbb      	ldrb	r3, [r7, #14]
 801268a:	18d1      	adds	r1, r2, r3
 801268c:	897b      	ldrh	r3, [r7, #10]
 801268e:	89ba      	ldrh	r2, [r7, #12]
 8012690:	f7fa ff0e 	bl	800d4b0 <pbuf_copy_partial>
 8012694:	4603      	mov	r3, r0
 8012696:	461a      	mov	r2, r3
 8012698:	89bb      	ldrh	r3, [r7, #12]
 801269a:	4293      	cmp	r3, r2
 801269c:	f040 809f 	bne.w	80127de <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	899b      	ldrh	r3, [r3, #12]
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7f9 f8c7 	bl	800b83c <lwip_htons>
 80126ae:	4603      	mov	r3, r0
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80126b8:	2300      	movs	r3, #0
 80126ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80126bc:	7efb      	ldrb	r3, [r7, #27]
 80126be:	f003 0308 	and.w	r3, r3, #8
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d007      	beq.n	80126d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80126c6:	7efb      	ldrb	r3, [r7, #27]
 80126c8:	f023 0308 	bic.w	r3, r3, #8
 80126cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80126ce:	7ebb      	ldrb	r3, [r7, #26]
 80126d0:	f043 0308 	orr.w	r3, r3, #8
 80126d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80126d6:	7efb      	ldrb	r3, [r7, #27]
 80126d8:	f003 0301 	and.w	r3, r3, #1
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d007      	beq.n	80126f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80126e0:	7efb      	ldrb	r3, [r7, #27]
 80126e2:	f023 0301 	bic.w	r3, r3, #1
 80126e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126e8:	7ebb      	ldrb	r3, [r7, #26]
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7f9 f8b5 	bl	800b866 <lwip_htonl>
 80126fc:	4602      	mov	r2, r0
 80126fe:	887b      	ldrh	r3, [r7, #2]
 8012700:	18d1      	adds	r1, r2, r3
 8012702:	7eba      	ldrb	r2, [r7, #26]
 8012704:	7bfb      	ldrb	r3, [r7, #15]
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	460b      	mov	r3, r1
 801270a:	6939      	ldr	r1, [r7, #16]
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff fa4f 	bl	8011bb0 <tcp_create_segment>
 8012712:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d063      	beq.n	80127e2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	4618      	mov	r0, r3
 8012720:	f7fa fd4e 	bl	800d1c0 <pbuf_clen>
 8012724:	4603      	mov	r3, r0
 8012726:	461a      	mov	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801272e:	1a9b      	subs	r3, r3, r2
 8012730:	b29a      	uxth	r2, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	6858      	ldr	r0, [r3, #4]
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	891a      	ldrh	r2, [r3, #8]
 8012742:	89bb      	ldrh	r3, [r7, #12]
 8012744:	1ad3      	subs	r3, r2, r3
 8012746:	b29b      	uxth	r3, r3
 8012748:	4619      	mov	r1, r3
 801274a:	f7fa fb25 	bl	800cd98 <pbuf_realloc>
  useg->len -= remainder;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	891a      	ldrh	r2, [r3, #8]
 8012752:	89bb      	ldrh	r3, [r7, #12]
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	b29a      	uxth	r2, r3
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	899b      	ldrh	r3, [r3, #12]
 8012762:	b29c      	uxth	r4, r3
 8012764:	7efb      	ldrb	r3, [r7, #27]
 8012766:	b29b      	uxth	r3, r3
 8012768:	4618      	mov	r0, r3
 801276a:	f7f9 f867 	bl	800b83c <lwip_htons>
 801276e:	4603      	mov	r3, r0
 8012770:	461a      	mov	r2, r3
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	4322      	orrs	r2, r4
 8012778:	b292      	uxth	r2, r2
 801277a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	f7fa fd1d 	bl	800d1c0 <pbuf_clen>
 8012786:	4603      	mov	r3, r0
 8012788:	461a      	mov	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012790:	4413      	add	r3, r2
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fa fd0e 	bl	800d1c0 <pbuf_clen>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127ae:	4413      	add	r3, r2
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	69fa      	ldr	r2, [r7, #28]
 80127c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d103      	bne.n	80127d6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e016      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80127da:	bf00      	nop
 80127dc:	e002      	b.n	80127e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127de:	bf00      	nop
 80127e0:	e000      	b.n	80127e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127e2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d006      	beq.n	80127f8 <tcp_split_unsent_seg+0x25c>
 80127ea:	4b09      	ldr	r3, [pc, #36]	; (8012810 <tcp_split_unsent_seg+0x274>)
 80127ec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127f0:	490d      	ldr	r1, [pc, #52]	; (8012828 <tcp_split_unsent_seg+0x28c>)
 80127f2:	4809      	ldr	r0, [pc, #36]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 80127f4:	f006 fc5e 	bl	80190b4 <iprintf>
  if (p != NULL) {
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127fe:	6938      	ldr	r0, [r7, #16]
 8012800:	f7fa fc50 	bl	800d0a4 <pbuf_free>
  }

  return ERR_MEM;
 8012804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012808:	4618      	mov	r0, r3
 801280a:	3724      	adds	r7, #36	; 0x24
 801280c:	46bd      	mov	sp, r7
 801280e:	bd90      	pop	{r4, r7, pc}
 8012810:	0801c97c 	.word	0x0801c97c
 8012814:	0801cd10 	.word	0x0801cd10
 8012818:	0801c9d0 	.word	0x0801c9d0
 801281c:	0801cd34 	.word	0x0801cd34
 8012820:	0801cd58 	.word	0x0801cd58
 8012824:	0801cd68 	.word	0x0801cd68
 8012828:	0801cd78 	.word	0x0801cd78

0801282c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801282c:	b590      	push	{r4, r7, lr}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d106      	bne.n	8012848 <tcp_send_fin+0x1c>
 801283a:	4b21      	ldr	r3, [pc, #132]	; (80128c0 <tcp_send_fin+0x94>)
 801283c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012840:	4920      	ldr	r1, [pc, #128]	; (80128c4 <tcp_send_fin+0x98>)
 8012842:	4821      	ldr	r0, [pc, #132]	; (80128c8 <tcp_send_fin+0x9c>)
 8012844:	f006 fc36 	bl	80190b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d02e      	beq.n	80128ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012854:	60fb      	str	r3, [r7, #12]
 8012856:	e002      	b.n	801285e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1f8      	bne.n	8012858 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	899b      	ldrh	r3, [r3, #12]
 801286c:	b29b      	uxth	r3, r3
 801286e:	4618      	mov	r0, r3
 8012870:	f7f8 ffe4 	bl	800b83c <lwip_htons>
 8012874:	4603      	mov	r3, r0
 8012876:	b2db      	uxtb	r3, r3
 8012878:	f003 0307 	and.w	r3, r3, #7
 801287c:	2b00      	cmp	r3, #0
 801287e:	d116      	bne.n	80128ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	899b      	ldrh	r3, [r3, #12]
 8012886:	b29c      	uxth	r4, r3
 8012888:	2001      	movs	r0, #1
 801288a:	f7f8 ffd7 	bl	800b83c <lwip_htons>
 801288e:	4603      	mov	r3, r0
 8012890:	461a      	mov	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	68db      	ldr	r3, [r3, #12]
 8012896:	4322      	orrs	r2, r4
 8012898:	b292      	uxth	r2, r2
 801289a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	8b5b      	ldrh	r3, [r3, #26]
 80128a0:	f043 0320 	orr.w	r3, r3, #32
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	e004      	b.n	80128b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80128ae:	2101      	movs	r1, #1
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 f80b 	bl	80128cc <tcp_enqueue_flags>
 80128b6:	4603      	mov	r3, r0
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3714      	adds	r7, #20
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd90      	pop	{r4, r7, pc}
 80128c0:	0801c97c 	.word	0x0801c97c
 80128c4:	0801cd84 	.word	0x0801cd84
 80128c8:	0801c9d0 	.word	0x0801c9d0

080128cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b08a      	sub	sp, #40	; 0x28
 80128d0:	af02      	add	r7, sp, #8
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	460b      	mov	r3, r1
 80128d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80128dc:	2300      	movs	r3, #0
 80128de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80128e0:	78fb      	ldrb	r3, [r7, #3]
 80128e2:	f003 0303 	and.w	r3, r3, #3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d106      	bne.n	80128f8 <tcp_enqueue_flags+0x2c>
 80128ea:	4b67      	ldr	r3, [pc, #412]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 80128ec:	f240 4211 	movw	r2, #1041	; 0x411
 80128f0:	4966      	ldr	r1, [pc, #408]	; (8012a8c <tcp_enqueue_flags+0x1c0>)
 80128f2:	4867      	ldr	r0, [pc, #412]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 80128f4:	f006 fbde 	bl	80190b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d106      	bne.n	801290c <tcp_enqueue_flags+0x40>
 80128fe:	4b62      	ldr	r3, [pc, #392]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 8012900:	f240 4213 	movw	r2, #1043	; 0x413
 8012904:	4963      	ldr	r1, [pc, #396]	; (8012a94 <tcp_enqueue_flags+0x1c8>)
 8012906:	4862      	ldr	r0, [pc, #392]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 8012908:	f006 fbd4 	bl	80190b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801290c:	78fb      	ldrb	r3, [r7, #3]
 801290e:	f003 0302 	and.w	r3, r3, #2
 8012912:	2b00      	cmp	r3, #0
 8012914:	d001      	beq.n	801291a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012916:	2301      	movs	r3, #1
 8012918:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801291a:	7ffb      	ldrb	r3, [r7, #31]
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	b2db      	uxtb	r3, r3
 8012920:	f003 0304 	and.w	r3, r3, #4
 8012924:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012926:	7dfb      	ldrb	r3, [r7, #23]
 8012928:	b29b      	uxth	r3, r3
 801292a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801292e:	4619      	mov	r1, r3
 8012930:	2036      	movs	r0, #54	; 0x36
 8012932:	f7fa f8d3 	bl	800cadc <pbuf_alloc>
 8012936:	6138      	str	r0, [r7, #16]
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d109      	bne.n	8012952 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	8b5b      	ldrh	r3, [r3, #26]
 8012942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012946:	b29a      	uxth	r2, r3
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801294c:	f04f 33ff 	mov.w	r3, #4294967295
 8012950:	e095      	b.n	8012a7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	895a      	ldrh	r2, [r3, #10]
 8012956:	7dfb      	ldrb	r3, [r7, #23]
 8012958:	b29b      	uxth	r3, r3
 801295a:	429a      	cmp	r2, r3
 801295c:	d206      	bcs.n	801296c <tcp_enqueue_flags+0xa0>
 801295e:	4b4a      	ldr	r3, [pc, #296]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 8012960:	f240 4239 	movw	r2, #1081	; 0x439
 8012964:	494c      	ldr	r1, [pc, #304]	; (8012a98 <tcp_enqueue_flags+0x1cc>)
 8012966:	484a      	ldr	r0, [pc, #296]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 8012968:	f006 fba4 	bl	80190b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012970:	78fa      	ldrb	r2, [r7, #3]
 8012972:	7ffb      	ldrb	r3, [r7, #31]
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	460b      	mov	r3, r1
 8012978:	6939      	ldr	r1, [r7, #16]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7ff f918 	bl	8011bb0 <tcp_create_segment>
 8012980:	60f8      	str	r0, [r7, #12]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d109      	bne.n	801299c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	8b5b      	ldrh	r3, [r3, #26]
 801298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012990:	b29a      	uxth	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012996:	f04f 33ff 	mov.w	r3, #4294967295
 801299a:	e070      	b.n	8012a7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	f003 0303 	and.w	r3, r3, #3
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d006      	beq.n	80129b6 <tcp_enqueue_flags+0xea>
 80129a8:	4b37      	ldr	r3, [pc, #220]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 80129aa:	f240 4242 	movw	r2, #1090	; 0x442
 80129ae:	493b      	ldr	r1, [pc, #236]	; (8012a9c <tcp_enqueue_flags+0x1d0>)
 80129b0:	4837      	ldr	r0, [pc, #220]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 80129b2:	f006 fb7f 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	891b      	ldrh	r3, [r3, #8]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d006      	beq.n	80129cc <tcp_enqueue_flags+0x100>
 80129be:	4b32      	ldr	r3, [pc, #200]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 80129c0:	f240 4243 	movw	r2, #1091	; 0x443
 80129c4:	4936      	ldr	r1, [pc, #216]	; (8012aa0 <tcp_enqueue_flags+0x1d4>)
 80129c6:	4832      	ldr	r0, [pc, #200]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 80129c8:	f006 fb74 	bl	80190b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d103      	bne.n	80129dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	68fa      	ldr	r2, [r7, #12]
 80129d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80129da:	e00d      	b.n	80129f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e0:	61bb      	str	r3, [r7, #24]
 80129e2:	e002      	b.n	80129ea <tcp_enqueue_flags+0x11e>
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	61bb      	str	r3, [r7, #24]
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1f8      	bne.n	80129e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	68fa      	ldr	r2, [r7, #12]
 80129f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	f003 0302 	and.w	r3, r3, #2
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d104      	bne.n	8012a14 <tcp_enqueue_flags+0x148>
 8012a0a:	78fb      	ldrb	r3, [r7, #3]
 8012a0c:	f003 0301 	and.w	r3, r3, #1
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d004      	beq.n	8012a1e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a18:	1c5a      	adds	r2, r3, #1
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012a1e:	78fb      	ldrb	r3, [r7, #3]
 8012a20:	f003 0301 	and.w	r3, r3, #1
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d006      	beq.n	8012a36 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	8b5b      	ldrh	r3, [r3, #26]
 8012a2c:	f043 0320 	orr.w	r3, r3, #32
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fa fbc0 	bl	800d1c0 <pbuf_clen>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a4a:	4413      	add	r3, r2
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d00e      	beq.n	8012a7c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10a      	bne.n	8012a7c <tcp_enqueue_flags+0x1b0>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <tcp_enqueue_flags+0x1b0>
 8012a6e:	4b06      	ldr	r3, [pc, #24]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 8012a70:	f240 4265 	movw	r2, #1125	; 0x465
 8012a74:	490b      	ldr	r1, [pc, #44]	; (8012aa4 <tcp_enqueue_flags+0x1d8>)
 8012a76:	4806      	ldr	r0, [pc, #24]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 8012a78:	f006 fb1c 	bl	80190b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3720      	adds	r7, #32
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	0801c97c 	.word	0x0801c97c
 8012a8c:	0801cda0 	.word	0x0801cda0
 8012a90:	0801c9d0 	.word	0x0801c9d0
 8012a94:	0801cdf8 	.word	0x0801cdf8
 8012a98:	0801ce18 	.word	0x0801ce18
 8012a9c:	0801ce54 	.word	0x0801ce54
 8012aa0:	0801ce6c 	.word	0x0801ce6c
 8012aa4:	0801ce98 	.word	0x0801ce98

08012aa8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012aa8:	b5b0      	push	{r4, r5, r7, lr}
 8012aaa:	b08a      	sub	sp, #40	; 0x28
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <tcp_output+0x1c>
 8012ab6:	4b8a      	ldr	r3, [pc, #552]	; (8012ce0 <tcp_output+0x238>)
 8012ab8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012abc:	4989      	ldr	r1, [pc, #548]	; (8012ce4 <tcp_output+0x23c>)
 8012abe:	488a      	ldr	r0, [pc, #552]	; (8012ce8 <tcp_output+0x240>)
 8012ac0:	f006 faf8 	bl	80190b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	7d1b      	ldrb	r3, [r3, #20]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d106      	bne.n	8012ada <tcp_output+0x32>
 8012acc:	4b84      	ldr	r3, [pc, #528]	; (8012ce0 <tcp_output+0x238>)
 8012ace:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012ad2:	4986      	ldr	r1, [pc, #536]	; (8012cec <tcp_output+0x244>)
 8012ad4:	4884      	ldr	r0, [pc, #528]	; (8012ce8 <tcp_output+0x240>)
 8012ad6:	f006 faed 	bl	80190b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012ada:	4b85      	ldr	r3, [pc, #532]	; (8012cf0 <tcp_output+0x248>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d101      	bne.n	8012ae8 <tcp_output+0x40>
    return ERR_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	e1ce      	b.n	8012e86 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012af4:	4293      	cmp	r3, r2
 8012af6:	bf28      	it	cs
 8012af8:	4613      	movcs	r3, r2
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b02:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d10b      	bne.n	8012b22 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	8b5b      	ldrh	r3, [r3, #26]
 8012b0e:	f003 0302 	and.w	r3, r3, #2
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f000 81aa 	beq.w	8012e6c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 fdcb 	bl	80136b4 <tcp_send_empty_ack>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	e1b1      	b.n	8012e86 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012b22:	6879      	ldr	r1, [r7, #4]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	3304      	adds	r3, #4
 8012b28:	461a      	mov	r2, r3
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff f824 	bl	8011b78 <tcp_route>
 8012b30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d102      	bne.n	8012b3e <tcp_output+0x96>
    return ERR_RTE;
 8012b38:	f06f 0303 	mvn.w	r3, #3
 8012b3c:	e1a3      	b.n	8012e86 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d003      	beq.n	8012b4c <tcp_output+0xa4>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d111      	bne.n	8012b70 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d002      	beq.n	8012b58 <tcp_output+0xb0>
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	3304      	adds	r3, #4
 8012b56:	e000      	b.n	8012b5a <tcp_output+0xb2>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d102      	bne.n	8012b68 <tcp_output+0xc0>
      return ERR_RTE;
 8012b62:	f06f 0303 	mvn.w	r3, #3
 8012b66:	e18e      	b.n	8012e86 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7f8 fe75 	bl	800b866 <lwip_htonl>
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b82:	1ad3      	subs	r3, r2, r3
 8012b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b86:	8912      	ldrh	r2, [r2, #8]
 8012b88:	4413      	add	r3, r2
 8012b8a:	69ba      	ldr	r2, [r7, #24]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d227      	bcs.n	8012be0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b96:	461a      	mov	r2, r3
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	4293      	cmp	r3, r2
 8012b9c:	d114      	bne.n	8012bc8 <tcp_output+0x120>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d110      	bne.n	8012bc8 <tcp_output+0x120>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d10b      	bne.n	8012bc8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	8b5b      	ldrh	r3, [r3, #26]
 8012bcc:	f003 0302 	and.w	r3, r3, #2
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f000 814d 	beq.w	8012e70 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f000 fd6c 	bl	80136b4 <tcp_send_empty_ack>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	e152      	b.n	8012e86 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012bee:	6a3b      	ldr	r3, [r7, #32]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f000 811c 	beq.w	8012e2e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012bf6:	e002      	b.n	8012bfe <tcp_output+0x156>
 8012bf8:	6a3b      	ldr	r3, [r7, #32]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	623b      	str	r3, [r7, #32]
 8012bfe:	6a3b      	ldr	r3, [r7, #32]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d1f8      	bne.n	8012bf8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012c06:	e112      	b.n	8012e2e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	899b      	ldrh	r3, [r3, #12]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f8 fe13 	bl	800b83c <lwip_htons>
 8012c16:	4603      	mov	r3, r0
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f003 0304 	and.w	r3, r3, #4
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d006      	beq.n	8012c30 <tcp_output+0x188>
 8012c22:	4b2f      	ldr	r3, [pc, #188]	; (8012ce0 <tcp_output+0x238>)
 8012c24:	f240 5236 	movw	r2, #1334	; 0x536
 8012c28:	4932      	ldr	r1, [pc, #200]	; (8012cf4 <tcp_output+0x24c>)
 8012c2a:	482f      	ldr	r0, [pc, #188]	; (8012ce8 <tcp_output+0x240>)
 8012c2c:	f006 fa42 	bl	80190b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d01f      	beq.n	8012c78 <tcp_output+0x1d0>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	8b5b      	ldrh	r3, [r3, #26]
 8012c3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d119      	bne.n	8012c78 <tcp_output+0x1d0>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00b      	beq.n	8012c64 <tcp_output+0x1bc>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d110      	bne.n	8012c78 <tcp_output+0x1d0>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c5a:	891a      	ldrh	r2, [r3, #8]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d209      	bcs.n	8012c78 <tcp_output+0x1d0>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <tcp_output+0x1d0>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c74:	2b08      	cmp	r3, #8
 8012c76:	d901      	bls.n	8012c7c <tcp_output+0x1d4>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e000      	b.n	8012c7e <tcp_output+0x1d6>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	8b5b      	ldrh	r3, [r3, #26]
 8012c86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f000 80e4 	beq.w	8012e58 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	7d1b      	ldrb	r3, [r3, #20]
 8012c94:	2b02      	cmp	r3, #2
 8012c96:	d00d      	beq.n	8012cb4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	899b      	ldrh	r3, [r3, #12]
 8012c9e:	b29c      	uxth	r4, r3
 8012ca0:	2010      	movs	r0, #16
 8012ca2:	f7f8 fdcb 	bl	800b83c <lwip_htons>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	461a      	mov	r2, r3
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	4322      	orrs	r2, r4
 8012cb0:	b292      	uxth	r2, r2
 8012cb2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012cb4:	697a      	ldr	r2, [r7, #20]
 8012cb6:	6879      	ldr	r1, [r7, #4]
 8012cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cba:	f000 f909 	bl	8012ed0 <tcp_output_segment>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d016      	beq.n	8012cf8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	8b5b      	ldrh	r3, [r3, #26]
 8012cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	835a      	strh	r2, [r3, #26]
      return err;
 8012cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cdc:	e0d3      	b.n	8012e86 <tcp_output+0x3de>
 8012cde:	bf00      	nop
 8012ce0:	0801c97c 	.word	0x0801c97c
 8012ce4:	0801cec0 	.word	0x0801cec0
 8012ce8:	0801c9d0 	.word	0x0801c9d0
 8012cec:	0801ced8 	.word	0x0801ced8
 8012cf0:	20010ed8 	.word	0x20010ed8
 8012cf4:	0801cf00 	.word	0x0801cf00
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	7d1b      	ldrb	r3, [r3, #20]
 8012d04:	2b02      	cmp	r3, #2
 8012d06:	d006      	beq.n	8012d16 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	8b5b      	ldrh	r3, [r3, #26]
 8012d0c:	f023 0303 	bic.w	r3, r3, #3
 8012d10:	b29a      	uxth	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d18:	68db      	ldr	r3, [r3, #12]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f8 fda2 	bl	800b866 <lwip_htonl>
 8012d22:	4604      	mov	r4, r0
 8012d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d26:	891b      	ldrh	r3, [r3, #8]
 8012d28:	461d      	mov	r5, r3
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	899b      	ldrh	r3, [r3, #12]
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7f8 fd82 	bl	800b83c <lwip_htons>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	f003 0303 	and.w	r3, r3, #3
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d001      	beq.n	8012d48 <tcp_output+0x2a0>
 8012d44:	2301      	movs	r3, #1
 8012d46:	e000      	b.n	8012d4a <tcp_output+0x2a2>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	442b      	add	r3, r5
 8012d4c:	4423      	add	r3, r4
 8012d4e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	1ad3      	subs	r3, r2, r3
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	da02      	bge.n	8012d62 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	68ba      	ldr	r2, [r7, #8]
 8012d60:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d64:	891b      	ldrh	r3, [r3, #8]
 8012d66:	461c      	mov	r4, r3
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	899b      	ldrh	r3, [r3, #12]
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f8 fd63 	bl	800b83c <lwip_htons>
 8012d76:	4603      	mov	r3, r0
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	f003 0303 	and.w	r3, r3, #3
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <tcp_output+0x2de>
 8012d82:	2301      	movs	r3, #1
 8012d84:	e000      	b.n	8012d88 <tcp_output+0x2e0>
 8012d86:	2300      	movs	r3, #0
 8012d88:	4423      	add	r3, r4
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d049      	beq.n	8012e22 <tcp_output+0x37a>
      seg->next = NULL;
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	2200      	movs	r2, #0
 8012d92:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d105      	bne.n	8012da8 <tcp_output+0x300>
        pcb->unacked = seg;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da4:	623b      	str	r3, [r7, #32]
 8012da6:	e03f      	b.n	8012e28 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f8 fd59 	bl	800b866 <lwip_htonl>
 8012db4:	4604      	mov	r4, r0
 8012db6:	6a3b      	ldr	r3, [r7, #32]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7f8 fd52 	bl	800b866 <lwip_htonl>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	1ae3      	subs	r3, r4, r3
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	da24      	bge.n	8012e14 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	3370      	adds	r3, #112	; 0x70
 8012dce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012dd0:	e002      	b.n	8012dd8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d011      	beq.n	8012e04 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7f8 fd3c 	bl	800b866 <lwip_htonl>
 8012dee:	4604      	mov	r4, r0
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7f8 fd35 	bl	800b866 <lwip_htonl>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	dbe6      	blt.n	8012dd2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012e04:	69fb      	ldr	r3, [r7, #28]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	e009      	b.n	8012e28 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012e14:	6a3b      	ldr	r3, [r7, #32]
 8012e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e18:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012e1a:	6a3b      	ldr	r3, [r7, #32]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	623b      	str	r3, [r7, #32]
 8012e20:	e002      	b.n	8012e28 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e24:	f7fb fefb 	bl	800ec1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d012      	beq.n	8012e5a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7f8 fd13 	bl	800b866 <lwip_htonl>
 8012e40:	4602      	mov	r2, r0
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e4a:	8912      	ldrh	r2, [r2, #8]
 8012e4c:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e4e:	69ba      	ldr	r2, [r7, #24]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	f4bf aed9 	bcs.w	8012c08 <tcp_output+0x160>
 8012e56:	e000      	b.n	8012e5a <tcp_output+0x3b2>
      break;
 8012e58:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d108      	bne.n	8012e74 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2200      	movs	r2, #0
 8012e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e6a:	e004      	b.n	8012e76 <tcp_output+0x3ce>
    goto output_done;
 8012e6c:	bf00      	nop
 8012e6e:	e002      	b.n	8012e76 <tcp_output+0x3ce>
    goto output_done;
 8012e70:	bf00      	nop
 8012e72:	e000      	b.n	8012e76 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e74:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	8b5b      	ldrh	r3, [r3, #26]
 8012e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e84:	2300      	movs	r3, #0
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3728      	adds	r7, #40	; 0x28
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8012e8e:	bf00      	nop

08012e90 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d106      	bne.n	8012eac <tcp_output_segment_busy+0x1c>
 8012e9e:	4b09      	ldr	r3, [pc, #36]	; (8012ec4 <tcp_output_segment_busy+0x34>)
 8012ea0:	f240 529a 	movw	r2, #1434	; 0x59a
 8012ea4:	4908      	ldr	r1, [pc, #32]	; (8012ec8 <tcp_output_segment_busy+0x38>)
 8012ea6:	4809      	ldr	r0, [pc, #36]	; (8012ecc <tcp_output_segment_busy+0x3c>)
 8012ea8:	f006 f904 	bl	80190b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	7b9b      	ldrb	r3, [r3, #14]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d001      	beq.n	8012eba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e000      	b.n	8012ebc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012eba:	2300      	movs	r3, #0
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3708      	adds	r7, #8
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	0801c97c 	.word	0x0801c97c
 8012ec8:	0801cf18 	.word	0x0801cf18
 8012ecc:	0801c9d0 	.word	0x0801c9d0

08012ed0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012ed0:	b5b0      	push	{r4, r5, r7, lr}
 8012ed2:	b08c      	sub	sp, #48	; 0x30
 8012ed4:	af04      	add	r7, sp, #16
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <tcp_output_segment+0x20>
 8012ee2:	4b63      	ldr	r3, [pc, #396]	; (8013070 <tcp_output_segment+0x1a0>)
 8012ee4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ee8:	4962      	ldr	r1, [pc, #392]	; (8013074 <tcp_output_segment+0x1a4>)
 8012eea:	4863      	ldr	r0, [pc, #396]	; (8013078 <tcp_output_segment+0x1a8>)
 8012eec:	f006 f8e2 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d106      	bne.n	8012f04 <tcp_output_segment+0x34>
 8012ef6:	4b5e      	ldr	r3, [pc, #376]	; (8013070 <tcp_output_segment+0x1a0>)
 8012ef8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012efc:	495f      	ldr	r1, [pc, #380]	; (801307c <tcp_output_segment+0x1ac>)
 8012efe:	485e      	ldr	r0, [pc, #376]	; (8013078 <tcp_output_segment+0x1a8>)
 8012f00:	f006 f8d8 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d106      	bne.n	8012f18 <tcp_output_segment+0x48>
 8012f0a:	4b59      	ldr	r3, [pc, #356]	; (8013070 <tcp_output_segment+0x1a0>)
 8012f0c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012f10:	495b      	ldr	r1, [pc, #364]	; (8013080 <tcp_output_segment+0x1b0>)
 8012f12:	4859      	ldr	r0, [pc, #356]	; (8013078 <tcp_output_segment+0x1a8>)
 8012f14:	f006 f8ce 	bl	80190b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012f18:	68f8      	ldr	r0, [r7, #12]
 8012f1a:	f7ff ffb9 	bl	8012e90 <tcp_output_segment_busy>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012f24:	2300      	movs	r3, #0
 8012f26:	e09f      	b.n	8013068 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	68dc      	ldr	r4, [r3, #12]
 8012f30:	4610      	mov	r0, r2
 8012f32:	f7f8 fc98 	bl	800b866 <lwip_htonl>
 8012f36:	4603      	mov	r3, r0
 8012f38:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	68dc      	ldr	r4, [r3, #12]
 8012f42:	4610      	mov	r0, r2
 8012f44:	f7f8 fc7a 	bl	800b83c <lwip_htons>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f50:	68ba      	ldr	r2, [r7, #8]
 8012f52:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f54:	441a      	add	r2, r3
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	68db      	ldr	r3, [r3, #12]
 8012f5e:	3314      	adds	r3, #20
 8012f60:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	7a9b      	ldrb	r3, [r3, #10]
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d015      	beq.n	8012f9a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	3304      	adds	r3, #4
 8012f72:	461a      	mov	r2, r3
 8012f74:	6879      	ldr	r1, [r7, #4]
 8012f76:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f7a:	f7fc fa33 	bl	800f3e4 <tcp_eff_send_mss_netif>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f82:	8b7b      	ldrh	r3, [r7, #26]
 8012f84:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f8 fc6c 	bl	800b866 <lwip_htonl>
 8012f8e:	4602      	mov	r2, r0
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	3304      	adds	r3, #4
 8012f98:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	da02      	bge.n	8012faa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d10c      	bne.n	8012fcc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012fb2:	4b34      	ldr	r3, [pc, #208]	; (8013084 <tcp_output_segment+0x1b4>)
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	68db      	ldr	r3, [r3, #12]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f8 fc50 	bl	800b866 <lwip_htonl>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68da      	ldr	r2, [r3, #12]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	1ad3      	subs	r3, r2, r3
 8012fd8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	8959      	ldrh	r1, [r3, #10]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	8b3a      	ldrh	r2, [r7, #24]
 8012fe6:	1a8a      	subs	r2, r1, r2
 8012fe8:	b292      	uxth	r2, r2
 8012fea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	8919      	ldrh	r1, [r3, #8]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	8b3a      	ldrh	r2, [r7, #24]
 8012ff8:	1a8a      	subs	r2, r1, r2
 8012ffa:	b292      	uxth	r2, r2
 8012ffc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	68fa      	ldr	r2, [r7, #12]
 8013004:	68d2      	ldr	r2, [r2, #12]
 8013006:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	2200      	movs	r2, #0
 801300e:	741a      	strb	r2, [r3, #16]
 8013010:	2200      	movs	r2, #0
 8013012:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	f103 0214 	add.w	r2, r3, #20
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	7a9b      	ldrb	r3, [r3, #10]
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	f003 0304 	and.w	r3, r3, #4
 8013026:	4413      	add	r3, r2
 8013028:	69fa      	ldr	r2, [r7, #28]
 801302a:	429a      	cmp	r2, r3
 801302c:	d006      	beq.n	801303c <tcp_output_segment+0x16c>
 801302e:	4b10      	ldr	r3, [pc, #64]	; (8013070 <tcp_output_segment+0x1a0>)
 8013030:	f240 621c 	movw	r2, #1564	; 0x61c
 8013034:	4914      	ldr	r1, [pc, #80]	; (8013088 <tcp_output_segment+0x1b8>)
 8013036:	4810      	ldr	r0, [pc, #64]	; (8013078 <tcp_output_segment+0x1a8>)
 8013038:	f006 f83c 	bl	80190b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	6858      	ldr	r0, [r3, #4]
 8013040:	68b9      	ldr	r1, [r7, #8]
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	1d1c      	adds	r4, r3, #4
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	7add      	ldrb	r5, [r3, #11]
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	7a9b      	ldrb	r3, [r3, #10]
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	9202      	str	r2, [sp, #8]
 8013052:	2206      	movs	r2, #6
 8013054:	9201      	str	r2, [sp, #4]
 8013056:	9300      	str	r3, [sp, #0]
 8013058:	462b      	mov	r3, r5
 801305a:	4622      	mov	r2, r4
 801305c:	f004 fc28 	bl	80178b0 <ip4_output_if>
 8013060:	4603      	mov	r3, r0
 8013062:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013068:	4618      	mov	r0, r3
 801306a:	3720      	adds	r7, #32
 801306c:	46bd      	mov	sp, r7
 801306e:	bdb0      	pop	{r4, r5, r7, pc}
 8013070:	0801c97c 	.word	0x0801c97c
 8013074:	0801cf40 	.word	0x0801cf40
 8013078:	0801c9d0 	.word	0x0801c9d0
 801307c:	0801cf60 	.word	0x0801cf60
 8013080:	0801cf80 	.word	0x0801cf80
 8013084:	20010e8c 	.word	0x20010e8c
 8013088:	0801cfa4 	.word	0x0801cfa4

0801308c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801308c:	b5b0      	push	{r4, r5, r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d106      	bne.n	80130a8 <tcp_rexmit_rto_prepare+0x1c>
 801309a:	4b31      	ldr	r3, [pc, #196]	; (8013160 <tcp_rexmit_rto_prepare+0xd4>)
 801309c:	f240 6263 	movw	r2, #1635	; 0x663
 80130a0:	4930      	ldr	r1, [pc, #192]	; (8013164 <tcp_rexmit_rto_prepare+0xd8>)
 80130a2:	4831      	ldr	r0, [pc, #196]	; (8013168 <tcp_rexmit_rto_prepare+0xdc>)
 80130a4:	f006 f806 	bl	80190b4 <iprintf>

  if (pcb->unacked == NULL) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d102      	bne.n	80130b6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80130b0:	f06f 0305 	mvn.w	r3, #5
 80130b4:	e050      	b.n	8013158 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ba:	60fb      	str	r3, [r7, #12]
 80130bc:	e00b      	b.n	80130d6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f7ff fee6 	bl	8012e90 <tcp_output_segment_busy>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d002      	beq.n	80130d0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80130ca:	f06f 0305 	mvn.w	r3, #5
 80130ce:	e043      	b.n	8013158 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	60fb      	str	r3, [r7, #12]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d1ef      	bne.n	80130be <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	f7ff fed6 	bl	8012e90 <tcp_output_segment_busy>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d002      	beq.n	80130f0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130ea:	f06f 0305 	mvn.w	r3, #5
 80130ee:	e033      	b.n	8013158 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2200      	movs	r2, #0
 8013104:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	8b5b      	ldrh	r3, [r3, #26]
 801310a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801310e:	b29a      	uxth	r2, r3
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	4618      	mov	r0, r3
 801311c:	f7f8 fba3 	bl	800b866 <lwip_htonl>
 8013120:	4604      	mov	r4, r0
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	891b      	ldrh	r3, [r3, #8]
 8013126:	461d      	mov	r5, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	899b      	ldrh	r3, [r3, #12]
 801312e:	b29b      	uxth	r3, r3
 8013130:	4618      	mov	r0, r3
 8013132:	f7f8 fb83 	bl	800b83c <lwip_htons>
 8013136:	4603      	mov	r3, r0
 8013138:	b2db      	uxtb	r3, r3
 801313a:	f003 0303 	and.w	r3, r3, #3
 801313e:	2b00      	cmp	r3, #0
 8013140:	d001      	beq.n	8013146 <tcp_rexmit_rto_prepare+0xba>
 8013142:	2301      	movs	r3, #1
 8013144:	e000      	b.n	8013148 <tcp_rexmit_rto_prepare+0xbc>
 8013146:	2300      	movs	r3, #0
 8013148:	442b      	add	r3, r5
 801314a:	18e2      	adds	r2, r4, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013156:	2300      	movs	r3, #0
}
 8013158:	4618      	mov	r0, r3
 801315a:	3710      	adds	r7, #16
 801315c:	46bd      	mov	sp, r7
 801315e:	bdb0      	pop	{r4, r5, r7, pc}
 8013160:	0801c97c 	.word	0x0801c97c
 8013164:	0801cfb8 	.word	0x0801cfb8
 8013168:	0801c9d0 	.word	0x0801c9d0

0801316c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d106      	bne.n	8013188 <tcp_rexmit_rto_commit+0x1c>
 801317a:	4b0d      	ldr	r3, [pc, #52]	; (80131b0 <tcp_rexmit_rto_commit+0x44>)
 801317c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013180:	490c      	ldr	r1, [pc, #48]	; (80131b4 <tcp_rexmit_rto_commit+0x48>)
 8013182:	480d      	ldr	r0, [pc, #52]	; (80131b8 <tcp_rexmit_rto_commit+0x4c>)
 8013184:	f005 ff96 	bl	80190b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801318e:	2bff      	cmp	r3, #255	; 0xff
 8013190:	d007      	beq.n	80131a2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013198:	3301      	adds	r3, #1
 801319a:	b2da      	uxtb	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7ff fc80 	bl	8012aa8 <tcp_output>
}
 80131a8:	bf00      	nop
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}
 80131b0:	0801c97c 	.word	0x0801c97c
 80131b4:	0801cfdc 	.word	0x0801cfdc
 80131b8:	0801c9d0 	.word	0x0801c9d0

080131bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d106      	bne.n	80131d8 <tcp_rexmit_rto+0x1c>
 80131ca:	4b0a      	ldr	r3, [pc, #40]	; (80131f4 <tcp_rexmit_rto+0x38>)
 80131cc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80131d0:	4909      	ldr	r1, [pc, #36]	; (80131f8 <tcp_rexmit_rto+0x3c>)
 80131d2:	480a      	ldr	r0, [pc, #40]	; (80131fc <tcp_rexmit_rto+0x40>)
 80131d4:	f005 ff6e 	bl	80190b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7ff ff57 	bl	801308c <tcp_rexmit_rto_prepare>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d102      	bne.n	80131ea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7ff ffc1 	bl	801316c <tcp_rexmit_rto_commit>
  }
}
 80131ea:	bf00      	nop
 80131ec:	3708      	adds	r7, #8
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	0801c97c 	.word	0x0801c97c
 80131f8:	0801d000 	.word	0x0801d000
 80131fc:	0801c9d0 	.word	0x0801c9d0

08013200 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013200:	b590      	push	{r4, r7, lr}
 8013202:	b085      	sub	sp, #20
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <tcp_rexmit+0x1c>
 801320e:	4b2f      	ldr	r3, [pc, #188]	; (80132cc <tcp_rexmit+0xcc>)
 8013210:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013214:	492e      	ldr	r1, [pc, #184]	; (80132d0 <tcp_rexmit+0xd0>)
 8013216:	482f      	ldr	r0, [pc, #188]	; (80132d4 <tcp_rexmit+0xd4>)
 8013218:	f005 ff4c 	bl	80190b4 <iprintf>

  if (pcb->unacked == NULL) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013220:	2b00      	cmp	r3, #0
 8013222:	d102      	bne.n	801322a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013224:	f06f 0305 	mvn.w	r3, #5
 8013228:	e04c      	b.n	80132c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801322e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013230:	68b8      	ldr	r0, [r7, #8]
 8013232:	f7ff fe2d 	bl	8012e90 <tcp_output_segment_busy>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801323c:	f06f 0305 	mvn.w	r3, #5
 8013240:	e040      	b.n	80132c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	681a      	ldr	r2, [r3, #0]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	336c      	adds	r3, #108	; 0x6c
 801324e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013250:	e002      	b.n	8013258 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d011      	beq.n	8013284 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	685b      	ldr	r3, [r3, #4]
 8013268:	4618      	mov	r0, r3
 801326a:	f7f8 fafc 	bl	800b866 <lwip_htonl>
 801326e:	4604      	mov	r4, r0
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	4618      	mov	r0, r3
 8013278:	f7f8 faf5 	bl	800b866 <lwip_htonl>
 801327c:	4603      	mov	r3, r0
 801327e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013280:	2b00      	cmp	r3, #0
 8013282:	dbe6      	blt.n	8013252 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681a      	ldr	r2, [r3, #0]
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d103      	bne.n	80132a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2200      	movs	r2, #0
 801329e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132a8:	2bff      	cmp	r3, #255	; 0xff
 80132aa:	d007      	beq.n	80132bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132b2:	3301      	adds	r3, #1
 80132b4:	b2da      	uxtb	r2, r3
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2200      	movs	r2, #0
 80132c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80132c2:	2300      	movs	r3, #0
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3714      	adds	r7, #20
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd90      	pop	{r4, r7, pc}
 80132cc:	0801c97c 	.word	0x0801c97c
 80132d0:	0801d01c 	.word	0x0801d01c
 80132d4:	0801c9d0 	.word	0x0801c9d0

080132d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d106      	bne.n	80132f4 <tcp_rexmit_fast+0x1c>
 80132e6:	4b2a      	ldr	r3, [pc, #168]	; (8013390 <tcp_rexmit_fast+0xb8>)
 80132e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132ec:	4929      	ldr	r1, [pc, #164]	; (8013394 <tcp_rexmit_fast+0xbc>)
 80132ee:	482a      	ldr	r0, [pc, #168]	; (8013398 <tcp_rexmit_fast+0xc0>)
 80132f0:	f005 fee0 	bl	80190b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d044      	beq.n	8013386 <tcp_rexmit_fast+0xae>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	8b5b      	ldrh	r3, [r3, #26]
 8013300:	f003 0304 	and.w	r3, r3, #4
 8013304:	2b00      	cmp	r3, #0
 8013306:	d13e      	bne.n	8013386 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f7ff ff79 	bl	8013200 <tcp_rexmit>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d138      	bne.n	8013386 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013320:	4293      	cmp	r3, r2
 8013322:	bf28      	it	cs
 8013324:	4613      	movcs	r3, r2
 8013326:	b29b      	uxth	r3, r3
 8013328:	0fda      	lsrs	r2, r3, #31
 801332a:	4413      	add	r3, r2
 801332c:	105b      	asrs	r3, r3, #1
 801332e:	b29a      	uxth	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801333c:	461a      	mov	r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	429a      	cmp	r2, r3
 8013346:	d206      	bcs.n	8013356 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801334c:	005b      	lsls	r3, r3, #1
 801334e:	b29a      	uxth	r2, r3
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013360:	4619      	mov	r1, r3
 8013362:	0049      	lsls	r1, r1, #1
 8013364:	440b      	add	r3, r1
 8013366:	b29b      	uxth	r3, r3
 8013368:	4413      	add	r3, r2
 801336a:	b29a      	uxth	r2, r3
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	8b5b      	ldrh	r3, [r3, #26]
 8013376:	f043 0304 	orr.w	r3, r3, #4
 801337a:	b29a      	uxth	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2200      	movs	r2, #0
 8013384:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013386:	bf00      	nop
 8013388:	3708      	adds	r7, #8
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	0801c97c 	.word	0x0801c97c
 8013394:	0801d034 	.word	0x0801d034
 8013398:	0801c9d0 	.word	0x0801c9d0

0801339c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b086      	sub	sp, #24
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	607b      	str	r3, [r7, #4]
 80133a6:	460b      	mov	r3, r1
 80133a8:	817b      	strh	r3, [r7, #10]
 80133aa:	4613      	mov	r3, r2
 80133ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80133ae:	897a      	ldrh	r2, [r7, #10]
 80133b0:	893b      	ldrh	r3, [r7, #8]
 80133b2:	4413      	add	r3, r2
 80133b4:	b29b      	uxth	r3, r3
 80133b6:	3314      	adds	r3, #20
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133be:	4619      	mov	r1, r3
 80133c0:	2022      	movs	r0, #34	; 0x22
 80133c2:	f7f9 fb8b 	bl	800cadc <pbuf_alloc>
 80133c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d04d      	beq.n	801346a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80133ce:	897b      	ldrh	r3, [r7, #10]
 80133d0:	3313      	adds	r3, #19
 80133d2:	697a      	ldr	r2, [r7, #20]
 80133d4:	8952      	ldrh	r2, [r2, #10]
 80133d6:	4293      	cmp	r3, r2
 80133d8:	db06      	blt.n	80133e8 <tcp_output_alloc_header_common+0x4c>
 80133da:	4b26      	ldr	r3, [pc, #152]	; (8013474 <tcp_output_alloc_header_common+0xd8>)
 80133dc:	f240 7223 	movw	r2, #1827	; 0x723
 80133e0:	4925      	ldr	r1, [pc, #148]	; (8013478 <tcp_output_alloc_header_common+0xdc>)
 80133e2:	4826      	ldr	r0, [pc, #152]	; (801347c <tcp_output_alloc_header_common+0xe0>)
 80133e4:	f005 fe66 	bl	80190b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133ee:	8c3b      	ldrh	r3, [r7, #32]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7f8 fa23 	bl	800b83c <lwip_htons>
 80133f6:	4603      	mov	r3, r0
 80133f8:	461a      	mov	r2, r3
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013400:	4618      	mov	r0, r3
 8013402:	f7f8 fa1b 	bl	800b83c <lwip_htons>
 8013406:	4603      	mov	r3, r0
 8013408:	461a      	mov	r2, r3
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013414:	68f8      	ldr	r0, [r7, #12]
 8013416:	f7f8 fa26 	bl	800b866 <lwip_htonl>
 801341a:	4602      	mov	r2, r0
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013420:	897b      	ldrh	r3, [r7, #10]
 8013422:	089b      	lsrs	r3, r3, #2
 8013424:	b29b      	uxth	r3, r3
 8013426:	3305      	adds	r3, #5
 8013428:	b29b      	uxth	r3, r3
 801342a:	031b      	lsls	r3, r3, #12
 801342c:	b29a      	uxth	r2, r3
 801342e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013432:	b29b      	uxth	r3, r3
 8013434:	4313      	orrs	r3, r2
 8013436:	b29b      	uxth	r3, r3
 8013438:	4618      	mov	r0, r3
 801343a:	f7f8 f9ff 	bl	800b83c <lwip_htons>
 801343e:	4603      	mov	r3, r0
 8013440:	461a      	mov	r2, r3
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013446:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 f9f7 	bl	800b83c <lwip_htons>
 801344e:	4603      	mov	r3, r0
 8013450:	461a      	mov	r2, r3
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	2200      	movs	r2, #0
 801345a:	741a      	strb	r2, [r3, #16]
 801345c:	2200      	movs	r2, #0
 801345e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	2200      	movs	r2, #0
 8013464:	749a      	strb	r2, [r3, #18]
 8013466:	2200      	movs	r2, #0
 8013468:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801346a:	697b      	ldr	r3, [r7, #20]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3718      	adds	r7, #24
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	0801c97c 	.word	0x0801c97c
 8013478:	0801d054 	.word	0x0801d054
 801347c:	0801c9d0 	.word	0x0801c9d0

08013480 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013480:	b5b0      	push	{r4, r5, r7, lr}
 8013482:	b08a      	sub	sp, #40	; 0x28
 8013484:	af04      	add	r7, sp, #16
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	607b      	str	r3, [r7, #4]
 801348a:	460b      	mov	r3, r1
 801348c:	817b      	strh	r3, [r7, #10]
 801348e:	4613      	mov	r3, r2
 8013490:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d106      	bne.n	80134a6 <tcp_output_alloc_header+0x26>
 8013498:	4b15      	ldr	r3, [pc, #84]	; (80134f0 <tcp_output_alloc_header+0x70>)
 801349a:	f240 7242 	movw	r2, #1858	; 0x742
 801349e:	4915      	ldr	r1, [pc, #84]	; (80134f4 <tcp_output_alloc_header+0x74>)
 80134a0:	4815      	ldr	r0, [pc, #84]	; (80134f8 <tcp_output_alloc_header+0x78>)
 80134a2:	f005 fe07 	bl	80190b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	8adb      	ldrh	r3, [r3, #22]
 80134ae:	68fa      	ldr	r2, [r7, #12]
 80134b0:	8b12      	ldrh	r2, [r2, #24]
 80134b2:	68f9      	ldr	r1, [r7, #12]
 80134b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80134b6:	893d      	ldrh	r5, [r7, #8]
 80134b8:	897c      	ldrh	r4, [r7, #10]
 80134ba:	9103      	str	r1, [sp, #12]
 80134bc:	2110      	movs	r1, #16
 80134be:	9102      	str	r1, [sp, #8]
 80134c0:	9201      	str	r2, [sp, #4]
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	462a      	mov	r2, r5
 80134c8:	4621      	mov	r1, r4
 80134ca:	f7ff ff67 	bl	801339c <tcp_output_alloc_header_common>
 80134ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d006      	beq.n	80134e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80134de:	441a      	add	r2, r3
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80134e4:	697b      	ldr	r3, [r7, #20]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3718      	adds	r7, #24
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bdb0      	pop	{r4, r5, r7, pc}
 80134ee:	bf00      	nop
 80134f0:	0801c97c 	.word	0x0801c97c
 80134f4:	0801d084 	.word	0x0801d084
 80134f8:	0801c9d0 	.word	0x0801c9d0

080134fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b088      	sub	sp, #32
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	4611      	mov	r1, r2
 8013508:	461a      	mov	r2, r3
 801350a:	460b      	mov	r3, r1
 801350c:	71fb      	strb	r3, [r7, #7]
 801350e:	4613      	mov	r3, r2
 8013510:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013512:	2300      	movs	r3, #0
 8013514:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d106      	bne.n	801352a <tcp_output_fill_options+0x2e>
 801351c:	4b13      	ldr	r3, [pc, #76]	; (801356c <tcp_output_fill_options+0x70>)
 801351e:	f240 7256 	movw	r2, #1878	; 0x756
 8013522:	4913      	ldr	r1, [pc, #76]	; (8013570 <tcp_output_fill_options+0x74>)
 8013524:	4813      	ldr	r0, [pc, #76]	; (8013574 <tcp_output_fill_options+0x78>)
 8013526:	f005 fdc5 	bl	80190b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	3314      	adds	r3, #20
 8013534:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	f103 0214 	add.w	r2, r3, #20
 801353c:	8bfb      	ldrh	r3, [r7, #30]
 801353e:	009b      	lsls	r3, r3, #2
 8013540:	4619      	mov	r1, r3
 8013542:	79fb      	ldrb	r3, [r7, #7]
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	f003 0304 	and.w	r3, r3, #4
 801354a:	440b      	add	r3, r1
 801354c:	4413      	add	r3, r2
 801354e:	697a      	ldr	r2, [r7, #20]
 8013550:	429a      	cmp	r2, r3
 8013552:	d006      	beq.n	8013562 <tcp_output_fill_options+0x66>
 8013554:	4b05      	ldr	r3, [pc, #20]	; (801356c <tcp_output_fill_options+0x70>)
 8013556:	f240 7275 	movw	r2, #1909	; 0x775
 801355a:	4907      	ldr	r1, [pc, #28]	; (8013578 <tcp_output_fill_options+0x7c>)
 801355c:	4805      	ldr	r0, [pc, #20]	; (8013574 <tcp_output_fill_options+0x78>)
 801355e:	f005 fda9 	bl	80190b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013562:	bf00      	nop
 8013564:	3720      	adds	r7, #32
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	0801c97c 	.word	0x0801c97c
 8013570:	0801d0ac 	.word	0x0801d0ac
 8013574:	0801c9d0 	.word	0x0801c9d0
 8013578:	0801cfa4 	.word	0x0801cfa4

0801357c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b08a      	sub	sp, #40	; 0x28
 8013580:	af04      	add	r7, sp, #16
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	607a      	str	r2, [r7, #4]
 8013588:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d106      	bne.n	801359e <tcp_output_control_segment+0x22>
 8013590:	4b1c      	ldr	r3, [pc, #112]	; (8013604 <tcp_output_control_segment+0x88>)
 8013592:	f240 7287 	movw	r2, #1927	; 0x787
 8013596:	491c      	ldr	r1, [pc, #112]	; (8013608 <tcp_output_control_segment+0x8c>)
 8013598:	481c      	ldr	r0, [pc, #112]	; (801360c <tcp_output_control_segment+0x90>)
 801359a:	f005 fd8b 	bl	80190b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801359e:	683a      	ldr	r2, [r7, #0]
 80135a0:	6879      	ldr	r1, [r7, #4]
 80135a2:	68f8      	ldr	r0, [r7, #12]
 80135a4:	f7fe fae8 	bl	8011b78 <tcp_route>
 80135a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80135b0:	23fc      	movs	r3, #252	; 0xfc
 80135b2:	75fb      	strb	r3, [r7, #23]
 80135b4:	e01c      	b.n	80135f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d006      	beq.n	80135ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	7adb      	ldrb	r3, [r3, #11]
 80135c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	7a9b      	ldrb	r3, [r3, #10]
 80135c6:	757b      	strb	r3, [r7, #21]
 80135c8:	e003      	b.n	80135d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80135ca:	23ff      	movs	r3, #255	; 0xff
 80135cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80135ce:	2300      	movs	r3, #0
 80135d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80135d2:	7dba      	ldrb	r2, [r7, #22]
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	9302      	str	r3, [sp, #8]
 80135d8:	2306      	movs	r3, #6
 80135da:	9301      	str	r3, [sp, #4]
 80135dc:	7d7b      	ldrb	r3, [r7, #21]
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	4613      	mov	r3, r2
 80135e2:	683a      	ldr	r2, [r7, #0]
 80135e4:	6879      	ldr	r1, [r7, #4]
 80135e6:	68b8      	ldr	r0, [r7, #8]
 80135e8:	f004 f962 	bl	80178b0 <ip4_output_if>
 80135ec:	4603      	mov	r3, r0
 80135ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135f0:	68b8      	ldr	r0, [r7, #8]
 80135f2:	f7f9 fd57 	bl	800d0a4 <pbuf_free>
  return err;
 80135f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3718      	adds	r7, #24
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	0801c97c 	.word	0x0801c97c
 8013608:	0801d0d4 	.word	0x0801d0d4
 801360c:	0801c9d0 	.word	0x0801c9d0

08013610 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013610:	b590      	push	{r4, r7, lr}
 8013612:	b08b      	sub	sp, #44	; 0x2c
 8013614:	af04      	add	r7, sp, #16
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
 801361c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d106      	bne.n	8013632 <tcp_rst+0x22>
 8013624:	4b1f      	ldr	r3, [pc, #124]	; (80136a4 <tcp_rst+0x94>)
 8013626:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801362a:	491f      	ldr	r1, [pc, #124]	; (80136a8 <tcp_rst+0x98>)
 801362c:	481f      	ldr	r0, [pc, #124]	; (80136ac <tcp_rst+0x9c>)
 801362e:	f005 fd41 	bl	80190b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013634:	2b00      	cmp	r3, #0
 8013636:	d106      	bne.n	8013646 <tcp_rst+0x36>
 8013638:	4b1a      	ldr	r3, [pc, #104]	; (80136a4 <tcp_rst+0x94>)
 801363a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801363e:	491c      	ldr	r1, [pc, #112]	; (80136b0 <tcp_rst+0xa0>)
 8013640:	481a      	ldr	r0, [pc, #104]	; (80136ac <tcp_rst+0x9c>)
 8013642:	f005 fd37 	bl	80190b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013646:	2300      	movs	r3, #0
 8013648:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801364a:	f246 0308 	movw	r3, #24584	; 0x6008
 801364e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013650:	7dfb      	ldrb	r3, [r7, #23]
 8013652:	b29c      	uxth	r4, r3
 8013654:	68b8      	ldr	r0, [r7, #8]
 8013656:	f7f8 f906 	bl	800b866 <lwip_htonl>
 801365a:	4602      	mov	r2, r0
 801365c:	8abb      	ldrh	r3, [r7, #20]
 801365e:	9303      	str	r3, [sp, #12]
 8013660:	2314      	movs	r3, #20
 8013662:	9302      	str	r3, [sp, #8]
 8013664:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013666:	9301      	str	r3, [sp, #4]
 8013668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	4613      	mov	r3, r2
 801366e:	2200      	movs	r2, #0
 8013670:	4621      	mov	r1, r4
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7ff fe92 	bl	801339c <tcp_output_alloc_header_common>
 8013678:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00c      	beq.n	801369a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013680:	7dfb      	ldrb	r3, [r7, #23]
 8013682:	2200      	movs	r2, #0
 8013684:	6939      	ldr	r1, [r7, #16]
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f7ff ff38 	bl	80134fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368e:	683a      	ldr	r2, [r7, #0]
 8013690:	6939      	ldr	r1, [r7, #16]
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f7ff ff72 	bl	801357c <tcp_output_control_segment>
 8013698:	e000      	b.n	801369c <tcp_rst+0x8c>
    return;
 801369a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801369c:	371c      	adds	r7, #28
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd90      	pop	{r4, r7, pc}
 80136a2:	bf00      	nop
 80136a4:	0801c97c 	.word	0x0801c97c
 80136a8:	0801d100 	.word	0x0801d100
 80136ac:	0801c9d0 	.word	0x0801c9d0
 80136b0:	0801d11c 	.word	0x0801d11c

080136b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80136b4:	b590      	push	{r4, r7, lr}
 80136b6:	b087      	sub	sp, #28
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80136bc:	2300      	movs	r3, #0
 80136be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80136c0:	2300      	movs	r3, #0
 80136c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d106      	bne.n	80136d8 <tcp_send_empty_ack+0x24>
 80136ca:	4b28      	ldr	r3, [pc, #160]	; (801376c <tcp_send_empty_ack+0xb8>)
 80136cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80136d0:	4927      	ldr	r1, [pc, #156]	; (8013770 <tcp_send_empty_ack+0xbc>)
 80136d2:	4828      	ldr	r0, [pc, #160]	; (8013774 <tcp_send_empty_ack+0xc0>)
 80136d4:	f005 fcee 	bl	80190b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136d8:	7dfb      	ldrb	r3, [r7, #23]
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	f003 0304 	and.w	r3, r3, #4
 80136e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80136e4:	7d7b      	ldrb	r3, [r7, #21]
 80136e6:	b29c      	uxth	r4, r3
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7f8 f8ba 	bl	800b866 <lwip_htonl>
 80136f2:	4603      	mov	r3, r0
 80136f4:	2200      	movs	r2, #0
 80136f6:	4621      	mov	r1, r4
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f7ff fec1 	bl	8013480 <tcp_output_alloc_header>
 80136fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d109      	bne.n	801371a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	8b5b      	ldrh	r3, [r3, #26]
 801370a:	f043 0303 	orr.w	r3, r3, #3
 801370e:	b29a      	uxth	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013714:	f06f 0301 	mvn.w	r3, #1
 8013718:	e023      	b.n	8013762 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801371a:	7dbb      	ldrb	r3, [r7, #22]
 801371c:	7dfa      	ldrb	r2, [r7, #23]
 801371e:	6939      	ldr	r1, [r7, #16]
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff feeb 	bl	80134fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	3304      	adds	r3, #4
 801372c:	6939      	ldr	r1, [r7, #16]
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f7ff ff24 	bl	801357c <tcp_output_control_segment>
 8013734:	4603      	mov	r3, r0
 8013736:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d007      	beq.n	8013750 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	8b5b      	ldrh	r3, [r3, #26]
 8013744:	f043 0303 	orr.w	r3, r3, #3
 8013748:	b29a      	uxth	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	835a      	strh	r2, [r3, #26]
 801374e:	e006      	b.n	801375e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	8b5b      	ldrh	r3, [r3, #26]
 8013754:	f023 0303 	bic.w	r3, r3, #3
 8013758:	b29a      	uxth	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013762:	4618      	mov	r0, r3
 8013764:	371c      	adds	r7, #28
 8013766:	46bd      	mov	sp, r7
 8013768:	bd90      	pop	{r4, r7, pc}
 801376a:	bf00      	nop
 801376c:	0801c97c 	.word	0x0801c97c
 8013770:	0801d138 	.word	0x0801d138
 8013774:	0801c9d0 	.word	0x0801c9d0

08013778 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013778:	b590      	push	{r4, r7, lr}
 801377a:	b087      	sub	sp, #28
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013780:	2300      	movs	r3, #0
 8013782:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <tcp_keepalive+0x20>
 801378a:	4b18      	ldr	r3, [pc, #96]	; (80137ec <tcp_keepalive+0x74>)
 801378c:	f640 0224 	movw	r2, #2084	; 0x824
 8013790:	4917      	ldr	r1, [pc, #92]	; (80137f0 <tcp_keepalive+0x78>)
 8013792:	4818      	ldr	r0, [pc, #96]	; (80137f4 <tcp_keepalive+0x7c>)
 8013794:	f005 fc8e 	bl	80190b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013798:	7dfb      	ldrb	r3, [r7, #23]
 801379a:	b29c      	uxth	r4, r3
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137a0:	3b01      	subs	r3, #1
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7f8 f85f 	bl	800b866 <lwip_htonl>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2200      	movs	r2, #0
 80137ac:	4621      	mov	r1, r4
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7ff fe66 	bl	8013480 <tcp_output_alloc_header>
 80137b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d102      	bne.n	80137c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80137bc:	f04f 33ff 	mov.w	r3, #4294967295
 80137c0:	e010      	b.n	80137e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137c2:	7dfb      	ldrb	r3, [r7, #23]
 80137c4:	2200      	movs	r2, #0
 80137c6:	6939      	ldr	r1, [r7, #16]
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7ff fe97 	bl	80134fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	3304      	adds	r3, #4
 80137d4:	6939      	ldr	r1, [r7, #16]
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7ff fed0 	bl	801357c <tcp_output_control_segment>
 80137dc:	4603      	mov	r3, r0
 80137de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	371c      	adds	r7, #28
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd90      	pop	{r4, r7, pc}
 80137ec:	0801c97c 	.word	0x0801c97c
 80137f0:	0801d158 	.word	0x0801d158
 80137f4:	0801c9d0 	.word	0x0801c9d0

080137f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137f8:	b590      	push	{r4, r7, lr}
 80137fa:	b08b      	sub	sp, #44	; 0x2c
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013800:	2300      	movs	r3, #0
 8013802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d106      	bne.n	801381a <tcp_zero_window_probe+0x22>
 801380c:	4b4c      	ldr	r3, [pc, #304]	; (8013940 <tcp_zero_window_probe+0x148>)
 801380e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013812:	494c      	ldr	r1, [pc, #304]	; (8013944 <tcp_zero_window_probe+0x14c>)
 8013814:	484c      	ldr	r0, [pc, #304]	; (8013948 <tcp_zero_window_probe+0x150>)
 8013816:	f005 fc4d 	bl	80190b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013820:	6a3b      	ldr	r3, [r7, #32]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d101      	bne.n	801382a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013826:	2300      	movs	r3, #0
 8013828:	e086      	b.n	8013938 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013830:	2bff      	cmp	r3, #255	; 0xff
 8013832:	d007      	beq.n	8013844 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801383a:	3301      	adds	r3, #1
 801383c:	b2da      	uxtb	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013844:	6a3b      	ldr	r3, [r7, #32]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	899b      	ldrh	r3, [r3, #12]
 801384a:	b29b      	uxth	r3, r3
 801384c:	4618      	mov	r0, r3
 801384e:	f7f7 fff5 	bl	800b83c <lwip_htons>
 8013852:	4603      	mov	r3, r0
 8013854:	b2db      	uxtb	r3, r3
 8013856:	f003 0301 	and.w	r3, r3, #1
 801385a:	2b00      	cmp	r3, #0
 801385c:	d005      	beq.n	801386a <tcp_zero_window_probe+0x72>
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	891b      	ldrh	r3, [r3, #8]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d101      	bne.n	801386a <tcp_zero_window_probe+0x72>
 8013866:	2301      	movs	r3, #1
 8013868:	e000      	b.n	801386c <tcp_zero_window_probe+0x74>
 801386a:	2300      	movs	r3, #0
 801386c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801386e:	7ffb      	ldrb	r3, [r7, #31]
 8013870:	2b00      	cmp	r3, #0
 8013872:	bf0c      	ite	eq
 8013874:	2301      	moveq	r3, #1
 8013876:	2300      	movne	r3, #0
 8013878:	b2db      	uxtb	r3, r3
 801387a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801387c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013880:	b299      	uxth	r1, r3
 8013882:	6a3b      	ldr	r3, [r7, #32]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	685b      	ldr	r3, [r3, #4]
 8013888:	8bba      	ldrh	r2, [r7, #28]
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f7ff fdf8 	bl	8013480 <tcp_output_alloc_header>
 8013890:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d102      	bne.n	801389e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013898:	f04f 33ff 	mov.w	r3, #4294967295
 801389c:	e04c      	b.n	8013938 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80138a4:	7ffb      	ldrb	r3, [r7, #31]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d011      	beq.n	80138ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	899b      	ldrh	r3, [r3, #12]
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	b21b      	sxth	r3, r3
 80138b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80138b6:	b21c      	sxth	r4, r3
 80138b8:	2011      	movs	r0, #17
 80138ba:	f7f7 ffbf 	bl	800b83c <lwip_htons>
 80138be:	4603      	mov	r3, r0
 80138c0:	b21b      	sxth	r3, r3
 80138c2:	4323      	orrs	r3, r4
 80138c4:	b21b      	sxth	r3, r3
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	819a      	strh	r2, [r3, #12]
 80138cc:	e010      	b.n	80138f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	3314      	adds	r3, #20
 80138d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80138d6:	6a3b      	ldr	r3, [r7, #32]
 80138d8:	6858      	ldr	r0, [r3, #4]
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	891a      	ldrh	r2, [r3, #8]
 80138e0:	6a3b      	ldr	r3, [r7, #32]
 80138e2:	891b      	ldrh	r3, [r3, #8]
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	2201      	movs	r2, #1
 80138ea:	6939      	ldr	r1, [r7, #16]
 80138ec:	f7f9 fde0 	bl	800d4b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138f0:	6a3b      	ldr	r3, [r7, #32]
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7f7 ffb5 	bl	800b866 <lwip_htonl>
 80138fc:	4603      	mov	r3, r0
 80138fe:	3301      	adds	r3, #1
 8013900:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	1ad3      	subs	r3, r2, r3
 801390a:	2b00      	cmp	r3, #0
 801390c:	da02      	bge.n	8013914 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	68fa      	ldr	r2, [r7, #12]
 8013912:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013918:	2200      	movs	r2, #0
 801391a:	69b9      	ldr	r1, [r7, #24]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7ff fded 	bl	80134fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013922:	687a      	ldr	r2, [r7, #4]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	3304      	adds	r3, #4
 8013928:	69b9      	ldr	r1, [r7, #24]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fe26 	bl	801357c <tcp_output_control_segment>
 8013930:	4603      	mov	r3, r0
 8013932:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013934:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013938:	4618      	mov	r0, r3
 801393a:	372c      	adds	r7, #44	; 0x2c
 801393c:	46bd      	mov	sp, r7
 801393e:	bd90      	pop	{r4, r7, pc}
 8013940:	0801c97c 	.word	0x0801c97c
 8013944:	0801d174 	.word	0x0801d174
 8013948:	0801c9d0 	.word	0x0801c9d0

0801394c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013954:	f7f9 fe9a 	bl	800d68c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013958:	4b0a      	ldr	r3, [pc, #40]	; (8013984 <tcpip_tcp_timer+0x38>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d103      	bne.n	8013968 <tcpip_tcp_timer+0x1c>
 8013960:	4b09      	ldr	r3, [pc, #36]	; (8013988 <tcpip_tcp_timer+0x3c>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d005      	beq.n	8013974 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013968:	2200      	movs	r2, #0
 801396a:	4908      	ldr	r1, [pc, #32]	; (801398c <tcpip_tcp_timer+0x40>)
 801396c:	20fa      	movs	r0, #250	; 0xfa
 801396e:	f000 f8f3 	bl	8013b58 <sys_timeout>
 8013972:	e003      	b.n	801397c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013974:	4b06      	ldr	r3, [pc, #24]	; (8013990 <tcpip_tcp_timer+0x44>)
 8013976:	2200      	movs	r2, #0
 8013978:	601a      	str	r2, [r3, #0]
  }
}
 801397a:	bf00      	nop
 801397c:	bf00      	nop
 801397e:	3708      	adds	r7, #8
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}
 8013984:	20010e98 	.word	0x20010e98
 8013988:	20010e9c 	.word	0x20010e9c
 801398c:	0801394d 	.word	0x0801394d
 8013990:	20010ee4 	.word	0x20010ee4

08013994 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013998:	4b0a      	ldr	r3, [pc, #40]	; (80139c4 <tcp_timer_needed+0x30>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d10f      	bne.n	80139c0 <tcp_timer_needed+0x2c>
 80139a0:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <tcp_timer_needed+0x34>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d103      	bne.n	80139b0 <tcp_timer_needed+0x1c>
 80139a8:	4b08      	ldr	r3, [pc, #32]	; (80139cc <tcp_timer_needed+0x38>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d007      	beq.n	80139c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80139b0:	4b04      	ldr	r3, [pc, #16]	; (80139c4 <tcp_timer_needed+0x30>)
 80139b2:	2201      	movs	r2, #1
 80139b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139b6:	2200      	movs	r2, #0
 80139b8:	4905      	ldr	r1, [pc, #20]	; (80139d0 <tcp_timer_needed+0x3c>)
 80139ba:	20fa      	movs	r0, #250	; 0xfa
 80139bc:	f000 f8cc 	bl	8013b58 <sys_timeout>
  }
}
 80139c0:	bf00      	nop
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	20010ee4 	.word	0x20010ee4
 80139c8:	20010e98 	.word	0x20010e98
 80139cc:	20010e9c 	.word	0x20010e9c
 80139d0:	0801394d 	.word	0x0801394d

080139d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b086      	sub	sp, #24
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80139e0:	200a      	movs	r0, #10
 80139e2:	f7f8 fc39 	bl	800c258 <memp_malloc>
 80139e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d109      	bne.n	8013a02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d151      	bne.n	8013a98 <sys_timeout_abs+0xc4>
 80139f4:	4b2a      	ldr	r3, [pc, #168]	; (8013aa0 <sys_timeout_abs+0xcc>)
 80139f6:	22be      	movs	r2, #190	; 0xbe
 80139f8:	492a      	ldr	r1, [pc, #168]	; (8013aa4 <sys_timeout_abs+0xd0>)
 80139fa:	482b      	ldr	r0, [pc, #172]	; (8013aa8 <sys_timeout_abs+0xd4>)
 80139fc:	f005 fb5a 	bl	80190b4 <iprintf>
    return;
 8013a00:	e04a      	b.n	8013a98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	2200      	movs	r2, #0
 8013a06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	68ba      	ldr	r2, [r7, #8]
 8013a0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013a1a:	4b24      	ldr	r3, [pc, #144]	; (8013aac <sys_timeout_abs+0xd8>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d103      	bne.n	8013a2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a22:	4a22      	ldr	r2, [pc, #136]	; (8013aac <sys_timeout_abs+0xd8>)
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	6013      	str	r3, [r2, #0]
    return;
 8013a28:	e037      	b.n	8013a9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	685a      	ldr	r2, [r3, #4]
 8013a2e:	4b1f      	ldr	r3, [pc, #124]	; (8013aac <sys_timeout_abs+0xd8>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	1ad3      	subs	r3, r2, r3
 8013a36:	0fdb      	lsrs	r3, r3, #31
 8013a38:	f003 0301 	and.w	r3, r3, #1
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d007      	beq.n	8013a52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a42:	4b1a      	ldr	r3, [pc, #104]	; (8013aac <sys_timeout_abs+0xd8>)
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a4a:	4a18      	ldr	r2, [pc, #96]	; (8013aac <sys_timeout_abs+0xd8>)
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	6013      	str	r3, [r2, #0]
 8013a50:	e023      	b.n	8013a9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a52:	4b16      	ldr	r3, [pc, #88]	; (8013aac <sys_timeout_abs+0xd8>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	617b      	str	r3, [r7, #20]
 8013a58:	e01a      	b.n	8013a90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d00b      	beq.n	8013a7a <sys_timeout_abs+0xa6>
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	685a      	ldr	r2, [r3, #4]
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	0fdb      	lsrs	r3, r3, #31
 8013a70:	f003 0301 	and.w	r3, r3, #1
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d007      	beq.n	8013a8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	693a      	ldr	r2, [r7, #16]
 8013a86:	601a      	str	r2, [r3, #0]
        break;
 8013a88:	e007      	b.n	8013a9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	617b      	str	r3, [r7, #20]
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1e1      	bne.n	8013a5a <sys_timeout_abs+0x86>
 8013a96:	e000      	b.n	8013a9a <sys_timeout_abs+0xc6>
    return;
 8013a98:	bf00      	nop
      }
    }
  }
}
 8013a9a:	3718      	adds	r7, #24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	0801d198 	.word	0x0801d198
 8013aa4:	0801d1cc 	.word	0x0801d1cc
 8013aa8:	0801d20c 	.word	0x0801d20c
 8013aac:	20010edc 	.word	0x20010edc

08013ab0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b086      	sub	sp, #24
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	4798      	blx	r3

  now = sys_now();
 8013ac2:	f7f1 f9e9 	bl	8004e98 <sys_now>
 8013ac6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	681a      	ldr	r2, [r3, #0]
 8013acc:	4b0f      	ldr	r3, [pc, #60]	; (8013b0c <lwip_cyclic_timer+0x5c>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	4413      	add	r3, r2
 8013ad2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ad4:	68fa      	ldr	r2, [r7, #12]
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	1ad3      	subs	r3, r2, r3
 8013ada:	0fdb      	lsrs	r3, r3, #31
 8013adc:	f003 0301 	and.w	r3, r3, #1
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d009      	beq.n	8013afa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	4413      	add	r3, r2
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	4907      	ldr	r1, [pc, #28]	; (8013b10 <lwip_cyclic_timer+0x60>)
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7ff ff6e 	bl	80139d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013af8:	e004      	b.n	8013b04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	4904      	ldr	r1, [pc, #16]	; (8013b10 <lwip_cyclic_timer+0x60>)
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	f7ff ff68 	bl	80139d4 <sys_timeout_abs>
}
 8013b04:	bf00      	nop
 8013b06:	3718      	adds	r7, #24
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	20010ee0 	.word	0x20010ee0
 8013b10:	08013ab1 	.word	0x08013ab1

08013b14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	607b      	str	r3, [r7, #4]
 8013b1e:	e00e      	b.n	8013b3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b20:	4a0b      	ldr	r2, [pc, #44]	; (8013b50 <sys_timeouts_init+0x3c>)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	00db      	lsls	r3, r3, #3
 8013b2c:	4a08      	ldr	r2, [pc, #32]	; (8013b50 <sys_timeouts_init+0x3c>)
 8013b2e:	4413      	add	r3, r2
 8013b30:	461a      	mov	r2, r3
 8013b32:	4908      	ldr	r1, [pc, #32]	; (8013b54 <sys_timeouts_init+0x40>)
 8013b34:	f000 f810 	bl	8013b58 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	607b      	str	r3, [r7, #4]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2b04      	cmp	r3, #4
 8013b42:	d9ed      	bls.n	8013b20 <sys_timeouts_init+0xc>
  }
}
 8013b44:	bf00      	nop
 8013b46:	bf00      	nop
 8013b48:	3708      	adds	r7, #8
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	080282a0 	.word	0x080282a0
 8013b54:	08013ab1 	.word	0x08013ab1

08013b58 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b086      	sub	sp, #24
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b6a:	d306      	bcc.n	8013b7a <sys_timeout+0x22>
 8013b6c:	4b0a      	ldr	r3, [pc, #40]	; (8013b98 <sys_timeout+0x40>)
 8013b6e:	f240 1229 	movw	r2, #297	; 0x129
 8013b72:	490a      	ldr	r1, [pc, #40]	; (8013b9c <sys_timeout+0x44>)
 8013b74:	480a      	ldr	r0, [pc, #40]	; (8013ba0 <sys_timeout+0x48>)
 8013b76:	f005 fa9d 	bl	80190b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b7a:	f7f1 f98d 	bl	8004e98 <sys_now>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	4413      	add	r3, r2
 8013b84:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	68b9      	ldr	r1, [r7, #8]
 8013b8a:	6978      	ldr	r0, [r7, #20]
 8013b8c:	f7ff ff22 	bl	80139d4 <sys_timeout_abs>
#endif
}
 8013b90:	bf00      	nop
 8013b92:	3718      	adds	r7, #24
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	0801d198 	.word	0x0801d198
 8013b9c:	0801d234 	.word	0x0801d234
 8013ba0:	0801d20c 	.word	0x0801d20c

08013ba4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013baa:	f7f1 f975 	bl	8004e98 <sys_now>
 8013bae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013bb0:	4b17      	ldr	r3, [pc, #92]	; (8013c10 <sys_check_timeouts+0x6c>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d022      	beq.n	8013c02 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	1ad3      	subs	r3, r2, r3
 8013bc4:	0fdb      	lsrs	r3, r3, #31
 8013bc6:	f003 0301 	and.w	r3, r3, #1
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d11a      	bne.n	8013c06 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	4a0e      	ldr	r2, [pc, #56]	; (8013c10 <sys_check_timeouts+0x6c>)
 8013bd6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	689b      	ldr	r3, [r3, #8]
 8013bdc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	4a0a      	ldr	r2, [pc, #40]	; (8013c14 <sys_check_timeouts+0x70>)
 8013bea:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013bec:	68b9      	ldr	r1, [r7, #8]
 8013bee:	200a      	movs	r0, #10
 8013bf0:	f7f8 fba8 	bl	800c344 <memp_free>
    if (handler != NULL) {
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d0da      	beq.n	8013bb0 <sys_check_timeouts+0xc>
      handler(arg);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6838      	ldr	r0, [r7, #0]
 8013bfe:	4798      	blx	r3
  do {
 8013c00:	e7d6      	b.n	8013bb0 <sys_check_timeouts+0xc>
      return;
 8013c02:	bf00      	nop
 8013c04:	e000      	b.n	8013c08 <sys_check_timeouts+0x64>
      return;
 8013c06:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c08:	3710      	adds	r7, #16
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	20010edc 	.word	0x20010edc
 8013c14:	20010ee0 	.word	0x20010ee0

08013c18 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013c1e:	4b16      	ldr	r3, [pc, #88]	; (8013c78 <sys_timeouts_sleeptime+0x60>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d102      	bne.n	8013c2c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013c26:	f04f 33ff 	mov.w	r3, #4294967295
 8013c2a:	e020      	b.n	8013c6e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013c2c:	f7f1 f934 	bl	8004e98 <sys_now>
 8013c30:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013c32:	4b11      	ldr	r3, [pc, #68]	; (8013c78 <sys_timeouts_sleeptime+0x60>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	685a      	ldr	r2, [r3, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	1ad3      	subs	r3, r2, r3
 8013c3c:	0fdb      	lsrs	r3, r3, #31
 8013c3e:	f003 0301 	and.w	r3, r3, #1
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d001      	beq.n	8013c4c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	e010      	b.n	8013c6e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c4c:	4b0a      	ldr	r3, [pc, #40]	; (8013c78 <sys_timeouts_sleeptime+0x60>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	685a      	ldr	r2, [r3, #4]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	da06      	bge.n	8013c6c <sys_timeouts_sleeptime+0x54>
 8013c5e:	4b07      	ldr	r3, [pc, #28]	; (8013c7c <sys_timeouts_sleeptime+0x64>)
 8013c60:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013c64:	4906      	ldr	r1, [pc, #24]	; (8013c80 <sys_timeouts_sleeptime+0x68>)
 8013c66:	4807      	ldr	r0, [pc, #28]	; (8013c84 <sys_timeouts_sleeptime+0x6c>)
 8013c68:	f005 fa24 	bl	80190b4 <iprintf>
    return ret;
 8013c6c:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3708      	adds	r7, #8
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	20010edc 	.word	0x20010edc
 8013c7c:	0801d198 	.word	0x0801d198
 8013c80:	0801d26c 	.word	0x0801d26c
 8013c84:	0801d20c 	.word	0x0801d20c

08013c88 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c8c:	f005 fa58 	bl	8019140 <rand>
 8013c90:	4603      	mov	r3, r0
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	4b01      	ldr	r3, [pc, #4]	; (8013ca8 <udp_init+0x20>)
 8013ca2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013ca4:	bf00      	nop
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	2000002c 	.word	0x2000002c

08013cac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013cb6:	4b17      	ldr	r3, [pc, #92]	; (8013d14 <udp_new_port+0x68>)
 8013cb8:	881b      	ldrh	r3, [r3, #0]
 8013cba:	1c5a      	adds	r2, r3, #1
 8013cbc:	b291      	uxth	r1, r2
 8013cbe:	4a15      	ldr	r2, [pc, #84]	; (8013d14 <udp_new_port+0x68>)
 8013cc0:	8011      	strh	r1, [r2, #0]
 8013cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	d103      	bne.n	8013cd2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013cca:	4b12      	ldr	r3, [pc, #72]	; (8013d14 <udp_new_port+0x68>)
 8013ccc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013cd0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cd2:	4b11      	ldr	r3, [pc, #68]	; (8013d18 <udp_new_port+0x6c>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	603b      	str	r3, [r7, #0]
 8013cd8:	e011      	b.n	8013cfe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	8a5a      	ldrh	r2, [r3, #18]
 8013cde:	4b0d      	ldr	r3, [pc, #52]	; (8013d14 <udp_new_port+0x68>)
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d108      	bne.n	8013cf8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013ce6:	88fb      	ldrh	r3, [r7, #6]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	80fb      	strh	r3, [r7, #6]
 8013cec:	88fb      	ldrh	r3, [r7, #6]
 8013cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013cf2:	d3e0      	bcc.n	8013cb6 <udp_new_port+0xa>
        return 0;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	e007      	b.n	8013d08 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	603b      	str	r3, [r7, #0]
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d1ea      	bne.n	8013cda <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013d04:	4b03      	ldr	r3, [pc, #12]	; (8013d14 <udp_new_port+0x68>)
 8013d06:	881b      	ldrh	r3, [r3, #0]
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr
 8013d14:	2000002c 	.word	0x2000002c
 8013d18:	20010ee8 	.word	0x20010ee8

08013d1c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	60b9      	str	r1, [r7, #8]
 8013d26:	4613      	mov	r3, r2
 8013d28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d105      	bne.n	8013d3c <udp_input_local_match+0x20>
 8013d30:	4b27      	ldr	r3, [pc, #156]	; (8013dd0 <udp_input_local_match+0xb4>)
 8013d32:	2287      	movs	r2, #135	; 0x87
 8013d34:	4927      	ldr	r1, [pc, #156]	; (8013dd4 <udp_input_local_match+0xb8>)
 8013d36:	4828      	ldr	r0, [pc, #160]	; (8013dd8 <udp_input_local_match+0xbc>)
 8013d38:	f005 f9bc 	bl	80190b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d105      	bne.n	8013d4e <udp_input_local_match+0x32>
 8013d42:	4b23      	ldr	r3, [pc, #140]	; (8013dd0 <udp_input_local_match+0xb4>)
 8013d44:	2288      	movs	r2, #136	; 0x88
 8013d46:	4925      	ldr	r1, [pc, #148]	; (8013ddc <udp_input_local_match+0xc0>)
 8013d48:	4823      	ldr	r0, [pc, #140]	; (8013dd8 <udp_input_local_match+0xbc>)
 8013d4a:	f005 f9b3 	bl	80190b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	7a1b      	ldrb	r3, [r3, #8]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d00b      	beq.n	8013d6e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	7a1a      	ldrb	r2, [r3, #8]
 8013d5a:	4b21      	ldr	r3, [pc, #132]	; (8013de0 <udp_input_local_match+0xc4>)
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d62:	3301      	adds	r3, #1
 8013d64:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d001      	beq.n	8013d6e <udp_input_local_match+0x52>
    return 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	e02b      	b.n	8013dc6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d6e:	79fb      	ldrb	r3, [r7, #7]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d018      	beq.n	8013da6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d013      	beq.n	8013da2 <udp_input_local_match+0x86>
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d00f      	beq.n	8013da2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d82:	4b17      	ldr	r3, [pc, #92]	; (8013de0 <udp_input_local_match+0xc4>)
 8013d84:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d8a:	d00a      	beq.n	8013da2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	4b13      	ldr	r3, [pc, #76]	; (8013de0 <udp_input_local_match+0xc4>)
 8013d92:	695b      	ldr	r3, [r3, #20]
 8013d94:	405a      	eors	r2, r3
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	3308      	adds	r3, #8
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d110      	bne.n	8013dc4 <udp_input_local_match+0xa8>
          return 1;
 8013da2:	2301      	movs	r3, #1
 8013da4:	e00f      	b.n	8013dc6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d009      	beq.n	8013dc0 <udp_input_local_match+0xa4>
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d005      	beq.n	8013dc0 <udp_input_local_match+0xa4>
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	4b09      	ldr	r3, [pc, #36]	; (8013de0 <udp_input_local_match+0xc4>)
 8013dba:	695b      	ldr	r3, [r3, #20]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d101      	bne.n	8013dc4 <udp_input_local_match+0xa8>
        return 1;
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	e000      	b.n	8013dc6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013dc4:	2300      	movs	r3, #0
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	0801d280 	.word	0x0801d280
 8013dd4:	0801d2b0 	.word	0x0801d2b0
 8013dd8:	0801d2d4 	.word	0x0801d2d4
 8013ddc:	0801d2fc 	.word	0x0801d2fc
 8013de0:	2000d718 	.word	0x2000d718

08013de4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013de4:	b590      	push	{r4, r7, lr}
 8013de6:	b08d      	sub	sp, #52	; 0x34
 8013de8:	af02      	add	r7, sp, #8
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013dee:	2300      	movs	r3, #0
 8013df0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d105      	bne.n	8013e04 <udp_input+0x20>
 8013df8:	4b7c      	ldr	r3, [pc, #496]	; (8013fec <udp_input+0x208>)
 8013dfa:	22cf      	movs	r2, #207	; 0xcf
 8013dfc:	497c      	ldr	r1, [pc, #496]	; (8013ff0 <udp_input+0x20c>)
 8013dfe:	487d      	ldr	r0, [pc, #500]	; (8013ff4 <udp_input+0x210>)
 8013e00:	f005 f958 	bl	80190b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d105      	bne.n	8013e16 <udp_input+0x32>
 8013e0a:	4b78      	ldr	r3, [pc, #480]	; (8013fec <udp_input+0x208>)
 8013e0c:	22d0      	movs	r2, #208	; 0xd0
 8013e0e:	497a      	ldr	r1, [pc, #488]	; (8013ff8 <udp_input+0x214>)
 8013e10:	4878      	ldr	r0, [pc, #480]	; (8013ff4 <udp_input+0x210>)
 8013e12:	f005 f94f 	bl	80190b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	895b      	ldrh	r3, [r3, #10]
 8013e1a:	2b07      	cmp	r3, #7
 8013e1c:	d803      	bhi.n	8013e26 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7f9 f940 	bl	800d0a4 <pbuf_free>
    goto end;
 8013e24:	e0de      	b.n	8013fe4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e2c:	4b73      	ldr	r3, [pc, #460]	; (8013ffc <udp_input+0x218>)
 8013e2e:	695b      	ldr	r3, [r3, #20]
 8013e30:	4a72      	ldr	r2, [pc, #456]	; (8013ffc <udp_input+0x218>)
 8013e32:	6812      	ldr	r2, [r2, #0]
 8013e34:	4611      	mov	r1, r2
 8013e36:	4618      	mov	r0, r3
 8013e38:	f003 fe12 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	881b      	ldrh	r3, [r3, #0]
 8013e44:	b29b      	uxth	r3, r3
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7f7 fcf8 	bl	800b83c <lwip_htons>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	885b      	ldrh	r3, [r3, #2]
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7f7 fcf0 	bl	800b83c <lwip_htons>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e60:	2300      	movs	r3, #0
 8013e62:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e64:	2300      	movs	r3, #0
 8013e66:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e6c:	4b64      	ldr	r3, [pc, #400]	; (8014000 <udp_input+0x21c>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	627b      	str	r3, [r7, #36]	; 0x24
 8013e72:	e054      	b.n	8013f1e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e76:	8a5b      	ldrh	r3, [r3, #18]
 8013e78:	89fa      	ldrh	r2, [r7, #14]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d14a      	bne.n	8013f14 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e7e:	7cfb      	ldrb	r3, [r7, #19]
 8013e80:	461a      	mov	r2, r3
 8013e82:	6839      	ldr	r1, [r7, #0]
 8013e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e86:	f7ff ff49 	bl	8013d1c <udp_input_local_match>
 8013e8a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d041      	beq.n	8013f14 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e92:	7c1b      	ldrb	r3, [r3, #16]
 8013e94:	f003 0304 	and.w	r3, r3, #4
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11d      	bne.n	8013ed8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d102      	bne.n	8013ea8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea4:	61fb      	str	r3, [r7, #28]
 8013ea6:	e017      	b.n	8013ed8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ea8:	7cfb      	ldrb	r3, [r7, #19]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d014      	beq.n	8013ed8 <udp_input+0xf4>
 8013eae:	4b53      	ldr	r3, [pc, #332]	; (8013ffc <udp_input+0x218>)
 8013eb0:	695b      	ldr	r3, [r3, #20]
 8013eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb6:	d10f      	bne.n	8013ed8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d008      	beq.n	8013ed8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	3304      	adds	r3, #4
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d101      	bne.n	8013ed8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	8a9b      	ldrh	r3, [r3, #20]
 8013edc:	8a3a      	ldrh	r2, [r7, #16]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d118      	bne.n	8013f14 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d005      	beq.n	8013ef6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	685a      	ldr	r2, [r3, #4]
 8013eee:	4b43      	ldr	r3, [pc, #268]	; (8013ffc <udp_input+0x218>)
 8013ef0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d10e      	bne.n	8013f14 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013ef6:	6a3b      	ldr	r3, [r7, #32]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d014      	beq.n	8013f26 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efe:	68da      	ldr	r2, [r3, #12]
 8013f00:	6a3b      	ldr	r3, [r7, #32]
 8013f02:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013f04:	4b3e      	ldr	r3, [pc, #248]	; (8014000 <udp_input+0x21c>)
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013f0c:	4a3c      	ldr	r2, [pc, #240]	; (8014000 <udp_input+0x21c>)
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013f12:	e008      	b.n	8013f26 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8013f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d1a7      	bne.n	8013e74 <udp_input+0x90>
 8013f24:	e000      	b.n	8013f28 <udp_input+0x144>
        break;
 8013f26:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d101      	bne.n	8013f32 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d002      	beq.n	8013f3e <udp_input+0x15a>
    for_us = 1;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	76fb      	strb	r3, [r7, #27]
 8013f3c:	e00a      	b.n	8013f54 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	3304      	adds	r3, #4
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	4b2d      	ldr	r3, [pc, #180]	; (8013ffc <udp_input+0x218>)
 8013f46:	695b      	ldr	r3, [r3, #20]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	bf0c      	ite	eq
 8013f4c:	2301      	moveq	r3, #1
 8013f4e:	2300      	movne	r3, #0
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f54:	7efb      	ldrb	r3, [r7, #27]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d041      	beq.n	8013fde <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f5a:	2108      	movs	r1, #8
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f7f9 f81b 	bl	800cf98 <pbuf_remove_header>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00a      	beq.n	8013f7e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f68:	4b20      	ldr	r3, [pc, #128]	; (8013fec <udp_input+0x208>)
 8013f6a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f6e:	4925      	ldr	r1, [pc, #148]	; (8014004 <udp_input+0x220>)
 8013f70:	4820      	ldr	r0, [pc, #128]	; (8013ff4 <udp_input+0x210>)
 8013f72:	f005 f89f 	bl	80190b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7f9 f894 	bl	800d0a4 <pbuf_free>
      goto end;
 8013f7c:	e032      	b.n	8013fe4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d012      	beq.n	8013faa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f86:	699b      	ldr	r3, [r3, #24]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d00a      	beq.n	8013fa2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f8e:	699c      	ldr	r4, [r3, #24]
 8013f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f92:	69d8      	ldr	r0, [r3, #28]
 8013f94:	8a3b      	ldrh	r3, [r7, #16]
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	4b1b      	ldr	r3, [pc, #108]	; (8014008 <udp_input+0x224>)
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f9e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013fa0:	e021      	b.n	8013fe6 <udp_input+0x202>
        pbuf_free(p);
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f7f9 f87e 	bl	800d0a4 <pbuf_free>
        goto end;
 8013fa8:	e01c      	b.n	8013fe4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013faa:	7cfb      	ldrb	r3, [r7, #19]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d112      	bne.n	8013fd6 <udp_input+0x1f2>
 8013fb0:	4b12      	ldr	r3, [pc, #72]	; (8013ffc <udp_input+0x218>)
 8013fb2:	695b      	ldr	r3, [r3, #20]
 8013fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fb8:	2be0      	cmp	r3, #224	; 0xe0
 8013fba:	d00c      	beq.n	8013fd6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013fbc:	4b0f      	ldr	r3, [pc, #60]	; (8013ffc <udp_input+0x218>)
 8013fbe:	899b      	ldrh	r3, [r3, #12]
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	b21b      	sxth	r3, r3
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7f9 f858 	bl	800d07e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013fce:	2103      	movs	r1, #3
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f003 fa07 	bl	80173e4 <icmp_dest_unreach>
      pbuf_free(p);
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7f9 f864 	bl	800d0a4 <pbuf_free>
  return;
 8013fdc:	e003      	b.n	8013fe6 <udp_input+0x202>
    pbuf_free(p);
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7f9 f860 	bl	800d0a4 <pbuf_free>
  return;
 8013fe4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fe6:	372c      	adds	r7, #44	; 0x2c
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd90      	pop	{r4, r7, pc}
 8013fec:	0801d280 	.word	0x0801d280
 8013ff0:	0801d324 	.word	0x0801d324
 8013ff4:	0801d2d4 	.word	0x0801d2d4
 8013ff8:	0801d33c 	.word	0x0801d33c
 8013ffc:	2000d718 	.word	0x2000d718
 8014000:	20010ee8 	.word	0x20010ee8
 8014004:	0801d358 	.word	0x0801d358
 8014008:	2000d728 	.word	0x2000d728

0801400c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b088      	sub	sp, #32
 8014010:	af02      	add	r7, sp, #8
 8014012:	60f8      	str	r0, [r7, #12]
 8014014:	60b9      	str	r1, [r7, #8]
 8014016:	607a      	str	r2, [r7, #4]
 8014018:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d109      	bne.n	8014034 <udp_sendto_if+0x28>
 8014020:	4b2e      	ldr	r3, [pc, #184]	; (80140dc <udp_sendto_if+0xd0>)
 8014022:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014026:	492e      	ldr	r1, [pc, #184]	; (80140e0 <udp_sendto_if+0xd4>)
 8014028:	482e      	ldr	r0, [pc, #184]	; (80140e4 <udp_sendto_if+0xd8>)
 801402a:	f005 f843 	bl	80190b4 <iprintf>
 801402e:	f06f 030f 	mvn.w	r3, #15
 8014032:	e04f      	b.n	80140d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d109      	bne.n	801404e <udp_sendto_if+0x42>
 801403a:	4b28      	ldr	r3, [pc, #160]	; (80140dc <udp_sendto_if+0xd0>)
 801403c:	f240 2281 	movw	r2, #641	; 0x281
 8014040:	4929      	ldr	r1, [pc, #164]	; (80140e8 <udp_sendto_if+0xdc>)
 8014042:	4828      	ldr	r0, [pc, #160]	; (80140e4 <udp_sendto_if+0xd8>)
 8014044:	f005 f836 	bl	80190b4 <iprintf>
 8014048:	f06f 030f 	mvn.w	r3, #15
 801404c:	e042      	b.n	80140d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d109      	bne.n	8014068 <udp_sendto_if+0x5c>
 8014054:	4b21      	ldr	r3, [pc, #132]	; (80140dc <udp_sendto_if+0xd0>)
 8014056:	f240 2282 	movw	r2, #642	; 0x282
 801405a:	4924      	ldr	r1, [pc, #144]	; (80140ec <udp_sendto_if+0xe0>)
 801405c:	4821      	ldr	r0, [pc, #132]	; (80140e4 <udp_sendto_if+0xd8>)
 801405e:	f005 f829 	bl	80190b4 <iprintf>
 8014062:	f06f 030f 	mvn.w	r3, #15
 8014066:	e035      	b.n	80140d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014068:	6a3b      	ldr	r3, [r7, #32]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d109      	bne.n	8014082 <udp_sendto_if+0x76>
 801406e:	4b1b      	ldr	r3, [pc, #108]	; (80140dc <udp_sendto_if+0xd0>)
 8014070:	f240 2283 	movw	r2, #643	; 0x283
 8014074:	491e      	ldr	r1, [pc, #120]	; (80140f0 <udp_sendto_if+0xe4>)
 8014076:	481b      	ldr	r0, [pc, #108]	; (80140e4 <udp_sendto_if+0xd8>)
 8014078:	f005 f81c 	bl	80190b4 <iprintf>
 801407c:	f06f 030f 	mvn.w	r3, #15
 8014080:	e028      	b.n	80140d4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d009      	beq.n	801409c <udp_sendto_if+0x90>
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d005      	beq.n	801409c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014098:	2be0      	cmp	r3, #224	; 0xe0
 801409a:	d103      	bne.n	80140a4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801409c:	6a3b      	ldr	r3, [r7, #32]
 801409e:	3304      	adds	r3, #4
 80140a0:	617b      	str	r3, [r7, #20]
 80140a2:	e00b      	b.n	80140bc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	6a3b      	ldr	r3, [r7, #32]
 80140aa:	3304      	adds	r3, #4
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d002      	beq.n	80140b8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80140b2:	f06f 0303 	mvn.w	r3, #3
 80140b6:	e00d      	b.n	80140d4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80140bc:	887a      	ldrh	r2, [r7, #2]
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	9301      	str	r3, [sp, #4]
 80140c2:	6a3b      	ldr	r3, [r7, #32]
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	4613      	mov	r3, r2
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	68b9      	ldr	r1, [r7, #8]
 80140cc:	68f8      	ldr	r0, [r7, #12]
 80140ce:	f000 f811 	bl	80140f4 <udp_sendto_if_src>
 80140d2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3718      	adds	r7, #24
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	0801d280 	.word	0x0801d280
 80140e0:	0801d3f4 	.word	0x0801d3f4
 80140e4:	0801d2d4 	.word	0x0801d2d4
 80140e8:	0801d410 	.word	0x0801d410
 80140ec:	0801d42c 	.word	0x0801d42c
 80140f0:	0801d44c 	.word	0x0801d44c

080140f4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b08c      	sub	sp, #48	; 0x30
 80140f8:	af04      	add	r7, sp, #16
 80140fa:	60f8      	str	r0, [r7, #12]
 80140fc:	60b9      	str	r1, [r7, #8]
 80140fe:	607a      	str	r2, [r7, #4]
 8014100:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d109      	bne.n	801411c <udp_sendto_if_src+0x28>
 8014108:	4b65      	ldr	r3, [pc, #404]	; (80142a0 <udp_sendto_if_src+0x1ac>)
 801410a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801410e:	4965      	ldr	r1, [pc, #404]	; (80142a4 <udp_sendto_if_src+0x1b0>)
 8014110:	4865      	ldr	r0, [pc, #404]	; (80142a8 <udp_sendto_if_src+0x1b4>)
 8014112:	f004 ffcf 	bl	80190b4 <iprintf>
 8014116:	f06f 030f 	mvn.w	r3, #15
 801411a:	e0bc      	b.n	8014296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d109      	bne.n	8014136 <udp_sendto_if_src+0x42>
 8014122:	4b5f      	ldr	r3, [pc, #380]	; (80142a0 <udp_sendto_if_src+0x1ac>)
 8014124:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014128:	4960      	ldr	r1, [pc, #384]	; (80142ac <udp_sendto_if_src+0x1b8>)
 801412a:	485f      	ldr	r0, [pc, #380]	; (80142a8 <udp_sendto_if_src+0x1b4>)
 801412c:	f004 ffc2 	bl	80190b4 <iprintf>
 8014130:	f06f 030f 	mvn.w	r3, #15
 8014134:	e0af      	b.n	8014296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d109      	bne.n	8014150 <udp_sendto_if_src+0x5c>
 801413c:	4b58      	ldr	r3, [pc, #352]	; (80142a0 <udp_sendto_if_src+0x1ac>)
 801413e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014142:	495b      	ldr	r1, [pc, #364]	; (80142b0 <udp_sendto_if_src+0x1bc>)
 8014144:	4858      	ldr	r0, [pc, #352]	; (80142a8 <udp_sendto_if_src+0x1b4>)
 8014146:	f004 ffb5 	bl	80190b4 <iprintf>
 801414a:	f06f 030f 	mvn.w	r3, #15
 801414e:	e0a2      	b.n	8014296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014152:	2b00      	cmp	r3, #0
 8014154:	d109      	bne.n	801416a <udp_sendto_if_src+0x76>
 8014156:	4b52      	ldr	r3, [pc, #328]	; (80142a0 <udp_sendto_if_src+0x1ac>)
 8014158:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801415c:	4955      	ldr	r1, [pc, #340]	; (80142b4 <udp_sendto_if_src+0x1c0>)
 801415e:	4852      	ldr	r0, [pc, #328]	; (80142a8 <udp_sendto_if_src+0x1b4>)
 8014160:	f004 ffa8 	bl	80190b4 <iprintf>
 8014164:	f06f 030f 	mvn.w	r3, #15
 8014168:	e095      	b.n	8014296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416c:	2b00      	cmp	r3, #0
 801416e:	d109      	bne.n	8014184 <udp_sendto_if_src+0x90>
 8014170:	4b4b      	ldr	r3, [pc, #300]	; (80142a0 <udp_sendto_if_src+0x1ac>)
 8014172:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014176:	4950      	ldr	r1, [pc, #320]	; (80142b8 <udp_sendto_if_src+0x1c4>)
 8014178:	484b      	ldr	r0, [pc, #300]	; (80142a8 <udp_sendto_if_src+0x1b4>)
 801417a:	f004 ff9b 	bl	80190b4 <iprintf>
 801417e:	f06f 030f 	mvn.w	r3, #15
 8014182:	e088      	b.n	8014296 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	8a5b      	ldrh	r3, [r3, #18]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d10f      	bne.n	80141ac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801418c:	68f9      	ldr	r1, [r7, #12]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	8a5b      	ldrh	r3, [r3, #18]
 8014192:	461a      	mov	r2, r3
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f000 f893 	bl	80142c0 <udp_bind>
 801419a:	4603      	mov	r3, r0
 801419c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801419e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d002      	beq.n	80141ac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80141a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80141aa:	e074      	b.n	8014296 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	891b      	ldrh	r3, [r3, #8]
 80141b0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d902      	bls.n	80141be <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80141b8:	f04f 33ff 	mov.w	r3, #4294967295
 80141bc:	e06b      	b.n	8014296 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80141be:	2108      	movs	r1, #8
 80141c0:	68b8      	ldr	r0, [r7, #8]
 80141c2:	f7f8 fed9 	bl	800cf78 <pbuf_add_header>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d015      	beq.n	80141f8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80141cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141d0:	2108      	movs	r1, #8
 80141d2:	2022      	movs	r0, #34	; 0x22
 80141d4:	f7f8 fc82 	bl	800cadc <pbuf_alloc>
 80141d8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80141da:	69fb      	ldr	r3, [r7, #28]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d102      	bne.n	80141e6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80141e0:	f04f 33ff 	mov.w	r3, #4294967295
 80141e4:	e057      	b.n	8014296 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	891b      	ldrh	r3, [r3, #8]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d006      	beq.n	80141fc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80141ee:	68b9      	ldr	r1, [r7, #8]
 80141f0:	69f8      	ldr	r0, [r7, #28]
 80141f2:	f7f9 f87b 	bl	800d2ec <pbuf_chain>
 80141f6:	e001      	b.n	80141fc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	895b      	ldrh	r3, [r3, #10]
 8014200:	2b07      	cmp	r3, #7
 8014202:	d806      	bhi.n	8014212 <udp_sendto_if_src+0x11e>
 8014204:	4b26      	ldr	r3, [pc, #152]	; (80142a0 <udp_sendto_if_src+0x1ac>)
 8014206:	f240 320d 	movw	r2, #781	; 0x30d
 801420a:	492c      	ldr	r1, [pc, #176]	; (80142bc <udp_sendto_if_src+0x1c8>)
 801420c:	4826      	ldr	r0, [pc, #152]	; (80142a8 <udp_sendto_if_src+0x1b4>)
 801420e:	f004 ff51 	bl	80190b4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	8a5b      	ldrh	r3, [r3, #18]
 801421c:	4618      	mov	r0, r3
 801421e:	f7f7 fb0d 	bl	800b83c <lwip_htons>
 8014222:	4603      	mov	r3, r0
 8014224:	461a      	mov	r2, r3
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801422a:	887b      	ldrh	r3, [r7, #2]
 801422c:	4618      	mov	r0, r3
 801422e:	f7f7 fb05 	bl	800b83c <lwip_htons>
 8014232:	4603      	mov	r3, r0
 8014234:	461a      	mov	r2, r3
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	2200      	movs	r2, #0
 801423e:	719a      	strb	r2, [r3, #6]
 8014240:	2200      	movs	r2, #0
 8014242:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	891b      	ldrh	r3, [r3, #8]
 8014248:	4618      	mov	r0, r3
 801424a:	f7f7 faf7 	bl	800b83c <lwip_htons>
 801424e:	4603      	mov	r3, r0
 8014250:	461a      	mov	r2, r3
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014256:	2311      	movs	r3, #17
 8014258:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	7adb      	ldrb	r3, [r3, #11]
 801425e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	7a9b      	ldrb	r3, [r3, #10]
 8014264:	7cb9      	ldrb	r1, [r7, #18]
 8014266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014268:	9202      	str	r2, [sp, #8]
 801426a:	7cfa      	ldrb	r2, [r7, #19]
 801426c:	9201      	str	r2, [sp, #4]
 801426e:	9300      	str	r3, [sp, #0]
 8014270:	460b      	mov	r3, r1
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014276:	69f8      	ldr	r0, [r7, #28]
 8014278:	f003 fb44 	bl	8017904 <ip4_output_if_src>
 801427c:	4603      	mov	r3, r0
 801427e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014280:	69fa      	ldr	r2, [r7, #28]
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	429a      	cmp	r2, r3
 8014286:	d004      	beq.n	8014292 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014288:	69f8      	ldr	r0, [r7, #28]
 801428a:	f7f8 ff0b 	bl	800d0a4 <pbuf_free>
    q = NULL;
 801428e:	2300      	movs	r3, #0
 8014290:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014292:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014296:	4618      	mov	r0, r3
 8014298:	3720      	adds	r7, #32
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
 801429e:	bf00      	nop
 80142a0:	0801d280 	.word	0x0801d280
 80142a4:	0801d46c 	.word	0x0801d46c
 80142a8:	0801d2d4 	.word	0x0801d2d4
 80142ac:	0801d48c 	.word	0x0801d48c
 80142b0:	0801d4ac 	.word	0x0801d4ac
 80142b4:	0801d4d0 	.word	0x0801d4d0
 80142b8:	0801d4f4 	.word	0x0801d4f4
 80142bc:	0801d518 	.word	0x0801d518

080142c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	4613      	mov	r3, r2
 80142cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d101      	bne.n	80142d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80142d4:	4b39      	ldr	r3, [pc, #228]	; (80143bc <udp_bind+0xfc>)
 80142d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d109      	bne.n	80142f2 <udp_bind+0x32>
 80142de:	4b38      	ldr	r3, [pc, #224]	; (80143c0 <udp_bind+0x100>)
 80142e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80142e4:	4937      	ldr	r1, [pc, #220]	; (80143c4 <udp_bind+0x104>)
 80142e6:	4838      	ldr	r0, [pc, #224]	; (80143c8 <udp_bind+0x108>)
 80142e8:	f004 fee4 	bl	80190b4 <iprintf>
 80142ec:	f06f 030f 	mvn.w	r3, #15
 80142f0:	e060      	b.n	80143b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80142f2:	2300      	movs	r3, #0
 80142f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142f6:	4b35      	ldr	r3, [pc, #212]	; (80143cc <udp_bind+0x10c>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	617b      	str	r3, [r7, #20]
 80142fc:	e009      	b.n	8014312 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	429a      	cmp	r2, r3
 8014304:	d102      	bne.n	801430c <udp_bind+0x4c>
      rebind = 1;
 8014306:	2301      	movs	r3, #1
 8014308:	74fb      	strb	r3, [r7, #19]
      break;
 801430a:	e005      	b.n	8014318 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	617b      	str	r3, [r7, #20]
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1f2      	bne.n	80142fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014318:	88fb      	ldrh	r3, [r7, #6]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d109      	bne.n	8014332 <udp_bind+0x72>
    port = udp_new_port();
 801431e:	f7ff fcc5 	bl	8013cac <udp_new_port>
 8014322:	4603      	mov	r3, r0
 8014324:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014326:	88fb      	ldrh	r3, [r7, #6]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d12c      	bne.n	8014386 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801432c:	f06f 0307 	mvn.w	r3, #7
 8014330:	e040      	b.n	80143b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014332:	4b26      	ldr	r3, [pc, #152]	; (80143cc <udp_bind+0x10c>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	617b      	str	r3, [r7, #20]
 8014338:	e022      	b.n	8014380 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	429a      	cmp	r2, r3
 8014340:	d01b      	beq.n	801437a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	8a5b      	ldrh	r3, [r3, #18]
 8014346:	88fa      	ldrh	r2, [r7, #6]
 8014348:	429a      	cmp	r2, r3
 801434a:	d116      	bne.n	801437a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014354:	429a      	cmp	r2, r3
 8014356:	d00d      	beq.n	8014374 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00a      	beq.n	8014374 <udp_bind+0xb4>
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d006      	beq.n	8014374 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014366:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014368:	2b00      	cmp	r3, #0
 801436a:	d003      	beq.n	8014374 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d102      	bne.n	801437a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014374:	f06f 0307 	mvn.w	r3, #7
 8014378:	e01c      	b.n	80143b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	617b      	str	r3, [r7, #20]
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1d9      	bne.n	801433a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d002      	beq.n	8014392 <udp_bind+0xd2>
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	e000      	b.n	8014394 <udp_bind+0xd4>
 8014392:	2300      	movs	r3, #0
 8014394:	68fa      	ldr	r2, [r7, #12]
 8014396:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	88fa      	ldrh	r2, [r7, #6]
 801439c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801439e:	7cfb      	ldrb	r3, [r7, #19]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d106      	bne.n	80143b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80143a4:	4b09      	ldr	r3, [pc, #36]	; (80143cc <udp_bind+0x10c>)
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80143ac:	4a07      	ldr	r2, [pc, #28]	; (80143cc <udp_bind+0x10c>)
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	3718      	adds	r7, #24
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	080282c8 	.word	0x080282c8
 80143c0:	0801d280 	.word	0x0801d280
 80143c4:	0801d548 	.word	0x0801d548
 80143c8:	0801d2d4 	.word	0x0801d2d4
 80143cc:	20010ee8 	.word	0x20010ee8

080143d0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b086      	sub	sp, #24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	4613      	mov	r3, r2
 80143dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d109      	bne.n	80143f8 <udp_connect+0x28>
 80143e4:	4b2c      	ldr	r3, [pc, #176]	; (8014498 <udp_connect+0xc8>)
 80143e6:	f240 4235 	movw	r2, #1077	; 0x435
 80143ea:	492c      	ldr	r1, [pc, #176]	; (801449c <udp_connect+0xcc>)
 80143ec:	482c      	ldr	r0, [pc, #176]	; (80144a0 <udp_connect+0xd0>)
 80143ee:	f004 fe61 	bl	80190b4 <iprintf>
 80143f2:	f06f 030f 	mvn.w	r3, #15
 80143f6:	e04b      	b.n	8014490 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d109      	bne.n	8014412 <udp_connect+0x42>
 80143fe:	4b26      	ldr	r3, [pc, #152]	; (8014498 <udp_connect+0xc8>)
 8014400:	f240 4236 	movw	r2, #1078	; 0x436
 8014404:	4927      	ldr	r1, [pc, #156]	; (80144a4 <udp_connect+0xd4>)
 8014406:	4826      	ldr	r0, [pc, #152]	; (80144a0 <udp_connect+0xd0>)
 8014408:	f004 fe54 	bl	80190b4 <iprintf>
 801440c:	f06f 030f 	mvn.w	r3, #15
 8014410:	e03e      	b.n	8014490 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	8a5b      	ldrh	r3, [r3, #18]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d10f      	bne.n	801443a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801441a:	68f9      	ldr	r1, [r7, #12]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	8a5b      	ldrh	r3, [r3, #18]
 8014420:	461a      	mov	r2, r3
 8014422:	68f8      	ldr	r0, [r7, #12]
 8014424:	f7ff ff4c 	bl	80142c0 <udp_bind>
 8014428:	4603      	mov	r3, r0
 801442a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801442c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d002      	beq.n	801443a <udp_connect+0x6a>
      return err;
 8014434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014438:	e02a      	b.n	8014490 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d002      	beq.n	8014446 <udp_connect+0x76>
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	e000      	b.n	8014448 <udp_connect+0x78>
 8014446:	2300      	movs	r3, #0
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	88fa      	ldrh	r2, [r7, #6]
 8014450:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	7c1b      	ldrb	r3, [r3, #16]
 8014456:	f043 0304 	orr.w	r3, r3, #4
 801445a:	b2da      	uxtb	r2, r3
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014460:	4b11      	ldr	r3, [pc, #68]	; (80144a8 <udp_connect+0xd8>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	617b      	str	r3, [r7, #20]
 8014466:	e008      	b.n	801447a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014468:	68fa      	ldr	r2, [r7, #12]
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	429a      	cmp	r2, r3
 801446e:	d101      	bne.n	8014474 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014470:	2300      	movs	r3, #0
 8014472:	e00d      	b.n	8014490 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	617b      	str	r3, [r7, #20]
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d1f3      	bne.n	8014468 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014480:	4b09      	ldr	r3, [pc, #36]	; (80144a8 <udp_connect+0xd8>)
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014488:	4a07      	ldr	r2, [pc, #28]	; (80144a8 <udp_connect+0xd8>)
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801448e:	2300      	movs	r3, #0
}
 8014490:	4618      	mov	r0, r3
 8014492:	3718      	adds	r7, #24
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	0801d280 	.word	0x0801d280
 801449c:	0801d560 	.word	0x0801d560
 80144a0:	0801d2d4 	.word	0x0801d2d4
 80144a4:	0801d57c 	.word	0x0801d57c
 80144a8:	20010ee8 	.word	0x20010ee8

080144ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d107      	bne.n	80144ce <udp_recv+0x22>
 80144be:	4b08      	ldr	r3, [pc, #32]	; (80144e0 <udp_recv+0x34>)
 80144c0:	f240 428a 	movw	r2, #1162	; 0x48a
 80144c4:	4907      	ldr	r1, [pc, #28]	; (80144e4 <udp_recv+0x38>)
 80144c6:	4808      	ldr	r0, [pc, #32]	; (80144e8 <udp_recv+0x3c>)
 80144c8:	f004 fdf4 	bl	80190b4 <iprintf>
 80144cc:	e005      	b.n	80144da <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	68ba      	ldr	r2, [r7, #8]
 80144d2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	61da      	str	r2, [r3, #28]
}
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	0801d280 	.word	0x0801d280
 80144e4:	0801d5b4 	.word	0x0801d5b4
 80144e8:	0801d2d4 	.word	0x0801d2d4

080144ec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d107      	bne.n	801450a <udp_remove+0x1e>
 80144fa:	4b19      	ldr	r3, [pc, #100]	; (8014560 <udp_remove+0x74>)
 80144fc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014500:	4918      	ldr	r1, [pc, #96]	; (8014564 <udp_remove+0x78>)
 8014502:	4819      	ldr	r0, [pc, #100]	; (8014568 <udp_remove+0x7c>)
 8014504:	f004 fdd6 	bl	80190b4 <iprintf>
 8014508:	e026      	b.n	8014558 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801450a:	4b18      	ldr	r3, [pc, #96]	; (801456c <udp_remove+0x80>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	687a      	ldr	r2, [r7, #4]
 8014510:	429a      	cmp	r2, r3
 8014512:	d105      	bne.n	8014520 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014514:	4b15      	ldr	r3, [pc, #84]	; (801456c <udp_remove+0x80>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	68db      	ldr	r3, [r3, #12]
 801451a:	4a14      	ldr	r2, [pc, #80]	; (801456c <udp_remove+0x80>)
 801451c:	6013      	str	r3, [r2, #0]
 801451e:	e017      	b.n	8014550 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014520:	4b12      	ldr	r3, [pc, #72]	; (801456c <udp_remove+0x80>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	60fb      	str	r3, [r7, #12]
 8014526:	e010      	b.n	801454a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d009      	beq.n	8014544 <udp_remove+0x58>
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	429a      	cmp	r2, r3
 8014538:	d104      	bne.n	8014544 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	68da      	ldr	r2, [r3, #12]
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	60da      	str	r2, [r3, #12]
        break;
 8014542:	e005      	b.n	8014550 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	60fb      	str	r3, [r7, #12]
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d1eb      	bne.n	8014528 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014550:	6879      	ldr	r1, [r7, #4]
 8014552:	2000      	movs	r0, #0
 8014554:	f7f7 fef6 	bl	800c344 <memp_free>
}
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	0801d280 	.word	0x0801d280
 8014564:	0801d5cc 	.word	0x0801d5cc
 8014568:	0801d2d4 	.word	0x0801d2d4
 801456c:	20010ee8 	.word	0x20010ee8

08014570 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014576:	2000      	movs	r0, #0
 8014578:	f7f7 fe6e 	bl	800c258 <memp_malloc>
 801457c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d007      	beq.n	8014594 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014584:	2220      	movs	r2, #32
 8014586:	2100      	movs	r1, #0
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f004 fcf6 	bl	8018f7a <memset>
    pcb->ttl = UDP_TTL;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	22ff      	movs	r2, #255	; 0xff
 8014592:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014594:	687b      	ldr	r3, [r7, #4]
}
 8014596:	4618      	mov	r0, r3
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b084      	sub	sp, #16
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	4603      	mov	r3, r0
 80145a6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80145a8:	f7ff ffe2 	bl	8014570 <udp_new>
 80145ac:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80145ae:	68fb      	ldr	r3, [r7, #12]
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3710      	adds	r7, #16
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80145b8:	b480      	push	{r7}
 80145ba:	b085      	sub	sp, #20
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d01e      	beq.n	8014606 <udp_netif_ip_addr_changed+0x4e>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d01a      	beq.n	8014606 <udp_netif_ip_addr_changed+0x4e>
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d017      	beq.n	8014606 <udp_netif_ip_addr_changed+0x4e>
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d013      	beq.n	8014606 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145de:	4b0d      	ldr	r3, [pc, #52]	; (8014614 <udp_netif_ip_addr_changed+0x5c>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	60fb      	str	r3, [r7, #12]
 80145e4:	e00c      	b.n	8014600 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681a      	ldr	r2, [r3, #0]
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d103      	bne.n	80145fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	68db      	ldr	r3, [r3, #12]
 80145fe:	60fb      	str	r3, [r7, #12]
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d1ef      	bne.n	80145e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014606:	bf00      	nop
 8014608:	3714      	adds	r7, #20
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop
 8014614:	20010ee8 	.word	0x20010ee8

08014618 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801461c:	4b20      	ldr	r3, [pc, #128]	; (80146a0 <dhcp_inc_pcb_refcount+0x88>)
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d133      	bne.n	801468c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014624:	4b1f      	ldr	r3, [pc, #124]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d005      	beq.n	8014638 <dhcp_inc_pcb_refcount+0x20>
 801462c:	4b1e      	ldr	r3, [pc, #120]	; (80146a8 <dhcp_inc_pcb_refcount+0x90>)
 801462e:	22e5      	movs	r2, #229	; 0xe5
 8014630:	491e      	ldr	r1, [pc, #120]	; (80146ac <dhcp_inc_pcb_refcount+0x94>)
 8014632:	481f      	ldr	r0, [pc, #124]	; (80146b0 <dhcp_inc_pcb_refcount+0x98>)
 8014634:	f004 fd3e 	bl	80190b4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014638:	f7ff ff9a 	bl	8014570 <udp_new>
 801463c:	4603      	mov	r3, r0
 801463e:	4a19      	ldr	r2, [pc, #100]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014640:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014642:	4b18      	ldr	r3, [pc, #96]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d102      	bne.n	8014650 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801464a:	f04f 33ff 	mov.w	r3, #4294967295
 801464e:	e024      	b.n	801469a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014650:	4b14      	ldr	r3, [pc, #80]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	7a5a      	ldrb	r2, [r3, #9]
 8014656:	4b13      	ldr	r3, [pc, #76]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	f042 0220 	orr.w	r2, r2, #32
 801465e:	b2d2      	uxtb	r2, r2
 8014660:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014662:	4b10      	ldr	r3, [pc, #64]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	2244      	movs	r2, #68	; 0x44
 8014668:	4912      	ldr	r1, [pc, #72]	; (80146b4 <dhcp_inc_pcb_refcount+0x9c>)
 801466a:	4618      	mov	r0, r3
 801466c:	f7ff fe28 	bl	80142c0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014670:	4b0c      	ldr	r3, [pc, #48]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2243      	movs	r2, #67	; 0x43
 8014676:	490f      	ldr	r1, [pc, #60]	; (80146b4 <dhcp_inc_pcb_refcount+0x9c>)
 8014678:	4618      	mov	r0, r3
 801467a:	f7ff fea9 	bl	80143d0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801467e:	4b09      	ldr	r3, [pc, #36]	; (80146a4 <dhcp_inc_pcb_refcount+0x8c>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2200      	movs	r2, #0
 8014684:	490c      	ldr	r1, [pc, #48]	; (80146b8 <dhcp_inc_pcb_refcount+0xa0>)
 8014686:	4618      	mov	r0, r3
 8014688:	f7ff ff10 	bl	80144ac <udp_recv>
  }

  dhcp_pcb_refcount++;
 801468c:	4b04      	ldr	r3, [pc, #16]	; (80146a0 <dhcp_inc_pcb_refcount+0x88>)
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	3301      	adds	r3, #1
 8014692:	b2da      	uxtb	r2, r3
 8014694:	4b02      	ldr	r3, [pc, #8]	; (80146a0 <dhcp_inc_pcb_refcount+0x88>)
 8014696:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014698:	2300      	movs	r3, #0
}
 801469a:	4618      	mov	r0, r3
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	20010f18 	.word	0x20010f18
 80146a4:	20010f14 	.word	0x20010f14
 80146a8:	0801d5e4 	.word	0x0801d5e4
 80146ac:	0801d61c 	.word	0x0801d61c
 80146b0:	0801d644 	.word	0x0801d644
 80146b4:	080282c8 	.word	0x080282c8
 80146b8:	08015f4d 	.word	0x08015f4d

080146bc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80146c0:	4b0e      	ldr	r3, [pc, #56]	; (80146fc <dhcp_dec_pcb_refcount+0x40>)
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d105      	bne.n	80146d4 <dhcp_dec_pcb_refcount+0x18>
 80146c8:	4b0d      	ldr	r3, [pc, #52]	; (8014700 <dhcp_dec_pcb_refcount+0x44>)
 80146ca:	22ff      	movs	r2, #255	; 0xff
 80146cc:	490d      	ldr	r1, [pc, #52]	; (8014704 <dhcp_dec_pcb_refcount+0x48>)
 80146ce:	480e      	ldr	r0, [pc, #56]	; (8014708 <dhcp_dec_pcb_refcount+0x4c>)
 80146d0:	f004 fcf0 	bl	80190b4 <iprintf>
  dhcp_pcb_refcount--;
 80146d4:	4b09      	ldr	r3, [pc, #36]	; (80146fc <dhcp_dec_pcb_refcount+0x40>)
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	3b01      	subs	r3, #1
 80146da:	b2da      	uxtb	r2, r3
 80146dc:	4b07      	ldr	r3, [pc, #28]	; (80146fc <dhcp_dec_pcb_refcount+0x40>)
 80146de:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80146e0:	4b06      	ldr	r3, [pc, #24]	; (80146fc <dhcp_dec_pcb_refcount+0x40>)
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d107      	bne.n	80146f8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80146e8:	4b08      	ldr	r3, [pc, #32]	; (801470c <dhcp_dec_pcb_refcount+0x50>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7ff fefd 	bl	80144ec <udp_remove>
    dhcp_pcb = NULL;
 80146f2:	4b06      	ldr	r3, [pc, #24]	; (801470c <dhcp_dec_pcb_refcount+0x50>)
 80146f4:	2200      	movs	r2, #0
 80146f6:	601a      	str	r2, [r3, #0]
  }
}
 80146f8:	bf00      	nop
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	20010f18 	.word	0x20010f18
 8014700:	0801d5e4 	.word	0x0801d5e4
 8014704:	0801d66c 	.word	0x0801d66c
 8014708:	0801d644 	.word	0x0801d644
 801470c:	20010f14 	.word	0x20010f14

08014710 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801471c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801471e:	210c      	movs	r1, #12
 8014720:	68f8      	ldr	r0, [r7, #12]
 8014722:	f001 f855 	bl	80157d0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014726:	4b06      	ldr	r3, [pc, #24]	; (8014740 <dhcp_handle_nak+0x30>)
 8014728:	4a05      	ldr	r2, [pc, #20]	; (8014740 <dhcp_handle_nak+0x30>)
 801472a:	4905      	ldr	r1, [pc, #20]	; (8014740 <dhcp_handle_nak+0x30>)
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7f7 ffab 	bl	800c688 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 fc48 	bl	8014fc8 <dhcp_discover>
}
 8014738:	bf00      	nop
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	080282c8 	.word	0x080282c8

08014744 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014750:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014752:	2108      	movs	r1, #8
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f001 f83b 	bl	80157d0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	331c      	adds	r3, #28
 801475e:	2200      	movs	r2, #0
 8014760:	4619      	mov	r1, r3
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f002 fb3c 	bl	8016de0 <etharp_query>
 8014768:	4603      	mov	r3, r0
 801476a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	799b      	ldrb	r3, [r3, #6]
 8014770:	2bff      	cmp	r3, #255	; 0xff
 8014772:	d005      	beq.n	8014780 <dhcp_check+0x3c>
    dhcp->tries++;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	799b      	ldrb	r3, [r3, #6]
 8014778:	3301      	adds	r3, #1
 801477a:	b2da      	uxtb	r2, r3
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014784:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014786:	893b      	ldrh	r3, [r7, #8]
 8014788:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801478c:	4a06      	ldr	r2, [pc, #24]	; (80147a8 <dhcp_check+0x64>)
 801478e:	fb82 1203 	smull	r1, r2, r2, r3
 8014792:	1152      	asrs	r2, r2, #5
 8014794:	17db      	asrs	r3, r3, #31
 8014796:	1ad3      	subs	r3, r2, r3
 8014798:	b29a      	uxth	r2, r3
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801479e:	bf00      	nop
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	10624dd3 	.word	0x10624dd3

080147ac <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80147bc:	4b0c      	ldr	r3, [pc, #48]	; (80147f0 <dhcp_handle_offer+0x44>)
 80147be:	789b      	ldrb	r3, [r3, #2]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d011      	beq.n	80147e8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2200      	movs	r2, #0
 80147c8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80147ca:	4b0a      	ldr	r3, [pc, #40]	; (80147f4 <dhcp_handle_offer+0x48>)
 80147cc:	689b      	ldr	r3, [r3, #8]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7f7 f849 	bl	800b866 <lwip_htonl>
 80147d4:	4602      	mov	r2, r0
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	691a      	ldr	r2, [r3, #16]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 f808 	bl	80147f8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80147e8:	bf00      	nop
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	20010f0c 	.word	0x20010f0c
 80147f4:	20010eec 	.word	0x20010eec

080147f8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80147f8:	b5b0      	push	{r4, r5, r7, lr}
 80147fa:	b08a      	sub	sp, #40	; 0x28
 80147fc:	af02      	add	r7, sp, #8
 80147fe:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d109      	bne.n	801481a <dhcp_select+0x22>
 8014806:	4b71      	ldr	r3, [pc, #452]	; (80149cc <dhcp_select+0x1d4>)
 8014808:	f240 1277 	movw	r2, #375	; 0x177
 801480c:	4970      	ldr	r1, [pc, #448]	; (80149d0 <dhcp_select+0x1d8>)
 801480e:	4871      	ldr	r0, [pc, #452]	; (80149d4 <dhcp_select+0x1dc>)
 8014810:	f004 fc50 	bl	80190b4 <iprintf>
 8014814:	f06f 030f 	mvn.w	r3, #15
 8014818:	e0d3      	b.n	80149c2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801481e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d109      	bne.n	801483a <dhcp_select+0x42>
 8014826:	4b69      	ldr	r3, [pc, #420]	; (80149cc <dhcp_select+0x1d4>)
 8014828:	f240 1279 	movw	r2, #377	; 0x179
 801482c:	496a      	ldr	r1, [pc, #424]	; (80149d8 <dhcp_select+0x1e0>)
 801482e:	4869      	ldr	r0, [pc, #420]	; (80149d4 <dhcp_select+0x1dc>)
 8014830:	f004 fc40 	bl	80190b4 <iprintf>
 8014834:	f06f 0305 	mvn.w	r3, #5
 8014838:	e0c3      	b.n	80149c2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801483a:	2101      	movs	r1, #1
 801483c:	69b8      	ldr	r0, [r7, #24]
 801483e:	f000 ffc7 	bl	80157d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014842:	f107 030c 	add.w	r3, r7, #12
 8014846:	2203      	movs	r2, #3
 8014848:	69b9      	ldr	r1, [r7, #24]
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f001 fc4c 	bl	80160e8 <dhcp_create_msg>
 8014850:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	2b00      	cmp	r3, #0
 8014856:	f000 8085 	beq.w	8014964 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	685b      	ldr	r3, [r3, #4]
 801485e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014860:	89b8      	ldrh	r0, [r7, #12]
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014868:	2302      	movs	r3, #2
 801486a:	2239      	movs	r2, #57	; 0x39
 801486c:	f000 ffca 	bl	8015804 <dhcp_option>
 8014870:	4603      	mov	r3, r0
 8014872:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014874:	89b8      	ldrh	r0, [r7, #12]
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014880:	461a      	mov	r2, r3
 8014882:	f001 f819 	bl	80158b8 <dhcp_option_short>
 8014886:	4603      	mov	r3, r0
 8014888:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801488a:	89b8      	ldrh	r0, [r7, #12]
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014892:	2304      	movs	r3, #4
 8014894:	2232      	movs	r2, #50	; 0x32
 8014896:	f000 ffb5 	bl	8015804 <dhcp_option>
 801489a:	4603      	mov	r3, r0
 801489c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801489e:	89bc      	ldrh	r4, [r7, #12]
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	69db      	ldr	r3, [r3, #28]
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7f6 ffdb 	bl	800b866 <lwip_htonl>
 80148b0:	4603      	mov	r3, r0
 80148b2:	461a      	mov	r2, r3
 80148b4:	4629      	mov	r1, r5
 80148b6:	4620      	mov	r0, r4
 80148b8:	f001 f830 	bl	801591c <dhcp_option_long>
 80148bc:	4603      	mov	r3, r0
 80148be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80148c0:	89b8      	ldrh	r0, [r7, #12]
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148c8:	2304      	movs	r3, #4
 80148ca:	2236      	movs	r2, #54	; 0x36
 80148cc:	f000 ff9a 	bl	8015804 <dhcp_option>
 80148d0:	4603      	mov	r3, r0
 80148d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80148d4:	89bc      	ldrh	r4, [r7, #12]
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80148dc:	69bb      	ldr	r3, [r7, #24]
 80148de:	699b      	ldr	r3, [r3, #24]
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f6 ffc0 	bl	800b866 <lwip_htonl>
 80148e6:	4603      	mov	r3, r0
 80148e8:	461a      	mov	r2, r3
 80148ea:	4629      	mov	r1, r5
 80148ec:	4620      	mov	r0, r4
 80148ee:	f001 f815 	bl	801591c <dhcp_option_long>
 80148f2:	4603      	mov	r3, r0
 80148f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80148f6:	89b8      	ldrh	r0, [r7, #12]
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148fe:	2303      	movs	r3, #3
 8014900:	2237      	movs	r2, #55	; 0x37
 8014902:	f000 ff7f 	bl	8015804 <dhcp_option>
 8014906:	4603      	mov	r3, r0
 8014908:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801490a:	2300      	movs	r3, #0
 801490c:	77bb      	strb	r3, [r7, #30]
 801490e:	e00e      	b.n	801492e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014910:	89b8      	ldrh	r0, [r7, #12]
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014918:	7fbb      	ldrb	r3, [r7, #30]
 801491a:	4a30      	ldr	r2, [pc, #192]	; (80149dc <dhcp_select+0x1e4>)
 801491c:	5cd3      	ldrb	r3, [r2, r3]
 801491e:	461a      	mov	r2, r3
 8014920:	f000 ffa4 	bl	801586c <dhcp_option_byte>
 8014924:	4603      	mov	r3, r0
 8014926:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014928:	7fbb      	ldrb	r3, [r7, #30]
 801492a:	3301      	adds	r3, #1
 801492c:	77bb      	strb	r3, [r7, #30]
 801492e:	7fbb      	ldrb	r3, [r7, #30]
 8014930:	2b02      	cmp	r3, #2
 8014932:	d9ed      	bls.n	8014910 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014934:	89b8      	ldrh	r0, [r7, #12]
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	33f0      	adds	r3, #240	; 0xf0
 801493a:	697a      	ldr	r2, [r7, #20]
 801493c:	4619      	mov	r1, r3
 801493e:	f001 fca9 	bl	8016294 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014942:	4b27      	ldr	r3, [pc, #156]	; (80149e0 <dhcp_select+0x1e8>)
 8014944:	6818      	ldr	r0, [r3, #0]
 8014946:	4b27      	ldr	r3, [pc, #156]	; (80149e4 <dhcp_select+0x1ec>)
 8014948:	9301      	str	r3, [sp, #4]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	9300      	str	r3, [sp, #0]
 801494e:	2343      	movs	r3, #67	; 0x43
 8014950:	4a25      	ldr	r2, [pc, #148]	; (80149e8 <dhcp_select+0x1f0>)
 8014952:	6979      	ldr	r1, [r7, #20]
 8014954:	f7ff fbce 	bl	80140f4 <udp_sendto_if_src>
 8014958:	4603      	mov	r3, r0
 801495a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801495c:	6978      	ldr	r0, [r7, #20]
 801495e:	f7f8 fba1 	bl	800d0a4 <pbuf_free>
 8014962:	e001      	b.n	8014968 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014964:	23ff      	movs	r3, #255	; 0xff
 8014966:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014968:	69bb      	ldr	r3, [r7, #24]
 801496a:	799b      	ldrb	r3, [r3, #6]
 801496c:	2bff      	cmp	r3, #255	; 0xff
 801496e:	d005      	beq.n	801497c <dhcp_select+0x184>
    dhcp->tries++;
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	799b      	ldrb	r3, [r3, #6]
 8014974:	3301      	adds	r3, #1
 8014976:	b2da      	uxtb	r2, r3
 8014978:	69bb      	ldr	r3, [r7, #24]
 801497a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801497c:	69bb      	ldr	r3, [r7, #24]
 801497e:	799b      	ldrb	r3, [r3, #6]
 8014980:	2b05      	cmp	r3, #5
 8014982:	d80d      	bhi.n	80149a0 <dhcp_select+0x1a8>
 8014984:	69bb      	ldr	r3, [r7, #24]
 8014986:	799b      	ldrb	r3, [r3, #6]
 8014988:	461a      	mov	r2, r3
 801498a:	2301      	movs	r3, #1
 801498c:	4093      	lsls	r3, r2
 801498e:	b29b      	uxth	r3, r3
 8014990:	461a      	mov	r2, r3
 8014992:	0152      	lsls	r2, r2, #5
 8014994:	1ad2      	subs	r2, r2, r3
 8014996:	0092      	lsls	r2, r2, #2
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	b29b      	uxth	r3, r3
 801499e:	e001      	b.n	80149a4 <dhcp_select+0x1ac>
 80149a0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80149a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80149a6:	89fb      	ldrh	r3, [r7, #14]
 80149a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80149ac:	4a0f      	ldr	r2, [pc, #60]	; (80149ec <dhcp_select+0x1f4>)
 80149ae:	fb82 1203 	smull	r1, r2, r2, r3
 80149b2:	1152      	asrs	r2, r2, #5
 80149b4:	17db      	asrs	r3, r3, #31
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80149be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3720      	adds	r7, #32
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bdb0      	pop	{r4, r5, r7, pc}
 80149ca:	bf00      	nop
 80149cc:	0801d5e4 	.word	0x0801d5e4
 80149d0:	0801d690 	.word	0x0801d690
 80149d4:	0801d644 	.word	0x0801d644
 80149d8:	0801d6ac 	.word	0x0801d6ac
 80149dc:	20000030 	.word	0x20000030
 80149e0:	20010f14 	.word	0x20010f14
 80149e4:	080282c8 	.word	0x080282c8
 80149e8:	080282cc 	.word	0x080282cc
 80149ec:	10624dd3 	.word	0x10624dd3

080149f0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80149f6:	4b27      	ldr	r3, [pc, #156]	; (8014a94 <dhcp_coarse_tmr+0xa4>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	607b      	str	r3, [r7, #4]
 80149fc:	e042      	b.n	8014a84 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a02:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d039      	beq.n	8014a7e <dhcp_coarse_tmr+0x8e>
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	795b      	ldrb	r3, [r3, #5]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d035      	beq.n	8014a7e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	8a9b      	ldrh	r3, [r3, #20]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d012      	beq.n	8014a40 <dhcp_coarse_tmr+0x50>
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	8a5b      	ldrh	r3, [r3, #18]
 8014a1e:	3301      	adds	r3, #1
 8014a20:	b29a      	uxth	r2, r3
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	825a      	strh	r2, [r3, #18]
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	8a5a      	ldrh	r2, [r3, #18]
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	8a9b      	ldrh	r3, [r3, #20]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d106      	bne.n	8014a40 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 fe32 	bl	801569c <dhcp_release_and_stop>
        dhcp_start(netif);
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f000 f969 	bl	8014d10 <dhcp_start>
 8014a3e:	e01e      	b.n	8014a7e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	8a1b      	ldrh	r3, [r3, #16]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d00b      	beq.n	8014a60 <dhcp_coarse_tmr+0x70>
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	8a1b      	ldrh	r3, [r3, #16]
 8014a4c:	1e5a      	subs	r2, r3, #1
 8014a4e:	b291      	uxth	r1, r2
 8014a50:	683a      	ldr	r2, [r7, #0]
 8014a52:	8211      	strh	r1, [r2, #16]
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d103      	bne.n	8014a60 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f000 f8c6 	bl	8014bea <dhcp_t2_timeout>
 8014a5e:	e00e      	b.n	8014a7e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	89db      	ldrh	r3, [r3, #14]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d00a      	beq.n	8014a7e <dhcp_coarse_tmr+0x8e>
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	89db      	ldrh	r3, [r3, #14]
 8014a6c:	1e5a      	subs	r2, r3, #1
 8014a6e:	b291      	uxth	r1, r2
 8014a70:	683a      	ldr	r2, [r7, #0]
 8014a72:	81d1      	strh	r1, [r2, #14]
 8014a74:	2b01      	cmp	r3, #1
 8014a76:	d102      	bne.n	8014a7e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f000 f888 	bl	8014b8e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	607b      	str	r3, [r7, #4]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d1b9      	bne.n	80149fe <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014a8a:	bf00      	nop
 8014a8c:	bf00      	nop
 8014a8e:	3708      	adds	r7, #8
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	20010e80 	.word	0x20010e80

08014a98 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014a9e:	4b16      	ldr	r3, [pc, #88]	; (8014af8 <dhcp_fine_tmr+0x60>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	607b      	str	r3, [r7, #4]
 8014aa4:	e020      	b.n	8014ae8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aaa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d017      	beq.n	8014ae2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	891b      	ldrh	r3, [r3, #8]
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	d906      	bls.n	8014ac8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	891b      	ldrh	r3, [r3, #8]
 8014abe:	3b01      	subs	r3, #1
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	811a      	strh	r2, [r3, #8]
 8014ac6:	e00c      	b.n	8014ae2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	891b      	ldrh	r3, [r3, #8]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d108      	bne.n	8014ae2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	891b      	ldrh	r3, [r3, #8]
 8014ad4:	3b01      	subs	r3, #1
 8014ad6:	b29a      	uxth	r2, r3
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f000 f80d 	bl	8014afc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	607b      	str	r3, [r7, #4]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d1db      	bne.n	8014aa6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014aee:	bf00      	nop
 8014af0:	bf00      	nop
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	20010e80 	.word	0x20010e80

08014afc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b08:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	795b      	ldrb	r3, [r3, #5]
 8014b0e:	2b0c      	cmp	r3, #12
 8014b10:	d003      	beq.n	8014b1a <dhcp_timeout+0x1e>
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	795b      	ldrb	r3, [r3, #5]
 8014b16:	2b06      	cmp	r3, #6
 8014b18:	d103      	bne.n	8014b22 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 fa54 	bl	8014fc8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014b20:	e031      	b.n	8014b86 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	795b      	ldrb	r3, [r3, #5]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d10e      	bne.n	8014b48 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	799b      	ldrb	r3, [r3, #6]
 8014b2e:	2b05      	cmp	r3, #5
 8014b30:	d803      	bhi.n	8014b3a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f7ff fe60 	bl	80147f8 <dhcp_select>
}
 8014b38:	e025      	b.n	8014b86 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 fdae 	bl	801569c <dhcp_release_and_stop>
      dhcp_start(netif);
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f000 f8e5 	bl	8014d10 <dhcp_start>
}
 8014b46:	e01e      	b.n	8014b86 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	795b      	ldrb	r3, [r3, #5]
 8014b4c:	2b08      	cmp	r3, #8
 8014b4e:	d10b      	bne.n	8014b68 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	799b      	ldrb	r3, [r3, #6]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d803      	bhi.n	8014b60 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f7ff fdf3 	bl	8014744 <dhcp_check>
}
 8014b5e:	e012      	b.n	8014b86 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f000 fad3 	bl	801510c <dhcp_bind>
}
 8014b66:	e00e      	b.n	8014b86 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	795b      	ldrb	r3, [r3, #5]
 8014b6c:	2b03      	cmp	r3, #3
 8014b6e:	d10a      	bne.n	8014b86 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	799b      	ldrb	r3, [r3, #6]
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	d803      	bhi.n	8014b80 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f000 fcd9 	bl	8015530 <dhcp_reboot>
}
 8014b7e:	e002      	b.n	8014b86 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f000 fa21 	bl	8014fc8 <dhcp_discover>
}
 8014b86:	bf00      	nop
 8014b88:	3710      	adds	r7, #16
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}

08014b8e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014b8e:	b580      	push	{r7, lr}
 8014b90:	b084      	sub	sp, #16
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	795b      	ldrb	r3, [r3, #5]
 8014ba0:	2b01      	cmp	r3, #1
 8014ba2:	d007      	beq.n	8014bb4 <dhcp_t1_timeout+0x26>
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	795b      	ldrb	r3, [r3, #5]
 8014ba8:	2b0a      	cmp	r3, #10
 8014baa:	d003      	beq.n	8014bb4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014bb0:	2b05      	cmp	r3, #5
 8014bb2:	d116      	bne.n	8014be2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f000 fb83 	bl	80152c0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	899b      	ldrh	r3, [r3, #12]
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	8a5b      	ldrh	r3, [r3, #18]
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	dd0b      	ble.n	8014be2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	899b      	ldrh	r3, [r3, #12]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	8a5b      	ldrh	r3, [r3, #18]
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	0fda      	lsrs	r2, r3, #31
 8014bd8:	4413      	add	r3, r2
 8014bda:	105b      	asrs	r3, r3, #1
 8014bdc:	b29a      	uxth	r2, r3
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014be2:	bf00      	nop
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b084      	sub	sp, #16
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bf6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	795b      	ldrb	r3, [r3, #5]
 8014bfc:	2b01      	cmp	r3, #1
 8014bfe:	d00b      	beq.n	8014c18 <dhcp_t2_timeout+0x2e>
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	795b      	ldrb	r3, [r3, #5]
 8014c04:	2b0a      	cmp	r3, #10
 8014c06:	d007      	beq.n	8014c18 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c0c:	2b05      	cmp	r3, #5
 8014c0e:	d003      	beq.n	8014c18 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	795b      	ldrb	r3, [r3, #5]
 8014c14:	2b04      	cmp	r3, #4
 8014c16:	d116      	bne.n	8014c46 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 fbed 	bl	80153f8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	8a9b      	ldrh	r3, [r3, #20]
 8014c22:	461a      	mov	r2, r3
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	8a5b      	ldrh	r3, [r3, #18]
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	dd0b      	ble.n	8014c46 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	8a9b      	ldrh	r3, [r3, #20]
 8014c32:	461a      	mov	r2, r3
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	8a5b      	ldrh	r3, [r3, #18]
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	0fda      	lsrs	r2, r3, #31
 8014c3c:	4413      	add	r3, r2
 8014c3e:	105b      	asrs	r3, r3, #1
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014c46:	bf00      	nop
 8014c48:	3710      	adds	r7, #16
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
	...

08014c50 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b084      	sub	sp, #16
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c5e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2200      	movs	r2, #0
 8014c64:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014c6c:	4b26      	ldr	r3, [pc, #152]	; (8014d08 <dhcp_handle_ack+0xb8>)
 8014c6e:	78db      	ldrb	r3, [r3, #3]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d003      	beq.n	8014c7c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014c74:	4b25      	ldr	r3, [pc, #148]	; (8014d0c <dhcp_handle_ack+0xbc>)
 8014c76:	68da      	ldr	r2, [r3, #12]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014c7c:	4b22      	ldr	r3, [pc, #136]	; (8014d08 <dhcp_handle_ack+0xb8>)
 8014c7e:	791b      	ldrb	r3, [r3, #4]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d004      	beq.n	8014c8e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014c84:	4b21      	ldr	r3, [pc, #132]	; (8014d0c <dhcp_handle_ack+0xbc>)
 8014c86:	691a      	ldr	r2, [r3, #16]
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014c8c:	e004      	b.n	8014c98 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c92:	085a      	lsrs	r2, r3, #1
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014c98:	4b1b      	ldr	r3, [pc, #108]	; (8014d08 <dhcp_handle_ack+0xb8>)
 8014c9a:	795b      	ldrb	r3, [r3, #5]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d004      	beq.n	8014caa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014ca0:	4b1a      	ldr	r3, [pc, #104]	; (8014d0c <dhcp_handle_ack+0xbc>)
 8014ca2:	695a      	ldr	r2, [r3, #20]
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8014ca8:	e007      	b.n	8014cba <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014cae:	4613      	mov	r3, r2
 8014cb0:	00db      	lsls	r3, r3, #3
 8014cb2:	1a9b      	subs	r3, r3, r2
 8014cb4:	08da      	lsrs	r2, r3, #3
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	691a      	ldr	r2, [r3, #16]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014cc2:	4b11      	ldr	r3, [pc, #68]	; (8014d08 <dhcp_handle_ack+0xb8>)
 8014cc4:	799b      	ldrb	r3, [r3, #6]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d00b      	beq.n	8014ce2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014cca:	4b10      	ldr	r3, [pc, #64]	; (8014d0c <dhcp_handle_ack+0xbc>)
 8014ccc:	699b      	ldr	r3, [r3, #24]
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7f6 fdc9 	bl	800b866 <lwip_htonl>
 8014cd4:	4602      	mov	r2, r0
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2201      	movs	r2, #1
 8014cde:	71da      	strb	r2, [r3, #7]
 8014ce0:	e002      	b.n	8014ce8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014ce8:	4b07      	ldr	r3, [pc, #28]	; (8014d08 <dhcp_handle_ack+0xb8>)
 8014cea:	79db      	ldrb	r3, [r3, #7]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d007      	beq.n	8014d00 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014cf0:	4b06      	ldr	r3, [pc, #24]	; (8014d0c <dhcp_handle_ack+0xbc>)
 8014cf2:	69db      	ldr	r3, [r3, #28]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7f6 fdb6 	bl	800b866 <lwip_htonl>
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014d00:	bf00      	nop
 8014d02:	3710      	adds	r7, #16
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}
 8014d08:	20010f0c 	.word	0x20010f0c
 8014d0c:	20010eec 	.word	0x20010eec

08014d10 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b084      	sub	sp, #16
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d109      	bne.n	8014d32 <dhcp_start+0x22>
 8014d1e:	4b37      	ldr	r3, [pc, #220]	; (8014dfc <dhcp_start+0xec>)
 8014d20:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014d24:	4936      	ldr	r1, [pc, #216]	; (8014e00 <dhcp_start+0xf0>)
 8014d26:	4837      	ldr	r0, [pc, #220]	; (8014e04 <dhcp_start+0xf4>)
 8014d28:	f004 f9c4 	bl	80190b4 <iprintf>
 8014d2c:	f06f 030f 	mvn.w	r3, #15
 8014d30:	e060      	b.n	8014df4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014d38:	f003 0301 	and.w	r3, r3, #1
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d109      	bne.n	8014d54 <dhcp_start+0x44>
 8014d40:	4b2e      	ldr	r3, [pc, #184]	; (8014dfc <dhcp_start+0xec>)
 8014d42:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014d46:	4930      	ldr	r1, [pc, #192]	; (8014e08 <dhcp_start+0xf8>)
 8014d48:	482e      	ldr	r0, [pc, #184]	; (8014e04 <dhcp_start+0xf4>)
 8014d4a:	f004 f9b3 	bl	80190b4 <iprintf>
 8014d4e:	f06f 030f 	mvn.w	r3, #15
 8014d52:	e04f      	b.n	8014df4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d58:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d5e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014d62:	d202      	bcs.n	8014d6a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014d64:	f04f 33ff 	mov.w	r3, #4294967295
 8014d68:	e044      	b.n	8014df4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d10d      	bne.n	8014d8c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014d70:	2034      	movs	r0, #52	; 0x34
 8014d72:	f7f7 f8cd 	bl	800bf10 <mem_malloc>
 8014d76:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d102      	bne.n	8014d84 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d82:	e037      	b.n	8014df4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	68fa      	ldr	r2, [r7, #12]
 8014d88:	625a      	str	r2, [r3, #36]	; 0x24
 8014d8a:	e005      	b.n	8014d98 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	791b      	ldrb	r3, [r3, #4]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d001      	beq.n	8014d98 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014d94:	f7ff fc92 	bl	80146bc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014d98:	2234      	movs	r2, #52	; 0x34
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	68f8      	ldr	r0, [r7, #12]
 8014d9e:	f004 f8ec 	bl	8018f7a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014da2:	f7ff fc39 	bl	8014618 <dhcp_inc_pcb_refcount>
 8014da6:	4603      	mov	r3, r0
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d002      	beq.n	8014db2 <dhcp_start+0xa2>
    return ERR_MEM;
 8014dac:	f04f 33ff 	mov.w	r3, #4294967295
 8014db0:	e020      	b.n	8014df4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2201      	movs	r2, #1
 8014db6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014dbe:	f003 0304 	and.w	r3, r3, #4
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d105      	bne.n	8014dd2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014dc6:	2102      	movs	r1, #2
 8014dc8:	68f8      	ldr	r0, [r7, #12]
 8014dca:	f000 fd01 	bl	80157d0 <dhcp_set_state>
    return ERR_OK;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	e010      	b.n	8014df4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f000 f8f8 	bl	8014fc8 <dhcp_discover>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014ddc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d005      	beq.n	8014df0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f000 fc59 	bl	801569c <dhcp_release_and_stop>
    return ERR_MEM;
 8014dea:	f04f 33ff 	mov.w	r3, #4294967295
 8014dee:	e001      	b.n	8014df4 <dhcp_start+0xe4>
  }
  return result;
 8014df0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3710      	adds	r7, #16
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	0801d5e4 	.word	0x0801d5e4
 8014e00:	0801d6c8 	.word	0x0801d6c8
 8014e04:	0801d644 	.word	0x0801d644
 8014e08:	0801d70c 	.word	0x0801d70c

08014e0c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b084      	sub	sp, #16
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e18:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d025      	beq.n	8014e6c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	795b      	ldrb	r3, [r3, #5]
 8014e24:	2b0a      	cmp	r3, #10
 8014e26:	d008      	beq.n	8014e3a <dhcp_network_changed+0x2e>
 8014e28:	2b0a      	cmp	r3, #10
 8014e2a:	dc0d      	bgt.n	8014e48 <dhcp_network_changed+0x3c>
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d01f      	beq.n	8014e70 <dhcp_network_changed+0x64>
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	db09      	blt.n	8014e48 <dhcp_network_changed+0x3c>
 8014e34:	3b03      	subs	r3, #3
 8014e36:	2b02      	cmp	r3, #2
 8014e38:	d806      	bhi.n	8014e48 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f000 fb75 	bl	8015530 <dhcp_reboot>
      break;
 8014e46:	e014      	b.n	8014e72 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	795b      	ldrb	r3, [r3, #5]
 8014e4c:	2b0c      	cmp	r3, #12
 8014e4e:	d906      	bls.n	8014e5e <dhcp_network_changed+0x52>
 8014e50:	4b09      	ldr	r3, [pc, #36]	; (8014e78 <dhcp_network_changed+0x6c>)
 8014e52:	f240 326d 	movw	r2, #877	; 0x36d
 8014e56:	4909      	ldr	r1, [pc, #36]	; (8014e7c <dhcp_network_changed+0x70>)
 8014e58:	4809      	ldr	r0, [pc, #36]	; (8014e80 <dhcp_network_changed+0x74>)
 8014e5a:	f004 f92b 	bl	80190b4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2200      	movs	r2, #0
 8014e62:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f000 f8af 	bl	8014fc8 <dhcp_discover>
      break;
 8014e6a:	e002      	b.n	8014e72 <dhcp_network_changed+0x66>
    return;
 8014e6c:	bf00      	nop
 8014e6e:	e000      	b.n	8014e72 <dhcp_network_changed+0x66>
      break;
 8014e70:	bf00      	nop
  }
}
 8014e72:	3710      	adds	r7, #16
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	0801d5e4 	.word	0x0801d5e4
 8014e7c:	0801d730 	.word	0x0801d730
 8014e80:	0801d644 	.word	0x0801d644

08014e84 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d107      	bne.n	8014ea4 <dhcp_arp_reply+0x20>
 8014e94:	4b0e      	ldr	r3, [pc, #56]	; (8014ed0 <dhcp_arp_reply+0x4c>)
 8014e96:	f240 328b 	movw	r2, #907	; 0x38b
 8014e9a:	490e      	ldr	r1, [pc, #56]	; (8014ed4 <dhcp_arp_reply+0x50>)
 8014e9c:	480e      	ldr	r0, [pc, #56]	; (8014ed8 <dhcp_arp_reply+0x54>)
 8014e9e:	f004 f909 	bl	80190b4 <iprintf>
 8014ea2:	e012      	b.n	8014eca <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d00c      	beq.n	8014eca <dhcp_arp_reply+0x46>
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	795b      	ldrb	r3, [r3, #5]
 8014eb4:	2b08      	cmp	r3, #8
 8014eb6:	d108      	bne.n	8014eca <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	69db      	ldr	r3, [r3, #28]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d102      	bne.n	8014eca <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f000 f809 	bl	8014edc <dhcp_decline>
    }
  }
}
 8014eca:	3710      	adds	r7, #16
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	0801d5e4 	.word	0x0801d5e4
 8014ed4:	0801d6c8 	.word	0x0801d6c8
 8014ed8:	0801d644 	.word	0x0801d644

08014edc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014edc:	b5b0      	push	{r4, r5, r7, lr}
 8014ede:	b08a      	sub	sp, #40	; 0x28
 8014ee0:	af02      	add	r7, sp, #8
 8014ee2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014eea:	210c      	movs	r1, #12
 8014eec:	69b8      	ldr	r0, [r7, #24]
 8014eee:	f000 fc6f 	bl	80157d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014ef2:	f107 030c 	add.w	r3, r7, #12
 8014ef6:	2204      	movs	r2, #4
 8014ef8:	69b9      	ldr	r1, [r7, #24]
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f001 f8f4 	bl	80160e8 <dhcp_create_msg>
 8014f00:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d035      	beq.n	8014f74 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014f0e:	89b8      	ldrh	r0, [r7, #12]
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f16:	2304      	movs	r3, #4
 8014f18:	2232      	movs	r2, #50	; 0x32
 8014f1a:	f000 fc73 	bl	8015804 <dhcp_option>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014f22:	89bc      	ldrh	r4, [r7, #12]
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	69db      	ldr	r3, [r3, #28]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7f6 fc99 	bl	800b866 <lwip_htonl>
 8014f34:	4603      	mov	r3, r0
 8014f36:	461a      	mov	r2, r3
 8014f38:	4629      	mov	r1, r5
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f000 fcee 	bl	801591c <dhcp_option_long>
 8014f40:	4603      	mov	r3, r0
 8014f42:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f44:	89b8      	ldrh	r0, [r7, #12]
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	33f0      	adds	r3, #240	; 0xf0
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	f001 f9a1 	bl	8016294 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014f52:	4b19      	ldr	r3, [pc, #100]	; (8014fb8 <dhcp_decline+0xdc>)
 8014f54:	6818      	ldr	r0, [r3, #0]
 8014f56:	4b19      	ldr	r3, [pc, #100]	; (8014fbc <dhcp_decline+0xe0>)
 8014f58:	9301      	str	r3, [sp, #4]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	2343      	movs	r3, #67	; 0x43
 8014f60:	4a17      	ldr	r2, [pc, #92]	; (8014fc0 <dhcp_decline+0xe4>)
 8014f62:	6979      	ldr	r1, [r7, #20]
 8014f64:	f7ff f8c6 	bl	80140f4 <udp_sendto_if_src>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014f6c:	6978      	ldr	r0, [r7, #20]
 8014f6e:	f7f8 f899 	bl	800d0a4 <pbuf_free>
 8014f72:	e001      	b.n	8014f78 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014f74:	23ff      	movs	r3, #255	; 0xff
 8014f76:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014f78:	69bb      	ldr	r3, [r7, #24]
 8014f7a:	799b      	ldrb	r3, [r3, #6]
 8014f7c:	2bff      	cmp	r3, #255	; 0xff
 8014f7e:	d005      	beq.n	8014f8c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	799b      	ldrb	r3, [r3, #6]
 8014f84:	3301      	adds	r3, #1
 8014f86:	b2da      	uxtb	r2, r3
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014f8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014f90:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f92:	89fb      	ldrh	r3, [r7, #14]
 8014f94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f98:	4a0a      	ldr	r2, [pc, #40]	; (8014fc4 <dhcp_decline+0xe8>)
 8014f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8014f9e:	1152      	asrs	r2, r2, #5
 8014fa0:	17db      	asrs	r3, r3, #31
 8014fa2:	1ad3      	subs	r3, r2, r3
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014faa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3720      	adds	r7, #32
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	20010f14 	.word	0x20010f14
 8014fbc:	080282c8 	.word	0x080282c8
 8014fc0:	080282cc 	.word	0x080282cc
 8014fc4:	10624dd3 	.word	0x10624dd3

08014fc8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08a      	sub	sp, #40	; 0x28
 8014fcc:	af02      	add	r7, sp, #8
 8014fce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014fe0:	2106      	movs	r1, #6
 8014fe2:	69b8      	ldr	r0, [r7, #24]
 8014fe4:	f000 fbf4 	bl	80157d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014fe8:	f107 0308 	add.w	r3, r7, #8
 8014fec:	2201      	movs	r2, #1
 8014fee:	69b9      	ldr	r1, [r7, #24]
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f001 f879 	bl	80160e8 <dhcp_create_msg>
 8014ff6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d04b      	beq.n	8015096 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015004:	8938      	ldrh	r0, [r7, #8]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801500c:	2302      	movs	r3, #2
 801500e:	2239      	movs	r2, #57	; 0x39
 8015010:	f000 fbf8 	bl	8015804 <dhcp_option>
 8015014:	4603      	mov	r3, r0
 8015016:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015018:	8938      	ldrh	r0, [r7, #8]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015024:	461a      	mov	r2, r3
 8015026:	f000 fc47 	bl	80158b8 <dhcp_option_short>
 801502a:	4603      	mov	r3, r0
 801502c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801502e:	8938      	ldrh	r0, [r7, #8]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015036:	2303      	movs	r3, #3
 8015038:	2237      	movs	r2, #55	; 0x37
 801503a:	f000 fbe3 	bl	8015804 <dhcp_option>
 801503e:	4603      	mov	r3, r0
 8015040:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015042:	2300      	movs	r3, #0
 8015044:	77fb      	strb	r3, [r7, #31]
 8015046:	e00e      	b.n	8015066 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015048:	8938      	ldrh	r0, [r7, #8]
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015050:	7ffb      	ldrb	r3, [r7, #31]
 8015052:	4a29      	ldr	r2, [pc, #164]	; (80150f8 <dhcp_discover+0x130>)
 8015054:	5cd3      	ldrb	r3, [r2, r3]
 8015056:	461a      	mov	r2, r3
 8015058:	f000 fc08 	bl	801586c <dhcp_option_byte>
 801505c:	4603      	mov	r3, r0
 801505e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015060:	7ffb      	ldrb	r3, [r7, #31]
 8015062:	3301      	adds	r3, #1
 8015064:	77fb      	strb	r3, [r7, #31]
 8015066:	7ffb      	ldrb	r3, [r7, #31]
 8015068:	2b02      	cmp	r3, #2
 801506a:	d9ed      	bls.n	8015048 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801506c:	8938      	ldrh	r0, [r7, #8]
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	33f0      	adds	r3, #240	; 0xf0
 8015072:	693a      	ldr	r2, [r7, #16]
 8015074:	4619      	mov	r1, r3
 8015076:	f001 f90d 	bl	8016294 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801507a:	4b20      	ldr	r3, [pc, #128]	; (80150fc <dhcp_discover+0x134>)
 801507c:	6818      	ldr	r0, [r3, #0]
 801507e:	4b20      	ldr	r3, [pc, #128]	; (8015100 <dhcp_discover+0x138>)
 8015080:	9301      	str	r3, [sp, #4]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	9300      	str	r3, [sp, #0]
 8015086:	2343      	movs	r3, #67	; 0x43
 8015088:	4a1e      	ldr	r2, [pc, #120]	; (8015104 <dhcp_discover+0x13c>)
 801508a:	6939      	ldr	r1, [r7, #16]
 801508c:	f7ff f832 	bl	80140f4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015090:	6938      	ldr	r0, [r7, #16]
 8015092:	f7f8 f807 	bl	800d0a4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	799b      	ldrb	r3, [r3, #6]
 801509a:	2bff      	cmp	r3, #255	; 0xff
 801509c:	d005      	beq.n	80150aa <dhcp_discover+0xe2>
    dhcp->tries++;
 801509e:	69bb      	ldr	r3, [r7, #24]
 80150a0:	799b      	ldrb	r3, [r3, #6]
 80150a2:	3301      	adds	r3, #1
 80150a4:	b2da      	uxtb	r2, r3
 80150a6:	69bb      	ldr	r3, [r7, #24]
 80150a8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80150aa:	69bb      	ldr	r3, [r7, #24]
 80150ac:	799b      	ldrb	r3, [r3, #6]
 80150ae:	2b05      	cmp	r3, #5
 80150b0:	d80d      	bhi.n	80150ce <dhcp_discover+0x106>
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	799b      	ldrb	r3, [r3, #6]
 80150b6:	461a      	mov	r2, r3
 80150b8:	2301      	movs	r3, #1
 80150ba:	4093      	lsls	r3, r2
 80150bc:	b29b      	uxth	r3, r3
 80150be:	461a      	mov	r2, r3
 80150c0:	0152      	lsls	r2, r2, #5
 80150c2:	1ad2      	subs	r2, r2, r3
 80150c4:	0092      	lsls	r2, r2, #2
 80150c6:	4413      	add	r3, r2
 80150c8:	00db      	lsls	r3, r3, #3
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	e001      	b.n	80150d2 <dhcp_discover+0x10a>
 80150ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80150d2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80150d4:	897b      	ldrh	r3, [r7, #10]
 80150d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80150da:	4a0b      	ldr	r2, [pc, #44]	; (8015108 <dhcp_discover+0x140>)
 80150dc:	fb82 1203 	smull	r1, r2, r2, r3
 80150e0:	1152      	asrs	r2, r2, #5
 80150e2:	17db      	asrs	r3, r3, #31
 80150e4:	1ad3      	subs	r3, r2, r3
 80150e6:	b29a      	uxth	r2, r3
 80150e8:	69bb      	ldr	r3, [r7, #24]
 80150ea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80150ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3720      	adds	r7, #32
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	20000030 	.word	0x20000030
 80150fc:	20010f14 	.word	0x20010f14
 8015100:	080282c8 	.word	0x080282c8
 8015104:	080282cc 	.word	0x080282cc
 8015108:	10624dd3 	.word	0x10624dd3

0801510c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b088      	sub	sp, #32
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d107      	bne.n	801512a <dhcp_bind+0x1e>
 801511a:	4b64      	ldr	r3, [pc, #400]	; (80152ac <dhcp_bind+0x1a0>)
 801511c:	f240 4215 	movw	r2, #1045	; 0x415
 8015120:	4963      	ldr	r1, [pc, #396]	; (80152b0 <dhcp_bind+0x1a4>)
 8015122:	4864      	ldr	r0, [pc, #400]	; (80152b4 <dhcp_bind+0x1a8>)
 8015124:	f003 ffc6 	bl	80190b4 <iprintf>
 8015128:	e0bc      	b.n	80152a4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d107      	bne.n	8015146 <dhcp_bind+0x3a>
 8015136:	4b5d      	ldr	r3, [pc, #372]	; (80152ac <dhcp_bind+0x1a0>)
 8015138:	f240 4217 	movw	r2, #1047	; 0x417
 801513c:	495e      	ldr	r1, [pc, #376]	; (80152b8 <dhcp_bind+0x1ac>)
 801513e:	485d      	ldr	r0, [pc, #372]	; (80152b4 <dhcp_bind+0x1a8>)
 8015140:	f003 ffb8 	bl	80190b4 <iprintf>
 8015144:	e0ae      	b.n	80152a4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015146:	69bb      	ldr	r3, [r7, #24]
 8015148:	2200      	movs	r2, #0
 801514a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801514c:	69bb      	ldr	r3, [r7, #24]
 801514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015154:	d019      	beq.n	801518a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801515a:	331e      	adds	r3, #30
 801515c:	4a57      	ldr	r2, [pc, #348]	; (80152bc <dhcp_bind+0x1b0>)
 801515e:	fba2 2303 	umull	r2, r3, r2, r3
 8015162:	095b      	lsrs	r3, r3, #5
 8015164:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801516c:	d302      	bcc.n	8015174 <dhcp_bind+0x68>
      timeout = 0xffff;
 801516e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015172:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	b29a      	uxth	r2, r3
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	8a9b      	ldrh	r3, [r3, #20]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d102      	bne.n	801518a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015184:	69bb      	ldr	r3, [r7, #24]
 8015186:	2201      	movs	r2, #1
 8015188:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801518a:	69bb      	ldr	r3, [r7, #24]
 801518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015192:	d01d      	beq.n	80151d0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015194:	69bb      	ldr	r3, [r7, #24]
 8015196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015198:	331e      	adds	r3, #30
 801519a:	4a48      	ldr	r2, [pc, #288]	; (80152bc <dhcp_bind+0x1b0>)
 801519c:	fba2 2303 	umull	r2, r3, r2, r3
 80151a0:	095b      	lsrs	r3, r3, #5
 80151a2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151aa:	d302      	bcc.n	80151b2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80151ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151b0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80151b2:	69fb      	ldr	r3, [r7, #28]
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	69bb      	ldr	r3, [r7, #24]
 80151b8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	895b      	ldrh	r3, [r3, #10]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d102      	bne.n	80151c8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	2201      	movs	r2, #1
 80151c6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80151c8:	69bb      	ldr	r3, [r7, #24]
 80151ca:	895a      	ldrh	r2, [r3, #10]
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80151d0:	69bb      	ldr	r3, [r7, #24]
 80151d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d8:	d01d      	beq.n	8015216 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80151da:	69bb      	ldr	r3, [r7, #24]
 80151dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151de:	331e      	adds	r3, #30
 80151e0:	4a36      	ldr	r2, [pc, #216]	; (80152bc <dhcp_bind+0x1b0>)
 80151e2:	fba2 2303 	umull	r2, r3, r2, r3
 80151e6:	095b      	lsrs	r3, r3, #5
 80151e8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151f0:	d302      	bcc.n	80151f8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80151f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151f6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80151f8:	69fb      	ldr	r3, [r7, #28]
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	69bb      	ldr	r3, [r7, #24]
 80151fe:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	899b      	ldrh	r3, [r3, #12]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d102      	bne.n	801520e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	2201      	movs	r2, #1
 801520c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	899a      	ldrh	r2, [r3, #12]
 8015212:	69bb      	ldr	r3, [r7, #24]
 8015214:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	895a      	ldrh	r2, [r3, #10]
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	899b      	ldrh	r3, [r3, #12]
 801521e:	429a      	cmp	r2, r3
 8015220:	d306      	bcc.n	8015230 <dhcp_bind+0x124>
 8015222:	69bb      	ldr	r3, [r7, #24]
 8015224:	899b      	ldrh	r3, [r3, #12]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d002      	beq.n	8015230 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	2200      	movs	r2, #0
 801522e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015230:	69bb      	ldr	r3, [r7, #24]
 8015232:	79db      	ldrb	r3, [r3, #7]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d003      	beq.n	8015240 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	6a1b      	ldr	r3, [r3, #32]
 801523c:	613b      	str	r3, [r7, #16]
 801523e:	e014      	b.n	801526a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	331c      	adds	r3, #28
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801524c:	2b00      	cmp	r3, #0
 801524e:	db02      	blt.n	8015256 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015250:	23ff      	movs	r3, #255	; 0xff
 8015252:	613b      	str	r3, [r7, #16]
 8015254:	e009      	b.n	801526a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015256:	7dfb      	ldrb	r3, [r7, #23]
 8015258:	2bbf      	cmp	r3, #191	; 0xbf
 801525a:	d903      	bls.n	8015264 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801525c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015260:	613b      	str	r3, [r7, #16]
 8015262:	e002      	b.n	801526a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015268:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801526a:	69bb      	ldr	r3, [r7, #24]
 801526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801526e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d108      	bne.n	8015288 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	69da      	ldr	r2, [r3, #28]
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	4013      	ands	r3, r2
 801527e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015286:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015288:	210a      	movs	r1, #10
 801528a:	69b8      	ldr	r0, [r7, #24]
 801528c:	f000 faa0 	bl	80157d0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	f103 011c 	add.w	r1, r3, #28
 8015296:	f107 030c 	add.w	r3, r7, #12
 801529a:	f107 0210 	add.w	r2, r7, #16
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7f7 f9f2 	bl	800c688 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80152a4:	3720      	adds	r7, #32
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	0801d5e4 	.word	0x0801d5e4
 80152b0:	0801d744 	.word	0x0801d744
 80152b4:	0801d644 	.word	0x0801d644
 80152b8:	0801d760 	.word	0x0801d760
 80152bc:	88888889 	.word	0x88888889

080152c0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b08a      	sub	sp, #40	; 0x28
 80152c4:	af02      	add	r7, sp, #8
 80152c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152cc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80152ce:	2105      	movs	r1, #5
 80152d0:	69b8      	ldr	r0, [r7, #24]
 80152d2:	f000 fa7d 	bl	80157d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80152d6:	f107 030c 	add.w	r3, r7, #12
 80152da:	2203      	movs	r2, #3
 80152dc:	69b9      	ldr	r1, [r7, #24]
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f000 ff02 	bl	80160e8 <dhcp_create_msg>
 80152e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d04e      	beq.n	801538a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	685b      	ldr	r3, [r3, #4]
 80152f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152f2:	89b8      	ldrh	r0, [r7, #12]
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152fa:	2302      	movs	r3, #2
 80152fc:	2239      	movs	r2, #57	; 0x39
 80152fe:	f000 fa81 	bl	8015804 <dhcp_option>
 8015302:	4603      	mov	r3, r0
 8015304:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015306:	89b8      	ldrh	r0, [r7, #12]
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015312:	461a      	mov	r2, r3
 8015314:	f000 fad0 	bl	80158b8 <dhcp_option_short>
 8015318:	4603      	mov	r3, r0
 801531a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801531c:	89b8      	ldrh	r0, [r7, #12]
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015324:	2303      	movs	r3, #3
 8015326:	2237      	movs	r2, #55	; 0x37
 8015328:	f000 fa6c 	bl	8015804 <dhcp_option>
 801532c:	4603      	mov	r3, r0
 801532e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015330:	2300      	movs	r3, #0
 8015332:	77bb      	strb	r3, [r7, #30]
 8015334:	e00e      	b.n	8015354 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015336:	89b8      	ldrh	r0, [r7, #12]
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801533e:	7fbb      	ldrb	r3, [r7, #30]
 8015340:	4a2a      	ldr	r2, [pc, #168]	; (80153ec <dhcp_renew+0x12c>)
 8015342:	5cd3      	ldrb	r3, [r2, r3]
 8015344:	461a      	mov	r2, r3
 8015346:	f000 fa91 	bl	801586c <dhcp_option_byte>
 801534a:	4603      	mov	r3, r0
 801534c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801534e:	7fbb      	ldrb	r3, [r7, #30]
 8015350:	3301      	adds	r3, #1
 8015352:	77bb      	strb	r3, [r7, #30]
 8015354:	7fbb      	ldrb	r3, [r7, #30]
 8015356:	2b02      	cmp	r3, #2
 8015358:	d9ed      	bls.n	8015336 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801535a:	89b8      	ldrh	r0, [r7, #12]
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	33f0      	adds	r3, #240	; 0xf0
 8015360:	697a      	ldr	r2, [r7, #20]
 8015362:	4619      	mov	r1, r3
 8015364:	f000 ff96 	bl	8016294 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015368:	4b21      	ldr	r3, [pc, #132]	; (80153f0 <dhcp_renew+0x130>)
 801536a:	6818      	ldr	r0, [r3, #0]
 801536c:	69bb      	ldr	r3, [r7, #24]
 801536e:	f103 0218 	add.w	r2, r3, #24
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	2343      	movs	r3, #67	; 0x43
 8015378:	6979      	ldr	r1, [r7, #20]
 801537a:	f7fe fe47 	bl	801400c <udp_sendto_if>
 801537e:	4603      	mov	r3, r0
 8015380:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015382:	6978      	ldr	r0, [r7, #20]
 8015384:	f7f7 fe8e 	bl	800d0a4 <pbuf_free>
 8015388:	e001      	b.n	801538e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801538a:	23ff      	movs	r3, #255	; 0xff
 801538c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	799b      	ldrb	r3, [r3, #6]
 8015392:	2bff      	cmp	r3, #255	; 0xff
 8015394:	d005      	beq.n	80153a2 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	799b      	ldrb	r3, [r3, #6]
 801539a:	3301      	adds	r3, #1
 801539c:	b2da      	uxtb	r2, r3
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	799b      	ldrb	r3, [r3, #6]
 80153a6:	2b09      	cmp	r3, #9
 80153a8:	d80a      	bhi.n	80153c0 <dhcp_renew+0x100>
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	799b      	ldrb	r3, [r3, #6]
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	461a      	mov	r2, r3
 80153b2:	0152      	lsls	r2, r2, #5
 80153b4:	1ad2      	subs	r2, r2, r3
 80153b6:	0092      	lsls	r2, r2, #2
 80153b8:	4413      	add	r3, r2
 80153ba:	011b      	lsls	r3, r3, #4
 80153bc:	b29b      	uxth	r3, r3
 80153be:	e001      	b.n	80153c4 <dhcp_renew+0x104>
 80153c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80153c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80153c6:	89fb      	ldrh	r3, [r7, #14]
 80153c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80153cc:	4a09      	ldr	r2, [pc, #36]	; (80153f4 <dhcp_renew+0x134>)
 80153ce:	fb82 1203 	smull	r1, r2, r2, r3
 80153d2:	1152      	asrs	r2, r2, #5
 80153d4:	17db      	asrs	r3, r3, #31
 80153d6:	1ad3      	subs	r3, r2, r3
 80153d8:	b29a      	uxth	r2, r3
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80153de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3720      	adds	r7, #32
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	20000030 	.word	0x20000030
 80153f0:	20010f14 	.word	0x20010f14
 80153f4:	10624dd3 	.word	0x10624dd3

080153f8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b08a      	sub	sp, #40	; 0x28
 80153fc:	af02      	add	r7, sp, #8
 80153fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015404:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015406:	2104      	movs	r1, #4
 8015408:	69b8      	ldr	r0, [r7, #24]
 801540a:	f000 f9e1 	bl	80157d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801540e:	f107 030c 	add.w	r3, r7, #12
 8015412:	2203      	movs	r2, #3
 8015414:	69b9      	ldr	r1, [r7, #24]
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f000 fe66 	bl	80160e8 <dhcp_create_msg>
 801541c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d04c      	beq.n	80154be <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801542a:	89b8      	ldrh	r0, [r7, #12]
 801542c:	693b      	ldr	r3, [r7, #16]
 801542e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015432:	2302      	movs	r3, #2
 8015434:	2239      	movs	r2, #57	; 0x39
 8015436:	f000 f9e5 	bl	8015804 <dhcp_option>
 801543a:	4603      	mov	r3, r0
 801543c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801543e:	89b8      	ldrh	r0, [r7, #12]
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801544a:	461a      	mov	r2, r3
 801544c:	f000 fa34 	bl	80158b8 <dhcp_option_short>
 8015450:	4603      	mov	r3, r0
 8015452:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015454:	89b8      	ldrh	r0, [r7, #12]
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801545c:	2303      	movs	r3, #3
 801545e:	2237      	movs	r2, #55	; 0x37
 8015460:	f000 f9d0 	bl	8015804 <dhcp_option>
 8015464:	4603      	mov	r3, r0
 8015466:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015468:	2300      	movs	r3, #0
 801546a:	77bb      	strb	r3, [r7, #30]
 801546c:	e00e      	b.n	801548c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801546e:	89b8      	ldrh	r0, [r7, #12]
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015476:	7fbb      	ldrb	r3, [r7, #30]
 8015478:	4a29      	ldr	r2, [pc, #164]	; (8015520 <dhcp_rebind+0x128>)
 801547a:	5cd3      	ldrb	r3, [r2, r3]
 801547c:	461a      	mov	r2, r3
 801547e:	f000 f9f5 	bl	801586c <dhcp_option_byte>
 8015482:	4603      	mov	r3, r0
 8015484:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015486:	7fbb      	ldrb	r3, [r7, #30]
 8015488:	3301      	adds	r3, #1
 801548a:	77bb      	strb	r3, [r7, #30]
 801548c:	7fbb      	ldrb	r3, [r7, #30]
 801548e:	2b02      	cmp	r3, #2
 8015490:	d9ed      	bls.n	801546e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015492:	89b8      	ldrh	r0, [r7, #12]
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	33f0      	adds	r3, #240	; 0xf0
 8015498:	697a      	ldr	r2, [r7, #20]
 801549a:	4619      	mov	r1, r3
 801549c:	f000 fefa 	bl	8016294 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80154a0:	4b20      	ldr	r3, [pc, #128]	; (8015524 <dhcp_rebind+0x12c>)
 80154a2:	6818      	ldr	r0, [r3, #0]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	2343      	movs	r3, #67	; 0x43
 80154aa:	4a1f      	ldr	r2, [pc, #124]	; (8015528 <dhcp_rebind+0x130>)
 80154ac:	6979      	ldr	r1, [r7, #20]
 80154ae:	f7fe fdad 	bl	801400c <udp_sendto_if>
 80154b2:	4603      	mov	r3, r0
 80154b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80154b6:	6978      	ldr	r0, [r7, #20]
 80154b8:	f7f7 fdf4 	bl	800d0a4 <pbuf_free>
 80154bc:	e001      	b.n	80154c2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80154be:	23ff      	movs	r3, #255	; 0xff
 80154c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	799b      	ldrb	r3, [r3, #6]
 80154c6:	2bff      	cmp	r3, #255	; 0xff
 80154c8:	d005      	beq.n	80154d6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	799b      	ldrb	r3, [r3, #6]
 80154ce:	3301      	adds	r3, #1
 80154d0:	b2da      	uxtb	r2, r3
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	799b      	ldrb	r3, [r3, #6]
 80154da:	2b09      	cmp	r3, #9
 80154dc:	d80a      	bhi.n	80154f4 <dhcp_rebind+0xfc>
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	799b      	ldrb	r3, [r3, #6]
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	461a      	mov	r2, r3
 80154e6:	0152      	lsls	r2, r2, #5
 80154e8:	1ad2      	subs	r2, r2, r3
 80154ea:	0092      	lsls	r2, r2, #2
 80154ec:	4413      	add	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	e001      	b.n	80154f8 <dhcp_rebind+0x100>
 80154f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80154f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154fa:	89fb      	ldrh	r3, [r7, #14]
 80154fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015500:	4a0a      	ldr	r2, [pc, #40]	; (801552c <dhcp_rebind+0x134>)
 8015502:	fb82 1203 	smull	r1, r2, r2, r3
 8015506:	1152      	asrs	r2, r2, #5
 8015508:	17db      	asrs	r3, r3, #31
 801550a:	1ad3      	subs	r3, r2, r3
 801550c:	b29a      	uxth	r2, r3
 801550e:	69bb      	ldr	r3, [r7, #24]
 8015510:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015512:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015516:	4618      	mov	r0, r3
 8015518:	3720      	adds	r7, #32
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	20000030 	.word	0x20000030
 8015524:	20010f14 	.word	0x20010f14
 8015528:	080282cc 	.word	0x080282cc
 801552c:	10624dd3 	.word	0x10624dd3

08015530 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015530:	b5b0      	push	{r4, r5, r7, lr}
 8015532:	b08a      	sub	sp, #40	; 0x28
 8015534:	af02      	add	r7, sp, #8
 8015536:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801553c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801553e:	2103      	movs	r1, #3
 8015540:	69b8      	ldr	r0, [r7, #24]
 8015542:	f000 f945 	bl	80157d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015546:	f107 030c 	add.w	r3, r7, #12
 801554a:	2203      	movs	r2, #3
 801554c:	69b9      	ldr	r1, [r7, #24]
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f000 fdca 	bl	80160e8 <dhcp_create_msg>
 8015554:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d066      	beq.n	801562a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	685b      	ldr	r3, [r3, #4]
 8015560:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015562:	89b8      	ldrh	r0, [r7, #12]
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801556a:	2302      	movs	r3, #2
 801556c:	2239      	movs	r2, #57	; 0x39
 801556e:	f000 f949 	bl	8015804 <dhcp_option>
 8015572:	4603      	mov	r3, r0
 8015574:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015576:	89b8      	ldrh	r0, [r7, #12]
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	33f0      	adds	r3, #240	; 0xf0
 801557c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015580:	4619      	mov	r1, r3
 8015582:	f000 f999 	bl	80158b8 <dhcp_option_short>
 8015586:	4603      	mov	r3, r0
 8015588:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801558a:	89b8      	ldrh	r0, [r7, #12]
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015592:	2304      	movs	r3, #4
 8015594:	2232      	movs	r2, #50	; 0x32
 8015596:	f000 f935 	bl	8015804 <dhcp_option>
 801559a:	4603      	mov	r3, r0
 801559c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801559e:	89bc      	ldrh	r4, [r7, #12]
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	69db      	ldr	r3, [r3, #28]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7f6 f95b 	bl	800b866 <lwip_htonl>
 80155b0:	4603      	mov	r3, r0
 80155b2:	461a      	mov	r2, r3
 80155b4:	4629      	mov	r1, r5
 80155b6:	4620      	mov	r0, r4
 80155b8:	f000 f9b0 	bl	801591c <dhcp_option_long>
 80155bc:	4603      	mov	r3, r0
 80155be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80155c0:	89b8      	ldrh	r0, [r7, #12]
 80155c2:	693b      	ldr	r3, [r7, #16]
 80155c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155c8:	2303      	movs	r3, #3
 80155ca:	2237      	movs	r2, #55	; 0x37
 80155cc:	f000 f91a 	bl	8015804 <dhcp_option>
 80155d0:	4603      	mov	r3, r0
 80155d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155d4:	2300      	movs	r3, #0
 80155d6:	77bb      	strb	r3, [r7, #30]
 80155d8:	e00e      	b.n	80155f8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80155da:	89b8      	ldrh	r0, [r7, #12]
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155e2:	7fbb      	ldrb	r3, [r7, #30]
 80155e4:	4a29      	ldr	r2, [pc, #164]	; (801568c <dhcp_reboot+0x15c>)
 80155e6:	5cd3      	ldrb	r3, [r2, r3]
 80155e8:	461a      	mov	r2, r3
 80155ea:	f000 f93f 	bl	801586c <dhcp_option_byte>
 80155ee:	4603      	mov	r3, r0
 80155f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155f2:	7fbb      	ldrb	r3, [r7, #30]
 80155f4:	3301      	adds	r3, #1
 80155f6:	77bb      	strb	r3, [r7, #30]
 80155f8:	7fbb      	ldrb	r3, [r7, #30]
 80155fa:	2b02      	cmp	r3, #2
 80155fc:	d9ed      	bls.n	80155da <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80155fe:	89b8      	ldrh	r0, [r7, #12]
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	33f0      	adds	r3, #240	; 0xf0
 8015604:	697a      	ldr	r2, [r7, #20]
 8015606:	4619      	mov	r1, r3
 8015608:	f000 fe44 	bl	8016294 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801560c:	4b20      	ldr	r3, [pc, #128]	; (8015690 <dhcp_reboot+0x160>)
 801560e:	6818      	ldr	r0, [r3, #0]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	9300      	str	r3, [sp, #0]
 8015614:	2343      	movs	r3, #67	; 0x43
 8015616:	4a1f      	ldr	r2, [pc, #124]	; (8015694 <dhcp_reboot+0x164>)
 8015618:	6979      	ldr	r1, [r7, #20]
 801561a:	f7fe fcf7 	bl	801400c <udp_sendto_if>
 801561e:	4603      	mov	r3, r0
 8015620:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015622:	6978      	ldr	r0, [r7, #20]
 8015624:	f7f7 fd3e 	bl	800d0a4 <pbuf_free>
 8015628:	e001      	b.n	801562e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801562a:	23ff      	movs	r3, #255	; 0xff
 801562c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801562e:	69bb      	ldr	r3, [r7, #24]
 8015630:	799b      	ldrb	r3, [r3, #6]
 8015632:	2bff      	cmp	r3, #255	; 0xff
 8015634:	d005      	beq.n	8015642 <dhcp_reboot+0x112>
    dhcp->tries++;
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	799b      	ldrb	r3, [r3, #6]
 801563a:	3301      	adds	r3, #1
 801563c:	b2da      	uxtb	r2, r3
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015642:	69bb      	ldr	r3, [r7, #24]
 8015644:	799b      	ldrb	r3, [r3, #6]
 8015646:	2b09      	cmp	r3, #9
 8015648:	d80a      	bhi.n	8015660 <dhcp_reboot+0x130>
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	799b      	ldrb	r3, [r3, #6]
 801564e:	b29b      	uxth	r3, r3
 8015650:	461a      	mov	r2, r3
 8015652:	0152      	lsls	r2, r2, #5
 8015654:	1ad2      	subs	r2, r2, r3
 8015656:	0092      	lsls	r2, r2, #2
 8015658:	4413      	add	r3, r2
 801565a:	00db      	lsls	r3, r3, #3
 801565c:	b29b      	uxth	r3, r3
 801565e:	e001      	b.n	8015664 <dhcp_reboot+0x134>
 8015660:	f242 7310 	movw	r3, #10000	; 0x2710
 8015664:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015666:	89fb      	ldrh	r3, [r7, #14]
 8015668:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801566c:	4a0a      	ldr	r2, [pc, #40]	; (8015698 <dhcp_reboot+0x168>)
 801566e:	fb82 1203 	smull	r1, r2, r2, r3
 8015672:	1152      	asrs	r2, r2, #5
 8015674:	17db      	asrs	r3, r3, #31
 8015676:	1ad3      	subs	r3, r2, r3
 8015678:	b29a      	uxth	r2, r3
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801567e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015682:	4618      	mov	r0, r3
 8015684:	3720      	adds	r7, #32
 8015686:	46bd      	mov	sp, r7
 8015688:	bdb0      	pop	{r4, r5, r7, pc}
 801568a:	bf00      	nop
 801568c:	20000030 	.word	0x20000030
 8015690:	20010f14 	.word	0x20010f14
 8015694:	080282cc 	.word	0x080282cc
 8015698:	10624dd3 	.word	0x10624dd3

0801569c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801569c:	b5b0      	push	{r4, r5, r7, lr}
 801569e:	b08a      	sub	sp, #40	; 0x28
 80156a0:	af02      	add	r7, sp, #8
 80156a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f000 8084 	beq.w	80157ba <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	795b      	ldrb	r3, [r3, #5]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f000 8081 	beq.w	80157be <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	699b      	ldr	r3, [r3, #24]
 80156c0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	2200      	movs	r2, #0
 80156c6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	2200      	movs	r2, #0
 80156cc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	2200      	movs	r2, #0
 80156d2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	2200      	movs	r2, #0
 80156d8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	2200      	movs	r2, #0
 80156de:	631a      	str	r2, [r3, #48]	; 0x30
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	2200      	movs	r2, #0
 80156f4:	829a      	strh	r2, [r3, #20]
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	8a9a      	ldrh	r2, [r3, #20]
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	825a      	strh	r2, [r3, #18]
 80156fe:	69fb      	ldr	r3, [r7, #28]
 8015700:	8a5a      	ldrh	r2, [r3, #18]
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	821a      	strh	r2, [r3, #16]
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	8a1a      	ldrh	r2, [r3, #16]
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f000 fdee 	bl	80162f0 <dhcp_supplied_address>
 8015714:	4603      	mov	r3, r0
 8015716:	2b00      	cmp	r3, #0
 8015718:	d03b      	beq.n	8015792 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801571a:	f107 030e 	add.w	r3, r7, #14
 801571e:	2207      	movs	r2, #7
 8015720:	69f9      	ldr	r1, [r7, #28]
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f000 fce0 	bl	80160e8 <dhcp_create_msg>
 8015728:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d030      	beq.n	8015792 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015730:	69bb      	ldr	r3, [r7, #24]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015736:	89f8      	ldrh	r0, [r7, #14]
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801573e:	2304      	movs	r3, #4
 8015740:	2236      	movs	r2, #54	; 0x36
 8015742:	f000 f85f 	bl	8015804 <dhcp_option>
 8015746:	4603      	mov	r3, r0
 8015748:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801574a:	89fc      	ldrh	r4, [r7, #14]
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	4618      	mov	r0, r3
 8015756:	f7f6 f886 	bl	800b866 <lwip_htonl>
 801575a:	4603      	mov	r3, r0
 801575c:	461a      	mov	r2, r3
 801575e:	4629      	mov	r1, r5
 8015760:	4620      	mov	r0, r4
 8015762:	f000 f8db 	bl	801591c <dhcp_option_long>
 8015766:	4603      	mov	r3, r0
 8015768:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801576a:	89f8      	ldrh	r0, [r7, #14]
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	33f0      	adds	r3, #240	; 0xf0
 8015770:	69ba      	ldr	r2, [r7, #24]
 8015772:	4619      	mov	r1, r3
 8015774:	f000 fd8e 	bl	8016294 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015778:	4b13      	ldr	r3, [pc, #76]	; (80157c8 <dhcp_release_and_stop+0x12c>)
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	f107 0210 	add.w	r2, r7, #16
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	9300      	str	r3, [sp, #0]
 8015784:	2343      	movs	r3, #67	; 0x43
 8015786:	69b9      	ldr	r1, [r7, #24]
 8015788:	f7fe fc40 	bl	801400c <udp_sendto_if>
      pbuf_free(p_out);
 801578c:	69b8      	ldr	r0, [r7, #24]
 801578e:	f7f7 fc89 	bl	800d0a4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015792:	4b0e      	ldr	r3, [pc, #56]	; (80157cc <dhcp_release_and_stop+0x130>)
 8015794:	4a0d      	ldr	r2, [pc, #52]	; (80157cc <dhcp_release_and_stop+0x130>)
 8015796:	490d      	ldr	r1, [pc, #52]	; (80157cc <dhcp_release_and_stop+0x130>)
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f7f6 ff75 	bl	800c688 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801579e:	2100      	movs	r1, #0
 80157a0:	69f8      	ldr	r0, [r7, #28]
 80157a2:	f000 f815 	bl	80157d0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	791b      	ldrb	r3, [r3, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d008      	beq.n	80157c0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80157ae:	f7fe ff85 	bl	80146bc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80157b2:	69fb      	ldr	r3, [r7, #28]
 80157b4:	2200      	movs	r2, #0
 80157b6:	711a      	strb	r2, [r3, #4]
 80157b8:	e002      	b.n	80157c0 <dhcp_release_and_stop+0x124>
    return;
 80157ba:	bf00      	nop
 80157bc:	e000      	b.n	80157c0 <dhcp_release_and_stop+0x124>
    return;
 80157be:	bf00      	nop
  }
}
 80157c0:	3720      	adds	r7, #32
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bdb0      	pop	{r4, r5, r7, pc}
 80157c6:	bf00      	nop
 80157c8:	20010f14 	.word	0x20010f14
 80157cc:	080282c8 	.word	0x080282c8

080157d0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80157d0:	b480      	push	{r7}
 80157d2:	b083      	sub	sp, #12
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	460b      	mov	r3, r1
 80157da:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	795b      	ldrb	r3, [r3, #5]
 80157e0:	78fa      	ldrb	r2, [r7, #3]
 80157e2:	429a      	cmp	r2, r3
 80157e4:	d008      	beq.n	80157f8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	78fa      	ldrb	r2, [r7, #3]
 80157ea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2200      	movs	r2, #0
 80157f0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2200      	movs	r2, #0
 80157f6:	811a      	strh	r2, [r3, #8]
  }
}
 80157f8:	bf00      	nop
 80157fa:	370c      	adds	r7, #12
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6039      	str	r1, [r7, #0]
 801580c:	4611      	mov	r1, r2
 801580e:	461a      	mov	r2, r3
 8015810:	4603      	mov	r3, r0
 8015812:	80fb      	strh	r3, [r7, #6]
 8015814:	460b      	mov	r3, r1
 8015816:	717b      	strb	r3, [r7, #5]
 8015818:	4613      	mov	r3, r2
 801581a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801581c:	88fa      	ldrh	r2, [r7, #6]
 801581e:	793b      	ldrb	r3, [r7, #4]
 8015820:	4413      	add	r3, r2
 8015822:	3302      	adds	r3, #2
 8015824:	2b44      	cmp	r3, #68	; 0x44
 8015826:	d906      	bls.n	8015836 <dhcp_option+0x32>
 8015828:	4b0d      	ldr	r3, [pc, #52]	; (8015860 <dhcp_option+0x5c>)
 801582a:	f240 529a 	movw	r2, #1434	; 0x59a
 801582e:	490d      	ldr	r1, [pc, #52]	; (8015864 <dhcp_option+0x60>)
 8015830:	480d      	ldr	r0, [pc, #52]	; (8015868 <dhcp_option+0x64>)
 8015832:	f003 fc3f 	bl	80190b4 <iprintf>
  options[options_out_len++] = option_type;
 8015836:	88fb      	ldrh	r3, [r7, #6]
 8015838:	1c5a      	adds	r2, r3, #1
 801583a:	80fa      	strh	r2, [r7, #6]
 801583c:	461a      	mov	r2, r3
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	4413      	add	r3, r2
 8015842:	797a      	ldrb	r2, [r7, #5]
 8015844:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015846:	88fb      	ldrh	r3, [r7, #6]
 8015848:	1c5a      	adds	r2, r3, #1
 801584a:	80fa      	strh	r2, [r7, #6]
 801584c:	461a      	mov	r2, r3
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	4413      	add	r3, r2
 8015852:	793a      	ldrb	r2, [r7, #4]
 8015854:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015856:	88fb      	ldrh	r3, [r7, #6]
}
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	0801d5e4 	.word	0x0801d5e4
 8015864:	0801d778 	.word	0x0801d778
 8015868:	0801d644 	.word	0x0801d644

0801586c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	4603      	mov	r3, r0
 8015874:	6039      	str	r1, [r7, #0]
 8015876:	80fb      	strh	r3, [r7, #6]
 8015878:	4613      	mov	r3, r2
 801587a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801587c:	88fb      	ldrh	r3, [r7, #6]
 801587e:	2b43      	cmp	r3, #67	; 0x43
 8015880:	d906      	bls.n	8015890 <dhcp_option_byte+0x24>
 8015882:	4b0a      	ldr	r3, [pc, #40]	; (80158ac <dhcp_option_byte+0x40>)
 8015884:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015888:	4909      	ldr	r1, [pc, #36]	; (80158b0 <dhcp_option_byte+0x44>)
 801588a:	480a      	ldr	r0, [pc, #40]	; (80158b4 <dhcp_option_byte+0x48>)
 801588c:	f003 fc12 	bl	80190b4 <iprintf>
  options[options_out_len++] = value;
 8015890:	88fb      	ldrh	r3, [r7, #6]
 8015892:	1c5a      	adds	r2, r3, #1
 8015894:	80fa      	strh	r2, [r7, #6]
 8015896:	461a      	mov	r2, r3
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	4413      	add	r3, r2
 801589c:	797a      	ldrb	r2, [r7, #5]
 801589e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80158a0:	88fb      	ldrh	r3, [r7, #6]
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3708      	adds	r7, #8
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}
 80158aa:	bf00      	nop
 80158ac:	0801d5e4 	.word	0x0801d5e4
 80158b0:	0801d7bc 	.word	0x0801d7bc
 80158b4:	0801d644 	.word	0x0801d644

080158b8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	4603      	mov	r3, r0
 80158c0:	6039      	str	r1, [r7, #0]
 80158c2:	80fb      	strh	r3, [r7, #6]
 80158c4:	4613      	mov	r3, r2
 80158c6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80158c8:	88fb      	ldrh	r3, [r7, #6]
 80158ca:	3302      	adds	r3, #2
 80158cc:	2b44      	cmp	r3, #68	; 0x44
 80158ce:	d906      	bls.n	80158de <dhcp_option_short+0x26>
 80158d0:	4b0f      	ldr	r3, [pc, #60]	; (8015910 <dhcp_option_short+0x58>)
 80158d2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80158d6:	490f      	ldr	r1, [pc, #60]	; (8015914 <dhcp_option_short+0x5c>)
 80158d8:	480f      	ldr	r0, [pc, #60]	; (8015918 <dhcp_option_short+0x60>)
 80158da:	f003 fbeb 	bl	80190b4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80158de:	88bb      	ldrh	r3, [r7, #4]
 80158e0:	0a1b      	lsrs	r3, r3, #8
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	88fb      	ldrh	r3, [r7, #6]
 80158e6:	1c59      	adds	r1, r3, #1
 80158e8:	80f9      	strh	r1, [r7, #6]
 80158ea:	4619      	mov	r1, r3
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	440b      	add	r3, r1
 80158f0:	b2d2      	uxtb	r2, r2
 80158f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80158f4:	88fb      	ldrh	r3, [r7, #6]
 80158f6:	1c5a      	adds	r2, r3, #1
 80158f8:	80fa      	strh	r2, [r7, #6]
 80158fa:	461a      	mov	r2, r3
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	4413      	add	r3, r2
 8015900:	88ba      	ldrh	r2, [r7, #4]
 8015902:	b2d2      	uxtb	r2, r2
 8015904:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015906:	88fb      	ldrh	r3, [r7, #6]
}
 8015908:	4618      	mov	r0, r3
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	0801d5e4 	.word	0x0801d5e4
 8015914:	0801d7f4 	.word	0x0801d7f4
 8015918:	0801d644 	.word	0x0801d644

0801591c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	4603      	mov	r3, r0
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	607a      	str	r2, [r7, #4]
 8015928:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801592a:	89fb      	ldrh	r3, [r7, #14]
 801592c:	3304      	adds	r3, #4
 801592e:	2b44      	cmp	r3, #68	; 0x44
 8015930:	d906      	bls.n	8015940 <dhcp_option_long+0x24>
 8015932:	4b19      	ldr	r3, [pc, #100]	; (8015998 <dhcp_option_long+0x7c>)
 8015934:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015938:	4918      	ldr	r1, [pc, #96]	; (801599c <dhcp_option_long+0x80>)
 801593a:	4819      	ldr	r0, [pc, #100]	; (80159a0 <dhcp_option_long+0x84>)
 801593c:	f003 fbba 	bl	80190b4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	0e1a      	lsrs	r2, r3, #24
 8015944:	89fb      	ldrh	r3, [r7, #14]
 8015946:	1c59      	adds	r1, r3, #1
 8015948:	81f9      	strh	r1, [r7, #14]
 801594a:	4619      	mov	r1, r3
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	440b      	add	r3, r1
 8015950:	b2d2      	uxtb	r2, r2
 8015952:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	0c1a      	lsrs	r2, r3, #16
 8015958:	89fb      	ldrh	r3, [r7, #14]
 801595a:	1c59      	adds	r1, r3, #1
 801595c:	81f9      	strh	r1, [r7, #14]
 801595e:	4619      	mov	r1, r3
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	440b      	add	r3, r1
 8015964:	b2d2      	uxtb	r2, r2
 8015966:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	0a1a      	lsrs	r2, r3, #8
 801596c:	89fb      	ldrh	r3, [r7, #14]
 801596e:	1c59      	adds	r1, r3, #1
 8015970:	81f9      	strh	r1, [r7, #14]
 8015972:	4619      	mov	r1, r3
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	440b      	add	r3, r1
 8015978:	b2d2      	uxtb	r2, r2
 801597a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801597c:	89fb      	ldrh	r3, [r7, #14]
 801597e:	1c5a      	adds	r2, r3, #1
 8015980:	81fa      	strh	r2, [r7, #14]
 8015982:	461a      	mov	r2, r3
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	4413      	add	r3, r2
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	b2d2      	uxtb	r2, r2
 801598c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801598e:	89fb      	ldrh	r3, [r7, #14]
}
 8015990:	4618      	mov	r0, r3
 8015992:	3710      	adds	r7, #16
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	0801d5e4 	.word	0x0801d5e4
 801599c:	0801d830 	.word	0x0801d830
 80159a0:	0801d644 	.word	0x0801d644

080159a4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b090      	sub	sp, #64	; 0x40
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80159b6:	2208      	movs	r2, #8
 80159b8:	2100      	movs	r1, #0
 80159ba:	48b5      	ldr	r0, [pc, #724]	; (8015c90 <dhcp_parse_reply+0x2ec>)
 80159bc:	f003 fadd 	bl	8018f7a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	895b      	ldrh	r3, [r3, #10]
 80159c4:	2b2b      	cmp	r3, #43	; 0x2b
 80159c6:	d802      	bhi.n	80159ce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80159c8:	f06f 0301 	mvn.w	r3, #1
 80159cc:	e2a7      	b.n	8015f1e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80159d4:	23f0      	movs	r3, #240	; 0xf0
 80159d6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	891b      	ldrh	r3, [r3, #8]
 80159dc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80159e2:	e00c      	b.n	80159fe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80159e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e6:	895b      	ldrh	r3, [r3, #10]
 80159e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159ea:	1ad3      	subs	r3, r2, r3
 80159ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80159ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f0:	895b      	ldrh	r3, [r3, #10]
 80159f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80159f4:	1ad3      	subs	r3, r2, r3
 80159f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80159f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80159fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d004      	beq.n	8015a0e <dhcp_parse_reply+0x6a>
 8015a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a06:	895b      	ldrh	r3, [r3, #10]
 8015a08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d2ea      	bcs.n	80159e4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d102      	bne.n	8015a1a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015a14:	f06f 0301 	mvn.w	r3, #1
 8015a18:	e281      	b.n	8015f1e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8015a1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a1c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015a1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015a20:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a24:	685b      	ldr	r3, [r3, #4]
 8015a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015a28:	e239      	b.n	8015e9e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8015a2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a2e:	4413      	add	r3, r2
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a3e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015a40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a42:	3302      	adds	r3, #2
 8015a44:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015a46:	8bfa      	ldrh	r2, [r7, #30]
 8015a48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d202      	bcs.n	8015a54 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015a4e:	f06f 0301 	mvn.w	r3, #1
 8015a52:	e264      	b.n	8015f1e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015a54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a56:	3301      	adds	r3, #1
 8015a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a5a:	8952      	ldrh	r2, [r2, #10]
 8015a5c:	4293      	cmp	r3, r2
 8015a5e:	da07      	bge.n	8015a70 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015a60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a62:	3301      	adds	r3, #1
 8015a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a66:	4413      	add	r3, r2
 8015a68:	781b      	ldrb	r3, [r3, #0]
 8015a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a6e:	e00b      	b.n	8015a88 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d004      	beq.n	8015a82 <dhcp_parse_reply+0xde>
 8015a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	e000      	b.n	8015a84 <dhcp_parse_reply+0xe0>
 8015a82:	2300      	movs	r3, #0
 8015a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015a90:	7dfb      	ldrb	r3, [r7, #23]
 8015a92:	2b3b      	cmp	r3, #59	; 0x3b
 8015a94:	f200 812c 	bhi.w	8015cf0 <dhcp_parse_reply+0x34c>
 8015a98:	a201      	add	r2, pc, #4	; (adr r2, 8015aa0 <dhcp_parse_reply+0xfc>)
 8015a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a9e:	bf00      	nop
 8015aa0:	08015b91 	.word	0x08015b91
 8015aa4:	08015ba1 	.word	0x08015ba1
 8015aa8:	08015cf1 	.word	0x08015cf1
 8015aac:	08015bc3 	.word	0x08015bc3
 8015ab0:	08015cf1 	.word	0x08015cf1
 8015ab4:	08015cf1 	.word	0x08015cf1
 8015ab8:	08015cf1 	.word	0x08015cf1
 8015abc:	08015cf1 	.word	0x08015cf1
 8015ac0:	08015cf1 	.word	0x08015cf1
 8015ac4:	08015cf1 	.word	0x08015cf1
 8015ac8:	08015cf1 	.word	0x08015cf1
 8015acc:	08015cf1 	.word	0x08015cf1
 8015ad0:	08015cf1 	.word	0x08015cf1
 8015ad4:	08015cf1 	.word	0x08015cf1
 8015ad8:	08015cf1 	.word	0x08015cf1
 8015adc:	08015cf1 	.word	0x08015cf1
 8015ae0:	08015cf1 	.word	0x08015cf1
 8015ae4:	08015cf1 	.word	0x08015cf1
 8015ae8:	08015cf1 	.word	0x08015cf1
 8015aec:	08015cf1 	.word	0x08015cf1
 8015af0:	08015cf1 	.word	0x08015cf1
 8015af4:	08015cf1 	.word	0x08015cf1
 8015af8:	08015cf1 	.word	0x08015cf1
 8015afc:	08015cf1 	.word	0x08015cf1
 8015b00:	08015cf1 	.word	0x08015cf1
 8015b04:	08015cf1 	.word	0x08015cf1
 8015b08:	08015cf1 	.word	0x08015cf1
 8015b0c:	08015cf1 	.word	0x08015cf1
 8015b10:	08015cf1 	.word	0x08015cf1
 8015b14:	08015cf1 	.word	0x08015cf1
 8015b18:	08015cf1 	.word	0x08015cf1
 8015b1c:	08015cf1 	.word	0x08015cf1
 8015b20:	08015cf1 	.word	0x08015cf1
 8015b24:	08015cf1 	.word	0x08015cf1
 8015b28:	08015cf1 	.word	0x08015cf1
 8015b2c:	08015cf1 	.word	0x08015cf1
 8015b30:	08015cf1 	.word	0x08015cf1
 8015b34:	08015cf1 	.word	0x08015cf1
 8015b38:	08015cf1 	.word	0x08015cf1
 8015b3c:	08015cf1 	.word	0x08015cf1
 8015b40:	08015cf1 	.word	0x08015cf1
 8015b44:	08015cf1 	.word	0x08015cf1
 8015b48:	08015cf1 	.word	0x08015cf1
 8015b4c:	08015cf1 	.word	0x08015cf1
 8015b50:	08015cf1 	.word	0x08015cf1
 8015b54:	08015cf1 	.word	0x08015cf1
 8015b58:	08015cf1 	.word	0x08015cf1
 8015b5c:	08015cf1 	.word	0x08015cf1
 8015b60:	08015cf1 	.word	0x08015cf1
 8015b64:	08015cf1 	.word	0x08015cf1
 8015b68:	08015cf1 	.word	0x08015cf1
 8015b6c:	08015bef 	.word	0x08015bef
 8015b70:	08015c11 	.word	0x08015c11
 8015b74:	08015c4d 	.word	0x08015c4d
 8015b78:	08015c6f 	.word	0x08015c6f
 8015b7c:	08015cf1 	.word	0x08015cf1
 8015b80:	08015cf1 	.word	0x08015cf1
 8015b84:	08015cf1 	.word	0x08015cf1
 8015b88:	08015cad 	.word	0x08015cad
 8015b8c:	08015ccf 	.word	0x08015ccf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015b90:	2300      	movs	r3, #0
 8015b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015b9e:	e0ab      	b.n	8015cf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ba4:	2b04      	cmp	r3, #4
 8015ba6:	d009      	beq.n	8015bbc <dhcp_parse_reply+0x218>
 8015ba8:	4b3a      	ldr	r3, [pc, #232]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015baa:	f240 622e 	movw	r2, #1582	; 0x62e
 8015bae:	493a      	ldr	r1, [pc, #232]	; (8015c98 <dhcp_parse_reply+0x2f4>)
 8015bb0:	483a      	ldr	r0, [pc, #232]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015bb2:	f003 fa7f 	bl	80190b4 <iprintf>
 8015bb6:	f06f 0305 	mvn.w	r3, #5
 8015bba:	e1b0      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015bbc:	2306      	movs	r3, #6
 8015bbe:	623b      	str	r3, [r7, #32]
        break;
 8015bc0:	e09a      	b.n	8015cf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015bc2:	2304      	movs	r3, #4
 8015bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015bc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d209      	bcs.n	8015be8 <dhcp_parse_reply+0x244>
 8015bd4:	4b2f      	ldr	r3, [pc, #188]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015bd6:	f240 6233 	movw	r2, #1587	; 0x633
 8015bda:	4931      	ldr	r1, [pc, #196]	; (8015ca0 <dhcp_parse_reply+0x2fc>)
 8015bdc:	482f      	ldr	r0, [pc, #188]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015bde:	f003 fa69 	bl	80190b4 <iprintf>
 8015be2:	f06f 0305 	mvn.w	r3, #5
 8015be6:	e19a      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015be8:	2307      	movs	r3, #7
 8015bea:	623b      	str	r3, [r7, #32]
        break;
 8015bec:	e084      	b.n	8015cf8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bf2:	2b04      	cmp	r3, #4
 8015bf4:	d009      	beq.n	8015c0a <dhcp_parse_reply+0x266>
 8015bf6:	4b27      	ldr	r3, [pc, #156]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015bf8:	f240 6241 	movw	r2, #1601	; 0x641
 8015bfc:	4926      	ldr	r1, [pc, #152]	; (8015c98 <dhcp_parse_reply+0x2f4>)
 8015bfe:	4827      	ldr	r0, [pc, #156]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015c00:	f003 fa58 	bl	80190b4 <iprintf>
 8015c04:	f06f 0305 	mvn.w	r3, #5
 8015c08:	e189      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015c0a:	2303      	movs	r3, #3
 8015c0c:	623b      	str	r3, [r7, #32]
        break;
 8015c0e:	e073      	b.n	8015cf8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c14:	2b01      	cmp	r3, #1
 8015c16:	d009      	beq.n	8015c2c <dhcp_parse_reply+0x288>
 8015c18:	4b1e      	ldr	r3, [pc, #120]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015c1a:	f240 624f 	movw	r2, #1615	; 0x64f
 8015c1e:	4921      	ldr	r1, [pc, #132]	; (8015ca4 <dhcp_parse_reply+0x300>)
 8015c20:	481e      	ldr	r0, [pc, #120]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015c22:	f003 fa47 	bl	80190b4 <iprintf>
 8015c26:	f06f 0305 	mvn.w	r3, #5
 8015c2a:	e178      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015c2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c2e:	2bf0      	cmp	r3, #240	; 0xf0
 8015c30:	d009      	beq.n	8015c46 <dhcp_parse_reply+0x2a2>
 8015c32:	4b18      	ldr	r3, [pc, #96]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015c34:	f240 6251 	movw	r2, #1617	; 0x651
 8015c38:	491b      	ldr	r1, [pc, #108]	; (8015ca8 <dhcp_parse_reply+0x304>)
 8015c3a:	4818      	ldr	r0, [pc, #96]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015c3c:	f003 fa3a 	bl	80190b4 <iprintf>
 8015c40:	f06f 0305 	mvn.w	r3, #5
 8015c44:	e16b      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015c46:	2300      	movs	r3, #0
 8015c48:	623b      	str	r3, [r7, #32]
        break;
 8015c4a:	e055      	b.n	8015cf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d009      	beq.n	8015c68 <dhcp_parse_reply+0x2c4>
 8015c54:	4b0f      	ldr	r3, [pc, #60]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015c56:	f240 6255 	movw	r2, #1621	; 0x655
 8015c5a:	4912      	ldr	r1, [pc, #72]	; (8015ca4 <dhcp_parse_reply+0x300>)
 8015c5c:	480f      	ldr	r0, [pc, #60]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015c5e:	f003 fa29 	bl	80190b4 <iprintf>
 8015c62:	f06f 0305 	mvn.w	r3, #5
 8015c66:	e15a      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	623b      	str	r3, [r7, #32]
        break;
 8015c6c:	e044      	b.n	8015cf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c72:	2b04      	cmp	r3, #4
 8015c74:	d009      	beq.n	8015c8a <dhcp_parse_reply+0x2e6>
 8015c76:	4b07      	ldr	r3, [pc, #28]	; (8015c94 <dhcp_parse_reply+0x2f0>)
 8015c78:	f240 6259 	movw	r2, #1625	; 0x659
 8015c7c:	4906      	ldr	r1, [pc, #24]	; (8015c98 <dhcp_parse_reply+0x2f4>)
 8015c7e:	4807      	ldr	r0, [pc, #28]	; (8015c9c <dhcp_parse_reply+0x2f8>)
 8015c80:	f003 fa18 	bl	80190b4 <iprintf>
 8015c84:	f06f 0305 	mvn.w	r3, #5
 8015c88:	e149      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015c8a:	2302      	movs	r3, #2
 8015c8c:	623b      	str	r3, [r7, #32]
        break;
 8015c8e:	e033      	b.n	8015cf8 <dhcp_parse_reply+0x354>
 8015c90:	20010f0c 	.word	0x20010f0c
 8015c94:	0801d5e4 	.word	0x0801d5e4
 8015c98:	0801d86c 	.word	0x0801d86c
 8015c9c:	0801d644 	.word	0x0801d644
 8015ca0:	0801d878 	.word	0x0801d878
 8015ca4:	0801d88c 	.word	0x0801d88c
 8015ca8:	0801d898 	.word	0x0801d898
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cb0:	2b04      	cmp	r3, #4
 8015cb2:	d009      	beq.n	8015cc8 <dhcp_parse_reply+0x324>
 8015cb4:	4b9c      	ldr	r3, [pc, #624]	; (8015f28 <dhcp_parse_reply+0x584>)
 8015cb6:	f240 625d 	movw	r2, #1629	; 0x65d
 8015cba:	499c      	ldr	r1, [pc, #624]	; (8015f2c <dhcp_parse_reply+0x588>)
 8015cbc:	489c      	ldr	r0, [pc, #624]	; (8015f30 <dhcp_parse_reply+0x58c>)
 8015cbe:	f003 f9f9 	bl	80190b4 <iprintf>
 8015cc2:	f06f 0305 	mvn.w	r3, #5
 8015cc6:	e12a      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015cc8:	2304      	movs	r3, #4
 8015cca:	623b      	str	r3, [r7, #32]
        break;
 8015ccc:	e014      	b.n	8015cf8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cd2:	2b04      	cmp	r3, #4
 8015cd4:	d009      	beq.n	8015cea <dhcp_parse_reply+0x346>
 8015cd6:	4b94      	ldr	r3, [pc, #592]	; (8015f28 <dhcp_parse_reply+0x584>)
 8015cd8:	f240 6261 	movw	r2, #1633	; 0x661
 8015cdc:	4993      	ldr	r1, [pc, #588]	; (8015f2c <dhcp_parse_reply+0x588>)
 8015cde:	4894      	ldr	r0, [pc, #592]	; (8015f30 <dhcp_parse_reply+0x58c>)
 8015ce0:	f003 f9e8 	bl	80190b4 <iprintf>
 8015ce4:	f06f 0305 	mvn.w	r3, #5
 8015ce8:	e119      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015cea:	2305      	movs	r3, #5
 8015cec:	623b      	str	r3, [r7, #32]
        break;
 8015cee:	e003      	b.n	8015cf8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015cf6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015cf8:	7dfb      	ldrb	r3, [r7, #23]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d103      	bne.n	8015d06 <dhcp_parse_reply+0x362>
      offset++;
 8015cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d00:	3301      	adds	r3, #1
 8015d02:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015d04:	e0a1      	b.n	8015e4a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015d06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d0c:	4413      	add	r3, r2
 8015d0e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015d12:	4293      	cmp	r3, r2
 8015d14:	dd02      	ble.n	8015d1c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015d16:	f06f 0301 	mvn.w	r3, #1
 8015d1a:	e100      	b.n	8015f1e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d20:	b29a      	uxth	r2, r3
 8015d22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d24:	4413      	add	r3, r2
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	3302      	adds	r3, #2
 8015d2a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	f000 808a 	beq.w	8015e4a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015d3a:	6a3b      	ldr	r3, [r7, #32]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	db02      	blt.n	8015d46 <dhcp_parse_reply+0x3a2>
 8015d40:	6a3b      	ldr	r3, [r7, #32]
 8015d42:	2b07      	cmp	r3, #7
 8015d44:	dd06      	ble.n	8015d54 <dhcp_parse_reply+0x3b0>
 8015d46:	4b78      	ldr	r3, [pc, #480]	; (8015f28 <dhcp_parse_reply+0x584>)
 8015d48:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015d4c:	4979      	ldr	r1, [pc, #484]	; (8015f34 <dhcp_parse_reply+0x590>)
 8015d4e:	4878      	ldr	r0, [pc, #480]	; (8015f30 <dhcp_parse_reply+0x58c>)
 8015d50:	f003 f9b0 	bl	80190b4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015d54:	4a78      	ldr	r2, [pc, #480]	; (8015f38 <dhcp_parse_reply+0x594>)
 8015d56:	6a3b      	ldr	r3, [r7, #32]
 8015d58:	4413      	add	r3, r2
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d174      	bne.n	8015e4a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015d60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d64:	2b04      	cmp	r3, #4
 8015d66:	bf28      	it	cs
 8015d68:	2304      	movcs	r3, #4
 8015d6a:	b2db      	uxtb	r3, r3
 8015d6c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015d6e:	8bfb      	ldrh	r3, [r7, #30]
 8015d70:	8aba      	ldrh	r2, [r7, #20]
 8015d72:	f107 0108 	add.w	r1, r7, #8
 8015d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d78:	f7f7 fb9a 	bl	800d4b0 <pbuf_copy_partial>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	461a      	mov	r2, r3
 8015d80:	8abb      	ldrh	r3, [r7, #20]
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d002      	beq.n	8015d8c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015d86:	f06f 0301 	mvn.w	r3, #1
 8015d8a:	e0c8      	b.n	8015f1e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d90:	2b04      	cmp	r3, #4
 8015d92:	d933      	bls.n	8015dfc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015d94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d98:	f003 0303 	and.w	r3, r3, #3
 8015d9c:	b2db      	uxtb	r3, r3
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d009      	beq.n	8015db6 <dhcp_parse_reply+0x412>
 8015da2:	4b61      	ldr	r3, [pc, #388]	; (8015f28 <dhcp_parse_reply+0x584>)
 8015da4:	f240 6281 	movw	r2, #1665	; 0x681
 8015da8:	4964      	ldr	r1, [pc, #400]	; (8015f3c <dhcp_parse_reply+0x598>)
 8015daa:	4861      	ldr	r0, [pc, #388]	; (8015f30 <dhcp_parse_reply+0x58c>)
 8015dac:	f003 f982 	bl	80190b4 <iprintf>
 8015db0:	f06f 0305 	mvn.w	r3, #5
 8015db4:	e0b3      	b.n	8015f1e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015db6:	4a60      	ldr	r2, [pc, #384]	; (8015f38 <dhcp_parse_reply+0x594>)
 8015db8:	6a3b      	ldr	r3, [r7, #32]
 8015dba:	4413      	add	r3, r2
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7f5 fd4f 	bl	800b866 <lwip_htonl>
 8015dc8:	4602      	mov	r2, r0
 8015dca:	495d      	ldr	r1, [pc, #372]	; (8015f40 <dhcp_parse_reply+0x59c>)
 8015dcc:	6a3b      	ldr	r3, [r7, #32]
 8015dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015dd6:	3b04      	subs	r3, #4
 8015dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015ddc:	8bfb      	ldrh	r3, [r7, #30]
 8015dde:	3304      	adds	r3, #4
 8015de0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015de2:	8a7a      	ldrh	r2, [r7, #18]
 8015de4:	8bfb      	ldrh	r3, [r7, #30]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d202      	bcs.n	8015df0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015dea:	f06f 0301 	mvn.w	r3, #1
 8015dee:	e096      	b.n	8015f1e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015df0:	8a7b      	ldrh	r3, [r7, #18]
 8015df2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015df4:	6a3b      	ldr	r3, [r7, #32]
 8015df6:	3301      	adds	r3, #1
 8015df8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015dfa:	e79e      	b.n	8015d3a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e00:	2b04      	cmp	r3, #4
 8015e02:	d106      	bne.n	8015e12 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015e04:	68bb      	ldr	r3, [r7, #8]
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7f5 fd2d 	bl	800b866 <lwip_htonl>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	60bb      	str	r3, [r7, #8]
 8015e10:	e011      	b.n	8015e36 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d009      	beq.n	8015e2e <dhcp_parse_reply+0x48a>
 8015e1a:	4b43      	ldr	r3, [pc, #268]	; (8015f28 <dhcp_parse_reply+0x584>)
 8015e1c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015e20:	4948      	ldr	r1, [pc, #288]	; (8015f44 <dhcp_parse_reply+0x5a0>)
 8015e22:	4843      	ldr	r0, [pc, #268]	; (8015f30 <dhcp_parse_reply+0x58c>)
 8015e24:	f003 f946 	bl	80190b4 <iprintf>
 8015e28:	f06f 0305 	mvn.w	r3, #5
 8015e2c:	e077      	b.n	8015f1e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015e2e:	f107 0308 	add.w	r3, r7, #8
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015e36:	4a40      	ldr	r2, [pc, #256]	; (8015f38 <dhcp_parse_reply+0x594>)
 8015e38:	6a3b      	ldr	r3, [r7, #32]
 8015e3a:	4413      	add	r3, r2
 8015e3c:	2201      	movs	r2, #1
 8015e3e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015e40:	68ba      	ldr	r2, [r7, #8]
 8015e42:	493f      	ldr	r1, [pc, #252]	; (8015f40 <dhcp_parse_reply+0x59c>)
 8015e44:	6a3b      	ldr	r3, [r7, #32]
 8015e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4c:	895b      	ldrh	r3, [r3, #10]
 8015e4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d324      	bcc.n	8015e9e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e56:	895b      	ldrh	r3, [r3, #10]
 8015e58:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e60:	895b      	ldrh	r3, [r3, #10]
 8015e62:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015e64:	1ad3      	subs	r3, r2, r3
 8015e66:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015e68:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d213      	bcs.n	8015e98 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d109      	bne.n	8015e90 <dhcp_parse_reply+0x4ec>
 8015e7c:	4b2a      	ldr	r3, [pc, #168]	; (8015f28 <dhcp_parse_reply+0x584>)
 8015e7e:	f240 629d 	movw	r2, #1693	; 0x69d
 8015e82:	4931      	ldr	r1, [pc, #196]	; (8015f48 <dhcp_parse_reply+0x5a4>)
 8015e84:	482a      	ldr	r0, [pc, #168]	; (8015f30 <dhcp_parse_reply+0x58c>)
 8015e86:	f003 f915 	bl	80190b4 <iprintf>
 8015e8a:	f06f 0305 	mvn.w	r3, #5
 8015e8e:	e046      	b.n	8015f1e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e96:	e002      	b.n	8015e9e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015e98:	f06f 0301 	mvn.w	r3, #1
 8015e9c:	e03f      	b.n	8015f1e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d00a      	beq.n	8015eba <dhcp_parse_reply+0x516>
 8015ea4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ea6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d206      	bcs.n	8015eba <dhcp_parse_reply+0x516>
 8015eac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015eb0:	4413      	add	r3, r2
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2bff      	cmp	r3, #255	; 0xff
 8015eb6:	f47f adb8 	bne.w	8015a2a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015eba:	4b1f      	ldr	r3, [pc, #124]	; (8015f38 <dhcp_parse_reply+0x594>)
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d018      	beq.n	8015ef4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015ec2:	4b1f      	ldr	r3, [pc, #124]	; (8015f40 <dhcp_parse_reply+0x59c>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015ec8:	4b1b      	ldr	r3, [pc, #108]	; (8015f38 <dhcp_parse_reply+0x594>)
 8015eca:	2200      	movs	r2, #0
 8015ecc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d102      	bne.n	8015eda <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ed8:	e00c      	b.n	8015ef4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	2b02      	cmp	r3, #2
 8015ede:	d102      	bne.n	8015ee6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ee4:	e006      	b.n	8015ef4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	2b03      	cmp	r3, #3
 8015eea:	d103      	bne.n	8015ef4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015eec:	2301      	movs	r3, #1
 8015eee:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d006      	beq.n	8015f08 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015efa:	2300      	movs	r3, #0
 8015efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015efe:	236c      	movs	r3, #108	; 0x6c
 8015f00:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015f02:	23ec      	movs	r3, #236	; 0xec
 8015f04:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015f06:	e56a      	b.n	80159de <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d006      	beq.n	8015f1c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015f12:	232c      	movs	r3, #44	; 0x2c
 8015f14:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015f16:	236c      	movs	r3, #108	; 0x6c
 8015f18:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015f1a:	e560      	b.n	80159de <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015f1c:	2300      	movs	r3, #0
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3740      	adds	r7, #64	; 0x40
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	0801d5e4 	.word	0x0801d5e4
 8015f2c:	0801d86c 	.word	0x0801d86c
 8015f30:	0801d644 	.word	0x0801d644
 8015f34:	0801d8b0 	.word	0x0801d8b0
 8015f38:	20010f0c 	.word	0x20010f0c
 8015f3c:	0801d8c4 	.word	0x0801d8c4
 8015f40:	20010eec 	.word	0x20010eec
 8015f44:	0801d8dc 	.word	0x0801d8dc
 8015f48:	0801d8f0 	.word	0x0801d8f0

08015f4c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b08a      	sub	sp, #40	; 0x28
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
 8015f58:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015f5a:	4b60      	ldr	r3, [pc, #384]	; (80160dc <dhcp_recv+0x190>)
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f60:	6a3b      	ldr	r3, [r7, #32]
 8015f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f64:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	685b      	ldr	r3, [r3, #4]
 8015f6a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015f6c:	69fb      	ldr	r3, [r7, #28]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	f000 809d 	beq.w	80160ae <dhcp_recv+0x162>
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	791b      	ldrb	r3, [r3, #4]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f000 8098 	beq.w	80160ae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	895b      	ldrh	r3, [r3, #10]
 8015f82:	2b2b      	cmp	r3, #43	; 0x2b
 8015f84:	f240 8095 	bls.w	80160b2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	f040 8092 	bne.w	80160b6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f92:	2300      	movs	r3, #0
 8015f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f98:	e012      	b.n	8015fc0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f9e:	6a3a      	ldr	r2, [r7, #32]
 8015fa0:	4413      	add	r3, r2
 8015fa2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015faa:	69b9      	ldr	r1, [r7, #24]
 8015fac:	440b      	add	r3, r1
 8015fae:	7f1b      	ldrb	r3, [r3, #28]
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	f040 8082 	bne.w	80160ba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fba:	3301      	adds	r3, #1
 8015fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fc0:	6a3b      	ldr	r3, [r7, #32]
 8015fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015fc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d203      	bcs.n	8015fd6 <dhcp_recv+0x8a>
 8015fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fd2:	2b05      	cmp	r3, #5
 8015fd4:	d9e1      	bls.n	8015f9a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015fd6:	69bb      	ldr	r3, [r7, #24]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7f5 fc43 	bl	800b866 <lwip_htonl>
 8015fe0:	4602      	mov	r2, r0
 8015fe2:	69fb      	ldr	r3, [r7, #28]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d169      	bne.n	80160be <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015fea:	69f9      	ldr	r1, [r7, #28]
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f7ff fcd9 	bl	80159a4 <dhcp_parse_reply>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d164      	bne.n	80160c2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015ff8:	4b39      	ldr	r3, [pc, #228]	; (80160e0 <dhcp_recv+0x194>)
 8015ffa:	785b      	ldrb	r3, [r3, #1]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d062      	beq.n	80160c6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016006:	4b37      	ldr	r3, [pc, #220]	; (80160e4 <dhcp_recv+0x198>)
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801600c:	7cfb      	ldrb	r3, [r7, #19]
 801600e:	2b05      	cmp	r3, #5
 8016010:	d12a      	bne.n	8016068 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016012:	69fb      	ldr	r3, [r7, #28]
 8016014:	795b      	ldrb	r3, [r3, #5]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d112      	bne.n	8016040 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801601a:	6979      	ldr	r1, [r7, #20]
 801601c:	6a38      	ldr	r0, [r7, #32]
 801601e:	f7fe fe17 	bl	8014c50 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016022:	6a3b      	ldr	r3, [r7, #32]
 8016024:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016028:	f003 0308 	and.w	r3, r3, #8
 801602c:	2b00      	cmp	r3, #0
 801602e:	d003      	beq.n	8016038 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016030:	6a38      	ldr	r0, [r7, #32]
 8016032:	f7fe fb87 	bl	8014744 <dhcp_check>
 8016036:	e049      	b.n	80160cc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016038:	6a38      	ldr	r0, [r7, #32]
 801603a:	f7ff f867 	bl	801510c <dhcp_bind>
 801603e:	e045      	b.n	80160cc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016040:	69fb      	ldr	r3, [r7, #28]
 8016042:	795b      	ldrb	r3, [r3, #5]
 8016044:	2b03      	cmp	r3, #3
 8016046:	d007      	beq.n	8016058 <dhcp_recv+0x10c>
 8016048:	69fb      	ldr	r3, [r7, #28]
 801604a:	795b      	ldrb	r3, [r3, #5]
 801604c:	2b04      	cmp	r3, #4
 801604e:	d003      	beq.n	8016058 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016050:	69fb      	ldr	r3, [r7, #28]
 8016052:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016054:	2b05      	cmp	r3, #5
 8016056:	d139      	bne.n	80160cc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016058:	6979      	ldr	r1, [r7, #20]
 801605a:	6a38      	ldr	r0, [r7, #32]
 801605c:	f7fe fdf8 	bl	8014c50 <dhcp_handle_ack>
      dhcp_bind(netif);
 8016060:	6a38      	ldr	r0, [r7, #32]
 8016062:	f7ff f853 	bl	801510c <dhcp_bind>
 8016066:	e031      	b.n	80160cc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016068:	7cfb      	ldrb	r3, [r7, #19]
 801606a:	2b06      	cmp	r3, #6
 801606c:	d113      	bne.n	8016096 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801606e:	69fb      	ldr	r3, [r7, #28]
 8016070:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016072:	2b03      	cmp	r3, #3
 8016074:	d00b      	beq.n	801608e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016076:	69fb      	ldr	r3, [r7, #28]
 8016078:	795b      	ldrb	r3, [r3, #5]
 801607a:	2b01      	cmp	r3, #1
 801607c:	d007      	beq.n	801608e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801607e:	69fb      	ldr	r3, [r7, #28]
 8016080:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016082:	2b04      	cmp	r3, #4
 8016084:	d003      	beq.n	801608e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	795b      	ldrb	r3, [r3, #5]
 801608a:	2b05      	cmp	r3, #5
 801608c:	d103      	bne.n	8016096 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801608e:	6a38      	ldr	r0, [r7, #32]
 8016090:	f7fe fb3e 	bl	8014710 <dhcp_handle_nak>
 8016094:	e01a      	b.n	80160cc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016096:	7cfb      	ldrb	r3, [r7, #19]
 8016098:	2b02      	cmp	r3, #2
 801609a:	d116      	bne.n	80160ca <dhcp_recv+0x17e>
 801609c:	69fb      	ldr	r3, [r7, #28]
 801609e:	795b      	ldrb	r3, [r3, #5]
 80160a0:	2b06      	cmp	r3, #6
 80160a2:	d112      	bne.n	80160ca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80160a4:	6979      	ldr	r1, [r7, #20]
 80160a6:	6a38      	ldr	r0, [r7, #32]
 80160a8:	f7fe fb80 	bl	80147ac <dhcp_handle_offer>
 80160ac:	e00e      	b.n	80160cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160ae:	bf00      	nop
 80160b0:	e00c      	b.n	80160cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160b2:	bf00      	nop
 80160b4:	e00a      	b.n	80160cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160b6:	bf00      	nop
 80160b8:	e008      	b.n	80160cc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80160ba:	bf00      	nop
 80160bc:	e006      	b.n	80160cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160be:	bf00      	nop
 80160c0:	e004      	b.n	80160cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160c2:	bf00      	nop
 80160c4:	e002      	b.n	80160cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160c6:	bf00      	nop
 80160c8:	e000      	b.n	80160cc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80160ca:	bf00      	nop
  pbuf_free(p);
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f7f6 ffe9 	bl	800d0a4 <pbuf_free>
}
 80160d2:	bf00      	nop
 80160d4:	3728      	adds	r7, #40	; 0x28
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop
 80160dc:	2000d718 	.word	0x2000d718
 80160e0:	20010f0c 	.word	0x20010f0c
 80160e4:	20010eec 	.word	0x20010eec

080160e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b088      	sub	sp, #32
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	60f8      	str	r0, [r7, #12]
 80160f0:	60b9      	str	r1, [r7, #8]
 80160f2:	603b      	str	r3, [r7, #0]
 80160f4:	4613      	mov	r3, r2
 80160f6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d108      	bne.n	8016110 <dhcp_create_msg+0x28>
 80160fe:	4b5f      	ldr	r3, [pc, #380]	; (801627c <dhcp_create_msg+0x194>)
 8016100:	f240 7269 	movw	r2, #1897	; 0x769
 8016104:	495e      	ldr	r1, [pc, #376]	; (8016280 <dhcp_create_msg+0x198>)
 8016106:	485f      	ldr	r0, [pc, #380]	; (8016284 <dhcp_create_msg+0x19c>)
 8016108:	f002 ffd4 	bl	80190b4 <iprintf>
 801610c:	2300      	movs	r3, #0
 801610e:	e0b1      	b.n	8016274 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d108      	bne.n	8016128 <dhcp_create_msg+0x40>
 8016116:	4b59      	ldr	r3, [pc, #356]	; (801627c <dhcp_create_msg+0x194>)
 8016118:	f240 726a 	movw	r2, #1898	; 0x76a
 801611c:	495a      	ldr	r1, [pc, #360]	; (8016288 <dhcp_create_msg+0x1a0>)
 801611e:	4859      	ldr	r0, [pc, #356]	; (8016284 <dhcp_create_msg+0x19c>)
 8016120:	f002 ffc8 	bl	80190b4 <iprintf>
 8016124:	2300      	movs	r3, #0
 8016126:	e0a5      	b.n	8016274 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016128:	f44f 7220 	mov.w	r2, #640	; 0x280
 801612c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016130:	2036      	movs	r0, #54	; 0x36
 8016132:	f7f6 fcd3 	bl	800cadc <pbuf_alloc>
 8016136:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016138:	69bb      	ldr	r3, [r7, #24]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d101      	bne.n	8016142 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801613e:	2300      	movs	r3, #0
 8016140:	e098      	b.n	8016274 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	895b      	ldrh	r3, [r3, #10]
 8016146:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801614a:	d206      	bcs.n	801615a <dhcp_create_msg+0x72>
 801614c:	4b4b      	ldr	r3, [pc, #300]	; (801627c <dhcp_create_msg+0x194>)
 801614e:	f240 7271 	movw	r2, #1905	; 0x771
 8016152:	494e      	ldr	r1, [pc, #312]	; (801628c <dhcp_create_msg+0x1a4>)
 8016154:	484b      	ldr	r0, [pc, #300]	; (8016284 <dhcp_create_msg+0x19c>)
 8016156:	f002 ffad 	bl	80190b4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801615a:	79fb      	ldrb	r3, [r7, #7]
 801615c:	2b03      	cmp	r3, #3
 801615e:	d103      	bne.n	8016168 <dhcp_create_msg+0x80>
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	795b      	ldrb	r3, [r3, #5]
 8016164:	2b03      	cmp	r3, #3
 8016166:	d10d      	bne.n	8016184 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	799b      	ldrb	r3, [r3, #6]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d105      	bne.n	801617c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016170:	f002 ffe6 	bl	8019140 <rand>
 8016174:	4603      	mov	r3, r0
 8016176:	461a      	mov	r2, r3
 8016178:	4b45      	ldr	r3, [pc, #276]	; (8016290 <dhcp_create_msg+0x1a8>)
 801617a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801617c:	4b44      	ldr	r3, [pc, #272]	; (8016290 <dhcp_create_msg+0x1a8>)
 801617e:	681a      	ldr	r2, [r3, #0]
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016184:	69bb      	ldr	r3, [r7, #24]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801618a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801618e:	2100      	movs	r1, #0
 8016190:	6978      	ldr	r0, [r7, #20]
 8016192:	f002 fef2 	bl	8018f7a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	2201      	movs	r2, #1
 801619a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	2201      	movs	r2, #1
 80161a0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7f5 fb58 	bl	800b866 <lwip_htonl>
 80161b6:	4602      	mov	r2, r0
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80161bc:	79fb      	ldrb	r3, [r7, #7]
 80161be:	2b08      	cmp	r3, #8
 80161c0:	d010      	beq.n	80161e4 <dhcp_create_msg+0xfc>
 80161c2:	79fb      	ldrb	r3, [r7, #7]
 80161c4:	2b04      	cmp	r3, #4
 80161c6:	d00d      	beq.n	80161e4 <dhcp_create_msg+0xfc>
 80161c8:	79fb      	ldrb	r3, [r7, #7]
 80161ca:	2b07      	cmp	r3, #7
 80161cc:	d00a      	beq.n	80161e4 <dhcp_create_msg+0xfc>
 80161ce:	79fb      	ldrb	r3, [r7, #7]
 80161d0:	2b03      	cmp	r3, #3
 80161d2:	d10c      	bne.n	80161ee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80161d8:	2b05      	cmp	r3, #5
 80161da:	d003      	beq.n	80161e4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	795b      	ldrb	r3, [r3, #5]
 80161e0:	2b04      	cmp	r3, #4
 80161e2:	d104      	bne.n	80161ee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	3304      	adds	r3, #4
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80161ee:	2300      	movs	r3, #0
 80161f0:	83fb      	strh	r3, [r7, #30]
 80161f2:	e00c      	b.n	801620e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80161f4:	8bfa      	ldrh	r2, [r7, #30]
 80161f6:	8bfb      	ldrh	r3, [r7, #30]
 80161f8:	68f9      	ldr	r1, [r7, #12]
 80161fa:	440a      	add	r2, r1
 80161fc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016200:	697a      	ldr	r2, [r7, #20]
 8016202:	4413      	add	r3, r2
 8016204:	460a      	mov	r2, r1
 8016206:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016208:	8bfb      	ldrh	r3, [r7, #30]
 801620a:	3301      	adds	r3, #1
 801620c:	83fb      	strh	r3, [r7, #30]
 801620e:	8bfb      	ldrh	r3, [r7, #30]
 8016210:	2b05      	cmp	r3, #5
 8016212:	d9ef      	bls.n	80161f4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2200      	movs	r2, #0
 8016218:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801621c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016220:	2200      	movs	r2, #0
 8016222:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016226:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801622a:	2200      	movs	r2, #0
 801622c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016230:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016234:	2200      	movs	r2, #0
 8016236:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801623a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801623e:	697b      	ldr	r3, [r7, #20]
 8016240:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016244:	2301      	movs	r3, #1
 8016246:	2235      	movs	r2, #53	; 0x35
 8016248:	2000      	movs	r0, #0
 801624a:	f7ff fadb 	bl	8015804 <dhcp_option>
 801624e:	4603      	mov	r3, r0
 8016250:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016258:	79fa      	ldrb	r2, [r7, #7]
 801625a:	8a7b      	ldrh	r3, [r7, #18]
 801625c:	4618      	mov	r0, r3
 801625e:	f7ff fb05 	bl	801586c <dhcp_option_byte>
 8016262:	4603      	mov	r3, r0
 8016264:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d002      	beq.n	8016272 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	8a7a      	ldrh	r2, [r7, #18]
 8016270:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016272:	69bb      	ldr	r3, [r7, #24]
}
 8016274:	4618      	mov	r0, r3
 8016276:	3720      	adds	r7, #32
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	0801d5e4 	.word	0x0801d5e4
 8016280:	0801d904 	.word	0x0801d904
 8016284:	0801d644 	.word	0x0801d644
 8016288:	0801d924 	.word	0x0801d924
 801628c:	0801d944 	.word	0x0801d944
 8016290:	20010f1c 	.word	0x20010f1c

08016294 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	4603      	mov	r3, r0
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
 80162a0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80162a2:	89fb      	ldrh	r3, [r7, #14]
 80162a4:	1c5a      	adds	r2, r3, #1
 80162a6:	81fa      	strh	r2, [r7, #14]
 80162a8:	461a      	mov	r2, r3
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	4413      	add	r3, r2
 80162ae:	22ff      	movs	r2, #255	; 0xff
 80162b0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80162b2:	e007      	b.n	80162c4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80162b4:	89fb      	ldrh	r3, [r7, #14]
 80162b6:	1c5a      	adds	r2, r3, #1
 80162b8:	81fa      	strh	r2, [r7, #14]
 80162ba:	461a      	mov	r2, r3
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	4413      	add	r3, r2
 80162c0:	2200      	movs	r2, #0
 80162c2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80162c4:	89fb      	ldrh	r3, [r7, #14]
 80162c6:	2b43      	cmp	r3, #67	; 0x43
 80162c8:	d904      	bls.n	80162d4 <dhcp_option_trailer+0x40>
 80162ca:	89fb      	ldrh	r3, [r7, #14]
 80162cc:	f003 0303 	and.w	r3, r3, #3
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d002      	beq.n	80162da <dhcp_option_trailer+0x46>
 80162d4:	89fb      	ldrh	r3, [r7, #14]
 80162d6:	2b43      	cmp	r3, #67	; 0x43
 80162d8:	d9ec      	bls.n	80162b4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80162da:	89fb      	ldrh	r3, [r7, #14]
 80162dc:	33f0      	adds	r3, #240	; 0xf0
 80162de:	b29b      	uxth	r3, r3
 80162e0:	4619      	mov	r1, r3
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7f6 fd58 	bl	800cd98 <pbuf_realloc>
}
 80162e8:	bf00      	nop
 80162ea:	3710      	adds	r7, #16
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80162f0:	b480      	push	{r7}
 80162f2:	b085      	sub	sp, #20
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d017      	beq.n	801632e <dhcp_supplied_address+0x3e>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016302:	2b00      	cmp	r3, #0
 8016304:	d013      	beq.n	801632e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	795b      	ldrb	r3, [r3, #5]
 8016310:	2b0a      	cmp	r3, #10
 8016312:	d007      	beq.n	8016324 <dhcp_supplied_address+0x34>
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	795b      	ldrb	r3, [r3, #5]
 8016318:	2b05      	cmp	r3, #5
 801631a:	d003      	beq.n	8016324 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016320:	2b04      	cmp	r3, #4
 8016322:	d101      	bne.n	8016328 <dhcp_supplied_address+0x38>
 8016324:	2301      	movs	r3, #1
 8016326:	e000      	b.n	801632a <dhcp_supplied_address+0x3a>
 8016328:	2300      	movs	r3, #0
 801632a:	b2db      	uxtb	r3, r3
 801632c:	e000      	b.n	8016330 <dhcp_supplied_address+0x40>
  }
  return 0;
 801632e:	2300      	movs	r3, #0
}
 8016330:	4618      	mov	r0, r3
 8016332:	3714      	adds	r7, #20
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr

0801633c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016344:	4915      	ldr	r1, [pc, #84]	; (801639c <etharp_free_entry+0x60>)
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	4613      	mov	r3, r2
 801634a:	005b      	lsls	r3, r3, #1
 801634c:	4413      	add	r3, r2
 801634e:	00db      	lsls	r3, r3, #3
 8016350:	440b      	add	r3, r1
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d013      	beq.n	8016380 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016358:	4910      	ldr	r1, [pc, #64]	; (801639c <etharp_free_entry+0x60>)
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	4613      	mov	r3, r2
 801635e:	005b      	lsls	r3, r3, #1
 8016360:	4413      	add	r3, r2
 8016362:	00db      	lsls	r3, r3, #3
 8016364:	440b      	add	r3, r1
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	4618      	mov	r0, r3
 801636a:	f7f6 fe9b 	bl	800d0a4 <pbuf_free>
    arp_table[i].q = NULL;
 801636e:	490b      	ldr	r1, [pc, #44]	; (801639c <etharp_free_entry+0x60>)
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	4613      	mov	r3, r2
 8016374:	005b      	lsls	r3, r3, #1
 8016376:	4413      	add	r3, r2
 8016378:	00db      	lsls	r3, r3, #3
 801637a:	440b      	add	r3, r1
 801637c:	2200      	movs	r2, #0
 801637e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016380:	4906      	ldr	r1, [pc, #24]	; (801639c <etharp_free_entry+0x60>)
 8016382:	687a      	ldr	r2, [r7, #4]
 8016384:	4613      	mov	r3, r2
 8016386:	005b      	lsls	r3, r3, #1
 8016388:	4413      	add	r3, r2
 801638a:	00db      	lsls	r3, r3, #3
 801638c:	440b      	add	r3, r1
 801638e:	3314      	adds	r3, #20
 8016390:	2200      	movs	r2, #0
 8016392:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016394:	bf00      	nop
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}
 801639c:	20010f20 	.word	0x20010f20

080163a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163a6:	2300      	movs	r3, #0
 80163a8:	607b      	str	r3, [r7, #4]
 80163aa:	e096      	b.n	80164da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80163ac:	494f      	ldr	r1, [pc, #316]	; (80164ec <etharp_tmr+0x14c>)
 80163ae:	687a      	ldr	r2, [r7, #4]
 80163b0:	4613      	mov	r3, r2
 80163b2:	005b      	lsls	r3, r3, #1
 80163b4:	4413      	add	r3, r2
 80163b6:	00db      	lsls	r3, r3, #3
 80163b8:	440b      	add	r3, r1
 80163ba:	3314      	adds	r3, #20
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80163c0:	78fb      	ldrb	r3, [r7, #3]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	f000 8086 	beq.w	80164d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80163c8:	4948      	ldr	r1, [pc, #288]	; (80164ec <etharp_tmr+0x14c>)
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	3312      	adds	r3, #18
 80163d8:	881b      	ldrh	r3, [r3, #0]
 80163da:	3301      	adds	r3, #1
 80163dc:	b298      	uxth	r0, r3
 80163de:	4943      	ldr	r1, [pc, #268]	; (80164ec <etharp_tmr+0x14c>)
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	4613      	mov	r3, r2
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	4413      	add	r3, r2
 80163e8:	00db      	lsls	r3, r3, #3
 80163ea:	440b      	add	r3, r1
 80163ec:	3312      	adds	r3, #18
 80163ee:	4602      	mov	r2, r0
 80163f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80163f2:	493e      	ldr	r1, [pc, #248]	; (80164ec <etharp_tmr+0x14c>)
 80163f4:	687a      	ldr	r2, [r7, #4]
 80163f6:	4613      	mov	r3, r2
 80163f8:	005b      	lsls	r3, r3, #1
 80163fa:	4413      	add	r3, r2
 80163fc:	00db      	lsls	r3, r3, #3
 80163fe:	440b      	add	r3, r1
 8016400:	3312      	adds	r3, #18
 8016402:	881b      	ldrh	r3, [r3, #0]
 8016404:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016408:	d215      	bcs.n	8016436 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801640a:	4938      	ldr	r1, [pc, #224]	; (80164ec <etharp_tmr+0x14c>)
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	4613      	mov	r3, r2
 8016410:	005b      	lsls	r3, r3, #1
 8016412:	4413      	add	r3, r2
 8016414:	00db      	lsls	r3, r3, #3
 8016416:	440b      	add	r3, r1
 8016418:	3314      	adds	r3, #20
 801641a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801641c:	2b01      	cmp	r3, #1
 801641e:	d10e      	bne.n	801643e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016420:	4932      	ldr	r1, [pc, #200]	; (80164ec <etharp_tmr+0x14c>)
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	4613      	mov	r3, r2
 8016426:	005b      	lsls	r3, r3, #1
 8016428:	4413      	add	r3, r2
 801642a:	00db      	lsls	r3, r3, #3
 801642c:	440b      	add	r3, r1
 801642e:	3312      	adds	r3, #18
 8016430:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016432:	2b04      	cmp	r3, #4
 8016434:	d903      	bls.n	801643e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f7ff ff80 	bl	801633c <etharp_free_entry>
 801643c:	e04a      	b.n	80164d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801643e:	492b      	ldr	r1, [pc, #172]	; (80164ec <etharp_tmr+0x14c>)
 8016440:	687a      	ldr	r2, [r7, #4]
 8016442:	4613      	mov	r3, r2
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	4413      	add	r3, r2
 8016448:	00db      	lsls	r3, r3, #3
 801644a:	440b      	add	r3, r1
 801644c:	3314      	adds	r3, #20
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	2b03      	cmp	r3, #3
 8016452:	d10a      	bne.n	801646a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016454:	4925      	ldr	r1, [pc, #148]	; (80164ec <etharp_tmr+0x14c>)
 8016456:	687a      	ldr	r2, [r7, #4]
 8016458:	4613      	mov	r3, r2
 801645a:	005b      	lsls	r3, r3, #1
 801645c:	4413      	add	r3, r2
 801645e:	00db      	lsls	r3, r3, #3
 8016460:	440b      	add	r3, r1
 8016462:	3314      	adds	r3, #20
 8016464:	2204      	movs	r2, #4
 8016466:	701a      	strb	r2, [r3, #0]
 8016468:	e034      	b.n	80164d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801646a:	4920      	ldr	r1, [pc, #128]	; (80164ec <etharp_tmr+0x14c>)
 801646c:	687a      	ldr	r2, [r7, #4]
 801646e:	4613      	mov	r3, r2
 8016470:	005b      	lsls	r3, r3, #1
 8016472:	4413      	add	r3, r2
 8016474:	00db      	lsls	r3, r3, #3
 8016476:	440b      	add	r3, r1
 8016478:	3314      	adds	r3, #20
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	2b04      	cmp	r3, #4
 801647e:	d10a      	bne.n	8016496 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016480:	491a      	ldr	r1, [pc, #104]	; (80164ec <etharp_tmr+0x14c>)
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	4613      	mov	r3, r2
 8016486:	005b      	lsls	r3, r3, #1
 8016488:	4413      	add	r3, r2
 801648a:	00db      	lsls	r3, r3, #3
 801648c:	440b      	add	r3, r1
 801648e:	3314      	adds	r3, #20
 8016490:	2202      	movs	r2, #2
 8016492:	701a      	strb	r2, [r3, #0]
 8016494:	e01e      	b.n	80164d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016496:	4915      	ldr	r1, [pc, #84]	; (80164ec <etharp_tmr+0x14c>)
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	4613      	mov	r3, r2
 801649c:	005b      	lsls	r3, r3, #1
 801649e:	4413      	add	r3, r2
 80164a0:	00db      	lsls	r3, r3, #3
 80164a2:	440b      	add	r3, r1
 80164a4:	3314      	adds	r3, #20
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d113      	bne.n	80164d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80164ac:	490f      	ldr	r1, [pc, #60]	; (80164ec <etharp_tmr+0x14c>)
 80164ae:	687a      	ldr	r2, [r7, #4]
 80164b0:	4613      	mov	r3, r2
 80164b2:	005b      	lsls	r3, r3, #1
 80164b4:	4413      	add	r3, r2
 80164b6:	00db      	lsls	r3, r3, #3
 80164b8:	440b      	add	r3, r1
 80164ba:	3308      	adds	r3, #8
 80164bc:	6818      	ldr	r0, [r3, #0]
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	4613      	mov	r3, r2
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	4413      	add	r3, r2
 80164c6:	00db      	lsls	r3, r3, #3
 80164c8:	4a08      	ldr	r2, [pc, #32]	; (80164ec <etharp_tmr+0x14c>)
 80164ca:	4413      	add	r3, r2
 80164cc:	3304      	adds	r3, #4
 80164ce:	4619      	mov	r1, r3
 80164d0:	f000 fe72 	bl	80171b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	3301      	adds	r3, #1
 80164d8:	607b      	str	r3, [r7, #4]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	2b09      	cmp	r3, #9
 80164de:	f77f af65 	ble.w	80163ac <etharp_tmr+0xc>
      }
    }
  }
}
 80164e2:	bf00      	nop
 80164e4:	bf00      	nop
 80164e6:	3708      	adds	r7, #8
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	20010f20 	.word	0x20010f20

080164f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b08a      	sub	sp, #40	; 0x28
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	60f8      	str	r0, [r7, #12]
 80164f8:	460b      	mov	r3, r1
 80164fa:	607a      	str	r2, [r7, #4]
 80164fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80164fe:	230a      	movs	r3, #10
 8016500:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016502:	230a      	movs	r3, #10
 8016504:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016506:	230a      	movs	r3, #10
 8016508:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801650a:	2300      	movs	r3, #0
 801650c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801650e:	230a      	movs	r3, #10
 8016510:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016512:	2300      	movs	r3, #0
 8016514:	83bb      	strh	r3, [r7, #28]
 8016516:	2300      	movs	r3, #0
 8016518:	837b      	strh	r3, [r7, #26]
 801651a:	2300      	movs	r3, #0
 801651c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801651e:	2300      	movs	r3, #0
 8016520:	843b      	strh	r3, [r7, #32]
 8016522:	e0ae      	b.n	8016682 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016528:	49a6      	ldr	r1, [pc, #664]	; (80167c4 <etharp_find_entry+0x2d4>)
 801652a:	4613      	mov	r3, r2
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	4413      	add	r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	440b      	add	r3, r1
 8016534:	3314      	adds	r3, #20
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801653a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801653e:	2b0a      	cmp	r3, #10
 8016540:	d105      	bne.n	801654e <etharp_find_entry+0x5e>
 8016542:	7dfb      	ldrb	r3, [r7, #23]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d102      	bne.n	801654e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016548:	8c3b      	ldrh	r3, [r7, #32]
 801654a:	847b      	strh	r3, [r7, #34]	; 0x22
 801654c:	e095      	b.n	801667a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801654e:	7dfb      	ldrb	r3, [r7, #23]
 8016550:	2b00      	cmp	r3, #0
 8016552:	f000 8092 	beq.w	801667a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016556:	7dfb      	ldrb	r3, [r7, #23]
 8016558:	2b01      	cmp	r3, #1
 801655a:	d009      	beq.n	8016570 <etharp_find_entry+0x80>
 801655c:	7dfb      	ldrb	r3, [r7, #23]
 801655e:	2b01      	cmp	r3, #1
 8016560:	d806      	bhi.n	8016570 <etharp_find_entry+0x80>
 8016562:	4b99      	ldr	r3, [pc, #612]	; (80167c8 <etharp_find_entry+0x2d8>)
 8016564:	f240 1223 	movw	r2, #291	; 0x123
 8016568:	4998      	ldr	r1, [pc, #608]	; (80167cc <etharp_find_entry+0x2dc>)
 801656a:	4899      	ldr	r0, [pc, #612]	; (80167d0 <etharp_find_entry+0x2e0>)
 801656c:	f002 fda2 	bl	80190b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d020      	beq.n	80165b8 <etharp_find_entry+0xc8>
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	6819      	ldr	r1, [r3, #0]
 801657a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801657e:	4891      	ldr	r0, [pc, #580]	; (80167c4 <etharp_find_entry+0x2d4>)
 8016580:	4613      	mov	r3, r2
 8016582:	005b      	lsls	r3, r3, #1
 8016584:	4413      	add	r3, r2
 8016586:	00db      	lsls	r3, r3, #3
 8016588:	4403      	add	r3, r0
 801658a:	3304      	adds	r3, #4
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	4299      	cmp	r1, r3
 8016590:	d112      	bne.n	80165b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d00c      	beq.n	80165b2 <etharp_find_entry+0xc2>
 8016598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801659c:	4989      	ldr	r1, [pc, #548]	; (80167c4 <etharp_find_entry+0x2d4>)
 801659e:	4613      	mov	r3, r2
 80165a0:	005b      	lsls	r3, r3, #1
 80165a2:	4413      	add	r3, r2
 80165a4:	00db      	lsls	r3, r3, #3
 80165a6:	440b      	add	r3, r1
 80165a8:	3308      	adds	r3, #8
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d102      	bne.n	80165b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80165b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165b6:	e100      	b.n	80167ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80165b8:	7dfb      	ldrb	r3, [r7, #23]
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d140      	bne.n	8016640 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80165be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165c2:	4980      	ldr	r1, [pc, #512]	; (80167c4 <etharp_find_entry+0x2d4>)
 80165c4:	4613      	mov	r3, r2
 80165c6:	005b      	lsls	r3, r3, #1
 80165c8:	4413      	add	r3, r2
 80165ca:	00db      	lsls	r3, r3, #3
 80165cc:	440b      	add	r3, r1
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d01a      	beq.n	801660a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80165d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165d8:	497a      	ldr	r1, [pc, #488]	; (80167c4 <etharp_find_entry+0x2d4>)
 80165da:	4613      	mov	r3, r2
 80165dc:	005b      	lsls	r3, r3, #1
 80165de:	4413      	add	r3, r2
 80165e0:	00db      	lsls	r3, r3, #3
 80165e2:	440b      	add	r3, r1
 80165e4:	3312      	adds	r3, #18
 80165e6:	881b      	ldrh	r3, [r3, #0]
 80165e8:	8bba      	ldrh	r2, [r7, #28]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d845      	bhi.n	801667a <etharp_find_entry+0x18a>
            old_queue = i;
 80165ee:	8c3b      	ldrh	r3, [r7, #32]
 80165f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80165f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165f6:	4973      	ldr	r1, [pc, #460]	; (80167c4 <etharp_find_entry+0x2d4>)
 80165f8:	4613      	mov	r3, r2
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	3312      	adds	r3, #18
 8016604:	881b      	ldrh	r3, [r3, #0]
 8016606:	83bb      	strh	r3, [r7, #28]
 8016608:	e037      	b.n	801667a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801660a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801660e:	496d      	ldr	r1, [pc, #436]	; (80167c4 <etharp_find_entry+0x2d4>)
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	440b      	add	r3, r1
 801661a:	3312      	adds	r3, #18
 801661c:	881b      	ldrh	r3, [r3, #0]
 801661e:	8b7a      	ldrh	r2, [r7, #26]
 8016620:	429a      	cmp	r2, r3
 8016622:	d82a      	bhi.n	801667a <etharp_find_entry+0x18a>
            old_pending = i;
 8016624:	8c3b      	ldrh	r3, [r7, #32]
 8016626:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016628:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801662c:	4965      	ldr	r1, [pc, #404]	; (80167c4 <etharp_find_entry+0x2d4>)
 801662e:	4613      	mov	r3, r2
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	4413      	add	r3, r2
 8016634:	00db      	lsls	r3, r3, #3
 8016636:	440b      	add	r3, r1
 8016638:	3312      	adds	r3, #18
 801663a:	881b      	ldrh	r3, [r3, #0]
 801663c:	837b      	strh	r3, [r7, #26]
 801663e:	e01c      	b.n	801667a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016640:	7dfb      	ldrb	r3, [r7, #23]
 8016642:	2b01      	cmp	r3, #1
 8016644:	d919      	bls.n	801667a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801664a:	495e      	ldr	r1, [pc, #376]	; (80167c4 <etharp_find_entry+0x2d4>)
 801664c:	4613      	mov	r3, r2
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	4413      	add	r3, r2
 8016652:	00db      	lsls	r3, r3, #3
 8016654:	440b      	add	r3, r1
 8016656:	3312      	adds	r3, #18
 8016658:	881b      	ldrh	r3, [r3, #0]
 801665a:	8b3a      	ldrh	r2, [r7, #24]
 801665c:	429a      	cmp	r2, r3
 801665e:	d80c      	bhi.n	801667a <etharp_find_entry+0x18a>
            old_stable = i;
 8016660:	8c3b      	ldrh	r3, [r7, #32]
 8016662:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016664:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016668:	4956      	ldr	r1, [pc, #344]	; (80167c4 <etharp_find_entry+0x2d4>)
 801666a:	4613      	mov	r3, r2
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	4413      	add	r3, r2
 8016670:	00db      	lsls	r3, r3, #3
 8016672:	440b      	add	r3, r1
 8016674:	3312      	adds	r3, #18
 8016676:	881b      	ldrh	r3, [r3, #0]
 8016678:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801667a:	8c3b      	ldrh	r3, [r7, #32]
 801667c:	3301      	adds	r3, #1
 801667e:	b29b      	uxth	r3, r3
 8016680:	843b      	strh	r3, [r7, #32]
 8016682:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016686:	2b09      	cmp	r3, #9
 8016688:	f77f af4c 	ble.w	8016524 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801668c:	7afb      	ldrb	r3, [r7, #11]
 801668e:	f003 0302 	and.w	r3, r3, #2
 8016692:	2b00      	cmp	r3, #0
 8016694:	d108      	bne.n	80166a8 <etharp_find_entry+0x1b8>
 8016696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801669a:	2b0a      	cmp	r3, #10
 801669c:	d107      	bne.n	80166ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801669e:	7afb      	ldrb	r3, [r7, #11]
 80166a0:	f003 0301 	and.w	r3, r3, #1
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d102      	bne.n	80166ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80166a8:	f04f 33ff 	mov.w	r3, #4294967295
 80166ac:	e085      	b.n	80167ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80166ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80166b2:	2b09      	cmp	r3, #9
 80166b4:	dc02      	bgt.n	80166bc <etharp_find_entry+0x1cc>
    i = empty;
 80166b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166b8:	843b      	strh	r3, [r7, #32]
 80166ba:	e039      	b.n	8016730 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80166bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80166c0:	2b09      	cmp	r3, #9
 80166c2:	dc14      	bgt.n	80166ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80166c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80166c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166cc:	493d      	ldr	r1, [pc, #244]	; (80167c4 <etharp_find_entry+0x2d4>)
 80166ce:	4613      	mov	r3, r2
 80166d0:	005b      	lsls	r3, r3, #1
 80166d2:	4413      	add	r3, r2
 80166d4:	00db      	lsls	r3, r3, #3
 80166d6:	440b      	add	r3, r1
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d018      	beq.n	8016710 <etharp_find_entry+0x220>
 80166de:	4b3a      	ldr	r3, [pc, #232]	; (80167c8 <etharp_find_entry+0x2d8>)
 80166e0:	f240 126d 	movw	r2, #365	; 0x16d
 80166e4:	493b      	ldr	r1, [pc, #236]	; (80167d4 <etharp_find_entry+0x2e4>)
 80166e6:	483a      	ldr	r0, [pc, #232]	; (80167d0 <etharp_find_entry+0x2e0>)
 80166e8:	f002 fce4 	bl	80190b4 <iprintf>
 80166ec:	e010      	b.n	8016710 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80166ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80166f2:	2b09      	cmp	r3, #9
 80166f4:	dc02      	bgt.n	80166fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80166f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166f8:	843b      	strh	r3, [r7, #32]
 80166fa:	e009      	b.n	8016710 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80166fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016700:	2b09      	cmp	r3, #9
 8016702:	dc02      	bgt.n	801670a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016704:	8bfb      	ldrh	r3, [r7, #30]
 8016706:	843b      	strh	r3, [r7, #32]
 8016708:	e002      	b.n	8016710 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801670a:	f04f 33ff 	mov.w	r3, #4294967295
 801670e:	e054      	b.n	80167ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016710:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016714:	2b09      	cmp	r3, #9
 8016716:	dd06      	ble.n	8016726 <etharp_find_entry+0x236>
 8016718:	4b2b      	ldr	r3, [pc, #172]	; (80167c8 <etharp_find_entry+0x2d8>)
 801671a:	f240 127f 	movw	r2, #383	; 0x17f
 801671e:	492e      	ldr	r1, [pc, #184]	; (80167d8 <etharp_find_entry+0x2e8>)
 8016720:	482b      	ldr	r0, [pc, #172]	; (80167d0 <etharp_find_entry+0x2e0>)
 8016722:	f002 fcc7 	bl	80190b4 <iprintf>
    etharp_free_entry(i);
 8016726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801672a:	4618      	mov	r0, r3
 801672c:	f7ff fe06 	bl	801633c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016730:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016734:	2b09      	cmp	r3, #9
 8016736:	dd06      	ble.n	8016746 <etharp_find_entry+0x256>
 8016738:	4b23      	ldr	r3, [pc, #140]	; (80167c8 <etharp_find_entry+0x2d8>)
 801673a:	f240 1283 	movw	r2, #387	; 0x183
 801673e:	4926      	ldr	r1, [pc, #152]	; (80167d8 <etharp_find_entry+0x2e8>)
 8016740:	4823      	ldr	r0, [pc, #140]	; (80167d0 <etharp_find_entry+0x2e0>)
 8016742:	f002 fcb7 	bl	80190b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801674a:	491e      	ldr	r1, [pc, #120]	; (80167c4 <etharp_find_entry+0x2d4>)
 801674c:	4613      	mov	r3, r2
 801674e:	005b      	lsls	r3, r3, #1
 8016750:	4413      	add	r3, r2
 8016752:	00db      	lsls	r3, r3, #3
 8016754:	440b      	add	r3, r1
 8016756:	3314      	adds	r3, #20
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d006      	beq.n	801676c <etharp_find_entry+0x27c>
 801675e:	4b1a      	ldr	r3, [pc, #104]	; (80167c8 <etharp_find_entry+0x2d8>)
 8016760:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016764:	491d      	ldr	r1, [pc, #116]	; (80167dc <etharp_find_entry+0x2ec>)
 8016766:	481a      	ldr	r0, [pc, #104]	; (80167d0 <etharp_find_entry+0x2e0>)
 8016768:	f002 fca4 	bl	80190b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d00b      	beq.n	801678a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	6819      	ldr	r1, [r3, #0]
 801677a:	4812      	ldr	r0, [pc, #72]	; (80167c4 <etharp_find_entry+0x2d4>)
 801677c:	4613      	mov	r3, r2
 801677e:	005b      	lsls	r3, r3, #1
 8016780:	4413      	add	r3, r2
 8016782:	00db      	lsls	r3, r3, #3
 8016784:	4403      	add	r3, r0
 8016786:	3304      	adds	r3, #4
 8016788:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801678a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801678e:	490d      	ldr	r1, [pc, #52]	; (80167c4 <etharp_find_entry+0x2d4>)
 8016790:	4613      	mov	r3, r2
 8016792:	005b      	lsls	r3, r3, #1
 8016794:	4413      	add	r3, r2
 8016796:	00db      	lsls	r3, r3, #3
 8016798:	440b      	add	r3, r1
 801679a:	3312      	adds	r3, #18
 801679c:	2200      	movs	r2, #0
 801679e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80167a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167a4:	4907      	ldr	r1, [pc, #28]	; (80167c4 <etharp_find_entry+0x2d4>)
 80167a6:	4613      	mov	r3, r2
 80167a8:	005b      	lsls	r3, r3, #1
 80167aa:	4413      	add	r3, r2
 80167ac:	00db      	lsls	r3, r3, #3
 80167ae:	440b      	add	r3, r1
 80167b0:	3308      	adds	r3, #8
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80167b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3728      	adds	r7, #40	; 0x28
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	20010f20 	.word	0x20010f20
 80167c8:	0801d984 	.word	0x0801d984
 80167cc:	0801d9bc 	.word	0x0801d9bc
 80167d0:	0801d9fc 	.word	0x0801d9fc
 80167d4:	0801da24 	.word	0x0801da24
 80167d8:	0801da3c 	.word	0x0801da3c
 80167dc:	0801da50 	.word	0x0801da50

080167e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b088      	sub	sp, #32
 80167e4:	af02      	add	r7, sp, #8
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
 80167ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80167f4:	2b06      	cmp	r3, #6
 80167f6:	d006      	beq.n	8016806 <etharp_update_arp_entry+0x26>
 80167f8:	4b48      	ldr	r3, [pc, #288]	; (801691c <etharp_update_arp_entry+0x13c>)
 80167fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80167fe:	4948      	ldr	r1, [pc, #288]	; (8016920 <etharp_update_arp_entry+0x140>)
 8016800:	4848      	ldr	r0, [pc, #288]	; (8016924 <etharp_update_arp_entry+0x144>)
 8016802:	f002 fc57 	bl	80190b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d012      	beq.n	8016832 <etharp_update_arp_entry+0x52>
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d00e      	beq.n	8016832 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	68f9      	ldr	r1, [r7, #12]
 801681a:	4618      	mov	r0, r3
 801681c:	f001 f920 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 8016820:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016822:	2b00      	cmp	r3, #0
 8016824:	d105      	bne.n	8016832 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801682e:	2be0      	cmp	r3, #224	; 0xe0
 8016830:	d102      	bne.n	8016838 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016832:	f06f 030f 	mvn.w	r3, #15
 8016836:	e06c      	b.n	8016912 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016838:	78fb      	ldrb	r3, [r7, #3]
 801683a:	68fa      	ldr	r2, [r7, #12]
 801683c:	4619      	mov	r1, r3
 801683e:	68b8      	ldr	r0, [r7, #8]
 8016840:	f7ff fe56 	bl	80164f0 <etharp_find_entry>
 8016844:	4603      	mov	r3, r0
 8016846:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801684c:	2b00      	cmp	r3, #0
 801684e:	da02      	bge.n	8016856 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016850:	8afb      	ldrh	r3, [r7, #22]
 8016852:	b25b      	sxtb	r3, r3
 8016854:	e05d      	b.n	8016912 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016856:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801685a:	4933      	ldr	r1, [pc, #204]	; (8016928 <etharp_update_arp_entry+0x148>)
 801685c:	4613      	mov	r3, r2
 801685e:	005b      	lsls	r3, r3, #1
 8016860:	4413      	add	r3, r2
 8016862:	00db      	lsls	r3, r3, #3
 8016864:	440b      	add	r3, r1
 8016866:	3314      	adds	r3, #20
 8016868:	2202      	movs	r2, #2
 801686a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801686c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016870:	492d      	ldr	r1, [pc, #180]	; (8016928 <etharp_update_arp_entry+0x148>)
 8016872:	4613      	mov	r3, r2
 8016874:	005b      	lsls	r3, r3, #1
 8016876:	4413      	add	r3, r2
 8016878:	00db      	lsls	r3, r3, #3
 801687a:	440b      	add	r3, r1
 801687c:	3308      	adds	r3, #8
 801687e:	68fa      	ldr	r2, [r7, #12]
 8016880:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016886:	4613      	mov	r3, r2
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	4413      	add	r3, r2
 801688c:	00db      	lsls	r3, r3, #3
 801688e:	3308      	adds	r3, #8
 8016890:	4a25      	ldr	r2, [pc, #148]	; (8016928 <etharp_update_arp_entry+0x148>)
 8016892:	4413      	add	r3, r2
 8016894:	3304      	adds	r3, #4
 8016896:	2206      	movs	r2, #6
 8016898:	6879      	ldr	r1, [r7, #4]
 801689a:	4618      	mov	r0, r3
 801689c:	f002 fb45 	bl	8018f2a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80168a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168a4:	4920      	ldr	r1, [pc, #128]	; (8016928 <etharp_update_arp_entry+0x148>)
 80168a6:	4613      	mov	r3, r2
 80168a8:	005b      	lsls	r3, r3, #1
 80168aa:	4413      	add	r3, r2
 80168ac:	00db      	lsls	r3, r3, #3
 80168ae:	440b      	add	r3, r1
 80168b0:	3312      	adds	r3, #18
 80168b2:	2200      	movs	r2, #0
 80168b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80168b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168ba:	491b      	ldr	r1, [pc, #108]	; (8016928 <etharp_update_arp_entry+0x148>)
 80168bc:	4613      	mov	r3, r2
 80168be:	005b      	lsls	r3, r3, #1
 80168c0:	4413      	add	r3, r2
 80168c2:	00db      	lsls	r3, r3, #3
 80168c4:	440b      	add	r3, r1
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d021      	beq.n	8016910 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80168cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168d0:	4915      	ldr	r1, [pc, #84]	; (8016928 <etharp_update_arp_entry+0x148>)
 80168d2:	4613      	mov	r3, r2
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	4413      	add	r3, r2
 80168d8:	00db      	lsls	r3, r3, #3
 80168da:	440b      	add	r3, r1
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80168e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168e4:	4910      	ldr	r1, [pc, #64]	; (8016928 <etharp_update_arp_entry+0x148>)
 80168e6:	4613      	mov	r3, r2
 80168e8:	005b      	lsls	r3, r3, #1
 80168ea:	4413      	add	r3, r2
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	440b      	add	r3, r1
 80168f0:	2200      	movs	r2, #0
 80168f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80168fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80168fe:	9300      	str	r3, [sp, #0]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6939      	ldr	r1, [r7, #16]
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	f001 ffb9 	bl	801887c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801690a:	6938      	ldr	r0, [r7, #16]
 801690c:	f7f6 fbca 	bl	800d0a4 <pbuf_free>
  }
  return ERR_OK;
 8016910:	2300      	movs	r3, #0
}
 8016912:	4618      	mov	r0, r3
 8016914:	3718      	adds	r7, #24
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
 801691a:	bf00      	nop
 801691c:	0801d984 	.word	0x0801d984
 8016920:	0801da7c 	.word	0x0801da7c
 8016924:	0801d9fc 	.word	0x0801d9fc
 8016928:	20010f20 	.word	0x20010f20

0801692c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016934:	2300      	movs	r3, #0
 8016936:	60fb      	str	r3, [r7, #12]
 8016938:	e01e      	b.n	8016978 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801693a:	4913      	ldr	r1, [pc, #76]	; (8016988 <etharp_cleanup_netif+0x5c>)
 801693c:	68fa      	ldr	r2, [r7, #12]
 801693e:	4613      	mov	r3, r2
 8016940:	005b      	lsls	r3, r3, #1
 8016942:	4413      	add	r3, r2
 8016944:	00db      	lsls	r3, r3, #3
 8016946:	440b      	add	r3, r1
 8016948:	3314      	adds	r3, #20
 801694a:	781b      	ldrb	r3, [r3, #0]
 801694c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801694e:	7afb      	ldrb	r3, [r7, #11]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d00e      	beq.n	8016972 <etharp_cleanup_netif+0x46>
 8016954:	490c      	ldr	r1, [pc, #48]	; (8016988 <etharp_cleanup_netif+0x5c>)
 8016956:	68fa      	ldr	r2, [r7, #12]
 8016958:	4613      	mov	r3, r2
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	4413      	add	r3, r2
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	440b      	add	r3, r1
 8016962:	3308      	adds	r3, #8
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	687a      	ldr	r2, [r7, #4]
 8016968:	429a      	cmp	r2, r3
 801696a:	d102      	bne.n	8016972 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801696c:	68f8      	ldr	r0, [r7, #12]
 801696e:	f7ff fce5 	bl	801633c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	3301      	adds	r3, #1
 8016976:	60fb      	str	r3, [r7, #12]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2b09      	cmp	r3, #9
 801697c:	dddd      	ble.n	801693a <etharp_cleanup_netif+0xe>
    }
  }
}
 801697e:	bf00      	nop
 8016980:	bf00      	nop
 8016982:	3710      	adds	r7, #16
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}
 8016988:	20010f20 	.word	0x20010f20

0801698c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801698c:	b5b0      	push	{r4, r5, r7, lr}
 801698e:	b08a      	sub	sp, #40	; 0x28
 8016990:	af04      	add	r7, sp, #16
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d107      	bne.n	80169ac <etharp_input+0x20>
 801699c:	4b3f      	ldr	r3, [pc, #252]	; (8016a9c <etharp_input+0x110>)
 801699e:	f240 228a 	movw	r2, #650	; 0x28a
 80169a2:	493f      	ldr	r1, [pc, #252]	; (8016aa0 <etharp_input+0x114>)
 80169a4:	483f      	ldr	r0, [pc, #252]	; (8016aa4 <etharp_input+0x118>)
 80169a6:	f002 fb85 	bl	80190b4 <iprintf>
 80169aa:	e074      	b.n	8016a96 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	881b      	ldrh	r3, [r3, #0]
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169bc:	d10c      	bne.n	80169d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169c2:	2b06      	cmp	r3, #6
 80169c4:	d108      	bne.n	80169d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169ca:	2b04      	cmp	r3, #4
 80169cc:	d104      	bne.n	80169d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	885b      	ldrh	r3, [r3, #2]
 80169d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169d4:	2b08      	cmp	r3, #8
 80169d6:	d003      	beq.n	80169e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	f7f6 fb63 	bl	800d0a4 <pbuf_free>
    return;
 80169de:	e05a      	b.n	8016a96 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	330e      	adds	r3, #14
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	3318      	adds	r3, #24
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	3304      	adds	r3, #4
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d102      	bne.n	8016a00 <etharp_input+0x74>
    for_us = 0;
 80169fa:	2300      	movs	r3, #0
 80169fc:	75fb      	strb	r3, [r7, #23]
 80169fe:	e009      	b.n	8016a14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016a00:	68ba      	ldr	r2, [r7, #8]
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	3304      	adds	r3, #4
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	bf0c      	ite	eq
 8016a0c:	2301      	moveq	r3, #1
 8016a0e:	2300      	movne	r3, #0
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	f103 0208 	add.w	r2, r3, #8
 8016a1a:	7dfb      	ldrb	r3, [r7, #23]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d001      	beq.n	8016a24 <etharp_input+0x98>
 8016a20:	2301      	movs	r3, #1
 8016a22:	e000      	b.n	8016a26 <etharp_input+0x9a>
 8016a24:	2302      	movs	r3, #2
 8016a26:	f107 010c 	add.w	r1, r7, #12
 8016a2a:	6838      	ldr	r0, [r7, #0]
 8016a2c:	f7ff fed8 	bl	80167e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	88db      	ldrh	r3, [r3, #6]
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a3a:	d003      	beq.n	8016a44 <etharp_input+0xb8>
 8016a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a40:	d01e      	beq.n	8016a80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016a42:	e025      	b.n	8016a90 <etharp_input+0x104>
      if (for_us) {
 8016a44:	7dfb      	ldrb	r3, [r7, #23]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d021      	beq.n	8016a8e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016a60:	693a      	ldr	r2, [r7, #16]
 8016a62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016a64:	2102      	movs	r1, #2
 8016a66:	9103      	str	r1, [sp, #12]
 8016a68:	f107 010c 	add.w	r1, r7, #12
 8016a6c:	9102      	str	r1, [sp, #8]
 8016a6e:	9201      	str	r2, [sp, #4]
 8016a70:	9300      	str	r3, [sp, #0]
 8016a72:	462b      	mov	r3, r5
 8016a74:	4622      	mov	r2, r4
 8016a76:	4601      	mov	r1, r0
 8016a78:	6838      	ldr	r0, [r7, #0]
 8016a7a:	f000 faef 	bl	801705c <etharp_raw>
      break;
 8016a7e:	e006      	b.n	8016a8e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016a80:	f107 030c 	add.w	r3, r7, #12
 8016a84:	4619      	mov	r1, r3
 8016a86:	6838      	ldr	r0, [r7, #0]
 8016a88:	f7fe f9fc 	bl	8014e84 <dhcp_arp_reply>
      break;
 8016a8c:	e000      	b.n	8016a90 <etharp_input+0x104>
      break;
 8016a8e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f7f6 fb07 	bl	800d0a4 <pbuf_free>
}
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8016a9c:	0801d984 	.word	0x0801d984
 8016aa0:	0801dad4 	.word	0x0801dad4
 8016aa4:	0801d9fc 	.word	0x0801d9fc

08016aa8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b086      	sub	sp, #24
 8016aac:	af02      	add	r7, sp, #8
 8016aae:	60f8      	str	r0, [r7, #12]
 8016ab0:	60b9      	str	r1, [r7, #8]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016ab6:	79fa      	ldrb	r2, [r7, #7]
 8016ab8:	4944      	ldr	r1, [pc, #272]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016aba:	4613      	mov	r3, r2
 8016abc:	005b      	lsls	r3, r3, #1
 8016abe:	4413      	add	r3, r2
 8016ac0:	00db      	lsls	r3, r3, #3
 8016ac2:	440b      	add	r3, r1
 8016ac4:	3314      	adds	r3, #20
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	2b01      	cmp	r3, #1
 8016aca:	d806      	bhi.n	8016ada <etharp_output_to_arp_index+0x32>
 8016acc:	4b40      	ldr	r3, [pc, #256]	; (8016bd0 <etharp_output_to_arp_index+0x128>)
 8016ace:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016ad2:	4940      	ldr	r1, [pc, #256]	; (8016bd4 <etharp_output_to_arp_index+0x12c>)
 8016ad4:	4840      	ldr	r0, [pc, #256]	; (8016bd8 <etharp_output_to_arp_index+0x130>)
 8016ad6:	f002 faed 	bl	80190b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016ada:	79fa      	ldrb	r2, [r7, #7]
 8016adc:	493b      	ldr	r1, [pc, #236]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016ade:	4613      	mov	r3, r2
 8016ae0:	005b      	lsls	r3, r3, #1
 8016ae2:	4413      	add	r3, r2
 8016ae4:	00db      	lsls	r3, r3, #3
 8016ae6:	440b      	add	r3, r1
 8016ae8:	3314      	adds	r3, #20
 8016aea:	781b      	ldrb	r3, [r3, #0]
 8016aec:	2b02      	cmp	r3, #2
 8016aee:	d153      	bne.n	8016b98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016af0:	79fa      	ldrb	r2, [r7, #7]
 8016af2:	4936      	ldr	r1, [pc, #216]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016af4:	4613      	mov	r3, r2
 8016af6:	005b      	lsls	r3, r3, #1
 8016af8:	4413      	add	r3, r2
 8016afa:	00db      	lsls	r3, r3, #3
 8016afc:	440b      	add	r3, r1
 8016afe:	3312      	adds	r3, #18
 8016b00:	881b      	ldrh	r3, [r3, #0]
 8016b02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016b06:	d919      	bls.n	8016b3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016b08:	79fa      	ldrb	r2, [r7, #7]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	005b      	lsls	r3, r3, #1
 8016b0e:	4413      	add	r3, r2
 8016b10:	00db      	lsls	r3, r3, #3
 8016b12:	4a2e      	ldr	r2, [pc, #184]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016b14:	4413      	add	r3, r2
 8016b16:	3304      	adds	r3, #4
 8016b18:	4619      	mov	r1, r3
 8016b1a:	68f8      	ldr	r0, [r7, #12]
 8016b1c:	f000 fb4c 	bl	80171b8 <etharp_request>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d138      	bne.n	8016b98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b26:	79fa      	ldrb	r2, [r7, #7]
 8016b28:	4928      	ldr	r1, [pc, #160]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016b2a:	4613      	mov	r3, r2
 8016b2c:	005b      	lsls	r3, r3, #1
 8016b2e:	4413      	add	r3, r2
 8016b30:	00db      	lsls	r3, r3, #3
 8016b32:	440b      	add	r3, r1
 8016b34:	3314      	adds	r3, #20
 8016b36:	2203      	movs	r2, #3
 8016b38:	701a      	strb	r2, [r3, #0]
 8016b3a:	e02d      	b.n	8016b98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016b3c:	79fa      	ldrb	r2, [r7, #7]
 8016b3e:	4923      	ldr	r1, [pc, #140]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016b40:	4613      	mov	r3, r2
 8016b42:	005b      	lsls	r3, r3, #1
 8016b44:	4413      	add	r3, r2
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	440b      	add	r3, r1
 8016b4a:	3312      	adds	r3, #18
 8016b4c:	881b      	ldrh	r3, [r3, #0]
 8016b4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016b52:	d321      	bcc.n	8016b98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016b54:	79fa      	ldrb	r2, [r7, #7]
 8016b56:	4613      	mov	r3, r2
 8016b58:	005b      	lsls	r3, r3, #1
 8016b5a:	4413      	add	r3, r2
 8016b5c:	00db      	lsls	r3, r3, #3
 8016b5e:	4a1b      	ldr	r2, [pc, #108]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016b60:	4413      	add	r3, r2
 8016b62:	1d19      	adds	r1, r3, #4
 8016b64:	79fa      	ldrb	r2, [r7, #7]
 8016b66:	4613      	mov	r3, r2
 8016b68:	005b      	lsls	r3, r3, #1
 8016b6a:	4413      	add	r3, r2
 8016b6c:	00db      	lsls	r3, r3, #3
 8016b6e:	3308      	adds	r3, #8
 8016b70:	4a16      	ldr	r2, [pc, #88]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016b72:	4413      	add	r3, r2
 8016b74:	3304      	adds	r3, #4
 8016b76:	461a      	mov	r2, r3
 8016b78:	68f8      	ldr	r0, [r7, #12]
 8016b7a:	f000 fafb 	bl	8017174 <etharp_request_dst>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d109      	bne.n	8016b98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b84:	79fa      	ldrb	r2, [r7, #7]
 8016b86:	4911      	ldr	r1, [pc, #68]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016b88:	4613      	mov	r3, r2
 8016b8a:	005b      	lsls	r3, r3, #1
 8016b8c:	4413      	add	r3, r2
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	440b      	add	r3, r1
 8016b92:	3314      	adds	r3, #20
 8016b94:	2203      	movs	r2, #3
 8016b96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016b9e:	79fa      	ldrb	r2, [r7, #7]
 8016ba0:	4613      	mov	r3, r2
 8016ba2:	005b      	lsls	r3, r3, #1
 8016ba4:	4413      	add	r3, r2
 8016ba6:	00db      	lsls	r3, r3, #3
 8016ba8:	3308      	adds	r3, #8
 8016baa:	4a08      	ldr	r2, [pc, #32]	; (8016bcc <etharp_output_to_arp_index+0x124>)
 8016bac:	4413      	add	r3, r2
 8016bae:	3304      	adds	r3, #4
 8016bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bb4:	9200      	str	r2, [sp, #0]
 8016bb6:	460a      	mov	r2, r1
 8016bb8:	68b9      	ldr	r1, [r7, #8]
 8016bba:	68f8      	ldr	r0, [r7, #12]
 8016bbc:	f001 fe5e 	bl	801887c <ethernet_output>
 8016bc0:	4603      	mov	r3, r0
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	20010f20 	.word	0x20010f20
 8016bd0:	0801d984 	.word	0x0801d984
 8016bd4:	0801daf4 	.word	0x0801daf4
 8016bd8:	0801d9fc 	.word	0x0801d9fc

08016bdc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b08a      	sub	sp, #40	; 0x28
 8016be0:	af02      	add	r7, sp, #8
 8016be2:	60f8      	str	r0, [r7, #12]
 8016be4:	60b9      	str	r1, [r7, #8]
 8016be6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d106      	bne.n	8016c00 <etharp_output+0x24>
 8016bf2:	4b73      	ldr	r3, [pc, #460]	; (8016dc0 <etharp_output+0x1e4>)
 8016bf4:	f240 321e 	movw	r2, #798	; 0x31e
 8016bf8:	4972      	ldr	r1, [pc, #456]	; (8016dc4 <etharp_output+0x1e8>)
 8016bfa:	4873      	ldr	r0, [pc, #460]	; (8016dc8 <etharp_output+0x1ec>)
 8016bfc:	f002 fa5a 	bl	80190b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d106      	bne.n	8016c14 <etharp_output+0x38>
 8016c06:	4b6e      	ldr	r3, [pc, #440]	; (8016dc0 <etharp_output+0x1e4>)
 8016c08:	f240 321f 	movw	r2, #799	; 0x31f
 8016c0c:	496f      	ldr	r1, [pc, #444]	; (8016dcc <etharp_output+0x1f0>)
 8016c0e:	486e      	ldr	r0, [pc, #440]	; (8016dc8 <etharp_output+0x1ec>)
 8016c10:	f002 fa50 	bl	80190b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d106      	bne.n	8016c28 <etharp_output+0x4c>
 8016c1a:	4b69      	ldr	r3, [pc, #420]	; (8016dc0 <etharp_output+0x1e4>)
 8016c1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016c20:	496b      	ldr	r1, [pc, #428]	; (8016dd0 <etharp_output+0x1f4>)
 8016c22:	4869      	ldr	r0, [pc, #420]	; (8016dc8 <etharp_output+0x1ec>)
 8016c24:	f002 fa46 	bl	80190b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	68f9      	ldr	r1, [r7, #12]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f000 ff16 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 8016c34:	4603      	mov	r3, r0
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d002      	beq.n	8016c40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016c3a:	4b66      	ldr	r3, [pc, #408]	; (8016dd4 <etharp_output+0x1f8>)
 8016c3c:	61fb      	str	r3, [r7, #28]
 8016c3e:	e0af      	b.n	8016da0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c48:	2be0      	cmp	r3, #224	; 0xe0
 8016c4a:	d118      	bne.n	8016c7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016c50:	2300      	movs	r3, #0
 8016c52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016c54:	235e      	movs	r3, #94	; 0x5e
 8016c56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c62:	b2db      	uxtb	r3, r3
 8016c64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	3302      	adds	r3, #2
 8016c6a:	781b      	ldrb	r3, [r3, #0]
 8016c6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	3303      	adds	r3, #3
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016c76:	f107 0310 	add.w	r3, r7, #16
 8016c7a:	61fb      	str	r3, [r7, #28]
 8016c7c:	e090      	b.n	8016da0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681a      	ldr	r2, [r3, #0]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	3304      	adds	r3, #4
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	405a      	eors	r2, r3
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	3308      	adds	r3, #8
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4013      	ands	r3, r2
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d012      	beq.n	8016cbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	d00b      	beq.n	8016cbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	330c      	adds	r3, #12
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d003      	beq.n	8016cb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	330c      	adds	r3, #12
 8016cb2:	61bb      	str	r3, [r7, #24]
 8016cb4:	e002      	b.n	8016cbc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016cb6:	f06f 0303 	mvn.w	r3, #3
 8016cba:	e07d      	b.n	8016db8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016cbc:	4b46      	ldr	r3, [pc, #280]	; (8016dd8 <etharp_output+0x1fc>)
 8016cbe:	781b      	ldrb	r3, [r3, #0]
 8016cc0:	4619      	mov	r1, r3
 8016cc2:	4a46      	ldr	r2, [pc, #280]	; (8016ddc <etharp_output+0x200>)
 8016cc4:	460b      	mov	r3, r1
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	440b      	add	r3, r1
 8016cca:	00db      	lsls	r3, r3, #3
 8016ccc:	4413      	add	r3, r2
 8016cce:	3314      	adds	r3, #20
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d925      	bls.n	8016d22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cd6:	4b40      	ldr	r3, [pc, #256]	; (8016dd8 <etharp_output+0x1fc>)
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	4619      	mov	r1, r3
 8016cdc:	4a3f      	ldr	r2, [pc, #252]	; (8016ddc <etharp_output+0x200>)
 8016cde:	460b      	mov	r3, r1
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	440b      	add	r3, r1
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	4413      	add	r3, r2
 8016ce8:	3308      	adds	r3, #8
 8016cea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	d117      	bne.n	8016d22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016cf2:	69bb      	ldr	r3, [r7, #24]
 8016cf4:	681a      	ldr	r2, [r3, #0]
 8016cf6:	4b38      	ldr	r3, [pc, #224]	; (8016dd8 <etharp_output+0x1fc>)
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	4937      	ldr	r1, [pc, #220]	; (8016ddc <etharp_output+0x200>)
 8016cfe:	4603      	mov	r3, r0
 8016d00:	005b      	lsls	r3, r3, #1
 8016d02:	4403      	add	r3, r0
 8016d04:	00db      	lsls	r3, r3, #3
 8016d06:	440b      	add	r3, r1
 8016d08:	3304      	adds	r3, #4
 8016d0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d108      	bne.n	8016d22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016d10:	4b31      	ldr	r3, [pc, #196]	; (8016dd8 <etharp_output+0x1fc>)
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	461a      	mov	r2, r3
 8016d16:	68b9      	ldr	r1, [r7, #8]
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	f7ff fec5 	bl	8016aa8 <etharp_output_to_arp_index>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	e04a      	b.n	8016db8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d22:	2300      	movs	r3, #0
 8016d24:	75fb      	strb	r3, [r7, #23]
 8016d26:	e031      	b.n	8016d8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d28:	7dfa      	ldrb	r2, [r7, #23]
 8016d2a:	492c      	ldr	r1, [pc, #176]	; (8016ddc <etharp_output+0x200>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	3314      	adds	r3, #20
 8016d38:	781b      	ldrb	r3, [r3, #0]
 8016d3a:	2b01      	cmp	r3, #1
 8016d3c:	d923      	bls.n	8016d86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016d3e:	7dfa      	ldrb	r2, [r7, #23]
 8016d40:	4926      	ldr	r1, [pc, #152]	; (8016ddc <etharp_output+0x200>)
 8016d42:	4613      	mov	r3, r2
 8016d44:	005b      	lsls	r3, r3, #1
 8016d46:	4413      	add	r3, r2
 8016d48:	00db      	lsls	r3, r3, #3
 8016d4a:	440b      	add	r3, r1
 8016d4c:	3308      	adds	r3, #8
 8016d4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d50:	68fa      	ldr	r2, [r7, #12]
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d117      	bne.n	8016d86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	6819      	ldr	r1, [r3, #0]
 8016d5a:	7dfa      	ldrb	r2, [r7, #23]
 8016d5c:	481f      	ldr	r0, [pc, #124]	; (8016ddc <etharp_output+0x200>)
 8016d5e:	4613      	mov	r3, r2
 8016d60:	005b      	lsls	r3, r3, #1
 8016d62:	4413      	add	r3, r2
 8016d64:	00db      	lsls	r3, r3, #3
 8016d66:	4403      	add	r3, r0
 8016d68:	3304      	adds	r3, #4
 8016d6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016d6c:	4299      	cmp	r1, r3
 8016d6e:	d10a      	bne.n	8016d86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016d70:	4a19      	ldr	r2, [pc, #100]	; (8016dd8 <etharp_output+0x1fc>)
 8016d72:	7dfb      	ldrb	r3, [r7, #23]
 8016d74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016d76:	7dfb      	ldrb	r3, [r7, #23]
 8016d78:	461a      	mov	r2, r3
 8016d7a:	68b9      	ldr	r1, [r7, #8]
 8016d7c:	68f8      	ldr	r0, [r7, #12]
 8016d7e:	f7ff fe93 	bl	8016aa8 <etharp_output_to_arp_index>
 8016d82:	4603      	mov	r3, r0
 8016d84:	e018      	b.n	8016db8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d86:	7dfb      	ldrb	r3, [r7, #23]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	75fb      	strb	r3, [r7, #23]
 8016d8c:	7dfb      	ldrb	r3, [r7, #23]
 8016d8e:	2b09      	cmp	r3, #9
 8016d90:	d9ca      	bls.n	8016d28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016d92:	68ba      	ldr	r2, [r7, #8]
 8016d94:	69b9      	ldr	r1, [r7, #24]
 8016d96:	68f8      	ldr	r0, [r7, #12]
 8016d98:	f000 f822 	bl	8016de0 <etharp_query>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	e00b      	b.n	8016db8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016daa:	9300      	str	r3, [sp, #0]
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	68b9      	ldr	r1, [r7, #8]
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f001 fd63 	bl	801887c <ethernet_output>
 8016db6:	4603      	mov	r3, r0
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	3720      	adds	r7, #32
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	0801d984 	.word	0x0801d984
 8016dc4:	0801dad4 	.word	0x0801dad4
 8016dc8:	0801d9fc 	.word	0x0801d9fc
 8016dcc:	0801db24 	.word	0x0801db24
 8016dd0:	0801dac4 	.word	0x0801dac4
 8016dd4:	080282d0 	.word	0x080282d0
 8016dd8:	20011010 	.word	0x20011010
 8016ddc:	20010f20 	.word	0x20010f20

08016de0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b08c      	sub	sp, #48	; 0x30
 8016de4:	af02      	add	r7, sp, #8
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	332a      	adds	r3, #42	; 0x2a
 8016df0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016df2:	23ff      	movs	r3, #255	; 0xff
 8016df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	68f9      	ldr	r1, [r7, #12]
 8016e02:	4618      	mov	r0, r3
 8016e04:	f000 fe2c 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d10c      	bne.n	8016e28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e16:	2be0      	cmp	r3, #224	; 0xe0
 8016e18:	d006      	beq.n	8016e28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d003      	beq.n	8016e28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d102      	bne.n	8016e2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e28:	f06f 030f 	mvn.w	r3, #15
 8016e2c:	e101      	b.n	8017032 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016e2e:	68fa      	ldr	r2, [r7, #12]
 8016e30:	2101      	movs	r1, #1
 8016e32:	68b8      	ldr	r0, [r7, #8]
 8016e34:	f7ff fb5c 	bl	80164f0 <etharp_find_entry>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016e3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	da02      	bge.n	8016e4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016e44:	8a7b      	ldrh	r3, [r7, #18]
 8016e46:	b25b      	sxtb	r3, r3
 8016e48:	e0f3      	b.n	8017032 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016e4a:	8a7b      	ldrh	r3, [r7, #18]
 8016e4c:	2b7e      	cmp	r3, #126	; 0x7e
 8016e4e:	d906      	bls.n	8016e5e <etharp_query+0x7e>
 8016e50:	4b7a      	ldr	r3, [pc, #488]	; (801703c <etharp_query+0x25c>)
 8016e52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016e56:	497a      	ldr	r1, [pc, #488]	; (8017040 <etharp_query+0x260>)
 8016e58:	487a      	ldr	r0, [pc, #488]	; (8017044 <etharp_query+0x264>)
 8016e5a:	f002 f92b 	bl	80190b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016e5e:	8a7b      	ldrh	r3, [r7, #18]
 8016e60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016e62:	7c7a      	ldrb	r2, [r7, #17]
 8016e64:	4978      	ldr	r1, [pc, #480]	; (8017048 <etharp_query+0x268>)
 8016e66:	4613      	mov	r3, r2
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4413      	add	r3, r2
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	440b      	add	r3, r1
 8016e70:	3314      	adds	r3, #20
 8016e72:	781b      	ldrb	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d115      	bne.n	8016ea4 <etharp_query+0xc4>
    is_new_entry = 1;
 8016e78:	2301      	movs	r3, #1
 8016e7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016e7c:	7c7a      	ldrb	r2, [r7, #17]
 8016e7e:	4972      	ldr	r1, [pc, #456]	; (8017048 <etharp_query+0x268>)
 8016e80:	4613      	mov	r3, r2
 8016e82:	005b      	lsls	r3, r3, #1
 8016e84:	4413      	add	r3, r2
 8016e86:	00db      	lsls	r3, r3, #3
 8016e88:	440b      	add	r3, r1
 8016e8a:	3314      	adds	r3, #20
 8016e8c:	2201      	movs	r2, #1
 8016e8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016e90:	7c7a      	ldrb	r2, [r7, #17]
 8016e92:	496d      	ldr	r1, [pc, #436]	; (8017048 <etharp_query+0x268>)
 8016e94:	4613      	mov	r3, r2
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	4413      	add	r3, r2
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	440b      	add	r3, r1
 8016e9e:	3308      	adds	r3, #8
 8016ea0:	68fa      	ldr	r2, [r7, #12]
 8016ea2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016ea4:	7c7a      	ldrb	r2, [r7, #17]
 8016ea6:	4968      	ldr	r1, [pc, #416]	; (8017048 <etharp_query+0x268>)
 8016ea8:	4613      	mov	r3, r2
 8016eaa:	005b      	lsls	r3, r3, #1
 8016eac:	4413      	add	r3, r2
 8016eae:	00db      	lsls	r3, r3, #3
 8016eb0:	440b      	add	r3, r1
 8016eb2:	3314      	adds	r3, #20
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	2b01      	cmp	r3, #1
 8016eb8:	d011      	beq.n	8016ede <etharp_query+0xfe>
 8016eba:	7c7a      	ldrb	r2, [r7, #17]
 8016ebc:	4962      	ldr	r1, [pc, #392]	; (8017048 <etharp_query+0x268>)
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	005b      	lsls	r3, r3, #1
 8016ec2:	4413      	add	r3, r2
 8016ec4:	00db      	lsls	r3, r3, #3
 8016ec6:	440b      	add	r3, r1
 8016ec8:	3314      	adds	r3, #20
 8016eca:	781b      	ldrb	r3, [r3, #0]
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d806      	bhi.n	8016ede <etharp_query+0xfe>
 8016ed0:	4b5a      	ldr	r3, [pc, #360]	; (801703c <etharp_query+0x25c>)
 8016ed2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016ed6:	495d      	ldr	r1, [pc, #372]	; (801704c <etharp_query+0x26c>)
 8016ed8:	485a      	ldr	r0, [pc, #360]	; (8017044 <etharp_query+0x264>)
 8016eda:	f002 f8eb 	bl	80190b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016ede:	6a3b      	ldr	r3, [r7, #32]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d102      	bne.n	8016eea <etharp_query+0x10a>
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d10c      	bne.n	8016f04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016eea:	68b9      	ldr	r1, [r7, #8]
 8016eec:	68f8      	ldr	r0, [r7, #12]
 8016eee:	f000 f963 	bl	80171b8 <etharp_request>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d102      	bne.n	8016f04 <etharp_query+0x124>
      return result;
 8016efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016f02:	e096      	b.n	8017032 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d106      	bne.n	8016f18 <etharp_query+0x138>
 8016f0a:	4b4c      	ldr	r3, [pc, #304]	; (801703c <etharp_query+0x25c>)
 8016f0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016f10:	494f      	ldr	r1, [pc, #316]	; (8017050 <etharp_query+0x270>)
 8016f12:	484c      	ldr	r0, [pc, #304]	; (8017044 <etharp_query+0x264>)
 8016f14:	f002 f8ce 	bl	80190b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016f18:	7c7a      	ldrb	r2, [r7, #17]
 8016f1a:	494b      	ldr	r1, [pc, #300]	; (8017048 <etharp_query+0x268>)
 8016f1c:	4613      	mov	r3, r2
 8016f1e:	005b      	lsls	r3, r3, #1
 8016f20:	4413      	add	r3, r2
 8016f22:	00db      	lsls	r3, r3, #3
 8016f24:	440b      	add	r3, r1
 8016f26:	3314      	adds	r3, #20
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	2b01      	cmp	r3, #1
 8016f2c:	d917      	bls.n	8016f5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016f2e:	4a49      	ldr	r2, [pc, #292]	; (8017054 <etharp_query+0x274>)
 8016f30:	7c7b      	ldrb	r3, [r7, #17]
 8016f32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016f34:	7c7a      	ldrb	r2, [r7, #17]
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	3308      	adds	r3, #8
 8016f40:	4a41      	ldr	r2, [pc, #260]	; (8017048 <etharp_query+0x268>)
 8016f42:	4413      	add	r3, r2
 8016f44:	3304      	adds	r3, #4
 8016f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f4a:	9200      	str	r2, [sp, #0]
 8016f4c:	697a      	ldr	r2, [r7, #20]
 8016f4e:	6879      	ldr	r1, [r7, #4]
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f001 fc93 	bl	801887c <ethernet_output>
 8016f56:	4603      	mov	r3, r0
 8016f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f5c:	e067      	b.n	801702e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f5e:	7c7a      	ldrb	r2, [r7, #17]
 8016f60:	4939      	ldr	r1, [pc, #228]	; (8017048 <etharp_query+0x268>)
 8016f62:	4613      	mov	r3, r2
 8016f64:	005b      	lsls	r3, r3, #1
 8016f66:	4413      	add	r3, r2
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	440b      	add	r3, r1
 8016f6c:	3314      	adds	r3, #20
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	2b01      	cmp	r3, #1
 8016f72:	d15c      	bne.n	801702e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016f74:	2300      	movs	r3, #0
 8016f76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016f7c:	e01c      	b.n	8016fb8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016f7e:	69fb      	ldr	r3, [r7, #28]
 8016f80:	895a      	ldrh	r2, [r3, #10]
 8016f82:	69fb      	ldr	r3, [r7, #28]
 8016f84:	891b      	ldrh	r3, [r3, #8]
 8016f86:	429a      	cmp	r2, r3
 8016f88:	d10a      	bne.n	8016fa0 <etharp_query+0x1c0>
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d006      	beq.n	8016fa0 <etharp_query+0x1c0>
 8016f92:	4b2a      	ldr	r3, [pc, #168]	; (801703c <etharp_query+0x25c>)
 8016f94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016f98:	492f      	ldr	r1, [pc, #188]	; (8017058 <etharp_query+0x278>)
 8016f9a:	482a      	ldr	r0, [pc, #168]	; (8017044 <etharp_query+0x264>)
 8016f9c:	f002 f88a 	bl	80190b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	7b1b      	ldrb	r3, [r3, #12]
 8016fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d002      	beq.n	8016fb2 <etharp_query+0x1d2>
        copy_needed = 1;
 8016fac:	2301      	movs	r3, #1
 8016fae:	61bb      	str	r3, [r7, #24]
        break;
 8016fb0:	e005      	b.n	8016fbe <etharp_query+0x1de>
      }
      p = p->next;
 8016fb2:	69fb      	ldr	r3, [r7, #28]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d1df      	bne.n	8016f7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016fbe:	69bb      	ldr	r3, [r7, #24]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d007      	beq.n	8016fd4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016fc4:	687a      	ldr	r2, [r7, #4]
 8016fc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016fca:	200e      	movs	r0, #14
 8016fcc:	f7f6 fae2 	bl	800d594 <pbuf_clone>
 8016fd0:	61f8      	str	r0, [r7, #28]
 8016fd2:	e004      	b.n	8016fde <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016fd8:	69f8      	ldr	r0, [r7, #28]
 8016fda:	f7f6 f909 	bl	800d1f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016fde:	69fb      	ldr	r3, [r7, #28]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d021      	beq.n	8017028 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016fe4:	7c7a      	ldrb	r2, [r7, #17]
 8016fe6:	4918      	ldr	r1, [pc, #96]	; (8017048 <etharp_query+0x268>)
 8016fe8:	4613      	mov	r3, r2
 8016fea:	005b      	lsls	r3, r3, #1
 8016fec:	4413      	add	r3, r2
 8016fee:	00db      	lsls	r3, r3, #3
 8016ff0:	440b      	add	r3, r1
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d00a      	beq.n	801700e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016ff8:	7c7a      	ldrb	r2, [r7, #17]
 8016ffa:	4913      	ldr	r1, [pc, #76]	; (8017048 <etharp_query+0x268>)
 8016ffc:	4613      	mov	r3, r2
 8016ffe:	005b      	lsls	r3, r3, #1
 8017000:	4413      	add	r3, r2
 8017002:	00db      	lsls	r3, r3, #3
 8017004:	440b      	add	r3, r1
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	4618      	mov	r0, r3
 801700a:	f7f6 f84b 	bl	800d0a4 <pbuf_free>
      }
      arp_table[i].q = p;
 801700e:	7c7a      	ldrb	r2, [r7, #17]
 8017010:	490d      	ldr	r1, [pc, #52]	; (8017048 <etharp_query+0x268>)
 8017012:	4613      	mov	r3, r2
 8017014:	005b      	lsls	r3, r3, #1
 8017016:	4413      	add	r3, r2
 8017018:	00db      	lsls	r3, r3, #3
 801701a:	440b      	add	r3, r1
 801701c:	69fa      	ldr	r2, [r7, #28]
 801701e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017020:	2300      	movs	r3, #0
 8017022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017026:	e002      	b.n	801702e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017028:	23ff      	movs	r3, #255	; 0xff
 801702a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801702e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017032:	4618      	mov	r0, r3
 8017034:	3728      	adds	r7, #40	; 0x28
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	0801d984 	.word	0x0801d984
 8017040:	0801db30 	.word	0x0801db30
 8017044:	0801d9fc 	.word	0x0801d9fc
 8017048:	20010f20 	.word	0x20010f20
 801704c:	0801db40 	.word	0x0801db40
 8017050:	0801db24 	.word	0x0801db24
 8017054:	20011010 	.word	0x20011010
 8017058:	0801db68 	.word	0x0801db68

0801705c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b08a      	sub	sp, #40	; 0x28
 8017060:	af02      	add	r7, sp, #8
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	60b9      	str	r1, [r7, #8]
 8017066:	607a      	str	r2, [r7, #4]
 8017068:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801706a:	2300      	movs	r3, #0
 801706c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d106      	bne.n	8017082 <etharp_raw+0x26>
 8017074:	4b3a      	ldr	r3, [pc, #232]	; (8017160 <etharp_raw+0x104>)
 8017076:	f240 4257 	movw	r2, #1111	; 0x457
 801707a:	493a      	ldr	r1, [pc, #232]	; (8017164 <etharp_raw+0x108>)
 801707c:	483a      	ldr	r0, [pc, #232]	; (8017168 <etharp_raw+0x10c>)
 801707e:	f002 f819 	bl	80190b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017082:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017086:	211c      	movs	r1, #28
 8017088:	200e      	movs	r0, #14
 801708a:	f7f5 fd27 	bl	800cadc <pbuf_alloc>
 801708e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d102      	bne.n	801709c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017096:	f04f 33ff 	mov.w	r3, #4294967295
 801709a:	e05d      	b.n	8017158 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801709c:	69bb      	ldr	r3, [r7, #24]
 801709e:	895b      	ldrh	r3, [r3, #10]
 80170a0:	2b1b      	cmp	r3, #27
 80170a2:	d806      	bhi.n	80170b2 <etharp_raw+0x56>
 80170a4:	4b2e      	ldr	r3, [pc, #184]	; (8017160 <etharp_raw+0x104>)
 80170a6:	f240 4262 	movw	r2, #1122	; 0x462
 80170aa:	4930      	ldr	r1, [pc, #192]	; (801716c <etharp_raw+0x110>)
 80170ac:	482e      	ldr	r0, [pc, #184]	; (8017168 <etharp_raw+0x10c>)
 80170ae:	f002 f801 	bl	80190b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80170b2:	69bb      	ldr	r3, [r7, #24]
 80170b4:	685b      	ldr	r3, [r3, #4]
 80170b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80170b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7f4 fbbe 	bl	800b83c <lwip_htons>
 80170c0:	4603      	mov	r3, r0
 80170c2:	461a      	mov	r2, r3
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80170ce:	2b06      	cmp	r3, #6
 80170d0:	d006      	beq.n	80170e0 <etharp_raw+0x84>
 80170d2:	4b23      	ldr	r3, [pc, #140]	; (8017160 <etharp_raw+0x104>)
 80170d4:	f240 4269 	movw	r2, #1129	; 0x469
 80170d8:	4925      	ldr	r1, [pc, #148]	; (8017170 <etharp_raw+0x114>)
 80170da:	4823      	ldr	r0, [pc, #140]	; (8017168 <etharp_raw+0x10c>)
 80170dc:	f001 ffea 	bl	80190b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	3308      	adds	r3, #8
 80170e4:	2206      	movs	r2, #6
 80170e6:	6839      	ldr	r1, [r7, #0]
 80170e8:	4618      	mov	r0, r3
 80170ea:	f001 ff1e 	bl	8018f2a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	3312      	adds	r3, #18
 80170f2:	2206      	movs	r2, #6
 80170f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170f6:	4618      	mov	r0, r3
 80170f8:	f001 ff17 	bl	8018f2a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80170fc:	697b      	ldr	r3, [r7, #20]
 80170fe:	330e      	adds	r3, #14
 8017100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017102:	6812      	ldr	r2, [r2, #0]
 8017104:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	3318      	adds	r3, #24
 801710a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801710c:	6812      	ldr	r2, [r2, #0]
 801710e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	2200      	movs	r2, #0
 8017114:	701a      	strb	r2, [r3, #0]
 8017116:	2200      	movs	r2, #0
 8017118:	f042 0201 	orr.w	r2, r2, #1
 801711c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	2200      	movs	r2, #0
 8017122:	f042 0208 	orr.w	r2, r2, #8
 8017126:	709a      	strb	r2, [r3, #2]
 8017128:	2200      	movs	r2, #0
 801712a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	2206      	movs	r2, #6
 8017130:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	2204      	movs	r2, #4
 8017136:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017138:	f640 0306 	movw	r3, #2054	; 0x806
 801713c:	9300      	str	r3, [sp, #0]
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	68ba      	ldr	r2, [r7, #8]
 8017142:	69b9      	ldr	r1, [r7, #24]
 8017144:	68f8      	ldr	r0, [r7, #12]
 8017146:	f001 fb99 	bl	801887c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801714a:	69b8      	ldr	r0, [r7, #24]
 801714c:	f7f5 ffaa 	bl	800d0a4 <pbuf_free>
  p = NULL;
 8017150:	2300      	movs	r3, #0
 8017152:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017154:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017158:	4618      	mov	r0, r3
 801715a:	3720      	adds	r7, #32
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}
 8017160:	0801d984 	.word	0x0801d984
 8017164:	0801dad4 	.word	0x0801dad4
 8017168:	0801d9fc 	.word	0x0801d9fc
 801716c:	0801db84 	.word	0x0801db84
 8017170:	0801dbb8 	.word	0x0801dbb8

08017174 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b088      	sub	sp, #32
 8017178:	af04      	add	r7, sp, #16
 801717a:	60f8      	str	r0, [r7, #12]
 801717c:	60b9      	str	r1, [r7, #8]
 801717e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017190:	2201      	movs	r2, #1
 8017192:	9203      	str	r2, [sp, #12]
 8017194:	68ba      	ldr	r2, [r7, #8]
 8017196:	9202      	str	r2, [sp, #8]
 8017198:	4a06      	ldr	r2, [pc, #24]	; (80171b4 <etharp_request_dst+0x40>)
 801719a:	9201      	str	r2, [sp, #4]
 801719c:	9300      	str	r3, [sp, #0]
 801719e:	4603      	mov	r3, r0
 80171a0:	687a      	ldr	r2, [r7, #4]
 80171a2:	68f8      	ldr	r0, [r7, #12]
 80171a4:	f7ff ff5a 	bl	801705c <etharp_raw>
 80171a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3710      	adds	r7, #16
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	080282d8 	.word	0x080282d8

080171b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80171c2:	4a05      	ldr	r2, [pc, #20]	; (80171d8 <etharp_request+0x20>)
 80171c4:	6839      	ldr	r1, [r7, #0]
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f7ff ffd4 	bl	8017174 <etharp_request_dst>
 80171cc:	4603      	mov	r3, r0
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	3708      	adds	r7, #8
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
 80171d6:	bf00      	nop
 80171d8:	080282d0 	.word	0x080282d0

080171dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b08e      	sub	sp, #56	; 0x38
 80171e0:	af04      	add	r7, sp, #16
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80171e6:	4b79      	ldr	r3, [pc, #484]	; (80173cc <icmp_input+0x1f0>)
 80171e8:	689b      	ldr	r3, [r3, #8]
 80171ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80171ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	f003 030f 	and.w	r3, r3, #15
 80171f4:	b2db      	uxtb	r3, r3
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80171fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171fe:	2b13      	cmp	r3, #19
 8017200:	f240 80cd 	bls.w	801739e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	895b      	ldrh	r3, [r3, #10]
 8017208:	2b03      	cmp	r3, #3
 801720a:	f240 80ca 	bls.w	80173a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	685b      	ldr	r3, [r3, #4]
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017218:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801721c:	2b00      	cmp	r3, #0
 801721e:	f000 80b7 	beq.w	8017390 <icmp_input+0x1b4>
 8017222:	2b08      	cmp	r3, #8
 8017224:	f040 80b7 	bne.w	8017396 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017228:	4b69      	ldr	r3, [pc, #420]	; (80173d0 <icmp_input+0x1f4>)
 801722a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801722c:	4b67      	ldr	r3, [pc, #412]	; (80173cc <icmp_input+0x1f0>)
 801722e:	695b      	ldr	r3, [r3, #20]
 8017230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017234:	2be0      	cmp	r3, #224	; 0xe0
 8017236:	f000 80bb 	beq.w	80173b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801723a:	4b64      	ldr	r3, [pc, #400]	; (80173cc <icmp_input+0x1f0>)
 801723c:	695b      	ldr	r3, [r3, #20]
 801723e:	4a63      	ldr	r2, [pc, #396]	; (80173cc <icmp_input+0x1f0>)
 8017240:	6812      	ldr	r2, [r2, #0]
 8017242:	4611      	mov	r1, r2
 8017244:	4618      	mov	r0, r3
 8017246:	f000 fc0b 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 801724a:	4603      	mov	r3, r0
 801724c:	2b00      	cmp	r3, #0
 801724e:	f040 80b1 	bne.w	80173b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	891b      	ldrh	r3, [r3, #8]
 8017256:	2b07      	cmp	r3, #7
 8017258:	f240 80a5 	bls.w	80173a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801725c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801725e:	330e      	adds	r3, #14
 8017260:	4619      	mov	r1, r3
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7f5 fe88 	bl	800cf78 <pbuf_add_header>
 8017268:	4603      	mov	r3, r0
 801726a:	2b00      	cmp	r3, #0
 801726c:	d04b      	beq.n	8017306 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	891a      	ldrh	r2, [r3, #8]
 8017272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017274:	4413      	add	r3, r2
 8017276:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	891b      	ldrh	r3, [r3, #8]
 801727c:	8b7a      	ldrh	r2, [r7, #26]
 801727e:	429a      	cmp	r2, r3
 8017280:	f0c0 809a 	bcc.w	80173b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017284:	8b7b      	ldrh	r3, [r7, #26]
 8017286:	f44f 7220 	mov.w	r2, #640	; 0x280
 801728a:	4619      	mov	r1, r3
 801728c:	200e      	movs	r0, #14
 801728e:	f7f5 fc25 	bl	800cadc <pbuf_alloc>
 8017292:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017294:	697b      	ldr	r3, [r7, #20]
 8017296:	2b00      	cmp	r3, #0
 8017298:	f000 8090 	beq.w	80173bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	895b      	ldrh	r3, [r3, #10]
 80172a0:	461a      	mov	r2, r3
 80172a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172a4:	3308      	adds	r3, #8
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d203      	bcs.n	80172b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80172aa:	6978      	ldr	r0, [r7, #20]
 80172ac:	f7f5 fefa 	bl	800d0a4 <pbuf_free>
          goto icmperr;
 80172b0:	e085      	b.n	80173be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80172b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172ba:	4618      	mov	r0, r3
 80172bc:	f001 fe35 	bl	8018f2a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80172c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172c2:	4619      	mov	r1, r3
 80172c4:	6978      	ldr	r0, [r7, #20]
 80172c6:	f7f5 fe67 	bl	800cf98 <pbuf_remove_header>
 80172ca:	4603      	mov	r3, r0
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d009      	beq.n	80172e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80172d0:	4b40      	ldr	r3, [pc, #256]	; (80173d4 <icmp_input+0x1f8>)
 80172d2:	22b6      	movs	r2, #182	; 0xb6
 80172d4:	4940      	ldr	r1, [pc, #256]	; (80173d8 <icmp_input+0x1fc>)
 80172d6:	4841      	ldr	r0, [pc, #260]	; (80173dc <icmp_input+0x200>)
 80172d8:	f001 feec 	bl	80190b4 <iprintf>
          pbuf_free(r);
 80172dc:	6978      	ldr	r0, [r7, #20]
 80172de:	f7f5 fee1 	bl	800d0a4 <pbuf_free>
          goto icmperr;
 80172e2:	e06c      	b.n	80173be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80172e4:	6879      	ldr	r1, [r7, #4]
 80172e6:	6978      	ldr	r0, [r7, #20]
 80172e8:	f7f6 f810 	bl	800d30c <pbuf_copy>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d003      	beq.n	80172fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80172f2:	6978      	ldr	r0, [r7, #20]
 80172f4:	f7f5 fed6 	bl	800d0a4 <pbuf_free>
          goto icmperr;
 80172f8:	e061      	b.n	80173be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f7f5 fed2 	bl	800d0a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	607b      	str	r3, [r7, #4]
 8017304:	e00f      	b.n	8017326 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017308:	330e      	adds	r3, #14
 801730a:	4619      	mov	r1, r3
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f7f5 fe43 	bl	800cf98 <pbuf_remove_header>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d006      	beq.n	8017326 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017318:	4b2e      	ldr	r3, [pc, #184]	; (80173d4 <icmp_input+0x1f8>)
 801731a:	22c7      	movs	r2, #199	; 0xc7
 801731c:	4930      	ldr	r1, [pc, #192]	; (80173e0 <icmp_input+0x204>)
 801731e:	482f      	ldr	r0, [pc, #188]	; (80173dc <icmp_input+0x200>)
 8017320:	f001 fec8 	bl	80190b4 <iprintf>
          goto icmperr;
 8017324:	e04b      	b.n	80173be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	685b      	ldr	r3, [r3, #4]
 801732a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801732c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801732e:	4619      	mov	r1, r3
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7f5 fe21 	bl	800cf78 <pbuf_add_header>
 8017336:	4603      	mov	r3, r0
 8017338:	2b00      	cmp	r3, #0
 801733a:	d12b      	bne.n	8017394 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017342:	69fb      	ldr	r3, [r7, #28]
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801734a:	4b20      	ldr	r3, [pc, #128]	; (80173cc <icmp_input+0x1f0>)
 801734c:	691a      	ldr	r2, [r3, #16]
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	2200      	movs	r2, #0
 8017356:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017358:	693b      	ldr	r3, [r7, #16]
 801735a:	2200      	movs	r2, #0
 801735c:	709a      	strb	r2, [r3, #2]
 801735e:	2200      	movs	r2, #0
 8017360:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	22ff      	movs	r2, #255	; 0xff
 8017366:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	2200      	movs	r2, #0
 801736c:	729a      	strb	r2, [r3, #10]
 801736e:	2200      	movs	r2, #0
 8017370:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	9302      	str	r3, [sp, #8]
 8017376:	2301      	movs	r3, #1
 8017378:	9301      	str	r3, [sp, #4]
 801737a:	2300      	movs	r3, #0
 801737c:	9300      	str	r3, [sp, #0]
 801737e:	23ff      	movs	r3, #255	; 0xff
 8017380:	2200      	movs	r2, #0
 8017382:	69f9      	ldr	r1, [r7, #28]
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f000 fa93 	bl	80178b0 <ip4_output_if>
 801738a:	4603      	mov	r3, r0
 801738c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801738e:	e001      	b.n	8017394 <icmp_input+0x1b8>
      break;
 8017390:	bf00      	nop
 8017392:	e000      	b.n	8017396 <icmp_input+0x1ba>
      break;
 8017394:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f7f5 fe84 	bl	800d0a4 <pbuf_free>
  return;
 801739c:	e013      	b.n	80173c6 <icmp_input+0x1ea>
    goto lenerr;
 801739e:	bf00      	nop
 80173a0:	e002      	b.n	80173a8 <icmp_input+0x1cc>
    goto lenerr;
 80173a2:	bf00      	nop
 80173a4:	e000      	b.n	80173a8 <icmp_input+0x1cc>
        goto lenerr;
 80173a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f7f5 fe7b 	bl	800d0a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80173ae:	e00a      	b.n	80173c6 <icmp_input+0x1ea>
        goto icmperr;
 80173b0:	bf00      	nop
 80173b2:	e004      	b.n	80173be <icmp_input+0x1e2>
        goto icmperr;
 80173b4:	bf00      	nop
 80173b6:	e002      	b.n	80173be <icmp_input+0x1e2>
          goto icmperr;
 80173b8:	bf00      	nop
 80173ba:	e000      	b.n	80173be <icmp_input+0x1e2>
          goto icmperr;
 80173bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f7f5 fe70 	bl	800d0a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80173c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80173c6:	3728      	adds	r7, #40	; 0x28
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	2000d718 	.word	0x2000d718
 80173d0:	2000d72c 	.word	0x2000d72c
 80173d4:	0801dbfc 	.word	0x0801dbfc
 80173d8:	0801dc34 	.word	0x0801dc34
 80173dc:	0801dc6c 	.word	0x0801dc6c
 80173e0:	0801dc94 	.word	0x0801dc94

080173e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
 80173ec:	460b      	mov	r3, r1
 80173ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80173f0:	78fb      	ldrb	r3, [r7, #3]
 80173f2:	461a      	mov	r2, r3
 80173f4:	2103      	movs	r1, #3
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 f814 	bl	8017424 <icmp_send_response>
}
 80173fc:	bf00      	nop
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}

08017404 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	460b      	mov	r3, r1
 801740e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017410:	78fb      	ldrb	r3, [r7, #3]
 8017412:	461a      	mov	r2, r3
 8017414:	210b      	movs	r1, #11
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f000 f804 	bl	8017424 <icmp_send_response>
}
 801741c:	bf00      	nop
 801741e:	3708      	adds	r7, #8
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}

08017424 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b08c      	sub	sp, #48	; 0x30
 8017428:	af04      	add	r7, sp, #16
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	460b      	mov	r3, r1
 801742e:	70fb      	strb	r3, [r7, #3]
 8017430:	4613      	mov	r3, r2
 8017432:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017434:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017438:	2124      	movs	r1, #36	; 0x24
 801743a:	2022      	movs	r0, #34	; 0x22
 801743c:	f7f5 fb4e 	bl	800cadc <pbuf_alloc>
 8017440:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017442:	69fb      	ldr	r3, [r7, #28]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d04c      	beq.n	80174e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017448:	69fb      	ldr	r3, [r7, #28]
 801744a:	895b      	ldrh	r3, [r3, #10]
 801744c:	2b23      	cmp	r3, #35	; 0x23
 801744e:	d806      	bhi.n	801745e <icmp_send_response+0x3a>
 8017450:	4b26      	ldr	r3, [pc, #152]	; (80174ec <icmp_send_response+0xc8>)
 8017452:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017456:	4926      	ldr	r1, [pc, #152]	; (80174f0 <icmp_send_response+0xcc>)
 8017458:	4826      	ldr	r0, [pc, #152]	; (80174f4 <icmp_send_response+0xd0>)
 801745a:	f001 fe2b 	bl	80190b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017464:	69fb      	ldr	r3, [r7, #28]
 8017466:	685b      	ldr	r3, [r3, #4]
 8017468:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	78fa      	ldrb	r2, [r7, #3]
 801746e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	78ba      	ldrb	r2, [r7, #2]
 8017474:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	2200      	movs	r2, #0
 801747a:	711a      	strb	r2, [r3, #4]
 801747c:	2200      	movs	r2, #0
 801747e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017480:	697b      	ldr	r3, [r7, #20]
 8017482:	2200      	movs	r2, #0
 8017484:	719a      	strb	r2, [r3, #6]
 8017486:	2200      	movs	r2, #0
 8017488:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	f103 0008 	add.w	r0, r3, #8
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	221c      	movs	r2, #28
 8017498:	4619      	mov	r1, r3
 801749a:	f001 fd46 	bl	8018f2a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801749e:	69bb      	ldr	r3, [r7, #24]
 80174a0:	68db      	ldr	r3, [r3, #12]
 80174a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80174a4:	f107 030c 	add.w	r3, r7, #12
 80174a8:	4618      	mov	r0, r3
 80174aa:	f000 f825 	bl	80174f8 <ip4_route>
 80174ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d011      	beq.n	80174da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	2200      	movs	r2, #0
 80174ba:	709a      	strb	r2, [r3, #2]
 80174bc:	2200      	movs	r2, #0
 80174be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80174c0:	f107 020c 	add.w	r2, r7, #12
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	9302      	str	r3, [sp, #8]
 80174c8:	2301      	movs	r3, #1
 80174ca:	9301      	str	r3, [sp, #4]
 80174cc:	2300      	movs	r3, #0
 80174ce:	9300      	str	r3, [sp, #0]
 80174d0:	23ff      	movs	r3, #255	; 0xff
 80174d2:	2100      	movs	r1, #0
 80174d4:	69f8      	ldr	r0, [r7, #28]
 80174d6:	f000 f9eb 	bl	80178b0 <ip4_output_if>
  }
  pbuf_free(q);
 80174da:	69f8      	ldr	r0, [r7, #28]
 80174dc:	f7f5 fde2 	bl	800d0a4 <pbuf_free>
 80174e0:	e000      	b.n	80174e4 <icmp_send_response+0xc0>
    return;
 80174e2:	bf00      	nop
}
 80174e4:	3720      	adds	r7, #32
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop
 80174ec:	0801dbfc 	.word	0x0801dbfc
 80174f0:	0801dcc8 	.word	0x0801dcc8
 80174f4:	0801dc6c 	.word	0x0801dc6c

080174f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80174f8:	b480      	push	{r7}
 80174fa:	b085      	sub	sp, #20
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017500:	4b33      	ldr	r3, [pc, #204]	; (80175d0 <ip4_route+0xd8>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	60fb      	str	r3, [r7, #12]
 8017506:	e036      	b.n	8017576 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801750e:	f003 0301 	and.w	r3, r3, #1
 8017512:	b2db      	uxtb	r3, r3
 8017514:	2b00      	cmp	r3, #0
 8017516:	d02b      	beq.n	8017570 <ip4_route+0x78>
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801751e:	089b      	lsrs	r3, r3, #2
 8017520:	f003 0301 	and.w	r3, r3, #1
 8017524:	b2db      	uxtb	r3, r3
 8017526:	2b00      	cmp	r3, #0
 8017528:	d022      	beq.n	8017570 <ip4_route+0x78>
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	3304      	adds	r3, #4
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d01d      	beq.n	8017570 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681a      	ldr	r2, [r3, #0]
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	3304      	adds	r3, #4
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	405a      	eors	r2, r3
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	3308      	adds	r3, #8
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	4013      	ands	r3, r2
 8017548:	2b00      	cmp	r3, #0
 801754a:	d101      	bne.n	8017550 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	e038      	b.n	80175c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017556:	f003 0302 	and.w	r3, r3, #2
 801755a:	2b00      	cmp	r3, #0
 801755c:	d108      	bne.n	8017570 <ip4_route+0x78>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681a      	ldr	r2, [r3, #0]
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	330c      	adds	r3, #12
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	429a      	cmp	r2, r3
 801756a:	d101      	bne.n	8017570 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	e028      	b.n	80175c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	60fb      	str	r3, [r7, #12]
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d1c5      	bne.n	8017508 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801757c:	4b15      	ldr	r3, [pc, #84]	; (80175d4 <ip4_route+0xdc>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d01a      	beq.n	80175ba <ip4_route+0xc2>
 8017584:	4b13      	ldr	r3, [pc, #76]	; (80175d4 <ip4_route+0xdc>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801758c:	f003 0301 	and.w	r3, r3, #1
 8017590:	2b00      	cmp	r3, #0
 8017592:	d012      	beq.n	80175ba <ip4_route+0xc2>
 8017594:	4b0f      	ldr	r3, [pc, #60]	; (80175d4 <ip4_route+0xdc>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801759c:	f003 0304 	and.w	r3, r3, #4
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d00a      	beq.n	80175ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80175a4:	4b0b      	ldr	r3, [pc, #44]	; (80175d4 <ip4_route+0xdc>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	3304      	adds	r3, #4
 80175aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d004      	beq.n	80175ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	b2db      	uxtb	r3, r3
 80175b6:	2b7f      	cmp	r3, #127	; 0x7f
 80175b8:	d101      	bne.n	80175be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80175ba:	2300      	movs	r3, #0
 80175bc:	e001      	b.n	80175c2 <ip4_route+0xca>
  }

  return netif_default;
 80175be:	4b05      	ldr	r3, [pc, #20]	; (80175d4 <ip4_route+0xdc>)
 80175c0:	681b      	ldr	r3, [r3, #0]
}
 80175c2:	4618      	mov	r0, r3
 80175c4:	3714      	adds	r7, #20
 80175c6:	46bd      	mov	sp, r7
 80175c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175cc:	4770      	bx	lr
 80175ce:	bf00      	nop
 80175d0:	20010e80 	.word	0x20010e80
 80175d4:	20010e84 	.word	0x20010e84

080175d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80175e6:	f003 0301 	and.w	r3, r3, #1
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d016      	beq.n	801761e <ip4_input_accept+0x46>
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	3304      	adds	r3, #4
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d011      	beq.n	801761e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175fa:	4b0b      	ldr	r3, [pc, #44]	; (8017628 <ip4_input_accept+0x50>)
 80175fc:	695a      	ldr	r2, [r3, #20]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	3304      	adds	r3, #4
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	429a      	cmp	r2, r3
 8017606:	d008      	beq.n	801761a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017608:	4b07      	ldr	r3, [pc, #28]	; (8017628 <ip4_input_accept+0x50>)
 801760a:	695b      	ldr	r3, [r3, #20]
 801760c:	6879      	ldr	r1, [r7, #4]
 801760e:	4618      	mov	r0, r3
 8017610:	f000 fa26 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 8017614:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017616:	2b00      	cmp	r3, #0
 8017618:	d001      	beq.n	801761e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801761a:	2301      	movs	r3, #1
 801761c:	e000      	b.n	8017620 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801761e:	2300      	movs	r3, #0
}
 8017620:	4618      	mov	r0, r3
 8017622:	3708      	adds	r7, #8
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}
 8017628:	2000d718 	.word	0x2000d718

0801762c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b088      	sub	sp, #32
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017636:	2301      	movs	r3, #1
 8017638:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017640:	69fb      	ldr	r3, [r7, #28]
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	091b      	lsrs	r3, r3, #4
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b04      	cmp	r3, #4
 801764a:	d004      	beq.n	8017656 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7f5 fd29 	bl	800d0a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017652:	2300      	movs	r3, #0
 8017654:	e123      	b.n	801789e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017656:	69fb      	ldr	r3, [r7, #28]
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	f003 030f 	and.w	r3, r3, #15
 801765e:	b2db      	uxtb	r3, r3
 8017660:	009b      	lsls	r3, r3, #2
 8017662:	b2db      	uxtb	r3, r3
 8017664:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017666:	69fb      	ldr	r3, [r7, #28]
 8017668:	885b      	ldrh	r3, [r3, #2]
 801766a:	b29b      	uxth	r3, r3
 801766c:	4618      	mov	r0, r3
 801766e:	f7f4 f8e5 	bl	800b83c <lwip_htons>
 8017672:	4603      	mov	r3, r0
 8017674:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	891b      	ldrh	r3, [r3, #8]
 801767a:	8a3a      	ldrh	r2, [r7, #16]
 801767c:	429a      	cmp	r2, r3
 801767e:	d204      	bcs.n	801768a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017680:	8a3b      	ldrh	r3, [r7, #16]
 8017682:	4619      	mov	r1, r3
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f7f5 fb87 	bl	800cd98 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	895b      	ldrh	r3, [r3, #10]
 801768e:	8a7a      	ldrh	r2, [r7, #18]
 8017690:	429a      	cmp	r2, r3
 8017692:	d807      	bhi.n	80176a4 <ip4_input+0x78>
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	891b      	ldrh	r3, [r3, #8]
 8017698:	8a3a      	ldrh	r2, [r7, #16]
 801769a:	429a      	cmp	r2, r3
 801769c:	d802      	bhi.n	80176a4 <ip4_input+0x78>
 801769e:	8a7b      	ldrh	r3, [r7, #18]
 80176a0:	2b13      	cmp	r3, #19
 80176a2:	d804      	bhi.n	80176ae <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f7f5 fcfd 	bl	800d0a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80176aa:	2300      	movs	r3, #0
 80176ac:	e0f7      	b.n	801789e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80176ae:	69fb      	ldr	r3, [r7, #28]
 80176b0:	691b      	ldr	r3, [r3, #16]
 80176b2:	4a7d      	ldr	r2, [pc, #500]	; (80178a8 <ip4_input+0x27c>)
 80176b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80176b6:	69fb      	ldr	r3, [r7, #28]
 80176b8:	68db      	ldr	r3, [r3, #12]
 80176ba:	4a7b      	ldr	r2, [pc, #492]	; (80178a8 <ip4_input+0x27c>)
 80176bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176be:	4b7a      	ldr	r3, [pc, #488]	; (80178a8 <ip4_input+0x27c>)
 80176c0:	695b      	ldr	r3, [r3, #20]
 80176c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80176c6:	2be0      	cmp	r3, #224	; 0xe0
 80176c8:	d112      	bne.n	80176f0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176d0:	f003 0301 	and.w	r3, r3, #1
 80176d4:	b2db      	uxtb	r3, r3
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d007      	beq.n	80176ea <ip4_input+0xbe>
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	3304      	adds	r3, #4
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d002      	beq.n	80176ea <ip4_input+0xbe>
      netif = inp;
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	61bb      	str	r3, [r7, #24]
 80176e8:	e02a      	b.n	8017740 <ip4_input+0x114>
    } else {
      netif = NULL;
 80176ea:	2300      	movs	r3, #0
 80176ec:	61bb      	str	r3, [r7, #24]
 80176ee:	e027      	b.n	8017740 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80176f0:	6838      	ldr	r0, [r7, #0]
 80176f2:	f7ff ff71 	bl	80175d8 <ip4_input_accept>
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d002      	beq.n	8017702 <ip4_input+0xd6>
      netif = inp;
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	61bb      	str	r3, [r7, #24]
 8017700:	e01e      	b.n	8017740 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017702:	2300      	movs	r3, #0
 8017704:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017706:	4b68      	ldr	r3, [pc, #416]	; (80178a8 <ip4_input+0x27c>)
 8017708:	695b      	ldr	r3, [r3, #20]
 801770a:	b2db      	uxtb	r3, r3
 801770c:	2b7f      	cmp	r3, #127	; 0x7f
 801770e:	d017      	beq.n	8017740 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017710:	4b66      	ldr	r3, [pc, #408]	; (80178ac <ip4_input+0x280>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	61bb      	str	r3, [r7, #24]
 8017716:	e00e      	b.n	8017736 <ip4_input+0x10a>
          if (netif == inp) {
 8017718:	69ba      	ldr	r2, [r7, #24]
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	429a      	cmp	r2, r3
 801771e:	d006      	beq.n	801772e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017720:	69b8      	ldr	r0, [r7, #24]
 8017722:	f7ff ff59 	bl	80175d8 <ip4_input_accept>
 8017726:	4603      	mov	r3, r0
 8017728:	2b00      	cmp	r3, #0
 801772a:	d108      	bne.n	801773e <ip4_input+0x112>
 801772c:	e000      	b.n	8017730 <ip4_input+0x104>
            continue;
 801772e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017730:	69bb      	ldr	r3, [r7, #24]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	61bb      	str	r3, [r7, #24]
 8017736:	69bb      	ldr	r3, [r7, #24]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d1ed      	bne.n	8017718 <ip4_input+0xec>
 801773c:	e000      	b.n	8017740 <ip4_input+0x114>
            break;
 801773e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017740:	69bb      	ldr	r3, [r7, #24]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d111      	bne.n	801776a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017746:	69fb      	ldr	r3, [r7, #28]
 8017748:	7a5b      	ldrb	r3, [r3, #9]
 801774a:	2b11      	cmp	r3, #17
 801774c:	d10d      	bne.n	801776a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801774e:	8a7b      	ldrh	r3, [r7, #18]
 8017750:	69fa      	ldr	r2, [r7, #28]
 8017752:	4413      	add	r3, r2
 8017754:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	885b      	ldrh	r3, [r3, #2]
 801775a:	b29b      	uxth	r3, r3
 801775c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017760:	d103      	bne.n	801776a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017766:	2300      	movs	r3, #0
 8017768:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801776a:	697b      	ldr	r3, [r7, #20]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d017      	beq.n	80177a0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017770:	4b4d      	ldr	r3, [pc, #308]	; (80178a8 <ip4_input+0x27c>)
 8017772:	691b      	ldr	r3, [r3, #16]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d013      	beq.n	80177a0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017778:	4b4b      	ldr	r3, [pc, #300]	; (80178a8 <ip4_input+0x27c>)
 801777a:	691b      	ldr	r3, [r3, #16]
 801777c:	6839      	ldr	r1, [r7, #0]
 801777e:	4618      	mov	r0, r3
 8017780:	f000 f96e 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 8017784:	4603      	mov	r3, r0
 8017786:	2b00      	cmp	r3, #0
 8017788:	d105      	bne.n	8017796 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801778a:	4b47      	ldr	r3, [pc, #284]	; (80178a8 <ip4_input+0x27c>)
 801778c:	691b      	ldr	r3, [r3, #16]
 801778e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017792:	2be0      	cmp	r3, #224	; 0xe0
 8017794:	d104      	bne.n	80177a0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f7f5 fc84 	bl	800d0a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801779c:	2300      	movs	r3, #0
 801779e:	e07e      	b.n	801789e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d104      	bne.n	80177b0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f7f5 fc7c 	bl	800d0a4 <pbuf_free>
    return ERR_OK;
 80177ac:	2300      	movs	r3, #0
 80177ae:	e076      	b.n	801789e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80177b0:	69fb      	ldr	r3, [r7, #28]
 80177b2:	88db      	ldrh	r3, [r3, #6]
 80177b4:	b29b      	uxth	r3, r3
 80177b6:	461a      	mov	r2, r3
 80177b8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80177bc:	4013      	ands	r3, r2
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d00b      	beq.n	80177da <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80177c2:	6878      	ldr	r0, [r7, #4]
 80177c4:	f000 fc92 	bl	80180ec <ip4_reass>
 80177c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d101      	bne.n	80177d4 <ip4_input+0x1a8>
      return ERR_OK;
 80177d0:	2300      	movs	r3, #0
 80177d2:	e064      	b.n	801789e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	685b      	ldr	r3, [r3, #4]
 80177d8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80177da:	4a33      	ldr	r2, [pc, #204]	; (80178a8 <ip4_input+0x27c>)
 80177dc:	69bb      	ldr	r3, [r7, #24]
 80177de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80177e0:	4a31      	ldr	r2, [pc, #196]	; (80178a8 <ip4_input+0x27c>)
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80177e6:	4a30      	ldr	r2, [pc, #192]	; (80178a8 <ip4_input+0x27c>)
 80177e8:	69fb      	ldr	r3, [r7, #28]
 80177ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	f003 030f 	and.w	r3, r3, #15
 80177f4:	b2db      	uxtb	r3, r3
 80177f6:	009b      	lsls	r3, r3, #2
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	4b2a      	ldr	r3, [pc, #168]	; (80178a8 <ip4_input+0x27c>)
 80177fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017800:	8a7b      	ldrh	r3, [r7, #18]
 8017802:	4619      	mov	r1, r3
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f7f5 fbc7 	bl	800cf98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801780a:	69fb      	ldr	r3, [r7, #28]
 801780c:	7a5b      	ldrb	r3, [r3, #9]
 801780e:	2b11      	cmp	r3, #17
 8017810:	d006      	beq.n	8017820 <ip4_input+0x1f4>
 8017812:	2b11      	cmp	r3, #17
 8017814:	dc13      	bgt.n	801783e <ip4_input+0x212>
 8017816:	2b01      	cmp	r3, #1
 8017818:	d00c      	beq.n	8017834 <ip4_input+0x208>
 801781a:	2b06      	cmp	r3, #6
 801781c:	d005      	beq.n	801782a <ip4_input+0x1fe>
 801781e:	e00e      	b.n	801783e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017820:	6839      	ldr	r1, [r7, #0]
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f7fc fade 	bl	8013de4 <udp_input>
        break;
 8017828:	e026      	b.n	8017878 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801782a:	6839      	ldr	r1, [r7, #0]
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f7f7 fe97 	bl	800f560 <tcp_input>
        break;
 8017832:	e021      	b.n	8017878 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017834:	6839      	ldr	r1, [r7, #0]
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f7ff fcd0 	bl	80171dc <icmp_input>
        break;
 801783c:	e01c      	b.n	8017878 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801783e:	4b1a      	ldr	r3, [pc, #104]	; (80178a8 <ip4_input+0x27c>)
 8017840:	695b      	ldr	r3, [r3, #20]
 8017842:	69b9      	ldr	r1, [r7, #24]
 8017844:	4618      	mov	r0, r3
 8017846:	f000 f90b 	bl	8017a60 <ip4_addr_isbroadcast_u32>
 801784a:	4603      	mov	r3, r0
 801784c:	2b00      	cmp	r3, #0
 801784e:	d10f      	bne.n	8017870 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017850:	4b15      	ldr	r3, [pc, #84]	; (80178a8 <ip4_input+0x27c>)
 8017852:	695b      	ldr	r3, [r3, #20]
 8017854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017858:	2be0      	cmp	r3, #224	; 0xe0
 801785a:	d009      	beq.n	8017870 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801785c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017860:	4619      	mov	r1, r3
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f7f5 fc0b 	bl	800d07e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017868:	2102      	movs	r1, #2
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7ff fdba 	bl	80173e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f7f5 fc17 	bl	800d0a4 <pbuf_free>
        break;
 8017876:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017878:	4b0b      	ldr	r3, [pc, #44]	; (80178a8 <ip4_input+0x27c>)
 801787a:	2200      	movs	r2, #0
 801787c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801787e:	4b0a      	ldr	r3, [pc, #40]	; (80178a8 <ip4_input+0x27c>)
 8017880:	2200      	movs	r2, #0
 8017882:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017884:	4b08      	ldr	r3, [pc, #32]	; (80178a8 <ip4_input+0x27c>)
 8017886:	2200      	movs	r2, #0
 8017888:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801788a:	4b07      	ldr	r3, [pc, #28]	; (80178a8 <ip4_input+0x27c>)
 801788c:	2200      	movs	r2, #0
 801788e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017890:	4b05      	ldr	r3, [pc, #20]	; (80178a8 <ip4_input+0x27c>)
 8017892:	2200      	movs	r2, #0
 8017894:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017896:	4b04      	ldr	r3, [pc, #16]	; (80178a8 <ip4_input+0x27c>)
 8017898:	2200      	movs	r2, #0
 801789a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801789c:	2300      	movs	r3, #0
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3720      	adds	r7, #32
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	2000d718 	.word	0x2000d718
 80178ac:	20010e80 	.word	0x20010e80

080178b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b08a      	sub	sp, #40	; 0x28
 80178b4:	af04      	add	r7, sp, #16
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	607a      	str	r2, [r7, #4]
 80178bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d009      	beq.n	80178dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d003      	beq.n	80178d6 <ip4_output_if+0x26>
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d102      	bne.n	80178dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80178d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d8:	3304      	adds	r3, #4
 80178da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80178dc:	78fa      	ldrb	r2, [r7, #3]
 80178de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e0:	9302      	str	r3, [sp, #8]
 80178e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80178e6:	9301      	str	r3, [sp, #4]
 80178e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80178ec:	9300      	str	r3, [sp, #0]
 80178ee:	4613      	mov	r3, r2
 80178f0:	687a      	ldr	r2, [r7, #4]
 80178f2:	6979      	ldr	r1, [r7, #20]
 80178f4:	68f8      	ldr	r0, [r7, #12]
 80178f6:	f000 f805 	bl	8017904 <ip4_output_if_src>
 80178fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80178fc:	4618      	mov	r0, r3
 80178fe:	3718      	adds	r7, #24
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b088      	sub	sp, #32
 8017908:	af00      	add	r7, sp, #0
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
 8017910:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	7b9b      	ldrb	r3, [r3, #14]
 8017916:	2b01      	cmp	r3, #1
 8017918:	d006      	beq.n	8017928 <ip4_output_if_src+0x24>
 801791a:	4b4b      	ldr	r3, [pc, #300]	; (8017a48 <ip4_output_if_src+0x144>)
 801791c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017920:	494a      	ldr	r1, [pc, #296]	; (8017a4c <ip4_output_if_src+0x148>)
 8017922:	484b      	ldr	r0, [pc, #300]	; (8017a50 <ip4_output_if_src+0x14c>)
 8017924:	f001 fbc6 	bl	80190b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d060      	beq.n	80179f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801792e:	2314      	movs	r3, #20
 8017930:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017932:	2114      	movs	r1, #20
 8017934:	68f8      	ldr	r0, [r7, #12]
 8017936:	f7f5 fb1f 	bl	800cf78 <pbuf_add_header>
 801793a:	4603      	mov	r3, r0
 801793c:	2b00      	cmp	r3, #0
 801793e:	d002      	beq.n	8017946 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017940:	f06f 0301 	mvn.w	r3, #1
 8017944:	e07c      	b.n	8017a40 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	685b      	ldr	r3, [r3, #4]
 801794a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	895b      	ldrh	r3, [r3, #10]
 8017950:	2b13      	cmp	r3, #19
 8017952:	d806      	bhi.n	8017962 <ip4_output_if_src+0x5e>
 8017954:	4b3c      	ldr	r3, [pc, #240]	; (8017a48 <ip4_output_if_src+0x144>)
 8017956:	f44f 7262 	mov.w	r2, #904	; 0x388
 801795a:	493e      	ldr	r1, [pc, #248]	; (8017a54 <ip4_output_if_src+0x150>)
 801795c:	483c      	ldr	r0, [pc, #240]	; (8017a50 <ip4_output_if_src+0x14c>)
 801795e:	f001 fba9 	bl	80190b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017962:	69fb      	ldr	r3, [r7, #28]
 8017964:	78fa      	ldrb	r2, [r7, #3]
 8017966:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017968:	69fb      	ldr	r3, [r7, #28]
 801796a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801796e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681a      	ldr	r2, [r3, #0]
 8017974:	69fb      	ldr	r3, [r7, #28]
 8017976:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017978:	8b7b      	ldrh	r3, [r7, #26]
 801797a:	089b      	lsrs	r3, r3, #2
 801797c:	b29b      	uxth	r3, r3
 801797e:	b2db      	uxtb	r3, r3
 8017980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017984:	b2da      	uxtb	r2, r3
 8017986:	69fb      	ldr	r3, [r7, #28]
 8017988:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801798a:	69fb      	ldr	r3, [r7, #28]
 801798c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017990:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	891b      	ldrh	r3, [r3, #8]
 8017996:	4618      	mov	r0, r3
 8017998:	f7f3 ff50 	bl	800b83c <lwip_htons>
 801799c:	4603      	mov	r3, r0
 801799e:	461a      	mov	r2, r3
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	2200      	movs	r2, #0
 80179a8:	719a      	strb	r2, [r3, #6]
 80179aa:	2200      	movs	r2, #0
 80179ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80179ae:	4b2a      	ldr	r3, [pc, #168]	; (8017a58 <ip4_output_if_src+0x154>)
 80179b0:	881b      	ldrh	r3, [r3, #0]
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7f3 ff42 	bl	800b83c <lwip_htons>
 80179b8:	4603      	mov	r3, r0
 80179ba:	461a      	mov	r2, r3
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80179c0:	4b25      	ldr	r3, [pc, #148]	; (8017a58 <ip4_output_if_src+0x154>)
 80179c2:	881b      	ldrh	r3, [r3, #0]
 80179c4:	3301      	adds	r3, #1
 80179c6:	b29a      	uxth	r2, r3
 80179c8:	4b23      	ldr	r3, [pc, #140]	; (8017a58 <ip4_output_if_src+0x154>)
 80179ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d104      	bne.n	80179dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80179d2:	4b22      	ldr	r3, [pc, #136]	; (8017a5c <ip4_output_if_src+0x158>)
 80179d4:	681a      	ldr	r2, [r3, #0]
 80179d6:	69fb      	ldr	r3, [r7, #28]
 80179d8:	60da      	str	r2, [r3, #12]
 80179da:	e003      	b.n	80179e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	681a      	ldr	r2, [r3, #0]
 80179e0:	69fb      	ldr	r3, [r7, #28]
 80179e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80179e4:	69fb      	ldr	r3, [r7, #28]
 80179e6:	2200      	movs	r2, #0
 80179e8:	729a      	strb	r2, [r3, #10]
 80179ea:	2200      	movs	r2, #0
 80179ec:	72da      	strb	r2, [r3, #11]
 80179ee:	e00f      	b.n	8017a10 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	895b      	ldrh	r3, [r3, #10]
 80179f4:	2b13      	cmp	r3, #19
 80179f6:	d802      	bhi.n	80179fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179f8:	f06f 0301 	mvn.w	r3, #1
 80179fc:	e020      	b.n	8017a40 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	691b      	ldr	r3, [r3, #16]
 8017a08:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017a0a:	f107 0314 	add.w	r3, r7, #20
 8017a0e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d00c      	beq.n	8017a32 <ip4_output_if_src+0x12e>
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	891a      	ldrh	r2, [r3, #8]
 8017a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a20:	429a      	cmp	r2, r3
 8017a22:	d906      	bls.n	8017a32 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017a24:	687a      	ldr	r2, [r7, #4]
 8017a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017a28:	68f8      	ldr	r0, [r7, #12]
 8017a2a:	f000 fd53 	bl	80184d4 <ip4_frag>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	e006      	b.n	8017a40 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a34:	695b      	ldr	r3, [r3, #20]
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	68f9      	ldr	r1, [r7, #12]
 8017a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a3c:	4798      	blx	r3
 8017a3e:	4603      	mov	r3, r0
}
 8017a40:	4618      	mov	r0, r3
 8017a42:	3720      	adds	r7, #32
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}
 8017a48:	0801dcf4 	.word	0x0801dcf4
 8017a4c:	0801dd28 	.word	0x0801dd28
 8017a50:	0801dd34 	.word	0x0801dd34
 8017a54:	0801dd5c 	.word	0x0801dd5c
 8017a58:	20011012 	.word	0x20011012
 8017a5c:	080282c8 	.word	0x080282c8

08017a60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017a60:	b480      	push	{r7}
 8017a62:	b085      	sub	sp, #20
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a74:	d002      	beq.n	8017a7c <ip4_addr_isbroadcast_u32+0x1c>
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d101      	bne.n	8017a80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	e02a      	b.n	8017ad6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a86:	f003 0302 	and.w	r3, r3, #2
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d101      	bne.n	8017a92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e021      	b.n	8017ad6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	3304      	adds	r3, #4
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d101      	bne.n	8017aa2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	e019      	b.n	8017ad6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017aa2:	68fa      	ldr	r2, [r7, #12]
 8017aa4:	683b      	ldr	r3, [r7, #0]
 8017aa6:	3304      	adds	r3, #4
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	405a      	eors	r2, r3
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	3308      	adds	r3, #8
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	4013      	ands	r3, r2
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d10d      	bne.n	8017ad4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017ab8:	683b      	ldr	r3, [r7, #0]
 8017aba:	3308      	adds	r3, #8
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	43da      	mvns	r2, r3
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	3308      	adds	r3, #8
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d101      	bne.n	8017ad4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	e000      	b.n	8017ad6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ad4:	2300      	movs	r3, #0
  }
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	3714      	adds	r7, #20
 8017ada:	46bd      	mov	sp, r7
 8017adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae0:	4770      	bx	lr
	...

08017ae4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b084      	sub	sp, #16
 8017ae8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017aea:	2300      	movs	r3, #0
 8017aec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017aee:	4b12      	ldr	r3, [pc, #72]	; (8017b38 <ip_reass_tmr+0x54>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017af4:	e018      	b.n	8017b28 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	7fdb      	ldrb	r3, [r3, #31]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d00b      	beq.n	8017b16 <ip_reass_tmr+0x32>
      r->timer--;
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	7fdb      	ldrb	r3, [r3, #31]
 8017b02:	3b01      	subs	r3, #1
 8017b04:	b2da      	uxtb	r2, r3
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	e008      	b.n	8017b28 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017b20:	68b9      	ldr	r1, [r7, #8]
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f000 f80a 	bl	8017b3c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d1e3      	bne.n	8017af6 <ip_reass_tmr+0x12>
    }
  }
}
 8017b2e:	bf00      	nop
 8017b30:	bf00      	nop
 8017b32:	3710      	adds	r7, #16
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}
 8017b38:	20011014 	.word	0x20011014

08017b3c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b088      	sub	sp, #32
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017b4a:	683a      	ldr	r2, [r7, #0]
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d105      	bne.n	8017b5e <ip_reass_free_complete_datagram+0x22>
 8017b52:	4b45      	ldr	r3, [pc, #276]	; (8017c68 <ip_reass_free_complete_datagram+0x12c>)
 8017b54:	22ab      	movs	r2, #171	; 0xab
 8017b56:	4945      	ldr	r1, [pc, #276]	; (8017c6c <ip_reass_free_complete_datagram+0x130>)
 8017b58:	4845      	ldr	r0, [pc, #276]	; (8017c70 <ip_reass_free_complete_datagram+0x134>)
 8017b5a:	f001 faab 	bl	80190b4 <iprintf>
  if (prev != NULL) {
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d00a      	beq.n	8017b7a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	687a      	ldr	r2, [r7, #4]
 8017b6a:	429a      	cmp	r2, r3
 8017b6c:	d005      	beq.n	8017b7a <ip_reass_free_complete_datagram+0x3e>
 8017b6e:	4b3e      	ldr	r3, [pc, #248]	; (8017c68 <ip_reass_free_complete_datagram+0x12c>)
 8017b70:	22ad      	movs	r2, #173	; 0xad
 8017b72:	4940      	ldr	r1, [pc, #256]	; (8017c74 <ip_reass_free_complete_datagram+0x138>)
 8017b74:	483e      	ldr	r0, [pc, #248]	; (8017c70 <ip_reass_free_complete_datagram+0x134>)
 8017b76:	f001 fa9d 	bl	80190b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	889b      	ldrh	r3, [r3, #4]
 8017b86:	b29b      	uxth	r3, r3
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d12a      	bne.n	8017be2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017b92:	697b      	ldr	r3, [r7, #20]
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017b9a:	69bb      	ldr	r3, [r7, #24]
 8017b9c:	6858      	ldr	r0, [r3, #4]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	3308      	adds	r3, #8
 8017ba2:	2214      	movs	r2, #20
 8017ba4:	4619      	mov	r1, r3
 8017ba6:	f001 f9c0 	bl	8018f2a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017baa:	2101      	movs	r1, #1
 8017bac:	69b8      	ldr	r0, [r7, #24]
 8017bae:	f7ff fc29 	bl	8017404 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017bb2:	69b8      	ldr	r0, [r7, #24]
 8017bb4:	f7f5 fb04 	bl	800d1c0 <pbuf_clen>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017bbc:	8bfa      	ldrh	r2, [r7, #30]
 8017bbe:	8a7b      	ldrh	r3, [r7, #18]
 8017bc0:	4413      	add	r3, r2
 8017bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bc6:	db05      	blt.n	8017bd4 <ip_reass_free_complete_datagram+0x98>
 8017bc8:	4b27      	ldr	r3, [pc, #156]	; (8017c68 <ip_reass_free_complete_datagram+0x12c>)
 8017bca:	22bc      	movs	r2, #188	; 0xbc
 8017bcc:	492a      	ldr	r1, [pc, #168]	; (8017c78 <ip_reass_free_complete_datagram+0x13c>)
 8017bce:	4828      	ldr	r0, [pc, #160]	; (8017c70 <ip_reass_free_complete_datagram+0x134>)
 8017bd0:	f001 fa70 	bl	80190b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017bd4:	8bfa      	ldrh	r2, [r7, #30]
 8017bd6:	8a7b      	ldrh	r3, [r7, #18]
 8017bd8:	4413      	add	r3, r2
 8017bda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017bdc:	69b8      	ldr	r0, [r7, #24]
 8017bde:	f7f5 fa61 	bl	800d0a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	685b      	ldr	r3, [r3, #4]
 8017be6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017be8:	e01f      	b.n	8017c2a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017bf0:	69bb      	ldr	r3, [r7, #24]
 8017bf2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017bfa:	68f8      	ldr	r0, [r7, #12]
 8017bfc:	f7f5 fae0 	bl	800d1c0 <pbuf_clen>
 8017c00:	4603      	mov	r3, r0
 8017c02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017c04:	8bfa      	ldrh	r2, [r7, #30]
 8017c06:	8a7b      	ldrh	r3, [r7, #18]
 8017c08:	4413      	add	r3, r2
 8017c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017c0e:	db05      	blt.n	8017c1c <ip_reass_free_complete_datagram+0xe0>
 8017c10:	4b15      	ldr	r3, [pc, #84]	; (8017c68 <ip_reass_free_complete_datagram+0x12c>)
 8017c12:	22cc      	movs	r2, #204	; 0xcc
 8017c14:	4918      	ldr	r1, [pc, #96]	; (8017c78 <ip_reass_free_complete_datagram+0x13c>)
 8017c16:	4816      	ldr	r0, [pc, #88]	; (8017c70 <ip_reass_free_complete_datagram+0x134>)
 8017c18:	f001 fa4c 	bl	80190b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017c1c:	8bfa      	ldrh	r2, [r7, #30]
 8017c1e:	8a7b      	ldrh	r3, [r7, #18]
 8017c20:	4413      	add	r3, r2
 8017c22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f7f5 fa3d 	bl	800d0a4 <pbuf_free>
  while (p != NULL) {
 8017c2a:	69bb      	ldr	r3, [r7, #24]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d1dc      	bne.n	8017bea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017c30:	6839      	ldr	r1, [r7, #0]
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f000 f8c2 	bl	8017dbc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017c38:	4b10      	ldr	r3, [pc, #64]	; (8017c7c <ip_reass_free_complete_datagram+0x140>)
 8017c3a:	881b      	ldrh	r3, [r3, #0]
 8017c3c:	8bfa      	ldrh	r2, [r7, #30]
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d905      	bls.n	8017c4e <ip_reass_free_complete_datagram+0x112>
 8017c42:	4b09      	ldr	r3, [pc, #36]	; (8017c68 <ip_reass_free_complete_datagram+0x12c>)
 8017c44:	22d2      	movs	r2, #210	; 0xd2
 8017c46:	490e      	ldr	r1, [pc, #56]	; (8017c80 <ip_reass_free_complete_datagram+0x144>)
 8017c48:	4809      	ldr	r0, [pc, #36]	; (8017c70 <ip_reass_free_complete_datagram+0x134>)
 8017c4a:	f001 fa33 	bl	80190b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017c4e:	4b0b      	ldr	r3, [pc, #44]	; (8017c7c <ip_reass_free_complete_datagram+0x140>)
 8017c50:	881a      	ldrh	r2, [r3, #0]
 8017c52:	8bfb      	ldrh	r3, [r7, #30]
 8017c54:	1ad3      	subs	r3, r2, r3
 8017c56:	b29a      	uxth	r2, r3
 8017c58:	4b08      	ldr	r3, [pc, #32]	; (8017c7c <ip_reass_free_complete_datagram+0x140>)
 8017c5a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017c5c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3720      	adds	r7, #32
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}
 8017c66:	bf00      	nop
 8017c68:	0801dd8c 	.word	0x0801dd8c
 8017c6c:	0801ddc8 	.word	0x0801ddc8
 8017c70:	0801ddd4 	.word	0x0801ddd4
 8017c74:	0801ddfc 	.word	0x0801ddfc
 8017c78:	0801de10 	.word	0x0801de10
 8017c7c:	20011018 	.word	0x20011018
 8017c80:	0801de30 	.word	0x0801de30

08017c84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b08a      	sub	sp, #40	; 0x28
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017c92:	2300      	movs	r3, #0
 8017c94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017c96:	2300      	movs	r3, #0
 8017c98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017ca2:	4b28      	ldr	r3, [pc, #160]	; (8017d44 <ip_reass_remove_oldest_datagram+0xc0>)
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017ca8:	e030      	b.n	8017d0c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cac:	695a      	ldr	r2, [r3, #20]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	68db      	ldr	r3, [r3, #12]
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d10c      	bne.n	8017cd0 <ip_reass_remove_oldest_datagram+0x4c>
 8017cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb8:	699a      	ldr	r2, [r3, #24]
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	691b      	ldr	r3, [r3, #16]
 8017cbe:	429a      	cmp	r2, r3
 8017cc0:	d106      	bne.n	8017cd0 <ip_reass_remove_oldest_datagram+0x4c>
 8017cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc4:	899a      	ldrh	r2, [r3, #12]
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	889b      	ldrh	r3, [r3, #4]
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d014      	beq.n	8017cfa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017cd0:	693b      	ldr	r3, [r7, #16]
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017cd6:	6a3b      	ldr	r3, [r7, #32]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d104      	bne.n	8017ce6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cde:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	61bb      	str	r3, [r7, #24]
 8017ce4:	e009      	b.n	8017cfa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce8:	7fda      	ldrb	r2, [r3, #31]
 8017cea:	6a3b      	ldr	r3, [r7, #32]
 8017cec:	7fdb      	ldrb	r3, [r3, #31]
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	d803      	bhi.n	8017cfa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017cf6:	69fb      	ldr	r3, [r7, #28]
 8017cf8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d001      	beq.n	8017d06 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d04:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d1cb      	bne.n	8017caa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d008      	beq.n	8017d2a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017d18:	69b9      	ldr	r1, [r7, #24]
 8017d1a:	6a38      	ldr	r0, [r7, #32]
 8017d1c:	f7ff ff0e 	bl	8017b3c <ip_reass_free_complete_datagram>
 8017d20:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017d22:	697a      	ldr	r2, [r7, #20]
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	4413      	add	r3, r2
 8017d28:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017d2a:	697a      	ldr	r2, [r7, #20]
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	da02      	bge.n	8017d38 <ip_reass_remove_oldest_datagram+0xb4>
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	dcac      	bgt.n	8017c92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017d38:	697b      	ldr	r3, [r7, #20]
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3728      	adds	r7, #40	; 0x28
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	20011014 	.word	0x20011014

08017d48 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b084      	sub	sp, #16
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d52:	2004      	movs	r0, #4
 8017d54:	f7f4 fa80 	bl	800c258 <memp_malloc>
 8017d58:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d110      	bne.n	8017d82 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017d60:	6839      	ldr	r1, [r7, #0]
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7ff ff8e 	bl	8017c84 <ip_reass_remove_oldest_datagram>
 8017d68:	4602      	mov	r2, r0
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	4293      	cmp	r3, r2
 8017d6e:	dc03      	bgt.n	8017d78 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d70:	2004      	movs	r0, #4
 8017d72:	f7f4 fa71 	bl	800c258 <memp_malloc>
 8017d76:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d101      	bne.n	8017d82 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	e016      	b.n	8017db0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017d82:	2220      	movs	r2, #32
 8017d84:	2100      	movs	r1, #0
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	f001 f8f7 	bl	8018f7a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	220f      	movs	r2, #15
 8017d90:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017d92:	4b09      	ldr	r3, [pc, #36]	; (8017db8 <ip_reass_enqueue_new_datagram+0x70>)
 8017d94:	681a      	ldr	r2, [r3, #0]
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017d9a:	4a07      	ldr	r2, [pc, #28]	; (8017db8 <ip_reass_enqueue_new_datagram+0x70>)
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	3308      	adds	r3, #8
 8017da4:	2214      	movs	r2, #20
 8017da6:	6879      	ldr	r1, [r7, #4]
 8017da8:	4618      	mov	r0, r3
 8017daa:	f001 f8be 	bl	8018f2a <memcpy>
  return ipr;
 8017dae:	68fb      	ldr	r3, [r7, #12]
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3710      	adds	r7, #16
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}
 8017db8:	20011014 	.word	0x20011014

08017dbc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017dc6:	4b10      	ldr	r3, [pc, #64]	; (8017e08 <ip_reass_dequeue_datagram+0x4c>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	687a      	ldr	r2, [r7, #4]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d104      	bne.n	8017dda <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	4a0c      	ldr	r2, [pc, #48]	; (8017e08 <ip_reass_dequeue_datagram+0x4c>)
 8017dd6:	6013      	str	r3, [r2, #0]
 8017dd8:	e00d      	b.n	8017df6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d106      	bne.n	8017dee <ip_reass_dequeue_datagram+0x32>
 8017de0:	4b0a      	ldr	r3, [pc, #40]	; (8017e0c <ip_reass_dequeue_datagram+0x50>)
 8017de2:	f240 1245 	movw	r2, #325	; 0x145
 8017de6:	490a      	ldr	r1, [pc, #40]	; (8017e10 <ip_reass_dequeue_datagram+0x54>)
 8017de8:	480a      	ldr	r0, [pc, #40]	; (8017e14 <ip_reass_dequeue_datagram+0x58>)
 8017dea:	f001 f963 	bl	80190b4 <iprintf>
    prev->next = ipr->next;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	681a      	ldr	r2, [r3, #0]
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017df6:	6879      	ldr	r1, [r7, #4]
 8017df8:	2004      	movs	r0, #4
 8017dfa:	f7f4 faa3 	bl	800c344 <memp_free>
}
 8017dfe:	bf00      	nop
 8017e00:	3708      	adds	r7, #8
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	20011014 	.word	0x20011014
 8017e0c:	0801dd8c 	.word	0x0801dd8c
 8017e10:	0801de54 	.word	0x0801de54
 8017e14:	0801ddd4 	.word	0x0801ddd4

08017e18 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b08c      	sub	sp, #48	; 0x30
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017e24:	2300      	movs	r3, #0
 8017e26:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017e28:	2301      	movs	r3, #1
 8017e2a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	685b      	ldr	r3, [r3, #4]
 8017e30:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e32:	69fb      	ldr	r3, [r7, #28]
 8017e34:	885b      	ldrh	r3, [r3, #2]
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7f3 fcff 	bl	800b83c <lwip_htons>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017e42:	69fb      	ldr	r3, [r7, #28]
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	f003 030f 	and.w	r3, r3, #15
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017e50:	7e7b      	ldrb	r3, [r7, #25]
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	8b7a      	ldrh	r2, [r7, #26]
 8017e56:	429a      	cmp	r2, r3
 8017e58:	d202      	bcs.n	8017e60 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e5e:	e135      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017e60:	7e7b      	ldrb	r3, [r7, #25]
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	8b7a      	ldrh	r2, [r7, #26]
 8017e66:	1ad3      	subs	r3, r2, r3
 8017e68:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e6a:	69fb      	ldr	r3, [r7, #28]
 8017e6c:	88db      	ldrh	r3, [r3, #6]
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7f3 fce3 	bl	800b83c <lwip_htons>
 8017e76:	4603      	mov	r3, r0
 8017e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e7c:	b29b      	uxth	r3, r3
 8017e7e:	00db      	lsls	r3, r3, #3
 8017e80:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	685b      	ldr	r3, [r3, #4]
 8017e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	701a      	strb	r2, [r3, #0]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	705a      	strb	r2, [r3, #1]
 8017e92:	2200      	movs	r2, #0
 8017e94:	709a      	strb	r2, [r3, #2]
 8017e96:	2200      	movs	r2, #0
 8017e98:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e9c:	8afa      	ldrh	r2, [r7, #22]
 8017e9e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017ea0:	8afa      	ldrh	r2, [r7, #22]
 8017ea2:	8b7b      	ldrh	r3, [r7, #26]
 8017ea4:	4413      	add	r3, r2
 8017ea6:	b29a      	uxth	r2, r3
 8017ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eaa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eae:	88db      	ldrh	r3, [r3, #6]
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	8afa      	ldrh	r2, [r7, #22]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d902      	bls.n	8017ebe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8017ebc:	e106      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ec4:	e068      	b.n	8017f98 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ece:	889b      	ldrh	r3, [r3, #4]
 8017ed0:	b29a      	uxth	r2, r3
 8017ed2:	693b      	ldr	r3, [r7, #16]
 8017ed4:	889b      	ldrh	r3, [r3, #4]
 8017ed6:	b29b      	uxth	r3, r3
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d235      	bcs.n	8017f48 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ee0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d020      	beq.n	8017f2a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eea:	889b      	ldrh	r3, [r3, #4]
 8017eec:	b29a      	uxth	r2, r3
 8017eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef0:	88db      	ldrh	r3, [r3, #6]
 8017ef2:	b29b      	uxth	r3, r3
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d307      	bcc.n	8017f08 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017efa:	88db      	ldrh	r3, [r3, #6]
 8017efc:	b29a      	uxth	r2, r3
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	889b      	ldrh	r3, [r3, #4]
 8017f02:	b29b      	uxth	r3, r3
 8017f04:	429a      	cmp	r2, r3
 8017f06:	d902      	bls.n	8017f0e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f08:	f04f 33ff 	mov.w	r3, #4294967295
 8017f0c:	e0de      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f10:	68ba      	ldr	r2, [r7, #8]
 8017f12:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f16:	88db      	ldrh	r3, [r3, #6]
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f1c:	889b      	ldrh	r3, [r3, #4]
 8017f1e:	b29b      	uxth	r3, r3
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d03d      	beq.n	8017fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f24:	2300      	movs	r3, #0
 8017f26:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017f28:	e03a      	b.n	8017fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f2c:	88db      	ldrh	r3, [r3, #6]
 8017f2e:	b29a      	uxth	r2, r3
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	889b      	ldrh	r3, [r3, #4]
 8017f34:	b29b      	uxth	r3, r3
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d902      	bls.n	8017f40 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017f3e:	e0c5      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	68ba      	ldr	r2, [r7, #8]
 8017f44:	605a      	str	r2, [r3, #4]
      break;
 8017f46:	e02b      	b.n	8017fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f4a:	889b      	ldrh	r3, [r3, #4]
 8017f4c:	b29a      	uxth	r2, r3
 8017f4e:	693b      	ldr	r3, [r7, #16]
 8017f50:	889b      	ldrh	r3, [r3, #4]
 8017f52:	b29b      	uxth	r3, r3
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d102      	bne.n	8017f5e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f58:	f04f 33ff 	mov.w	r3, #4294967295
 8017f5c:	e0b6      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f60:	889b      	ldrh	r3, [r3, #4]
 8017f62:	b29a      	uxth	r2, r3
 8017f64:	693b      	ldr	r3, [r7, #16]
 8017f66:	88db      	ldrh	r3, [r3, #6]
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d202      	bcs.n	8017f74 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8017f72:	e0ab      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d009      	beq.n	8017f8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7c:	88db      	ldrh	r3, [r3, #6]
 8017f7e:	b29a      	uxth	r2, r3
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	889b      	ldrh	r3, [r3, #4]
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	429a      	cmp	r2, r3
 8017f88:	d001      	beq.n	8017f8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017f8e:	693b      	ldr	r3, [r7, #16]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d193      	bne.n	8017ec6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017f9e:	e000      	b.n	8017fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017fa0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d12d      	bne.n	8018004 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d01c      	beq.n	8017fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb0:	88db      	ldrh	r3, [r3, #6]
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb6:	889b      	ldrh	r3, [r3, #4]
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d906      	bls.n	8017fcc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017fbe:	4b45      	ldr	r3, [pc, #276]	; (80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017fc0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017fc4:	4944      	ldr	r1, [pc, #272]	; (80180d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017fc6:	4845      	ldr	r0, [pc, #276]	; (80180dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fc8:	f001 f874 	bl	80190b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fce:	68ba      	ldr	r2, [r7, #8]
 8017fd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd4:	88db      	ldrh	r3, [r3, #6]
 8017fd6:	b29a      	uxth	r2, r3
 8017fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fda:	889b      	ldrh	r3, [r3, #4]
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d010      	beq.n	8018004 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	623b      	str	r3, [r7, #32]
 8017fe6:	e00d      	b.n	8018004 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d006      	beq.n	8017ffe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017ff0:	4b38      	ldr	r3, [pc, #224]	; (80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ff2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017ff6:	493a      	ldr	r1, [pc, #232]	; (80180e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017ff8:	4838      	ldr	r0, [pc, #224]	; (80180dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ffa:	f001 f85b 	bl	80190b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	68ba      	ldr	r2, [r7, #8]
 8018002:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d105      	bne.n	8018016 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	7f9b      	ldrb	r3, [r3, #30]
 801800e:	f003 0301 	and.w	r3, r3, #1
 8018012:	2b00      	cmp	r3, #0
 8018014:	d059      	beq.n	80180ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018016:	6a3b      	ldr	r3, [r7, #32]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d04f      	beq.n	80180bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d006      	beq.n	8018032 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	889b      	ldrh	r3, [r3, #4]
 801802c:	b29b      	uxth	r3, r3
 801802e:	2b00      	cmp	r3, #0
 8018030:	d002      	beq.n	8018038 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018032:	2300      	movs	r3, #0
 8018034:	623b      	str	r3, [r7, #32]
 8018036:	e041      	b.n	80180bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018042:	e012      	b.n	801806a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018046:	685b      	ldr	r3, [r3, #4]
 8018048:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801804c:	88db      	ldrh	r3, [r3, #6]
 801804e:	b29a      	uxth	r2, r3
 8018050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018052:	889b      	ldrh	r3, [r3, #4]
 8018054:	b29b      	uxth	r3, r3
 8018056:	429a      	cmp	r2, r3
 8018058:	d002      	beq.n	8018060 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801805a:	2300      	movs	r3, #0
 801805c:	623b      	str	r3, [r7, #32]
            break;
 801805e:	e007      	b.n	8018070 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018062:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	2b00      	cmp	r3, #0
 801806e:	d1e9      	bne.n	8018044 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018070:	6a3b      	ldr	r3, [r7, #32]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d022      	beq.n	80180bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d106      	bne.n	801808c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801807e:	4b15      	ldr	r3, [pc, #84]	; (80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018080:	f240 12df 	movw	r2, #479	; 0x1df
 8018084:	4917      	ldr	r1, [pc, #92]	; (80180e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018086:	4815      	ldr	r0, [pc, #84]	; (80180dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018088:	f001 f814 	bl	80190b4 <iprintf>
          LWIP_ASSERT("sanity check",
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018094:	429a      	cmp	r2, r3
 8018096:	d106      	bne.n	80180a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018098:	4b0e      	ldr	r3, [pc, #56]	; (80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801809a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801809e:	4911      	ldr	r1, [pc, #68]	; (80180e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80180a0:	480e      	ldr	r0, [pc, #56]	; (80180dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180a2:	f001 f807 	bl	80190b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80180a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d006      	beq.n	80180bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80180ae:	4b09      	ldr	r3, [pc, #36]	; (80180d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80180b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80180b4:	490c      	ldr	r1, [pc, #48]	; (80180e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80180b6:	4809      	ldr	r0, [pc, #36]	; (80180dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180b8:	f000 fffc 	bl	80190b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80180bc:	6a3b      	ldr	r3, [r7, #32]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	bf14      	ite	ne
 80180c2:	2301      	movne	r3, #1
 80180c4:	2300      	moveq	r3, #0
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	e000      	b.n	80180cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80180ca:	2300      	movs	r3, #0
}
 80180cc:	4618      	mov	r0, r3
 80180ce:	3730      	adds	r7, #48	; 0x30
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}
 80180d4:	0801dd8c 	.word	0x0801dd8c
 80180d8:	0801de70 	.word	0x0801de70
 80180dc:	0801ddd4 	.word	0x0801ddd4
 80180e0:	0801de90 	.word	0x0801de90
 80180e4:	0801dec8 	.word	0x0801dec8
 80180e8:	0801ded8 	.word	0x0801ded8

080180ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b08e      	sub	sp, #56	; 0x38
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	685b      	ldr	r3, [r3, #4]
 80180f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80180fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	f003 030f 	and.w	r3, r3, #15
 8018102:	b2db      	uxtb	r3, r3
 8018104:	009b      	lsls	r3, r3, #2
 8018106:	b2db      	uxtb	r3, r3
 8018108:	2b14      	cmp	r3, #20
 801810a:	f040 8171 	bne.w	80183f0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018110:	88db      	ldrh	r3, [r3, #6]
 8018112:	b29b      	uxth	r3, r3
 8018114:	4618      	mov	r0, r3
 8018116:	f7f3 fb91 	bl	800b83c <lwip_htons>
 801811a:	4603      	mov	r3, r0
 801811c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018120:	b29b      	uxth	r3, r3
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018128:	885b      	ldrh	r3, [r3, #2]
 801812a:	b29b      	uxth	r3, r3
 801812c:	4618      	mov	r0, r3
 801812e:	f7f3 fb85 	bl	800b83c <lwip_htons>
 8018132:	4603      	mov	r3, r0
 8018134:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	f003 030f 	and.w	r3, r3, #15
 801813e:	b2db      	uxtb	r3, r3
 8018140:	009b      	lsls	r3, r3, #2
 8018142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801814a:	b29b      	uxth	r3, r3
 801814c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801814e:	429a      	cmp	r2, r3
 8018150:	f0c0 8150 	bcc.w	80183f4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018158:	b29b      	uxth	r3, r3
 801815a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801815c:	1ad3      	subs	r3, r2, r3
 801815e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018160:	6878      	ldr	r0, [r7, #4]
 8018162:	f7f5 f82d 	bl	800d1c0 <pbuf_clen>
 8018166:	4603      	mov	r3, r0
 8018168:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801816a:	4b8c      	ldr	r3, [pc, #560]	; (801839c <ip4_reass+0x2b0>)
 801816c:	881b      	ldrh	r3, [r3, #0]
 801816e:	461a      	mov	r2, r3
 8018170:	8c3b      	ldrh	r3, [r7, #32]
 8018172:	4413      	add	r3, r2
 8018174:	2b0a      	cmp	r3, #10
 8018176:	dd10      	ble.n	801819a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018178:	8c3b      	ldrh	r3, [r7, #32]
 801817a:	4619      	mov	r1, r3
 801817c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801817e:	f7ff fd81 	bl	8017c84 <ip_reass_remove_oldest_datagram>
 8018182:	4603      	mov	r3, r0
 8018184:	2b00      	cmp	r3, #0
 8018186:	f000 8137 	beq.w	80183f8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801818a:	4b84      	ldr	r3, [pc, #528]	; (801839c <ip4_reass+0x2b0>)
 801818c:	881b      	ldrh	r3, [r3, #0]
 801818e:	461a      	mov	r2, r3
 8018190:	8c3b      	ldrh	r3, [r7, #32]
 8018192:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018194:	2b0a      	cmp	r3, #10
 8018196:	f300 812f 	bgt.w	80183f8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801819a:	4b81      	ldr	r3, [pc, #516]	; (80183a0 <ip4_reass+0x2b4>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	633b      	str	r3, [r7, #48]	; 0x30
 80181a0:	e015      	b.n	80181ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80181a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a4:	695a      	ldr	r2, [r3, #20]
 80181a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a8:	68db      	ldr	r3, [r3, #12]
 80181aa:	429a      	cmp	r2, r3
 80181ac:	d10c      	bne.n	80181c8 <ip4_reass+0xdc>
 80181ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b0:	699a      	ldr	r2, [r3, #24]
 80181b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b4:	691b      	ldr	r3, [r3, #16]
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d106      	bne.n	80181c8 <ip4_reass+0xdc>
 80181ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181bc:	899a      	ldrh	r2, [r3, #12]
 80181be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c0:	889b      	ldrh	r3, [r3, #4]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d006      	beq.n	80181d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80181c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	633b      	str	r3, [r7, #48]	; 0x30
 80181ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d1e6      	bne.n	80181a2 <ip4_reass+0xb6>
 80181d4:	e000      	b.n	80181d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80181d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80181d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d109      	bne.n	80181f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80181de:	8c3b      	ldrh	r3, [r7, #32]
 80181e0:	4619      	mov	r1, r3
 80181e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181e4:	f7ff fdb0 	bl	8017d48 <ip_reass_enqueue_new_datagram>
 80181e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80181ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d11c      	bne.n	801822a <ip4_reass+0x13e>
      goto nullreturn;
 80181f0:	e105      	b.n	80183fe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f4:	88db      	ldrh	r3, [r3, #6]
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7f3 fb1f 	bl	800b83c <lwip_htons>
 80181fe:	4603      	mov	r3, r0
 8018200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018204:	2b00      	cmp	r3, #0
 8018206:	d110      	bne.n	801822a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801820a:	89db      	ldrh	r3, [r3, #14]
 801820c:	4618      	mov	r0, r3
 801820e:	f7f3 fb15 	bl	800b83c <lwip_htons>
 8018212:	4603      	mov	r3, r0
 8018214:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018218:	2b00      	cmp	r3, #0
 801821a:	d006      	beq.n	801822a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801821e:	3308      	adds	r3, #8
 8018220:	2214      	movs	r2, #20
 8018222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018224:	4618      	mov	r0, r3
 8018226:	f000 fe80 	bl	8018f2a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822c:	88db      	ldrh	r3, [r3, #6]
 801822e:	b29b      	uxth	r3, r3
 8018230:	f003 0320 	and.w	r3, r3, #32
 8018234:	2b00      	cmp	r3, #0
 8018236:	bf0c      	ite	eq
 8018238:	2301      	moveq	r3, #1
 801823a:	2300      	movne	r3, #0
 801823c:	b2db      	uxtb	r3, r3
 801823e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018240:	69fb      	ldr	r3, [r7, #28]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d00e      	beq.n	8018264 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018246:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801824a:	4413      	add	r3, r2
 801824c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801824e:	8b7a      	ldrh	r2, [r7, #26]
 8018250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018252:	429a      	cmp	r2, r3
 8018254:	f0c0 80a0 	bcc.w	8018398 <ip4_reass+0x2ac>
 8018258:	8b7b      	ldrh	r3, [r7, #26]
 801825a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801825e:	4293      	cmp	r3, r2
 8018260:	f200 809a 	bhi.w	8018398 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018264:	69fa      	ldr	r2, [r7, #28]
 8018266:	6879      	ldr	r1, [r7, #4]
 8018268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801826a:	f7ff fdd5 	bl	8017e18 <ip_reass_chain_frag_into_datagram_and_validate>
 801826e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018276:	f000 809b 	beq.w	80183b0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801827a:	4b48      	ldr	r3, [pc, #288]	; (801839c <ip4_reass+0x2b0>)
 801827c:	881a      	ldrh	r2, [r3, #0]
 801827e:	8c3b      	ldrh	r3, [r7, #32]
 8018280:	4413      	add	r3, r2
 8018282:	b29a      	uxth	r2, r3
 8018284:	4b45      	ldr	r3, [pc, #276]	; (801839c <ip4_reass+0x2b0>)
 8018286:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018288:	69fb      	ldr	r3, [r7, #28]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d00d      	beq.n	80182aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801828e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018292:	4413      	add	r3, r2
 8018294:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018298:	8a7a      	ldrh	r2, [r7, #18]
 801829a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801829e:	7f9b      	ldrb	r3, [r3, #30]
 80182a0:	f043 0301 	orr.w	r3, r3, #1
 80182a4:	b2da      	uxtb	r2, r3
 80182a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80182aa:	697b      	ldr	r3, [r7, #20]
 80182ac:	2b01      	cmp	r3, #1
 80182ae:	d171      	bne.n	8018394 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80182b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182b2:	8b9b      	ldrh	r3, [r3, #28]
 80182b4:	3314      	adds	r3, #20
 80182b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80182b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	685b      	ldr	r3, [r3, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80182c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c4:	685b      	ldr	r3, [r3, #4]
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80182ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182cc:	3308      	adds	r3, #8
 80182ce:	2214      	movs	r2, #20
 80182d0:	4619      	mov	r1, r3
 80182d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182d4:	f000 fe29 	bl	8018f2a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80182d8:	8a3b      	ldrh	r3, [r7, #16]
 80182da:	4618      	mov	r0, r3
 80182dc:	f7f3 faae 	bl	800b83c <lwip_htons>
 80182e0:	4603      	mov	r3, r0
 80182e2:	461a      	mov	r2, r3
 80182e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80182e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ea:	2200      	movs	r2, #0
 80182ec:	719a      	strb	r2, [r3, #6]
 80182ee:	2200      	movs	r2, #0
 80182f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80182f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f4:	2200      	movs	r2, #0
 80182f6:	729a      	strb	r2, [r3, #10]
 80182f8:	2200      	movs	r2, #0
 80182fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80182fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018302:	e00d      	b.n	8018320 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018306:	685b      	ldr	r3, [r3, #4]
 8018308:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801830a:	2114      	movs	r1, #20
 801830c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801830e:	f7f4 fe43 	bl	800cf98 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018312:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018314:	6878      	ldr	r0, [r7, #4]
 8018316:	f7f4 ff93 	bl	800d240 <pbuf_cat>
      r = iprh->next_pbuf;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018322:	2b00      	cmp	r3, #0
 8018324:	d1ee      	bne.n	8018304 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018326:	4b1e      	ldr	r3, [pc, #120]	; (80183a0 <ip4_reass+0x2b4>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801832c:	429a      	cmp	r2, r3
 801832e:	d102      	bne.n	8018336 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018330:	2300      	movs	r3, #0
 8018332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018334:	e010      	b.n	8018358 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018336:	4b1a      	ldr	r3, [pc, #104]	; (80183a0 <ip4_reass+0x2b4>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801833c:	e007      	b.n	801834e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018344:	429a      	cmp	r2, r3
 8018346:	d006      	beq.n	8018356 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018350:	2b00      	cmp	r3, #0
 8018352:	d1f4      	bne.n	801833e <ip4_reass+0x252>
 8018354:	e000      	b.n	8018358 <ip4_reass+0x26c>
          break;
 8018356:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801835a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801835c:	f7ff fd2e 	bl	8017dbc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f7f4 ff2d 	bl	800d1c0 <pbuf_clen>
 8018366:	4603      	mov	r3, r0
 8018368:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801836a:	4b0c      	ldr	r3, [pc, #48]	; (801839c <ip4_reass+0x2b0>)
 801836c:	881b      	ldrh	r3, [r3, #0]
 801836e:	8c3a      	ldrh	r2, [r7, #32]
 8018370:	429a      	cmp	r2, r3
 8018372:	d906      	bls.n	8018382 <ip4_reass+0x296>
 8018374:	4b0b      	ldr	r3, [pc, #44]	; (80183a4 <ip4_reass+0x2b8>)
 8018376:	f240 229b 	movw	r2, #667	; 0x29b
 801837a:	490b      	ldr	r1, [pc, #44]	; (80183a8 <ip4_reass+0x2bc>)
 801837c:	480b      	ldr	r0, [pc, #44]	; (80183ac <ip4_reass+0x2c0>)
 801837e:	f000 fe99 	bl	80190b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018382:	4b06      	ldr	r3, [pc, #24]	; (801839c <ip4_reass+0x2b0>)
 8018384:	881a      	ldrh	r2, [r3, #0]
 8018386:	8c3b      	ldrh	r3, [r7, #32]
 8018388:	1ad3      	subs	r3, r2, r3
 801838a:	b29a      	uxth	r2, r3
 801838c:	4b03      	ldr	r3, [pc, #12]	; (801839c <ip4_reass+0x2b0>)
 801838e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	e038      	b.n	8018406 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018394:	2300      	movs	r3, #0
 8018396:	e036      	b.n	8018406 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018398:	bf00      	nop
 801839a:	e00a      	b.n	80183b2 <ip4_reass+0x2c6>
 801839c:	20011018 	.word	0x20011018
 80183a0:	20011014 	.word	0x20011014
 80183a4:	0801dd8c 	.word	0x0801dd8c
 80183a8:	0801defc 	.word	0x0801defc
 80183ac:	0801ddd4 	.word	0x0801ddd4
    goto nullreturn_ipr;
 80183b0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80183b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d106      	bne.n	80183c6 <ip4_reass+0x2da>
 80183b8:	4b15      	ldr	r3, [pc, #84]	; (8018410 <ip4_reass+0x324>)
 80183ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80183be:	4915      	ldr	r1, [pc, #84]	; (8018414 <ip4_reass+0x328>)
 80183c0:	4815      	ldr	r0, [pc, #84]	; (8018418 <ip4_reass+0x32c>)
 80183c2:	f000 fe77 	bl	80190b4 <iprintf>
  if (ipr->p == NULL) {
 80183c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d116      	bne.n	80183fc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80183ce:	4b13      	ldr	r3, [pc, #76]	; (801841c <ip4_reass+0x330>)
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183d4:	429a      	cmp	r2, r3
 80183d6:	d006      	beq.n	80183e6 <ip4_reass+0x2fa>
 80183d8:	4b0d      	ldr	r3, [pc, #52]	; (8018410 <ip4_reass+0x324>)
 80183da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80183de:	4910      	ldr	r1, [pc, #64]	; (8018420 <ip4_reass+0x334>)
 80183e0:	480d      	ldr	r0, [pc, #52]	; (8018418 <ip4_reass+0x32c>)
 80183e2:	f000 fe67 	bl	80190b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80183e6:	2100      	movs	r1, #0
 80183e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183ea:	f7ff fce7 	bl	8017dbc <ip_reass_dequeue_datagram>
 80183ee:	e006      	b.n	80183fe <ip4_reass+0x312>
    goto nullreturn;
 80183f0:	bf00      	nop
 80183f2:	e004      	b.n	80183fe <ip4_reass+0x312>
    goto nullreturn;
 80183f4:	bf00      	nop
 80183f6:	e002      	b.n	80183fe <ip4_reass+0x312>
      goto nullreturn;
 80183f8:	bf00      	nop
 80183fa:	e000      	b.n	80183fe <ip4_reass+0x312>
  }

nullreturn:
 80183fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f7f4 fe50 	bl	800d0a4 <pbuf_free>
  return NULL;
 8018404:	2300      	movs	r3, #0
}
 8018406:	4618      	mov	r0, r3
 8018408:	3738      	adds	r7, #56	; 0x38
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	0801dd8c 	.word	0x0801dd8c
 8018414:	0801df18 	.word	0x0801df18
 8018418:	0801ddd4 	.word	0x0801ddd4
 801841c:	20011014 	.word	0x20011014
 8018420:	0801df24 	.word	0x0801df24

08018424 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018428:	2005      	movs	r0, #5
 801842a:	f7f3 ff15 	bl	800c258 <memp_malloc>
 801842e:	4603      	mov	r3, r0
}
 8018430:	4618      	mov	r0, r3
 8018432:	bd80      	pop	{r7, pc}

08018434 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b082      	sub	sp, #8
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d106      	bne.n	8018450 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018442:	4b07      	ldr	r3, [pc, #28]	; (8018460 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018444:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018448:	4906      	ldr	r1, [pc, #24]	; (8018464 <ip_frag_free_pbuf_custom_ref+0x30>)
 801844a:	4807      	ldr	r0, [pc, #28]	; (8018468 <ip_frag_free_pbuf_custom_ref+0x34>)
 801844c:	f000 fe32 	bl	80190b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018450:	6879      	ldr	r1, [r7, #4]
 8018452:	2005      	movs	r0, #5
 8018454:	f7f3 ff76 	bl	800c344 <memp_free>
}
 8018458:	bf00      	nop
 801845a:	3708      	adds	r7, #8
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}
 8018460:	0801dd8c 	.word	0x0801dd8c
 8018464:	0801df44 	.word	0x0801df44
 8018468:	0801ddd4 	.word	0x0801ddd4

0801846c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b084      	sub	sp, #16
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d106      	bne.n	801848c <ipfrag_free_pbuf_custom+0x20>
 801847e:	4b11      	ldr	r3, [pc, #68]	; (80184c4 <ipfrag_free_pbuf_custom+0x58>)
 8018480:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018484:	4910      	ldr	r1, [pc, #64]	; (80184c8 <ipfrag_free_pbuf_custom+0x5c>)
 8018486:	4811      	ldr	r0, [pc, #68]	; (80184cc <ipfrag_free_pbuf_custom+0x60>)
 8018488:	f000 fe14 	bl	80190b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801848c:	68fa      	ldr	r2, [r7, #12]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	429a      	cmp	r2, r3
 8018492:	d006      	beq.n	80184a2 <ipfrag_free_pbuf_custom+0x36>
 8018494:	4b0b      	ldr	r3, [pc, #44]	; (80184c4 <ipfrag_free_pbuf_custom+0x58>)
 8018496:	f240 22cf 	movw	r2, #719	; 0x2cf
 801849a:	490d      	ldr	r1, [pc, #52]	; (80184d0 <ipfrag_free_pbuf_custom+0x64>)
 801849c:	480b      	ldr	r0, [pc, #44]	; (80184cc <ipfrag_free_pbuf_custom+0x60>)
 801849e:	f000 fe09 	bl	80190b4 <iprintf>
  if (pcr->original != NULL) {
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	695b      	ldr	r3, [r3, #20]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d004      	beq.n	80184b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	695b      	ldr	r3, [r3, #20]
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7f4 fdf8 	bl	800d0a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80184b4:	68f8      	ldr	r0, [r7, #12]
 80184b6:	f7ff ffbd 	bl	8018434 <ip_frag_free_pbuf_custom_ref>
}
 80184ba:	bf00      	nop
 80184bc:	3710      	adds	r7, #16
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}
 80184c2:	bf00      	nop
 80184c4:	0801dd8c 	.word	0x0801dd8c
 80184c8:	0801df50 	.word	0x0801df50
 80184cc:	0801ddd4 	.word	0x0801ddd4
 80184d0:	0801df5c 	.word	0x0801df5c

080184d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b094      	sub	sp, #80	; 0x50
 80184d8:	af02      	add	r7, sp, #8
 80184da:	60f8      	str	r0, [r7, #12]
 80184dc:	60b9      	str	r1, [r7, #8]
 80184de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80184e0:	2300      	movs	r3, #0
 80184e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184ea:	3b14      	subs	r3, #20
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	da00      	bge.n	80184f2 <ip4_frag+0x1e>
 80184f0:	3307      	adds	r3, #7
 80184f2:	10db      	asrs	r3, r3, #3
 80184f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80184f6:	2314      	movs	r3, #20
 80184f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	685b      	ldr	r3, [r3, #4]
 80184fe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018502:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	f003 030f 	and.w	r3, r3, #15
 801850c:	b2db      	uxtb	r3, r3
 801850e:	009b      	lsls	r3, r3, #2
 8018510:	b2db      	uxtb	r3, r3
 8018512:	2b14      	cmp	r3, #20
 8018514:	d002      	beq.n	801851c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018516:	f06f 0305 	mvn.w	r3, #5
 801851a:	e110      	b.n	801873e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	895b      	ldrh	r3, [r3, #10]
 8018520:	2b13      	cmp	r3, #19
 8018522:	d809      	bhi.n	8018538 <ip4_frag+0x64>
 8018524:	4b88      	ldr	r3, [pc, #544]	; (8018748 <ip4_frag+0x274>)
 8018526:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801852a:	4988      	ldr	r1, [pc, #544]	; (801874c <ip4_frag+0x278>)
 801852c:	4888      	ldr	r0, [pc, #544]	; (8018750 <ip4_frag+0x27c>)
 801852e:	f000 fdc1 	bl	80190b4 <iprintf>
 8018532:	f06f 0305 	mvn.w	r3, #5
 8018536:	e102      	b.n	801873e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801853a:	88db      	ldrh	r3, [r3, #6]
 801853c:	b29b      	uxth	r3, r3
 801853e:	4618      	mov	r0, r3
 8018540:	f7f3 f97c 	bl	800b83c <lwip_htons>
 8018544:	4603      	mov	r3, r0
 8018546:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801854a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801854e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018558:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	891b      	ldrh	r3, [r3, #8]
 801855e:	3b14      	subs	r3, #20
 8018560:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018564:	e0e1      	b.n	801872a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018566:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018568:	00db      	lsls	r3, r3, #3
 801856a:	b29b      	uxth	r3, r3
 801856c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018570:	4293      	cmp	r3, r2
 8018572:	bf28      	it	cs
 8018574:	4613      	movcs	r3, r2
 8018576:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018578:	f44f 7220 	mov.w	r2, #640	; 0x280
 801857c:	2114      	movs	r1, #20
 801857e:	200e      	movs	r0, #14
 8018580:	f7f4 faac 	bl	800cadc <pbuf_alloc>
 8018584:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018588:	2b00      	cmp	r3, #0
 801858a:	f000 80d5 	beq.w	8018738 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018590:	895b      	ldrh	r3, [r3, #10]
 8018592:	2b13      	cmp	r3, #19
 8018594:	d806      	bhi.n	80185a4 <ip4_frag+0xd0>
 8018596:	4b6c      	ldr	r3, [pc, #432]	; (8018748 <ip4_frag+0x274>)
 8018598:	f44f 7249 	mov.w	r2, #804	; 0x324
 801859c:	496d      	ldr	r1, [pc, #436]	; (8018754 <ip4_frag+0x280>)
 801859e:	486c      	ldr	r0, [pc, #432]	; (8018750 <ip4_frag+0x27c>)
 80185a0:	f000 fd88 	bl	80190b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80185a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	2214      	movs	r2, #20
 80185aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80185ac:	4618      	mov	r0, r3
 80185ae:	f000 fcbc 	bl	8018f2a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80185b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80185b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80185ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80185be:	e064      	b.n	801868a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	895a      	ldrh	r2, [r3, #10]
 80185c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80185c6:	1ad3      	subs	r3, r2, r3
 80185c8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	895b      	ldrh	r3, [r3, #10]
 80185ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80185d0:	429a      	cmp	r2, r3
 80185d2:	d906      	bls.n	80185e2 <ip4_frag+0x10e>
 80185d4:	4b5c      	ldr	r3, [pc, #368]	; (8018748 <ip4_frag+0x274>)
 80185d6:	f240 322d 	movw	r2, #813	; 0x32d
 80185da:	495f      	ldr	r1, [pc, #380]	; (8018758 <ip4_frag+0x284>)
 80185dc:	485c      	ldr	r0, [pc, #368]	; (8018750 <ip4_frag+0x27c>)
 80185de:	f000 fd69 	bl	80190b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80185e2:	8bfa      	ldrh	r2, [r7, #30]
 80185e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80185e8:	4293      	cmp	r3, r2
 80185ea:	bf28      	it	cs
 80185ec:	4613      	movcs	r3, r2
 80185ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80185f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d105      	bne.n	8018606 <ip4_frag+0x132>
        poff = 0;
 80185fa:	2300      	movs	r3, #0
 80185fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	60fb      	str	r3, [r7, #12]
        continue;
 8018604:	e041      	b.n	801868a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018606:	f7ff ff0d 	bl	8018424 <ip_frag_alloc_pbuf_custom_ref>
 801860a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801860c:	69bb      	ldr	r3, [r7, #24]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d103      	bne.n	801861a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018614:	f7f4 fd46 	bl	800d0a4 <pbuf_free>
        goto memerr;
 8018618:	e08f      	b.n	801873a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801861a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018620:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018622:	4413      	add	r3, r2
 8018624:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018628:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801862c:	9201      	str	r2, [sp, #4]
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	4603      	mov	r3, r0
 8018632:	2241      	movs	r2, #65	; 0x41
 8018634:	2000      	movs	r0, #0
 8018636:	f7f4 fb7b 	bl	800cd30 <pbuf_alloced_custom>
 801863a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801863c:	697b      	ldr	r3, [r7, #20]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d106      	bne.n	8018650 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018642:	69b8      	ldr	r0, [r7, #24]
 8018644:	f7ff fef6 	bl	8018434 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801864a:	f7f4 fd2b 	bl	800d0a4 <pbuf_free>
        goto memerr;
 801864e:	e074      	b.n	801873a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018650:	68f8      	ldr	r0, [r7, #12]
 8018652:	f7f4 fdcd 	bl	800d1f0 <pbuf_ref>
      pcr->original = p;
 8018656:	69bb      	ldr	r3, [r7, #24]
 8018658:	68fa      	ldr	r2, [r7, #12]
 801865a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801865c:	69bb      	ldr	r3, [r7, #24]
 801865e:	4a3f      	ldr	r2, [pc, #252]	; (801875c <ip4_frag+0x288>)
 8018660:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018662:	6979      	ldr	r1, [r7, #20]
 8018664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018666:	f7f4 fdeb 	bl	800d240 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801866a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801866e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018672:	1ad3      	subs	r3, r2, r3
 8018674:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801867c:	2b00      	cmp	r3, #0
 801867e:	d004      	beq.n	801868a <ip4_frag+0x1b6>
        poff = 0;
 8018680:	2300      	movs	r3, #0
 8018682:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801868a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801868e:	2b00      	cmp	r3, #0
 8018690:	d196      	bne.n	80185c0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018692:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018698:	4413      	add	r3, r2
 801869a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801869c:	68bb      	ldr	r3, [r7, #8]
 801869e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80186a0:	f1a3 0213 	sub.w	r2, r3, #19
 80186a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80186a8:	429a      	cmp	r2, r3
 80186aa:	bfcc      	ite	gt
 80186ac:	2301      	movgt	r3, #1
 80186ae:	2300      	movle	r3, #0
 80186b0:	b2db      	uxtb	r3, r3
 80186b2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80186b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80186b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80186be:	6a3b      	ldr	r3, [r7, #32]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d002      	beq.n	80186ca <ip4_frag+0x1f6>
 80186c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d003      	beq.n	80186d2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80186ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80186d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80186d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7f3 f8b1 	bl	800b83c <lwip_htons>
 80186da:	4603      	mov	r3, r0
 80186dc:	461a      	mov	r2, r3
 80186de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186e0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80186e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186e4:	3314      	adds	r3, #20
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7f3 f8a7 	bl	800b83c <lwip_htons>
 80186ee:	4603      	mov	r3, r0
 80186f0:	461a      	mov	r2, r3
 80186f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80186f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f8:	2200      	movs	r2, #0
 80186fa:	729a      	strb	r2, [r3, #10]
 80186fc:	2200      	movs	r2, #0
 80186fe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	695b      	ldr	r3, [r3, #20]
 8018704:	687a      	ldr	r2, [r7, #4]
 8018706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018708:	68b8      	ldr	r0, [r7, #8]
 801870a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801870c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801870e:	f7f4 fcc9 	bl	800d0a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018712:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018718:	1ad3      	subs	r3, r2, r3
 801871a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801871e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018722:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018724:	4413      	add	r3, r2
 8018726:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801872a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801872e:	2b00      	cmp	r3, #0
 8018730:	f47f af19 	bne.w	8018566 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018734:	2300      	movs	r3, #0
 8018736:	e002      	b.n	801873e <ip4_frag+0x26a>
      goto memerr;
 8018738:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801873a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801873e:	4618      	mov	r0, r3
 8018740:	3748      	adds	r7, #72	; 0x48
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	0801dd8c 	.word	0x0801dd8c
 801874c:	0801df68 	.word	0x0801df68
 8018750:	0801ddd4 	.word	0x0801ddd4
 8018754:	0801df84 	.word	0x0801df84
 8018758:	0801dfa4 	.word	0x0801dfa4
 801875c:	0801846d 	.word	0x0801846d

08018760 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b086      	sub	sp, #24
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801876a:	230e      	movs	r3, #14
 801876c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	895b      	ldrh	r3, [r3, #10]
 8018772:	2b0e      	cmp	r3, #14
 8018774:	d96e      	bls.n	8018854 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	7bdb      	ldrb	r3, [r3, #15]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d106      	bne.n	801878c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018784:	3301      	adds	r3, #1
 8018786:	b2da      	uxtb	r2, r3
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	685b      	ldr	r3, [r3, #4]
 8018790:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	7b1a      	ldrb	r2, [r3, #12]
 8018796:	7b5b      	ldrb	r3, [r3, #13]
 8018798:	021b      	lsls	r3, r3, #8
 801879a:	4313      	orrs	r3, r2
 801879c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801879e:	693b      	ldr	r3, [r7, #16]
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	f003 0301 	and.w	r3, r3, #1
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d023      	beq.n	80187f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	781b      	ldrb	r3, [r3, #0]
 80187ae:	2b01      	cmp	r3, #1
 80187b0:	d10f      	bne.n	80187d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	785b      	ldrb	r3, [r3, #1]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d11b      	bne.n	80187f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80187ba:	693b      	ldr	r3, [r7, #16]
 80187bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80187be:	2b5e      	cmp	r3, #94	; 0x5e
 80187c0:	d117      	bne.n	80187f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	7b5b      	ldrb	r3, [r3, #13]
 80187c6:	f043 0310 	orr.w	r3, r3, #16
 80187ca:	b2da      	uxtb	r2, r3
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	735a      	strb	r2, [r3, #13]
 80187d0:	e00f      	b.n	80187f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	2206      	movs	r2, #6
 80187d6:	4928      	ldr	r1, [pc, #160]	; (8018878 <ethernet_input+0x118>)
 80187d8:	4618      	mov	r0, r3
 80187da:	f000 fb96 	bl	8018f0a <memcmp>
 80187de:	4603      	mov	r3, r0
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d106      	bne.n	80187f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	7b5b      	ldrb	r3, [r3, #13]
 80187e8:	f043 0308 	orr.w	r3, r3, #8
 80187ec:	b2da      	uxtb	r2, r3
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80187f2:	89fb      	ldrh	r3, [r7, #14]
 80187f4:	2b08      	cmp	r3, #8
 80187f6:	d003      	beq.n	8018800 <ethernet_input+0xa0>
 80187f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80187fc:	d014      	beq.n	8018828 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80187fe:	e032      	b.n	8018866 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018800:	683b      	ldr	r3, [r7, #0]
 8018802:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018806:	f003 0308 	and.w	r3, r3, #8
 801880a:	2b00      	cmp	r3, #0
 801880c:	d024      	beq.n	8018858 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801880e:	8afb      	ldrh	r3, [r7, #22]
 8018810:	4619      	mov	r1, r3
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f7f4 fbc0 	bl	800cf98 <pbuf_remove_header>
 8018818:	4603      	mov	r3, r0
 801881a:	2b00      	cmp	r3, #0
 801881c:	d11e      	bne.n	801885c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801881e:	6839      	ldr	r1, [r7, #0]
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f7fe ff03 	bl	801762c <ip4_input>
      break;
 8018826:	e013      	b.n	8018850 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801882e:	f003 0308 	and.w	r3, r3, #8
 8018832:	2b00      	cmp	r3, #0
 8018834:	d014      	beq.n	8018860 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018836:	8afb      	ldrh	r3, [r7, #22]
 8018838:	4619      	mov	r1, r3
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f7f4 fbac 	bl	800cf98 <pbuf_remove_header>
 8018840:	4603      	mov	r3, r0
 8018842:	2b00      	cmp	r3, #0
 8018844:	d10e      	bne.n	8018864 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018846:	6839      	ldr	r1, [r7, #0]
 8018848:	6878      	ldr	r0, [r7, #4]
 801884a:	f7fe f89f 	bl	801698c <etharp_input>
      break;
 801884e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018850:	2300      	movs	r3, #0
 8018852:	e00c      	b.n	801886e <ethernet_input+0x10e>
    goto free_and_return;
 8018854:	bf00      	nop
 8018856:	e006      	b.n	8018866 <ethernet_input+0x106>
        goto free_and_return;
 8018858:	bf00      	nop
 801885a:	e004      	b.n	8018866 <ethernet_input+0x106>
        goto free_and_return;
 801885c:	bf00      	nop
 801885e:	e002      	b.n	8018866 <ethernet_input+0x106>
        goto free_and_return;
 8018860:	bf00      	nop
 8018862:	e000      	b.n	8018866 <ethernet_input+0x106>
        goto free_and_return;
 8018864:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f7f4 fc1c 	bl	800d0a4 <pbuf_free>
  return ERR_OK;
 801886c:	2300      	movs	r3, #0
}
 801886e:	4618      	mov	r0, r3
 8018870:	3718      	adds	r7, #24
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	080282d0 	.word	0x080282d0

0801887c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801887c:	b580      	push	{r7, lr}
 801887e:	b086      	sub	sp, #24
 8018880:	af00      	add	r7, sp, #0
 8018882:	60f8      	str	r0, [r7, #12]
 8018884:	60b9      	str	r1, [r7, #8]
 8018886:	607a      	str	r2, [r7, #4]
 8018888:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801888a:	8c3b      	ldrh	r3, [r7, #32]
 801888c:	4618      	mov	r0, r3
 801888e:	f7f2 ffd5 	bl	800b83c <lwip_htons>
 8018892:	4603      	mov	r3, r0
 8018894:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018896:	210e      	movs	r1, #14
 8018898:	68b8      	ldr	r0, [r7, #8]
 801889a:	f7f4 fb6d 	bl	800cf78 <pbuf_add_header>
 801889e:	4603      	mov	r3, r0
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d125      	bne.n	80188f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	685b      	ldr	r3, [r3, #4]
 80188a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80188aa:	693b      	ldr	r3, [r7, #16]
 80188ac:	8afa      	ldrh	r2, [r7, #22]
 80188ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	2206      	movs	r2, #6
 80188b4:	6839      	ldr	r1, [r7, #0]
 80188b6:	4618      	mov	r0, r3
 80188b8:	f000 fb37 	bl	8018f2a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80188bc:	693b      	ldr	r3, [r7, #16]
 80188be:	3306      	adds	r3, #6
 80188c0:	2206      	movs	r2, #6
 80188c2:	6879      	ldr	r1, [r7, #4]
 80188c4:	4618      	mov	r0, r3
 80188c6:	f000 fb30 	bl	8018f2a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80188d0:	2b06      	cmp	r3, #6
 80188d2:	d006      	beq.n	80188e2 <ethernet_output+0x66>
 80188d4:	4b0a      	ldr	r3, [pc, #40]	; (8018900 <ethernet_output+0x84>)
 80188d6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80188da:	490a      	ldr	r1, [pc, #40]	; (8018904 <ethernet_output+0x88>)
 80188dc:	480a      	ldr	r0, [pc, #40]	; (8018908 <ethernet_output+0x8c>)
 80188de:	f000 fbe9 	bl	80190b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	699b      	ldr	r3, [r3, #24]
 80188e6:	68b9      	ldr	r1, [r7, #8]
 80188e8:	68f8      	ldr	r0, [r7, #12]
 80188ea:	4798      	blx	r3
 80188ec:	4603      	mov	r3, r0
 80188ee:	e002      	b.n	80188f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80188f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80188f2:	f06f 0301 	mvn.w	r3, #1
}
 80188f6:	4618      	mov	r0, r3
 80188f8:	3718      	adds	r7, #24
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd80      	pop	{r7, pc}
 80188fe:	bf00      	nop
 8018900:	0801dfb4 	.word	0x0801dfb4
 8018904:	0801dfec 	.word	0x0801dfec
 8018908:	0801e020 	.word	0x0801e020

0801890c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b086      	sub	sp, #24
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
 8018914:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	60bb      	str	r3, [r7, #8]
 801891a:	2304      	movs	r3, #4
 801891c:	60fb      	str	r3, [r7, #12]
 801891e:	2300      	movs	r3, #0
 8018920:	613b      	str	r3, [r7, #16]
 8018922:	2300      	movs	r3, #0
 8018924:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018926:	f107 0308 	add.w	r3, r7, #8
 801892a:	2100      	movs	r1, #0
 801892c:	4618      	mov	r0, r3
 801892e:	f7ec fee6 	bl	80056fe <osMessageCreate>
 8018932:	4602      	mov	r2, r0
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d102      	bne.n	8018946 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018940:	f04f 33ff 	mov.w	r3, #4294967295
 8018944:	e000      	b.n	8018948 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018946:	2300      	movs	r3, #0
}
 8018948:	4618      	mov	r0, r3
 801894a:	3718      	adds	r7, #24
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}

08018950 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b082      	sub	sp, #8
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	4618      	mov	r0, r3
 801895e:	f7ec ffab 	bl	80058b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	4618      	mov	r0, r3
 8018968:	f7ec ffbc 	bl	80058e4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801896c:	bf00      	nop
 801896e:	3708      	adds	r7, #8
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}

08018974 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b084      	sub	sp, #16
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
 801897c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	6839      	ldr	r1, [r7, #0]
 8018984:	2200      	movs	r2, #0
 8018986:	4618      	mov	r0, r3
 8018988:	f7ec fee2 	bl	8005750 <osMessagePut>
 801898c:	4603      	mov	r3, r0
 801898e:	2b00      	cmp	r3, #0
 8018990:	d102      	bne.n	8018998 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018992:	2300      	movs	r3, #0
 8018994:	73fb      	strb	r3, [r7, #15]
 8018996:	e001      	b.n	801899c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018998:	23ff      	movs	r3, #255	; 0xff
 801899a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801899c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3710      	adds	r7, #16
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b08c      	sub	sp, #48	; 0x30
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	61f8      	str	r0, [r7, #28]
 80189b0:	61b9      	str	r1, [r7, #24]
 80189b2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80189b4:	f7ec fcce 	bl	8005354 <osKernelSysTick>
 80189b8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d017      	beq.n	80189f0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80189c0:	69fb      	ldr	r3, [r7, #28]
 80189c2:	6819      	ldr	r1, [r3, #0]
 80189c4:	f107 0320 	add.w	r3, r7, #32
 80189c8:	697a      	ldr	r2, [r7, #20]
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7ec ff00 	bl	80057d0 <osMessageGet>

    if(event.status == osEventMessage)
 80189d0:	6a3b      	ldr	r3, [r7, #32]
 80189d2:	2b10      	cmp	r3, #16
 80189d4:	d109      	bne.n	80189ea <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80189d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d8:	461a      	mov	r2, r3
 80189da:	69bb      	ldr	r3, [r7, #24]
 80189dc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80189de:	f7ec fcb9 	bl	8005354 <osKernelSysTick>
 80189e2:	4602      	mov	r2, r0
 80189e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e6:	1ad3      	subs	r3, r2, r3
 80189e8:	e019      	b.n	8018a1e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80189ea:	f04f 33ff 	mov.w	r3, #4294967295
 80189ee:	e016      	b.n	8018a1e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80189f0:	69fb      	ldr	r3, [r7, #28]
 80189f2:	6819      	ldr	r1, [r3, #0]
 80189f4:	463b      	mov	r3, r7
 80189f6:	f04f 32ff 	mov.w	r2, #4294967295
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7ec fee8 	bl	80057d0 <osMessageGet>
 8018a00:	f107 0320 	add.w	r3, r7, #32
 8018a04:	463a      	mov	r2, r7
 8018a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8018a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0e:	461a      	mov	r2, r3
 8018a10:	69bb      	ldr	r3, [r7, #24]
 8018a12:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018a14:	f7ec fc9e 	bl	8005354 <osKernelSysTick>
 8018a18:	4602      	mov	r2, r0
 8018a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a1c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3730      	adds	r7, #48	; 0x30
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}

08018a26 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018a26:	b580      	push	{r7, lr}
 8018a28:	b086      	sub	sp, #24
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	6078      	str	r0, [r7, #4]
 8018a2e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6819      	ldr	r1, [r3, #0]
 8018a34:	f107 030c 	add.w	r3, r7, #12
 8018a38:	2200      	movs	r2, #0
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	f7ec fec8 	bl	80057d0 <osMessageGet>

  if(event.status == osEventMessage)
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2b10      	cmp	r3, #16
 8018a44:	d105      	bne.n	8018a52 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	461a      	mov	r2, r3
 8018a4a:	683b      	ldr	r3, [r7, #0]
 8018a4c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	e001      	b.n	8018a56 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018a52:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3718      	adds	r7, #24
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}

08018a5e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018a5e:	b480      	push	{r7}
 8018a60:	b083      	sub	sp, #12
 8018a62:	af00      	add	r7, sp, #0
 8018a64:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d101      	bne.n	8018a72 <sys_mbox_valid+0x14>
    return 0;
 8018a6e:	2300      	movs	r3, #0
 8018a70:	e000      	b.n	8018a74 <sys_mbox_valid+0x16>
  else
    return 1;
 8018a72:	2301      	movs	r3, #1
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	370c      	adds	r7, #12
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7e:	4770      	bx	lr

08018a80 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b083      	sub	sp, #12
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	601a      	str	r2, [r3, #0]
}
 8018a8e:	bf00      	nop
 8018a90:	370c      	adds	r7, #12
 8018a92:	46bd      	mov	sp, r7
 8018a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a98:	4770      	bx	lr

08018a9a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018a9a:	b580      	push	{r7, lr}
 8018a9c:	b084      	sub	sp, #16
 8018a9e:	af00      	add	r7, sp, #0
 8018aa0:	6078      	str	r0, [r7, #4]
 8018aa2:	460b      	mov	r3, r1
 8018aa4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	60bb      	str	r3, [r7, #8]
 8018aaa:	2300      	movs	r3, #0
 8018aac:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018aae:	f107 0308 	add.w	r3, r7, #8
 8018ab2:	2101      	movs	r1, #1
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7ec fd59 	bl	800556c <osSemaphoreCreate>
 8018aba:	4602      	mov	r2, r0
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d102      	bne.n	8018ace <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8018acc:	e009      	b.n	8018ae2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018ace:	78fb      	ldrb	r3, [r7, #3]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d105      	bne.n	8018ae0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	2100      	movs	r1, #0
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7ec fd78 	bl	80055d0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018ae0:	2300      	movs	r3, #0
}
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	3710      	adds	r7, #16
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}

08018aea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018aea:	b580      	push	{r7, lr}
 8018aec:	b084      	sub	sp, #16
 8018aee:	af00      	add	r7, sp, #0
 8018af0:	6078      	str	r0, [r7, #4]
 8018af2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018af4:	f7ec fc2e 	bl	8005354 <osKernelSysTick>
 8018af8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d011      	beq.n	8018b24 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	6839      	ldr	r1, [r7, #0]
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7ec fd62 	bl	80055d0 <osSemaphoreWait>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d105      	bne.n	8018b1e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018b12:	f7ec fc1f 	bl	8005354 <osKernelSysTick>
 8018b16:	4602      	mov	r2, r0
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	1ad3      	subs	r3, r2, r3
 8018b1c:	e012      	b.n	8018b44 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b22:	e00f      	b.n	8018b44 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018b24:	bf00      	nop
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f7ec fd4e 	bl	80055d0 <osSemaphoreWait>
 8018b34:	4603      	mov	r3, r0
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d1f5      	bne.n	8018b26 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018b3a:	f7ec fc0b 	bl	8005354 <osKernelSysTick>
 8018b3e:	4602      	mov	r2, r0
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	3710      	adds	r7, #16
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}

08018b4c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7ec fd87 	bl	800566c <osSemaphoreRelease>
}
 8018b5e:	bf00      	nop
 8018b60:	3708      	adds	r7, #8
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}

08018b66 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018b66:	b580      	push	{r7, lr}
 8018b68:	b082      	sub	sp, #8
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7ec fdb0 	bl	80056d8 <osSemaphoreDelete>
}
 8018b78:	bf00      	nop
 8018b7a:	3708      	adds	r7, #8
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018b80:	b480      	push	{r7}
 8018b82:	b083      	sub	sp, #12
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d101      	bne.n	8018b94 <sys_sem_valid+0x14>
    return 0;
 8018b90:	2300      	movs	r3, #0
 8018b92:	e000      	b.n	8018b96 <sys_sem_valid+0x16>
  else
    return 1;
 8018b94:	2301      	movs	r3, #1
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	370c      	adds	r7, #12
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba0:	4770      	bx	lr

08018ba2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018ba2:	b480      	push	{r7}
 8018ba4:	b083      	sub	sp, #12
 8018ba6:	af00      	add	r7, sp, #0
 8018ba8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	2200      	movs	r2, #0
 8018bae:	601a      	str	r2, [r3, #0]
}
 8018bb0:	bf00      	nop
 8018bb2:	370c      	adds	r7, #12
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bba:	4770      	bx	lr

08018bbc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018bc0:	4803      	ldr	r0, [pc, #12]	; (8018bd0 <sys_init+0x14>)
 8018bc2:	f7ec fc37 	bl	8005434 <osMutexCreate>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	4a02      	ldr	r2, [pc, #8]	; (8018bd4 <sys_init+0x18>)
 8018bca:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018bcc:	bf00      	nop
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	080282e0 	.word	0x080282e0
 8018bd4:	2001101c 	.word	0x2001101c

08018bd8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018be0:	2300      	movs	r3, #0
 8018be2:	60bb      	str	r3, [r7, #8]
 8018be4:	2300      	movs	r3, #0
 8018be6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018be8:	f107 0308 	add.w	r3, r7, #8
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7ec fc21 	bl	8005434 <osMutexCreate>
 8018bf2:	4602      	mov	r2, r0
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d102      	bne.n	8018c06 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c00:	f04f 33ff 	mov.w	r3, #4294967295
 8018c04:	e000      	b.n	8018c08 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018c06:	2300      	movs	r3, #0
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	3710      	adds	r7, #16
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bd80      	pop	{r7, pc}

08018c10 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b082      	sub	sp, #8
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8018c20:	4618      	mov	r0, r3
 8018c22:	f7ec fc1f 	bl	8005464 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018c26:	bf00      	nop
 8018c28:	3708      	adds	r7, #8
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}

08018c2e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018c2e:	b580      	push	{r7, lr}
 8018c30:	b082      	sub	sp, #8
 8018c32:	af00      	add	r7, sp, #0
 8018c34:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	f7ec fc60 	bl	8005500 <osMutexRelease>
}
 8018c40:	bf00      	nop
 8018c42:	3708      	adds	r7, #8
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b08c      	sub	sp, #48	; 0x30
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	60f8      	str	r0, [r7, #12]
 8018c50:	60b9      	str	r1, [r7, #8]
 8018c52:	607a      	str	r2, [r7, #4]
 8018c54:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018c56:	f107 0314 	add.w	r3, r7, #20
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	601a      	str	r2, [r3, #0]
 8018c5e:	605a      	str	r2, [r3, #4]
 8018c60:	609a      	str	r2, [r3, #8]
 8018c62:	60da      	str	r2, [r3, #12]
 8018c64:	611a      	str	r2, [r3, #16]
 8018c66:	615a      	str	r2, [r3, #20]
 8018c68:	619a      	str	r2, [r3, #24]
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	617b      	str	r3, [r7, #20]
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	61bb      	str	r3, [r7, #24]
 8018c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c74:	b21b      	sxth	r3, r3
 8018c76:	83bb      	strh	r3, [r7, #28]
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018c7c:	f107 0314 	add.w	r3, r7, #20
 8018c80:	6879      	ldr	r1, [r7, #4]
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7ec fb76 	bl	8005374 <osThreadCreate>
 8018c88:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	3730      	adds	r7, #48	; 0x30
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bd80      	pop	{r7, pc}
	...

08018c94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018c98:	4b04      	ldr	r3, [pc, #16]	; (8018cac <sys_arch_protect+0x18>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ec fbdf 	bl	8005464 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018ca6:	2301      	movs	r3, #1
}
 8018ca8:	4618      	mov	r0, r3
 8018caa:	bd80      	pop	{r7, pc}
 8018cac:	2001101c 	.word	0x2001101c

08018cb0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b082      	sub	sp, #8
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018cb8:	4b04      	ldr	r3, [pc, #16]	; (8018ccc <sys_arch_unprotect+0x1c>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7ec fc1f 	bl	8005500 <osMutexRelease>
}
 8018cc2:	bf00      	nop
 8018cc4:	3708      	adds	r7, #8
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}
 8018cca:	bf00      	nop
 8018ccc:	2001101c 	.word	0x2001101c

08018cd0 <std>:
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	b510      	push	{r4, lr}
 8018cd4:	4604      	mov	r4, r0
 8018cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8018cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018cde:	6083      	str	r3, [r0, #8]
 8018ce0:	8181      	strh	r1, [r0, #12]
 8018ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8018ce4:	81c2      	strh	r2, [r0, #14]
 8018ce6:	6183      	str	r3, [r0, #24]
 8018ce8:	4619      	mov	r1, r3
 8018cea:	2208      	movs	r2, #8
 8018cec:	305c      	adds	r0, #92	; 0x5c
 8018cee:	f000 f944 	bl	8018f7a <memset>
 8018cf2:	4b05      	ldr	r3, [pc, #20]	; (8018d08 <std+0x38>)
 8018cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8018cf6:	4b05      	ldr	r3, [pc, #20]	; (8018d0c <std+0x3c>)
 8018cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8018cfa:	4b05      	ldr	r3, [pc, #20]	; (8018d10 <std+0x40>)
 8018cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018cfe:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <std+0x44>)
 8018d00:	6224      	str	r4, [r4, #32]
 8018d02:	6323      	str	r3, [r4, #48]	; 0x30
 8018d04:	bd10      	pop	{r4, pc}
 8018d06:	bf00      	nop
 8018d08:	080192f1 	.word	0x080192f1
 8018d0c:	08019313 	.word	0x08019313
 8018d10:	0801934b 	.word	0x0801934b
 8018d14:	0801936f 	.word	0x0801936f

08018d18 <_cleanup_r>:
 8018d18:	4901      	ldr	r1, [pc, #4]	; (8018d20 <_cleanup_r+0x8>)
 8018d1a:	f000 b8af 	b.w	8018e7c <_fwalk_reent>
 8018d1e:	bf00      	nop
 8018d20:	080195d1 	.word	0x080195d1

08018d24 <__sfmoreglue>:
 8018d24:	b570      	push	{r4, r5, r6, lr}
 8018d26:	2268      	movs	r2, #104	; 0x68
 8018d28:	1e4d      	subs	r5, r1, #1
 8018d2a:	4355      	muls	r5, r2
 8018d2c:	460e      	mov	r6, r1
 8018d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018d32:	f000 f94b 	bl	8018fcc <_malloc_r>
 8018d36:	4604      	mov	r4, r0
 8018d38:	b140      	cbz	r0, 8018d4c <__sfmoreglue+0x28>
 8018d3a:	2100      	movs	r1, #0
 8018d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8018d40:	300c      	adds	r0, #12
 8018d42:	60a0      	str	r0, [r4, #8]
 8018d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018d48:	f000 f917 	bl	8018f7a <memset>
 8018d4c:	4620      	mov	r0, r4
 8018d4e:	bd70      	pop	{r4, r5, r6, pc}

08018d50 <__sfp_lock_acquire>:
 8018d50:	4801      	ldr	r0, [pc, #4]	; (8018d58 <__sfp_lock_acquire+0x8>)
 8018d52:	f000 b8d8 	b.w	8018f06 <__retarget_lock_acquire_recursive>
 8018d56:	bf00      	nop
 8018d58:	20011021 	.word	0x20011021

08018d5c <__sfp_lock_release>:
 8018d5c:	4801      	ldr	r0, [pc, #4]	; (8018d64 <__sfp_lock_release+0x8>)
 8018d5e:	f000 b8d3 	b.w	8018f08 <__retarget_lock_release_recursive>
 8018d62:	bf00      	nop
 8018d64:	20011021 	.word	0x20011021

08018d68 <__sinit_lock_acquire>:
 8018d68:	4801      	ldr	r0, [pc, #4]	; (8018d70 <__sinit_lock_acquire+0x8>)
 8018d6a:	f000 b8cc 	b.w	8018f06 <__retarget_lock_acquire_recursive>
 8018d6e:	bf00      	nop
 8018d70:	20011022 	.word	0x20011022

08018d74 <__sinit_lock_release>:
 8018d74:	4801      	ldr	r0, [pc, #4]	; (8018d7c <__sinit_lock_release+0x8>)
 8018d76:	f000 b8c7 	b.w	8018f08 <__retarget_lock_release_recursive>
 8018d7a:	bf00      	nop
 8018d7c:	20011022 	.word	0x20011022

08018d80 <__sinit>:
 8018d80:	b510      	push	{r4, lr}
 8018d82:	4604      	mov	r4, r0
 8018d84:	f7ff fff0 	bl	8018d68 <__sinit_lock_acquire>
 8018d88:	69a3      	ldr	r3, [r4, #24]
 8018d8a:	b11b      	cbz	r3, 8018d94 <__sinit+0x14>
 8018d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d90:	f7ff bff0 	b.w	8018d74 <__sinit_lock_release>
 8018d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018d98:	6523      	str	r3, [r4, #80]	; 0x50
 8018d9a:	4b13      	ldr	r3, [pc, #76]	; (8018de8 <__sinit+0x68>)
 8018d9c:	4a13      	ldr	r2, [pc, #76]	; (8018dec <__sinit+0x6c>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8018da2:	42a3      	cmp	r3, r4
 8018da4:	bf04      	itt	eq
 8018da6:	2301      	moveq	r3, #1
 8018da8:	61a3      	streq	r3, [r4, #24]
 8018daa:	4620      	mov	r0, r4
 8018dac:	f000 f820 	bl	8018df0 <__sfp>
 8018db0:	6060      	str	r0, [r4, #4]
 8018db2:	4620      	mov	r0, r4
 8018db4:	f000 f81c 	bl	8018df0 <__sfp>
 8018db8:	60a0      	str	r0, [r4, #8]
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f000 f818 	bl	8018df0 <__sfp>
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	60e0      	str	r0, [r4, #12]
 8018dc4:	2104      	movs	r1, #4
 8018dc6:	6860      	ldr	r0, [r4, #4]
 8018dc8:	f7ff ff82 	bl	8018cd0 <std>
 8018dcc:	68a0      	ldr	r0, [r4, #8]
 8018dce:	2201      	movs	r2, #1
 8018dd0:	2109      	movs	r1, #9
 8018dd2:	f7ff ff7d 	bl	8018cd0 <std>
 8018dd6:	68e0      	ldr	r0, [r4, #12]
 8018dd8:	2202      	movs	r2, #2
 8018dda:	2112      	movs	r1, #18
 8018ddc:	f7ff ff78 	bl	8018cd0 <std>
 8018de0:	2301      	movs	r3, #1
 8018de2:	61a3      	str	r3, [r4, #24]
 8018de4:	e7d2      	b.n	8018d8c <__sinit+0xc>
 8018de6:	bf00      	nop
 8018de8:	0802844c 	.word	0x0802844c
 8018dec:	08018d19 	.word	0x08018d19

08018df0 <__sfp>:
 8018df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018df2:	4607      	mov	r7, r0
 8018df4:	f7ff ffac 	bl	8018d50 <__sfp_lock_acquire>
 8018df8:	4b1e      	ldr	r3, [pc, #120]	; (8018e74 <__sfp+0x84>)
 8018dfa:	681e      	ldr	r6, [r3, #0]
 8018dfc:	69b3      	ldr	r3, [r6, #24]
 8018dfe:	b913      	cbnz	r3, 8018e06 <__sfp+0x16>
 8018e00:	4630      	mov	r0, r6
 8018e02:	f7ff ffbd 	bl	8018d80 <__sinit>
 8018e06:	3648      	adds	r6, #72	; 0x48
 8018e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018e0c:	3b01      	subs	r3, #1
 8018e0e:	d503      	bpl.n	8018e18 <__sfp+0x28>
 8018e10:	6833      	ldr	r3, [r6, #0]
 8018e12:	b30b      	cbz	r3, 8018e58 <__sfp+0x68>
 8018e14:	6836      	ldr	r6, [r6, #0]
 8018e16:	e7f7      	b.n	8018e08 <__sfp+0x18>
 8018e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018e1c:	b9d5      	cbnz	r5, 8018e54 <__sfp+0x64>
 8018e1e:	4b16      	ldr	r3, [pc, #88]	; (8018e78 <__sfp+0x88>)
 8018e20:	60e3      	str	r3, [r4, #12]
 8018e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018e26:	6665      	str	r5, [r4, #100]	; 0x64
 8018e28:	f000 f86c 	bl	8018f04 <__retarget_lock_init_recursive>
 8018e2c:	f7ff ff96 	bl	8018d5c <__sfp_lock_release>
 8018e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018e38:	6025      	str	r5, [r4, #0]
 8018e3a:	61a5      	str	r5, [r4, #24]
 8018e3c:	2208      	movs	r2, #8
 8018e3e:	4629      	mov	r1, r5
 8018e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018e44:	f000 f899 	bl	8018f7a <memset>
 8018e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018e50:	4620      	mov	r0, r4
 8018e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e54:	3468      	adds	r4, #104	; 0x68
 8018e56:	e7d9      	b.n	8018e0c <__sfp+0x1c>
 8018e58:	2104      	movs	r1, #4
 8018e5a:	4638      	mov	r0, r7
 8018e5c:	f7ff ff62 	bl	8018d24 <__sfmoreglue>
 8018e60:	4604      	mov	r4, r0
 8018e62:	6030      	str	r0, [r6, #0]
 8018e64:	2800      	cmp	r0, #0
 8018e66:	d1d5      	bne.n	8018e14 <__sfp+0x24>
 8018e68:	f7ff ff78 	bl	8018d5c <__sfp_lock_release>
 8018e6c:	230c      	movs	r3, #12
 8018e6e:	603b      	str	r3, [r7, #0]
 8018e70:	e7ee      	b.n	8018e50 <__sfp+0x60>
 8018e72:	bf00      	nop
 8018e74:	0802844c 	.word	0x0802844c
 8018e78:	ffff0001 	.word	0xffff0001

08018e7c <_fwalk_reent>:
 8018e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e80:	4606      	mov	r6, r0
 8018e82:	4688      	mov	r8, r1
 8018e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e88:	2700      	movs	r7, #0
 8018e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8018e92:	d505      	bpl.n	8018ea0 <_fwalk_reent+0x24>
 8018e94:	6824      	ldr	r4, [r4, #0]
 8018e96:	2c00      	cmp	r4, #0
 8018e98:	d1f7      	bne.n	8018e8a <_fwalk_reent+0xe>
 8018e9a:	4638      	mov	r0, r7
 8018e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ea0:	89ab      	ldrh	r3, [r5, #12]
 8018ea2:	2b01      	cmp	r3, #1
 8018ea4:	d907      	bls.n	8018eb6 <_fwalk_reent+0x3a>
 8018ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018eaa:	3301      	adds	r3, #1
 8018eac:	d003      	beq.n	8018eb6 <_fwalk_reent+0x3a>
 8018eae:	4629      	mov	r1, r5
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	47c0      	blx	r8
 8018eb4:	4307      	orrs	r7, r0
 8018eb6:	3568      	adds	r5, #104	; 0x68
 8018eb8:	e7e9      	b.n	8018e8e <_fwalk_reent+0x12>
	...

08018ebc <__libc_init_array>:
 8018ebc:	b570      	push	{r4, r5, r6, lr}
 8018ebe:	4d0d      	ldr	r5, [pc, #52]	; (8018ef4 <__libc_init_array+0x38>)
 8018ec0:	4c0d      	ldr	r4, [pc, #52]	; (8018ef8 <__libc_init_array+0x3c>)
 8018ec2:	1b64      	subs	r4, r4, r5
 8018ec4:	10a4      	asrs	r4, r4, #2
 8018ec6:	2600      	movs	r6, #0
 8018ec8:	42a6      	cmp	r6, r4
 8018eca:	d109      	bne.n	8018ee0 <__libc_init_array+0x24>
 8018ecc:	4d0b      	ldr	r5, [pc, #44]	; (8018efc <__libc_init_array+0x40>)
 8018ece:	4c0c      	ldr	r4, [pc, #48]	; (8018f00 <__libc_init_array+0x44>)
 8018ed0:	f001 fa64 	bl	801a39c <_init>
 8018ed4:	1b64      	subs	r4, r4, r5
 8018ed6:	10a4      	asrs	r4, r4, #2
 8018ed8:	2600      	movs	r6, #0
 8018eda:	42a6      	cmp	r6, r4
 8018edc:	d105      	bne.n	8018eea <__libc_init_array+0x2e>
 8018ede:	bd70      	pop	{r4, r5, r6, pc}
 8018ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ee4:	4798      	blx	r3
 8018ee6:	3601      	adds	r6, #1
 8018ee8:	e7ee      	b.n	8018ec8 <__libc_init_array+0xc>
 8018eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8018eee:	4798      	blx	r3
 8018ef0:	3601      	adds	r6, #1
 8018ef2:	e7f2      	b.n	8018eda <__libc_init_array+0x1e>
 8018ef4:	0802853c 	.word	0x0802853c
 8018ef8:	0802853c 	.word	0x0802853c
 8018efc:	0802853c 	.word	0x0802853c
 8018f00:	08028540 	.word	0x08028540

08018f04 <__retarget_lock_init_recursive>:
 8018f04:	4770      	bx	lr

08018f06 <__retarget_lock_acquire_recursive>:
 8018f06:	4770      	bx	lr

08018f08 <__retarget_lock_release_recursive>:
 8018f08:	4770      	bx	lr

08018f0a <memcmp>:
 8018f0a:	b510      	push	{r4, lr}
 8018f0c:	3901      	subs	r1, #1
 8018f0e:	4402      	add	r2, r0
 8018f10:	4290      	cmp	r0, r2
 8018f12:	d101      	bne.n	8018f18 <memcmp+0xe>
 8018f14:	2000      	movs	r0, #0
 8018f16:	e005      	b.n	8018f24 <memcmp+0x1a>
 8018f18:	7803      	ldrb	r3, [r0, #0]
 8018f1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018f1e:	42a3      	cmp	r3, r4
 8018f20:	d001      	beq.n	8018f26 <memcmp+0x1c>
 8018f22:	1b18      	subs	r0, r3, r4
 8018f24:	bd10      	pop	{r4, pc}
 8018f26:	3001      	adds	r0, #1
 8018f28:	e7f2      	b.n	8018f10 <memcmp+0x6>

08018f2a <memcpy>:
 8018f2a:	440a      	add	r2, r1
 8018f2c:	4291      	cmp	r1, r2
 8018f2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018f32:	d100      	bne.n	8018f36 <memcpy+0xc>
 8018f34:	4770      	bx	lr
 8018f36:	b510      	push	{r4, lr}
 8018f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f40:	4291      	cmp	r1, r2
 8018f42:	d1f9      	bne.n	8018f38 <memcpy+0xe>
 8018f44:	bd10      	pop	{r4, pc}

08018f46 <memmove>:
 8018f46:	4288      	cmp	r0, r1
 8018f48:	b510      	push	{r4, lr}
 8018f4a:	eb01 0402 	add.w	r4, r1, r2
 8018f4e:	d902      	bls.n	8018f56 <memmove+0x10>
 8018f50:	4284      	cmp	r4, r0
 8018f52:	4623      	mov	r3, r4
 8018f54:	d807      	bhi.n	8018f66 <memmove+0x20>
 8018f56:	1e43      	subs	r3, r0, #1
 8018f58:	42a1      	cmp	r1, r4
 8018f5a:	d008      	beq.n	8018f6e <memmove+0x28>
 8018f5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f64:	e7f8      	b.n	8018f58 <memmove+0x12>
 8018f66:	4402      	add	r2, r0
 8018f68:	4601      	mov	r1, r0
 8018f6a:	428a      	cmp	r2, r1
 8018f6c:	d100      	bne.n	8018f70 <memmove+0x2a>
 8018f6e:	bd10      	pop	{r4, pc}
 8018f70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f78:	e7f7      	b.n	8018f6a <memmove+0x24>

08018f7a <memset>:
 8018f7a:	4402      	add	r2, r0
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	4293      	cmp	r3, r2
 8018f80:	d100      	bne.n	8018f84 <memset+0xa>
 8018f82:	4770      	bx	lr
 8018f84:	f803 1b01 	strb.w	r1, [r3], #1
 8018f88:	e7f9      	b.n	8018f7e <memset+0x4>
	...

08018f8c <sbrk_aligned>:
 8018f8c:	b570      	push	{r4, r5, r6, lr}
 8018f8e:	4e0e      	ldr	r6, [pc, #56]	; (8018fc8 <sbrk_aligned+0x3c>)
 8018f90:	460c      	mov	r4, r1
 8018f92:	6831      	ldr	r1, [r6, #0]
 8018f94:	4605      	mov	r5, r0
 8018f96:	b911      	cbnz	r1, 8018f9e <sbrk_aligned+0x12>
 8018f98:	f000 f97a 	bl	8019290 <_sbrk_r>
 8018f9c:	6030      	str	r0, [r6, #0]
 8018f9e:	4621      	mov	r1, r4
 8018fa0:	4628      	mov	r0, r5
 8018fa2:	f000 f975 	bl	8019290 <_sbrk_r>
 8018fa6:	1c43      	adds	r3, r0, #1
 8018fa8:	d00a      	beq.n	8018fc0 <sbrk_aligned+0x34>
 8018faa:	1cc4      	adds	r4, r0, #3
 8018fac:	f024 0403 	bic.w	r4, r4, #3
 8018fb0:	42a0      	cmp	r0, r4
 8018fb2:	d007      	beq.n	8018fc4 <sbrk_aligned+0x38>
 8018fb4:	1a21      	subs	r1, r4, r0
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	f000 f96a 	bl	8019290 <_sbrk_r>
 8018fbc:	3001      	adds	r0, #1
 8018fbe:	d101      	bne.n	8018fc4 <sbrk_aligned+0x38>
 8018fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	bd70      	pop	{r4, r5, r6, pc}
 8018fc8:	20011028 	.word	0x20011028

08018fcc <_malloc_r>:
 8018fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fd0:	1ccd      	adds	r5, r1, #3
 8018fd2:	f025 0503 	bic.w	r5, r5, #3
 8018fd6:	3508      	adds	r5, #8
 8018fd8:	2d0c      	cmp	r5, #12
 8018fda:	bf38      	it	cc
 8018fdc:	250c      	movcc	r5, #12
 8018fde:	2d00      	cmp	r5, #0
 8018fe0:	4607      	mov	r7, r0
 8018fe2:	db01      	blt.n	8018fe8 <_malloc_r+0x1c>
 8018fe4:	42a9      	cmp	r1, r5
 8018fe6:	d905      	bls.n	8018ff4 <_malloc_r+0x28>
 8018fe8:	230c      	movs	r3, #12
 8018fea:	603b      	str	r3, [r7, #0]
 8018fec:	2600      	movs	r6, #0
 8018fee:	4630      	mov	r0, r6
 8018ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ff4:	4e2e      	ldr	r6, [pc, #184]	; (80190b0 <_malloc_r+0xe4>)
 8018ff6:	f000 fb53 	bl	80196a0 <__malloc_lock>
 8018ffa:	6833      	ldr	r3, [r6, #0]
 8018ffc:	461c      	mov	r4, r3
 8018ffe:	bb34      	cbnz	r4, 801904e <_malloc_r+0x82>
 8019000:	4629      	mov	r1, r5
 8019002:	4638      	mov	r0, r7
 8019004:	f7ff ffc2 	bl	8018f8c <sbrk_aligned>
 8019008:	1c43      	adds	r3, r0, #1
 801900a:	4604      	mov	r4, r0
 801900c:	d14d      	bne.n	80190aa <_malloc_r+0xde>
 801900e:	6834      	ldr	r4, [r6, #0]
 8019010:	4626      	mov	r6, r4
 8019012:	2e00      	cmp	r6, #0
 8019014:	d140      	bne.n	8019098 <_malloc_r+0xcc>
 8019016:	6823      	ldr	r3, [r4, #0]
 8019018:	4631      	mov	r1, r6
 801901a:	4638      	mov	r0, r7
 801901c:	eb04 0803 	add.w	r8, r4, r3
 8019020:	f000 f936 	bl	8019290 <_sbrk_r>
 8019024:	4580      	cmp	r8, r0
 8019026:	d13a      	bne.n	801909e <_malloc_r+0xd2>
 8019028:	6821      	ldr	r1, [r4, #0]
 801902a:	3503      	adds	r5, #3
 801902c:	1a6d      	subs	r5, r5, r1
 801902e:	f025 0503 	bic.w	r5, r5, #3
 8019032:	3508      	adds	r5, #8
 8019034:	2d0c      	cmp	r5, #12
 8019036:	bf38      	it	cc
 8019038:	250c      	movcc	r5, #12
 801903a:	4629      	mov	r1, r5
 801903c:	4638      	mov	r0, r7
 801903e:	f7ff ffa5 	bl	8018f8c <sbrk_aligned>
 8019042:	3001      	adds	r0, #1
 8019044:	d02b      	beq.n	801909e <_malloc_r+0xd2>
 8019046:	6823      	ldr	r3, [r4, #0]
 8019048:	442b      	add	r3, r5
 801904a:	6023      	str	r3, [r4, #0]
 801904c:	e00e      	b.n	801906c <_malloc_r+0xa0>
 801904e:	6822      	ldr	r2, [r4, #0]
 8019050:	1b52      	subs	r2, r2, r5
 8019052:	d41e      	bmi.n	8019092 <_malloc_r+0xc6>
 8019054:	2a0b      	cmp	r2, #11
 8019056:	d916      	bls.n	8019086 <_malloc_r+0xba>
 8019058:	1961      	adds	r1, r4, r5
 801905a:	42a3      	cmp	r3, r4
 801905c:	6025      	str	r5, [r4, #0]
 801905e:	bf18      	it	ne
 8019060:	6059      	strne	r1, [r3, #4]
 8019062:	6863      	ldr	r3, [r4, #4]
 8019064:	bf08      	it	eq
 8019066:	6031      	streq	r1, [r6, #0]
 8019068:	5162      	str	r2, [r4, r5]
 801906a:	604b      	str	r3, [r1, #4]
 801906c:	4638      	mov	r0, r7
 801906e:	f104 060b 	add.w	r6, r4, #11
 8019072:	f000 fb1b 	bl	80196ac <__malloc_unlock>
 8019076:	f026 0607 	bic.w	r6, r6, #7
 801907a:	1d23      	adds	r3, r4, #4
 801907c:	1af2      	subs	r2, r6, r3
 801907e:	d0b6      	beq.n	8018fee <_malloc_r+0x22>
 8019080:	1b9b      	subs	r3, r3, r6
 8019082:	50a3      	str	r3, [r4, r2]
 8019084:	e7b3      	b.n	8018fee <_malloc_r+0x22>
 8019086:	6862      	ldr	r2, [r4, #4]
 8019088:	42a3      	cmp	r3, r4
 801908a:	bf0c      	ite	eq
 801908c:	6032      	streq	r2, [r6, #0]
 801908e:	605a      	strne	r2, [r3, #4]
 8019090:	e7ec      	b.n	801906c <_malloc_r+0xa0>
 8019092:	4623      	mov	r3, r4
 8019094:	6864      	ldr	r4, [r4, #4]
 8019096:	e7b2      	b.n	8018ffe <_malloc_r+0x32>
 8019098:	4634      	mov	r4, r6
 801909a:	6876      	ldr	r6, [r6, #4]
 801909c:	e7b9      	b.n	8019012 <_malloc_r+0x46>
 801909e:	230c      	movs	r3, #12
 80190a0:	603b      	str	r3, [r7, #0]
 80190a2:	4638      	mov	r0, r7
 80190a4:	f000 fb02 	bl	80196ac <__malloc_unlock>
 80190a8:	e7a1      	b.n	8018fee <_malloc_r+0x22>
 80190aa:	6025      	str	r5, [r4, #0]
 80190ac:	e7de      	b.n	801906c <_malloc_r+0xa0>
 80190ae:	bf00      	nop
 80190b0:	20011024 	.word	0x20011024

080190b4 <iprintf>:
 80190b4:	b40f      	push	{r0, r1, r2, r3}
 80190b6:	4b0a      	ldr	r3, [pc, #40]	; (80190e0 <iprintf+0x2c>)
 80190b8:	b513      	push	{r0, r1, r4, lr}
 80190ba:	681c      	ldr	r4, [r3, #0]
 80190bc:	b124      	cbz	r4, 80190c8 <iprintf+0x14>
 80190be:	69a3      	ldr	r3, [r4, #24]
 80190c0:	b913      	cbnz	r3, 80190c8 <iprintf+0x14>
 80190c2:	4620      	mov	r0, r4
 80190c4:	f7ff fe5c 	bl	8018d80 <__sinit>
 80190c8:	ab05      	add	r3, sp, #20
 80190ca:	9a04      	ldr	r2, [sp, #16]
 80190cc:	68a1      	ldr	r1, [r4, #8]
 80190ce:	9301      	str	r3, [sp, #4]
 80190d0:	4620      	mov	r0, r4
 80190d2:	f000 fcc3 	bl	8019a5c <_vfiprintf_r>
 80190d6:	b002      	add	sp, #8
 80190d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190dc:	b004      	add	sp, #16
 80190de:	4770      	bx	lr
 80190e0:	20000034 	.word	0x20000034

080190e4 <srand>:
 80190e4:	b538      	push	{r3, r4, r5, lr}
 80190e6:	4b10      	ldr	r3, [pc, #64]	; (8019128 <srand+0x44>)
 80190e8:	681d      	ldr	r5, [r3, #0]
 80190ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80190ec:	4604      	mov	r4, r0
 80190ee:	b9b3      	cbnz	r3, 801911e <srand+0x3a>
 80190f0:	2018      	movs	r0, #24
 80190f2:	f000 facd 	bl	8019690 <malloc>
 80190f6:	4602      	mov	r2, r0
 80190f8:	63a8      	str	r0, [r5, #56]	; 0x38
 80190fa:	b920      	cbnz	r0, 8019106 <srand+0x22>
 80190fc:	4b0b      	ldr	r3, [pc, #44]	; (801912c <srand+0x48>)
 80190fe:	480c      	ldr	r0, [pc, #48]	; (8019130 <srand+0x4c>)
 8019100:	2142      	movs	r1, #66	; 0x42
 8019102:	f000 f9b1 	bl	8019468 <__assert_func>
 8019106:	490b      	ldr	r1, [pc, #44]	; (8019134 <srand+0x50>)
 8019108:	4b0b      	ldr	r3, [pc, #44]	; (8019138 <srand+0x54>)
 801910a:	e9c0 1300 	strd	r1, r3, [r0]
 801910e:	4b0b      	ldr	r3, [pc, #44]	; (801913c <srand+0x58>)
 8019110:	6083      	str	r3, [r0, #8]
 8019112:	230b      	movs	r3, #11
 8019114:	8183      	strh	r3, [r0, #12]
 8019116:	2100      	movs	r1, #0
 8019118:	2001      	movs	r0, #1
 801911a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801911e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019120:	2200      	movs	r2, #0
 8019122:	611c      	str	r4, [r3, #16]
 8019124:	615a      	str	r2, [r3, #20]
 8019126:	bd38      	pop	{r3, r4, r5, pc}
 8019128:	20000034 	.word	0x20000034
 801912c:	08028450 	.word	0x08028450
 8019130:	08028467 	.word	0x08028467
 8019134:	abcd330e 	.word	0xabcd330e
 8019138:	e66d1234 	.word	0xe66d1234
 801913c:	0005deec 	.word	0x0005deec

08019140 <rand>:
 8019140:	4b16      	ldr	r3, [pc, #88]	; (801919c <rand+0x5c>)
 8019142:	b510      	push	{r4, lr}
 8019144:	681c      	ldr	r4, [r3, #0]
 8019146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019148:	b9b3      	cbnz	r3, 8019178 <rand+0x38>
 801914a:	2018      	movs	r0, #24
 801914c:	f000 faa0 	bl	8019690 <malloc>
 8019150:	63a0      	str	r0, [r4, #56]	; 0x38
 8019152:	b928      	cbnz	r0, 8019160 <rand+0x20>
 8019154:	4602      	mov	r2, r0
 8019156:	4b12      	ldr	r3, [pc, #72]	; (80191a0 <rand+0x60>)
 8019158:	4812      	ldr	r0, [pc, #72]	; (80191a4 <rand+0x64>)
 801915a:	214e      	movs	r1, #78	; 0x4e
 801915c:	f000 f984 	bl	8019468 <__assert_func>
 8019160:	4a11      	ldr	r2, [pc, #68]	; (80191a8 <rand+0x68>)
 8019162:	4b12      	ldr	r3, [pc, #72]	; (80191ac <rand+0x6c>)
 8019164:	e9c0 2300 	strd	r2, r3, [r0]
 8019168:	4b11      	ldr	r3, [pc, #68]	; (80191b0 <rand+0x70>)
 801916a:	6083      	str	r3, [r0, #8]
 801916c:	230b      	movs	r3, #11
 801916e:	8183      	strh	r3, [r0, #12]
 8019170:	2201      	movs	r2, #1
 8019172:	2300      	movs	r3, #0
 8019174:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019178:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801917a:	4a0e      	ldr	r2, [pc, #56]	; (80191b4 <rand+0x74>)
 801917c:	6920      	ldr	r0, [r4, #16]
 801917e:	6963      	ldr	r3, [r4, #20]
 8019180:	490d      	ldr	r1, [pc, #52]	; (80191b8 <rand+0x78>)
 8019182:	4342      	muls	r2, r0
 8019184:	fb01 2203 	mla	r2, r1, r3, r2
 8019188:	fba0 0101 	umull	r0, r1, r0, r1
 801918c:	1c43      	adds	r3, r0, #1
 801918e:	eb42 0001 	adc.w	r0, r2, r1
 8019192:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8019196:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801919a:	bd10      	pop	{r4, pc}
 801919c:	20000034 	.word	0x20000034
 80191a0:	08028450 	.word	0x08028450
 80191a4:	08028467 	.word	0x08028467
 80191a8:	abcd330e 	.word	0xabcd330e
 80191ac:	e66d1234 	.word	0xe66d1234
 80191b0:	0005deec 	.word	0x0005deec
 80191b4:	5851f42d 	.word	0x5851f42d
 80191b8:	4c957f2d 	.word	0x4c957f2d

080191bc <cleanup_glue>:
 80191bc:	b538      	push	{r3, r4, r5, lr}
 80191be:	460c      	mov	r4, r1
 80191c0:	6809      	ldr	r1, [r1, #0]
 80191c2:	4605      	mov	r5, r0
 80191c4:	b109      	cbz	r1, 80191ca <cleanup_glue+0xe>
 80191c6:	f7ff fff9 	bl	80191bc <cleanup_glue>
 80191ca:	4621      	mov	r1, r4
 80191cc:	4628      	mov	r0, r5
 80191ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191d2:	f000 ba71 	b.w	80196b8 <_free_r>
	...

080191d8 <_reclaim_reent>:
 80191d8:	4b2c      	ldr	r3, [pc, #176]	; (801928c <_reclaim_reent+0xb4>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	4283      	cmp	r3, r0
 80191de:	b570      	push	{r4, r5, r6, lr}
 80191e0:	4604      	mov	r4, r0
 80191e2:	d051      	beq.n	8019288 <_reclaim_reent+0xb0>
 80191e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80191e6:	b143      	cbz	r3, 80191fa <_reclaim_reent+0x22>
 80191e8:	68db      	ldr	r3, [r3, #12]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d14a      	bne.n	8019284 <_reclaim_reent+0xac>
 80191ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191f0:	6819      	ldr	r1, [r3, #0]
 80191f2:	b111      	cbz	r1, 80191fa <_reclaim_reent+0x22>
 80191f4:	4620      	mov	r0, r4
 80191f6:	f000 fa5f 	bl	80196b8 <_free_r>
 80191fa:	6961      	ldr	r1, [r4, #20]
 80191fc:	b111      	cbz	r1, 8019204 <_reclaim_reent+0x2c>
 80191fe:	4620      	mov	r0, r4
 8019200:	f000 fa5a 	bl	80196b8 <_free_r>
 8019204:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019206:	b111      	cbz	r1, 801920e <_reclaim_reent+0x36>
 8019208:	4620      	mov	r0, r4
 801920a:	f000 fa55 	bl	80196b8 <_free_r>
 801920e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019210:	b111      	cbz	r1, 8019218 <_reclaim_reent+0x40>
 8019212:	4620      	mov	r0, r4
 8019214:	f000 fa50 	bl	80196b8 <_free_r>
 8019218:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801921a:	b111      	cbz	r1, 8019222 <_reclaim_reent+0x4a>
 801921c:	4620      	mov	r0, r4
 801921e:	f000 fa4b 	bl	80196b8 <_free_r>
 8019222:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019224:	b111      	cbz	r1, 801922c <_reclaim_reent+0x54>
 8019226:	4620      	mov	r0, r4
 8019228:	f000 fa46 	bl	80196b8 <_free_r>
 801922c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801922e:	b111      	cbz	r1, 8019236 <_reclaim_reent+0x5e>
 8019230:	4620      	mov	r0, r4
 8019232:	f000 fa41 	bl	80196b8 <_free_r>
 8019236:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019238:	b111      	cbz	r1, 8019240 <_reclaim_reent+0x68>
 801923a:	4620      	mov	r0, r4
 801923c:	f000 fa3c 	bl	80196b8 <_free_r>
 8019240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019242:	b111      	cbz	r1, 801924a <_reclaim_reent+0x72>
 8019244:	4620      	mov	r0, r4
 8019246:	f000 fa37 	bl	80196b8 <_free_r>
 801924a:	69a3      	ldr	r3, [r4, #24]
 801924c:	b1e3      	cbz	r3, 8019288 <_reclaim_reent+0xb0>
 801924e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019250:	4620      	mov	r0, r4
 8019252:	4798      	blx	r3
 8019254:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019256:	b1b9      	cbz	r1, 8019288 <_reclaim_reent+0xb0>
 8019258:	4620      	mov	r0, r4
 801925a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801925e:	f7ff bfad 	b.w	80191bc <cleanup_glue>
 8019262:	5949      	ldr	r1, [r1, r5]
 8019264:	b941      	cbnz	r1, 8019278 <_reclaim_reent+0xa0>
 8019266:	3504      	adds	r5, #4
 8019268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801926a:	2d80      	cmp	r5, #128	; 0x80
 801926c:	68d9      	ldr	r1, [r3, #12]
 801926e:	d1f8      	bne.n	8019262 <_reclaim_reent+0x8a>
 8019270:	4620      	mov	r0, r4
 8019272:	f000 fa21 	bl	80196b8 <_free_r>
 8019276:	e7ba      	b.n	80191ee <_reclaim_reent+0x16>
 8019278:	680e      	ldr	r6, [r1, #0]
 801927a:	4620      	mov	r0, r4
 801927c:	f000 fa1c 	bl	80196b8 <_free_r>
 8019280:	4631      	mov	r1, r6
 8019282:	e7ef      	b.n	8019264 <_reclaim_reent+0x8c>
 8019284:	2500      	movs	r5, #0
 8019286:	e7ef      	b.n	8019268 <_reclaim_reent+0x90>
 8019288:	bd70      	pop	{r4, r5, r6, pc}
 801928a:	bf00      	nop
 801928c:	20000034 	.word	0x20000034

08019290 <_sbrk_r>:
 8019290:	b538      	push	{r3, r4, r5, lr}
 8019292:	4d06      	ldr	r5, [pc, #24]	; (80192ac <_sbrk_r+0x1c>)
 8019294:	2300      	movs	r3, #0
 8019296:	4604      	mov	r4, r0
 8019298:	4608      	mov	r0, r1
 801929a:	602b      	str	r3, [r5, #0]
 801929c:	f7e7 fd4a 	bl	8000d34 <_sbrk>
 80192a0:	1c43      	adds	r3, r0, #1
 80192a2:	d102      	bne.n	80192aa <_sbrk_r+0x1a>
 80192a4:	682b      	ldr	r3, [r5, #0]
 80192a6:	b103      	cbz	r3, 80192aa <_sbrk_r+0x1a>
 80192a8:	6023      	str	r3, [r4, #0]
 80192aa:	bd38      	pop	{r3, r4, r5, pc}
 80192ac:	2001102c 	.word	0x2001102c

080192b0 <siprintf>:
 80192b0:	b40e      	push	{r1, r2, r3}
 80192b2:	b500      	push	{lr}
 80192b4:	b09c      	sub	sp, #112	; 0x70
 80192b6:	ab1d      	add	r3, sp, #116	; 0x74
 80192b8:	9002      	str	r0, [sp, #8]
 80192ba:	9006      	str	r0, [sp, #24]
 80192bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80192c0:	4809      	ldr	r0, [pc, #36]	; (80192e8 <siprintf+0x38>)
 80192c2:	9107      	str	r1, [sp, #28]
 80192c4:	9104      	str	r1, [sp, #16]
 80192c6:	4909      	ldr	r1, [pc, #36]	; (80192ec <siprintf+0x3c>)
 80192c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80192cc:	9105      	str	r1, [sp, #20]
 80192ce:	6800      	ldr	r0, [r0, #0]
 80192d0:	9301      	str	r3, [sp, #4]
 80192d2:	a902      	add	r1, sp, #8
 80192d4:	f000 fa98 	bl	8019808 <_svfiprintf_r>
 80192d8:	9b02      	ldr	r3, [sp, #8]
 80192da:	2200      	movs	r2, #0
 80192dc:	701a      	strb	r2, [r3, #0]
 80192de:	b01c      	add	sp, #112	; 0x70
 80192e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80192e4:	b003      	add	sp, #12
 80192e6:	4770      	bx	lr
 80192e8:	20000034 	.word	0x20000034
 80192ec:	ffff0208 	.word	0xffff0208

080192f0 <__sread>:
 80192f0:	b510      	push	{r4, lr}
 80192f2:	460c      	mov	r4, r1
 80192f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192f8:	f000 fe74 	bl	8019fe4 <_read_r>
 80192fc:	2800      	cmp	r0, #0
 80192fe:	bfab      	itete	ge
 8019300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019302:	89a3      	ldrhlt	r3, [r4, #12]
 8019304:	181b      	addge	r3, r3, r0
 8019306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801930a:	bfac      	ite	ge
 801930c:	6563      	strge	r3, [r4, #84]	; 0x54
 801930e:	81a3      	strhlt	r3, [r4, #12]
 8019310:	bd10      	pop	{r4, pc}

08019312 <__swrite>:
 8019312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019316:	461f      	mov	r7, r3
 8019318:	898b      	ldrh	r3, [r1, #12]
 801931a:	05db      	lsls	r3, r3, #23
 801931c:	4605      	mov	r5, r0
 801931e:	460c      	mov	r4, r1
 8019320:	4616      	mov	r6, r2
 8019322:	d505      	bpl.n	8019330 <__swrite+0x1e>
 8019324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019328:	2302      	movs	r3, #2
 801932a:	2200      	movs	r2, #0
 801932c:	f000 f99e 	bl	801966c <_lseek_r>
 8019330:	89a3      	ldrh	r3, [r4, #12]
 8019332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801933a:	81a3      	strh	r3, [r4, #12]
 801933c:	4632      	mov	r2, r6
 801933e:	463b      	mov	r3, r7
 8019340:	4628      	mov	r0, r5
 8019342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019346:	f000 b87d 	b.w	8019444 <_write_r>

0801934a <__sseek>:
 801934a:	b510      	push	{r4, lr}
 801934c:	460c      	mov	r4, r1
 801934e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019352:	f000 f98b 	bl	801966c <_lseek_r>
 8019356:	1c43      	adds	r3, r0, #1
 8019358:	89a3      	ldrh	r3, [r4, #12]
 801935a:	bf15      	itete	ne
 801935c:	6560      	strne	r0, [r4, #84]	; 0x54
 801935e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019366:	81a3      	strheq	r3, [r4, #12]
 8019368:	bf18      	it	ne
 801936a:	81a3      	strhne	r3, [r4, #12]
 801936c:	bd10      	pop	{r4, pc}

0801936e <__sclose>:
 801936e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019372:	f000 b897 	b.w	80194a4 <_close_r>
	...

08019378 <strcasecmp>:
 8019378:	b530      	push	{r4, r5, lr}
 801937a:	4d0b      	ldr	r5, [pc, #44]	; (80193a8 <strcasecmp+0x30>)
 801937c:	4604      	mov	r4, r0
 801937e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019382:	5d5a      	ldrb	r2, [r3, r5]
 8019384:	f002 0203 	and.w	r2, r2, #3
 8019388:	2a01      	cmp	r2, #1
 801938a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801938e:	5ca8      	ldrb	r0, [r5, r2]
 8019390:	f000 0003 	and.w	r0, r0, #3
 8019394:	bf08      	it	eq
 8019396:	3320      	addeq	r3, #32
 8019398:	2801      	cmp	r0, #1
 801939a:	bf08      	it	eq
 801939c:	3220      	addeq	r2, #32
 801939e:	1a98      	subs	r0, r3, r2
 80193a0:	d101      	bne.n	80193a6 <strcasecmp+0x2e>
 80193a2:	2a00      	cmp	r2, #0
 80193a4:	d1eb      	bne.n	801937e <strcasecmp+0x6>
 80193a6:	bd30      	pop	{r4, r5, pc}
 80193a8:	080282e9 	.word	0x080282e9

080193ac <strchr>:
 80193ac:	b2c9      	uxtb	r1, r1
 80193ae:	4603      	mov	r3, r0
 80193b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193b4:	b11a      	cbz	r2, 80193be <strchr+0x12>
 80193b6:	428a      	cmp	r2, r1
 80193b8:	d1f9      	bne.n	80193ae <strchr+0x2>
 80193ba:	4618      	mov	r0, r3
 80193bc:	4770      	bx	lr
 80193be:	2900      	cmp	r1, #0
 80193c0:	bf18      	it	ne
 80193c2:	2300      	movne	r3, #0
 80193c4:	e7f9      	b.n	80193ba <strchr+0xe>

080193c6 <strncmp>:
 80193c6:	b510      	push	{r4, lr}
 80193c8:	b17a      	cbz	r2, 80193ea <strncmp+0x24>
 80193ca:	4603      	mov	r3, r0
 80193cc:	3901      	subs	r1, #1
 80193ce:	1884      	adds	r4, r0, r2
 80193d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80193d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80193d8:	4290      	cmp	r0, r2
 80193da:	d101      	bne.n	80193e0 <strncmp+0x1a>
 80193dc:	42a3      	cmp	r3, r4
 80193de:	d101      	bne.n	80193e4 <strncmp+0x1e>
 80193e0:	1a80      	subs	r0, r0, r2
 80193e2:	bd10      	pop	{r4, pc}
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d1f3      	bne.n	80193d0 <strncmp+0xa>
 80193e8:	e7fa      	b.n	80193e0 <strncmp+0x1a>
 80193ea:	4610      	mov	r0, r2
 80193ec:	e7f9      	b.n	80193e2 <strncmp+0x1c>

080193ee <__strtok_r>:
 80193ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193f0:	b908      	cbnz	r0, 80193f6 <__strtok_r+0x8>
 80193f2:	6810      	ldr	r0, [r2, #0]
 80193f4:	b188      	cbz	r0, 801941a <__strtok_r+0x2c>
 80193f6:	4604      	mov	r4, r0
 80193f8:	4620      	mov	r0, r4
 80193fa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80193fe:	460f      	mov	r7, r1
 8019400:	f817 6b01 	ldrb.w	r6, [r7], #1
 8019404:	b91e      	cbnz	r6, 801940e <__strtok_r+0x20>
 8019406:	b965      	cbnz	r5, 8019422 <__strtok_r+0x34>
 8019408:	6015      	str	r5, [r2, #0]
 801940a:	4628      	mov	r0, r5
 801940c:	e005      	b.n	801941a <__strtok_r+0x2c>
 801940e:	42b5      	cmp	r5, r6
 8019410:	d1f6      	bne.n	8019400 <__strtok_r+0x12>
 8019412:	2b00      	cmp	r3, #0
 8019414:	d1f0      	bne.n	80193f8 <__strtok_r+0xa>
 8019416:	6014      	str	r4, [r2, #0]
 8019418:	7003      	strb	r3, [r0, #0]
 801941a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801941c:	461c      	mov	r4, r3
 801941e:	e00c      	b.n	801943a <__strtok_r+0x4c>
 8019420:	b915      	cbnz	r5, 8019428 <__strtok_r+0x3a>
 8019422:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019426:	460e      	mov	r6, r1
 8019428:	f816 5b01 	ldrb.w	r5, [r6], #1
 801942c:	42ab      	cmp	r3, r5
 801942e:	d1f7      	bne.n	8019420 <__strtok_r+0x32>
 8019430:	2b00      	cmp	r3, #0
 8019432:	d0f3      	beq.n	801941c <__strtok_r+0x2e>
 8019434:	2300      	movs	r3, #0
 8019436:	f804 3c01 	strb.w	r3, [r4, #-1]
 801943a:	6014      	str	r4, [r2, #0]
 801943c:	e7ed      	b.n	801941a <__strtok_r+0x2c>

0801943e <strtok_r>:
 801943e:	2301      	movs	r3, #1
 8019440:	f7ff bfd5 	b.w	80193ee <__strtok_r>

08019444 <_write_r>:
 8019444:	b538      	push	{r3, r4, r5, lr}
 8019446:	4d07      	ldr	r5, [pc, #28]	; (8019464 <_write_r+0x20>)
 8019448:	4604      	mov	r4, r0
 801944a:	4608      	mov	r0, r1
 801944c:	4611      	mov	r1, r2
 801944e:	2200      	movs	r2, #0
 8019450:	602a      	str	r2, [r5, #0]
 8019452:	461a      	mov	r2, r3
 8019454:	f7e7 fc1d 	bl	8000c92 <_write>
 8019458:	1c43      	adds	r3, r0, #1
 801945a:	d102      	bne.n	8019462 <_write_r+0x1e>
 801945c:	682b      	ldr	r3, [r5, #0]
 801945e:	b103      	cbz	r3, 8019462 <_write_r+0x1e>
 8019460:	6023      	str	r3, [r4, #0]
 8019462:	bd38      	pop	{r3, r4, r5, pc}
 8019464:	2001102c 	.word	0x2001102c

08019468 <__assert_func>:
 8019468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801946a:	4614      	mov	r4, r2
 801946c:	461a      	mov	r2, r3
 801946e:	4b09      	ldr	r3, [pc, #36]	; (8019494 <__assert_func+0x2c>)
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	4605      	mov	r5, r0
 8019474:	68d8      	ldr	r0, [r3, #12]
 8019476:	b14c      	cbz	r4, 801948c <__assert_func+0x24>
 8019478:	4b07      	ldr	r3, [pc, #28]	; (8019498 <__assert_func+0x30>)
 801947a:	9100      	str	r1, [sp, #0]
 801947c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019480:	4906      	ldr	r1, [pc, #24]	; (801949c <__assert_func+0x34>)
 8019482:	462b      	mov	r3, r5
 8019484:	f000 f8e0 	bl	8019648 <fiprintf>
 8019488:	f000 fe7e 	bl	801a188 <abort>
 801948c:	4b04      	ldr	r3, [pc, #16]	; (80194a0 <__assert_func+0x38>)
 801948e:	461c      	mov	r4, r3
 8019490:	e7f3      	b.n	801947a <__assert_func+0x12>
 8019492:	bf00      	nop
 8019494:	20000034 	.word	0x20000034
 8019498:	080284c2 	.word	0x080284c2
 801949c:	080284cf 	.word	0x080284cf
 80194a0:	080284fd 	.word	0x080284fd

080194a4 <_close_r>:
 80194a4:	b538      	push	{r3, r4, r5, lr}
 80194a6:	4d06      	ldr	r5, [pc, #24]	; (80194c0 <_close_r+0x1c>)
 80194a8:	2300      	movs	r3, #0
 80194aa:	4604      	mov	r4, r0
 80194ac:	4608      	mov	r0, r1
 80194ae:	602b      	str	r3, [r5, #0]
 80194b0:	f7e7 fc0b 	bl	8000cca <_close>
 80194b4:	1c43      	adds	r3, r0, #1
 80194b6:	d102      	bne.n	80194be <_close_r+0x1a>
 80194b8:	682b      	ldr	r3, [r5, #0]
 80194ba:	b103      	cbz	r3, 80194be <_close_r+0x1a>
 80194bc:	6023      	str	r3, [r4, #0]
 80194be:	bd38      	pop	{r3, r4, r5, pc}
 80194c0:	2001102c 	.word	0x2001102c

080194c4 <__sflush_r>:
 80194c4:	898a      	ldrh	r2, [r1, #12]
 80194c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194ca:	4605      	mov	r5, r0
 80194cc:	0710      	lsls	r0, r2, #28
 80194ce:	460c      	mov	r4, r1
 80194d0:	d458      	bmi.n	8019584 <__sflush_r+0xc0>
 80194d2:	684b      	ldr	r3, [r1, #4]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	dc05      	bgt.n	80194e4 <__sflush_r+0x20>
 80194d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80194da:	2b00      	cmp	r3, #0
 80194dc:	dc02      	bgt.n	80194e4 <__sflush_r+0x20>
 80194de:	2000      	movs	r0, #0
 80194e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80194e6:	2e00      	cmp	r6, #0
 80194e8:	d0f9      	beq.n	80194de <__sflush_r+0x1a>
 80194ea:	2300      	movs	r3, #0
 80194ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80194f0:	682f      	ldr	r7, [r5, #0]
 80194f2:	602b      	str	r3, [r5, #0]
 80194f4:	d032      	beq.n	801955c <__sflush_r+0x98>
 80194f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80194f8:	89a3      	ldrh	r3, [r4, #12]
 80194fa:	075a      	lsls	r2, r3, #29
 80194fc:	d505      	bpl.n	801950a <__sflush_r+0x46>
 80194fe:	6863      	ldr	r3, [r4, #4]
 8019500:	1ac0      	subs	r0, r0, r3
 8019502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019504:	b10b      	cbz	r3, 801950a <__sflush_r+0x46>
 8019506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019508:	1ac0      	subs	r0, r0, r3
 801950a:	2300      	movs	r3, #0
 801950c:	4602      	mov	r2, r0
 801950e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019510:	6a21      	ldr	r1, [r4, #32]
 8019512:	4628      	mov	r0, r5
 8019514:	47b0      	blx	r6
 8019516:	1c43      	adds	r3, r0, #1
 8019518:	89a3      	ldrh	r3, [r4, #12]
 801951a:	d106      	bne.n	801952a <__sflush_r+0x66>
 801951c:	6829      	ldr	r1, [r5, #0]
 801951e:	291d      	cmp	r1, #29
 8019520:	d82c      	bhi.n	801957c <__sflush_r+0xb8>
 8019522:	4a2a      	ldr	r2, [pc, #168]	; (80195cc <__sflush_r+0x108>)
 8019524:	40ca      	lsrs	r2, r1
 8019526:	07d6      	lsls	r6, r2, #31
 8019528:	d528      	bpl.n	801957c <__sflush_r+0xb8>
 801952a:	2200      	movs	r2, #0
 801952c:	6062      	str	r2, [r4, #4]
 801952e:	04d9      	lsls	r1, r3, #19
 8019530:	6922      	ldr	r2, [r4, #16]
 8019532:	6022      	str	r2, [r4, #0]
 8019534:	d504      	bpl.n	8019540 <__sflush_r+0x7c>
 8019536:	1c42      	adds	r2, r0, #1
 8019538:	d101      	bne.n	801953e <__sflush_r+0x7a>
 801953a:	682b      	ldr	r3, [r5, #0]
 801953c:	b903      	cbnz	r3, 8019540 <__sflush_r+0x7c>
 801953e:	6560      	str	r0, [r4, #84]	; 0x54
 8019540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019542:	602f      	str	r7, [r5, #0]
 8019544:	2900      	cmp	r1, #0
 8019546:	d0ca      	beq.n	80194de <__sflush_r+0x1a>
 8019548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801954c:	4299      	cmp	r1, r3
 801954e:	d002      	beq.n	8019556 <__sflush_r+0x92>
 8019550:	4628      	mov	r0, r5
 8019552:	f000 f8b1 	bl	80196b8 <_free_r>
 8019556:	2000      	movs	r0, #0
 8019558:	6360      	str	r0, [r4, #52]	; 0x34
 801955a:	e7c1      	b.n	80194e0 <__sflush_r+0x1c>
 801955c:	6a21      	ldr	r1, [r4, #32]
 801955e:	2301      	movs	r3, #1
 8019560:	4628      	mov	r0, r5
 8019562:	47b0      	blx	r6
 8019564:	1c41      	adds	r1, r0, #1
 8019566:	d1c7      	bne.n	80194f8 <__sflush_r+0x34>
 8019568:	682b      	ldr	r3, [r5, #0]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d0c4      	beq.n	80194f8 <__sflush_r+0x34>
 801956e:	2b1d      	cmp	r3, #29
 8019570:	d001      	beq.n	8019576 <__sflush_r+0xb2>
 8019572:	2b16      	cmp	r3, #22
 8019574:	d101      	bne.n	801957a <__sflush_r+0xb6>
 8019576:	602f      	str	r7, [r5, #0]
 8019578:	e7b1      	b.n	80194de <__sflush_r+0x1a>
 801957a:	89a3      	ldrh	r3, [r4, #12]
 801957c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019580:	81a3      	strh	r3, [r4, #12]
 8019582:	e7ad      	b.n	80194e0 <__sflush_r+0x1c>
 8019584:	690f      	ldr	r7, [r1, #16]
 8019586:	2f00      	cmp	r7, #0
 8019588:	d0a9      	beq.n	80194de <__sflush_r+0x1a>
 801958a:	0793      	lsls	r3, r2, #30
 801958c:	680e      	ldr	r6, [r1, #0]
 801958e:	bf08      	it	eq
 8019590:	694b      	ldreq	r3, [r1, #20]
 8019592:	600f      	str	r7, [r1, #0]
 8019594:	bf18      	it	ne
 8019596:	2300      	movne	r3, #0
 8019598:	eba6 0807 	sub.w	r8, r6, r7
 801959c:	608b      	str	r3, [r1, #8]
 801959e:	f1b8 0f00 	cmp.w	r8, #0
 80195a2:	dd9c      	ble.n	80194de <__sflush_r+0x1a>
 80195a4:	6a21      	ldr	r1, [r4, #32]
 80195a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80195a8:	4643      	mov	r3, r8
 80195aa:	463a      	mov	r2, r7
 80195ac:	4628      	mov	r0, r5
 80195ae:	47b0      	blx	r6
 80195b0:	2800      	cmp	r0, #0
 80195b2:	dc06      	bgt.n	80195c2 <__sflush_r+0xfe>
 80195b4:	89a3      	ldrh	r3, [r4, #12]
 80195b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195ba:	81a3      	strh	r3, [r4, #12]
 80195bc:	f04f 30ff 	mov.w	r0, #4294967295
 80195c0:	e78e      	b.n	80194e0 <__sflush_r+0x1c>
 80195c2:	4407      	add	r7, r0
 80195c4:	eba8 0800 	sub.w	r8, r8, r0
 80195c8:	e7e9      	b.n	801959e <__sflush_r+0xda>
 80195ca:	bf00      	nop
 80195cc:	20400001 	.word	0x20400001

080195d0 <_fflush_r>:
 80195d0:	b538      	push	{r3, r4, r5, lr}
 80195d2:	690b      	ldr	r3, [r1, #16]
 80195d4:	4605      	mov	r5, r0
 80195d6:	460c      	mov	r4, r1
 80195d8:	b913      	cbnz	r3, 80195e0 <_fflush_r+0x10>
 80195da:	2500      	movs	r5, #0
 80195dc:	4628      	mov	r0, r5
 80195de:	bd38      	pop	{r3, r4, r5, pc}
 80195e0:	b118      	cbz	r0, 80195ea <_fflush_r+0x1a>
 80195e2:	6983      	ldr	r3, [r0, #24]
 80195e4:	b90b      	cbnz	r3, 80195ea <_fflush_r+0x1a>
 80195e6:	f7ff fbcb 	bl	8018d80 <__sinit>
 80195ea:	4b14      	ldr	r3, [pc, #80]	; (801963c <_fflush_r+0x6c>)
 80195ec:	429c      	cmp	r4, r3
 80195ee:	d11b      	bne.n	8019628 <_fflush_r+0x58>
 80195f0:	686c      	ldr	r4, [r5, #4]
 80195f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d0ef      	beq.n	80195da <_fflush_r+0xa>
 80195fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80195fc:	07d0      	lsls	r0, r2, #31
 80195fe:	d404      	bmi.n	801960a <_fflush_r+0x3a>
 8019600:	0599      	lsls	r1, r3, #22
 8019602:	d402      	bmi.n	801960a <_fflush_r+0x3a>
 8019604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019606:	f7ff fc7e 	bl	8018f06 <__retarget_lock_acquire_recursive>
 801960a:	4628      	mov	r0, r5
 801960c:	4621      	mov	r1, r4
 801960e:	f7ff ff59 	bl	80194c4 <__sflush_r>
 8019612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019614:	07da      	lsls	r2, r3, #31
 8019616:	4605      	mov	r5, r0
 8019618:	d4e0      	bmi.n	80195dc <_fflush_r+0xc>
 801961a:	89a3      	ldrh	r3, [r4, #12]
 801961c:	059b      	lsls	r3, r3, #22
 801961e:	d4dd      	bmi.n	80195dc <_fflush_r+0xc>
 8019620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019622:	f7ff fc71 	bl	8018f08 <__retarget_lock_release_recursive>
 8019626:	e7d9      	b.n	80195dc <_fflush_r+0xc>
 8019628:	4b05      	ldr	r3, [pc, #20]	; (8019640 <_fflush_r+0x70>)
 801962a:	429c      	cmp	r4, r3
 801962c:	d101      	bne.n	8019632 <_fflush_r+0x62>
 801962e:	68ac      	ldr	r4, [r5, #8]
 8019630:	e7df      	b.n	80195f2 <_fflush_r+0x22>
 8019632:	4b04      	ldr	r3, [pc, #16]	; (8019644 <_fflush_r+0x74>)
 8019634:	429c      	cmp	r4, r3
 8019636:	bf08      	it	eq
 8019638:	68ec      	ldreq	r4, [r5, #12]
 801963a:	e7da      	b.n	80195f2 <_fflush_r+0x22>
 801963c:	0802840c 	.word	0x0802840c
 8019640:	0802842c 	.word	0x0802842c
 8019644:	080283ec 	.word	0x080283ec

08019648 <fiprintf>:
 8019648:	b40e      	push	{r1, r2, r3}
 801964a:	b503      	push	{r0, r1, lr}
 801964c:	4601      	mov	r1, r0
 801964e:	ab03      	add	r3, sp, #12
 8019650:	4805      	ldr	r0, [pc, #20]	; (8019668 <fiprintf+0x20>)
 8019652:	f853 2b04 	ldr.w	r2, [r3], #4
 8019656:	6800      	ldr	r0, [r0, #0]
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	f000 f9ff 	bl	8019a5c <_vfiprintf_r>
 801965e:	b002      	add	sp, #8
 8019660:	f85d eb04 	ldr.w	lr, [sp], #4
 8019664:	b003      	add	sp, #12
 8019666:	4770      	bx	lr
 8019668:	20000034 	.word	0x20000034

0801966c <_lseek_r>:
 801966c:	b538      	push	{r3, r4, r5, lr}
 801966e:	4d07      	ldr	r5, [pc, #28]	; (801968c <_lseek_r+0x20>)
 8019670:	4604      	mov	r4, r0
 8019672:	4608      	mov	r0, r1
 8019674:	4611      	mov	r1, r2
 8019676:	2200      	movs	r2, #0
 8019678:	602a      	str	r2, [r5, #0]
 801967a:	461a      	mov	r2, r3
 801967c:	f7e7 fb4c 	bl	8000d18 <_lseek>
 8019680:	1c43      	adds	r3, r0, #1
 8019682:	d102      	bne.n	801968a <_lseek_r+0x1e>
 8019684:	682b      	ldr	r3, [r5, #0]
 8019686:	b103      	cbz	r3, 801968a <_lseek_r+0x1e>
 8019688:	6023      	str	r3, [r4, #0]
 801968a:	bd38      	pop	{r3, r4, r5, pc}
 801968c:	2001102c 	.word	0x2001102c

08019690 <malloc>:
 8019690:	4b02      	ldr	r3, [pc, #8]	; (801969c <malloc+0xc>)
 8019692:	4601      	mov	r1, r0
 8019694:	6818      	ldr	r0, [r3, #0]
 8019696:	f7ff bc99 	b.w	8018fcc <_malloc_r>
 801969a:	bf00      	nop
 801969c:	20000034 	.word	0x20000034

080196a0 <__malloc_lock>:
 80196a0:	4801      	ldr	r0, [pc, #4]	; (80196a8 <__malloc_lock+0x8>)
 80196a2:	f7ff bc30 	b.w	8018f06 <__retarget_lock_acquire_recursive>
 80196a6:	bf00      	nop
 80196a8:	20011020 	.word	0x20011020

080196ac <__malloc_unlock>:
 80196ac:	4801      	ldr	r0, [pc, #4]	; (80196b4 <__malloc_unlock+0x8>)
 80196ae:	f7ff bc2b 	b.w	8018f08 <__retarget_lock_release_recursive>
 80196b2:	bf00      	nop
 80196b4:	20011020 	.word	0x20011020

080196b8 <_free_r>:
 80196b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196ba:	2900      	cmp	r1, #0
 80196bc:	d044      	beq.n	8019748 <_free_r+0x90>
 80196be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196c2:	9001      	str	r0, [sp, #4]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	f1a1 0404 	sub.w	r4, r1, #4
 80196ca:	bfb8      	it	lt
 80196cc:	18e4      	addlt	r4, r4, r3
 80196ce:	f7ff ffe7 	bl	80196a0 <__malloc_lock>
 80196d2:	4a1e      	ldr	r2, [pc, #120]	; (801974c <_free_r+0x94>)
 80196d4:	9801      	ldr	r0, [sp, #4]
 80196d6:	6813      	ldr	r3, [r2, #0]
 80196d8:	b933      	cbnz	r3, 80196e8 <_free_r+0x30>
 80196da:	6063      	str	r3, [r4, #4]
 80196dc:	6014      	str	r4, [r2, #0]
 80196de:	b003      	add	sp, #12
 80196e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196e4:	f7ff bfe2 	b.w	80196ac <__malloc_unlock>
 80196e8:	42a3      	cmp	r3, r4
 80196ea:	d908      	bls.n	80196fe <_free_r+0x46>
 80196ec:	6825      	ldr	r5, [r4, #0]
 80196ee:	1961      	adds	r1, r4, r5
 80196f0:	428b      	cmp	r3, r1
 80196f2:	bf01      	itttt	eq
 80196f4:	6819      	ldreq	r1, [r3, #0]
 80196f6:	685b      	ldreq	r3, [r3, #4]
 80196f8:	1949      	addeq	r1, r1, r5
 80196fa:	6021      	streq	r1, [r4, #0]
 80196fc:	e7ed      	b.n	80196da <_free_r+0x22>
 80196fe:	461a      	mov	r2, r3
 8019700:	685b      	ldr	r3, [r3, #4]
 8019702:	b10b      	cbz	r3, 8019708 <_free_r+0x50>
 8019704:	42a3      	cmp	r3, r4
 8019706:	d9fa      	bls.n	80196fe <_free_r+0x46>
 8019708:	6811      	ldr	r1, [r2, #0]
 801970a:	1855      	adds	r5, r2, r1
 801970c:	42a5      	cmp	r5, r4
 801970e:	d10b      	bne.n	8019728 <_free_r+0x70>
 8019710:	6824      	ldr	r4, [r4, #0]
 8019712:	4421      	add	r1, r4
 8019714:	1854      	adds	r4, r2, r1
 8019716:	42a3      	cmp	r3, r4
 8019718:	6011      	str	r1, [r2, #0]
 801971a:	d1e0      	bne.n	80196de <_free_r+0x26>
 801971c:	681c      	ldr	r4, [r3, #0]
 801971e:	685b      	ldr	r3, [r3, #4]
 8019720:	6053      	str	r3, [r2, #4]
 8019722:	4421      	add	r1, r4
 8019724:	6011      	str	r1, [r2, #0]
 8019726:	e7da      	b.n	80196de <_free_r+0x26>
 8019728:	d902      	bls.n	8019730 <_free_r+0x78>
 801972a:	230c      	movs	r3, #12
 801972c:	6003      	str	r3, [r0, #0]
 801972e:	e7d6      	b.n	80196de <_free_r+0x26>
 8019730:	6825      	ldr	r5, [r4, #0]
 8019732:	1961      	adds	r1, r4, r5
 8019734:	428b      	cmp	r3, r1
 8019736:	bf04      	itt	eq
 8019738:	6819      	ldreq	r1, [r3, #0]
 801973a:	685b      	ldreq	r3, [r3, #4]
 801973c:	6063      	str	r3, [r4, #4]
 801973e:	bf04      	itt	eq
 8019740:	1949      	addeq	r1, r1, r5
 8019742:	6021      	streq	r1, [r4, #0]
 8019744:	6054      	str	r4, [r2, #4]
 8019746:	e7ca      	b.n	80196de <_free_r+0x26>
 8019748:	b003      	add	sp, #12
 801974a:	bd30      	pop	{r4, r5, pc}
 801974c:	20011024 	.word	0x20011024

08019750 <__ssputs_r>:
 8019750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019754:	688e      	ldr	r6, [r1, #8]
 8019756:	429e      	cmp	r6, r3
 8019758:	4682      	mov	sl, r0
 801975a:	460c      	mov	r4, r1
 801975c:	4690      	mov	r8, r2
 801975e:	461f      	mov	r7, r3
 8019760:	d838      	bhi.n	80197d4 <__ssputs_r+0x84>
 8019762:	898a      	ldrh	r2, [r1, #12]
 8019764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019768:	d032      	beq.n	80197d0 <__ssputs_r+0x80>
 801976a:	6825      	ldr	r5, [r4, #0]
 801976c:	6909      	ldr	r1, [r1, #16]
 801976e:	eba5 0901 	sub.w	r9, r5, r1
 8019772:	6965      	ldr	r5, [r4, #20]
 8019774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801977c:	3301      	adds	r3, #1
 801977e:	444b      	add	r3, r9
 8019780:	106d      	asrs	r5, r5, #1
 8019782:	429d      	cmp	r5, r3
 8019784:	bf38      	it	cc
 8019786:	461d      	movcc	r5, r3
 8019788:	0553      	lsls	r3, r2, #21
 801978a:	d531      	bpl.n	80197f0 <__ssputs_r+0xa0>
 801978c:	4629      	mov	r1, r5
 801978e:	f7ff fc1d 	bl	8018fcc <_malloc_r>
 8019792:	4606      	mov	r6, r0
 8019794:	b950      	cbnz	r0, 80197ac <__ssputs_r+0x5c>
 8019796:	230c      	movs	r3, #12
 8019798:	f8ca 3000 	str.w	r3, [sl]
 801979c:	89a3      	ldrh	r3, [r4, #12]
 801979e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197a2:	81a3      	strh	r3, [r4, #12]
 80197a4:	f04f 30ff 	mov.w	r0, #4294967295
 80197a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197ac:	6921      	ldr	r1, [r4, #16]
 80197ae:	464a      	mov	r2, r9
 80197b0:	f7ff fbbb 	bl	8018f2a <memcpy>
 80197b4:	89a3      	ldrh	r3, [r4, #12]
 80197b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197be:	81a3      	strh	r3, [r4, #12]
 80197c0:	6126      	str	r6, [r4, #16]
 80197c2:	6165      	str	r5, [r4, #20]
 80197c4:	444e      	add	r6, r9
 80197c6:	eba5 0509 	sub.w	r5, r5, r9
 80197ca:	6026      	str	r6, [r4, #0]
 80197cc:	60a5      	str	r5, [r4, #8]
 80197ce:	463e      	mov	r6, r7
 80197d0:	42be      	cmp	r6, r7
 80197d2:	d900      	bls.n	80197d6 <__ssputs_r+0x86>
 80197d4:	463e      	mov	r6, r7
 80197d6:	6820      	ldr	r0, [r4, #0]
 80197d8:	4632      	mov	r2, r6
 80197da:	4641      	mov	r1, r8
 80197dc:	f7ff fbb3 	bl	8018f46 <memmove>
 80197e0:	68a3      	ldr	r3, [r4, #8]
 80197e2:	1b9b      	subs	r3, r3, r6
 80197e4:	60a3      	str	r3, [r4, #8]
 80197e6:	6823      	ldr	r3, [r4, #0]
 80197e8:	4433      	add	r3, r6
 80197ea:	6023      	str	r3, [r4, #0]
 80197ec:	2000      	movs	r0, #0
 80197ee:	e7db      	b.n	80197a8 <__ssputs_r+0x58>
 80197f0:	462a      	mov	r2, r5
 80197f2:	f000 fd35 	bl	801a260 <_realloc_r>
 80197f6:	4606      	mov	r6, r0
 80197f8:	2800      	cmp	r0, #0
 80197fa:	d1e1      	bne.n	80197c0 <__ssputs_r+0x70>
 80197fc:	6921      	ldr	r1, [r4, #16]
 80197fe:	4650      	mov	r0, sl
 8019800:	f7ff ff5a 	bl	80196b8 <_free_r>
 8019804:	e7c7      	b.n	8019796 <__ssputs_r+0x46>
	...

08019808 <_svfiprintf_r>:
 8019808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801980c:	4698      	mov	r8, r3
 801980e:	898b      	ldrh	r3, [r1, #12]
 8019810:	061b      	lsls	r3, r3, #24
 8019812:	b09d      	sub	sp, #116	; 0x74
 8019814:	4607      	mov	r7, r0
 8019816:	460d      	mov	r5, r1
 8019818:	4614      	mov	r4, r2
 801981a:	d50e      	bpl.n	801983a <_svfiprintf_r+0x32>
 801981c:	690b      	ldr	r3, [r1, #16]
 801981e:	b963      	cbnz	r3, 801983a <_svfiprintf_r+0x32>
 8019820:	2140      	movs	r1, #64	; 0x40
 8019822:	f7ff fbd3 	bl	8018fcc <_malloc_r>
 8019826:	6028      	str	r0, [r5, #0]
 8019828:	6128      	str	r0, [r5, #16]
 801982a:	b920      	cbnz	r0, 8019836 <_svfiprintf_r+0x2e>
 801982c:	230c      	movs	r3, #12
 801982e:	603b      	str	r3, [r7, #0]
 8019830:	f04f 30ff 	mov.w	r0, #4294967295
 8019834:	e0d1      	b.n	80199da <_svfiprintf_r+0x1d2>
 8019836:	2340      	movs	r3, #64	; 0x40
 8019838:	616b      	str	r3, [r5, #20]
 801983a:	2300      	movs	r3, #0
 801983c:	9309      	str	r3, [sp, #36]	; 0x24
 801983e:	2320      	movs	r3, #32
 8019840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019844:	f8cd 800c 	str.w	r8, [sp, #12]
 8019848:	2330      	movs	r3, #48	; 0x30
 801984a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80199f4 <_svfiprintf_r+0x1ec>
 801984e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019852:	f04f 0901 	mov.w	r9, #1
 8019856:	4623      	mov	r3, r4
 8019858:	469a      	mov	sl, r3
 801985a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801985e:	b10a      	cbz	r2, 8019864 <_svfiprintf_r+0x5c>
 8019860:	2a25      	cmp	r2, #37	; 0x25
 8019862:	d1f9      	bne.n	8019858 <_svfiprintf_r+0x50>
 8019864:	ebba 0b04 	subs.w	fp, sl, r4
 8019868:	d00b      	beq.n	8019882 <_svfiprintf_r+0x7a>
 801986a:	465b      	mov	r3, fp
 801986c:	4622      	mov	r2, r4
 801986e:	4629      	mov	r1, r5
 8019870:	4638      	mov	r0, r7
 8019872:	f7ff ff6d 	bl	8019750 <__ssputs_r>
 8019876:	3001      	adds	r0, #1
 8019878:	f000 80aa 	beq.w	80199d0 <_svfiprintf_r+0x1c8>
 801987c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801987e:	445a      	add	r2, fp
 8019880:	9209      	str	r2, [sp, #36]	; 0x24
 8019882:	f89a 3000 	ldrb.w	r3, [sl]
 8019886:	2b00      	cmp	r3, #0
 8019888:	f000 80a2 	beq.w	80199d0 <_svfiprintf_r+0x1c8>
 801988c:	2300      	movs	r3, #0
 801988e:	f04f 32ff 	mov.w	r2, #4294967295
 8019892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019896:	f10a 0a01 	add.w	sl, sl, #1
 801989a:	9304      	str	r3, [sp, #16]
 801989c:	9307      	str	r3, [sp, #28]
 801989e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198a2:	931a      	str	r3, [sp, #104]	; 0x68
 80198a4:	4654      	mov	r4, sl
 80198a6:	2205      	movs	r2, #5
 80198a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198ac:	4851      	ldr	r0, [pc, #324]	; (80199f4 <_svfiprintf_r+0x1ec>)
 80198ae:	f7e6 fcb7 	bl	8000220 <memchr>
 80198b2:	9a04      	ldr	r2, [sp, #16]
 80198b4:	b9d8      	cbnz	r0, 80198ee <_svfiprintf_r+0xe6>
 80198b6:	06d0      	lsls	r0, r2, #27
 80198b8:	bf44      	itt	mi
 80198ba:	2320      	movmi	r3, #32
 80198bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198c0:	0711      	lsls	r1, r2, #28
 80198c2:	bf44      	itt	mi
 80198c4:	232b      	movmi	r3, #43	; 0x2b
 80198c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198ca:	f89a 3000 	ldrb.w	r3, [sl]
 80198ce:	2b2a      	cmp	r3, #42	; 0x2a
 80198d0:	d015      	beq.n	80198fe <_svfiprintf_r+0xf6>
 80198d2:	9a07      	ldr	r2, [sp, #28]
 80198d4:	4654      	mov	r4, sl
 80198d6:	2000      	movs	r0, #0
 80198d8:	f04f 0c0a 	mov.w	ip, #10
 80198dc:	4621      	mov	r1, r4
 80198de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198e2:	3b30      	subs	r3, #48	; 0x30
 80198e4:	2b09      	cmp	r3, #9
 80198e6:	d94e      	bls.n	8019986 <_svfiprintf_r+0x17e>
 80198e8:	b1b0      	cbz	r0, 8019918 <_svfiprintf_r+0x110>
 80198ea:	9207      	str	r2, [sp, #28]
 80198ec:	e014      	b.n	8019918 <_svfiprintf_r+0x110>
 80198ee:	eba0 0308 	sub.w	r3, r0, r8
 80198f2:	fa09 f303 	lsl.w	r3, r9, r3
 80198f6:	4313      	orrs	r3, r2
 80198f8:	9304      	str	r3, [sp, #16]
 80198fa:	46a2      	mov	sl, r4
 80198fc:	e7d2      	b.n	80198a4 <_svfiprintf_r+0x9c>
 80198fe:	9b03      	ldr	r3, [sp, #12]
 8019900:	1d19      	adds	r1, r3, #4
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	9103      	str	r1, [sp, #12]
 8019906:	2b00      	cmp	r3, #0
 8019908:	bfbb      	ittet	lt
 801990a:	425b      	neglt	r3, r3
 801990c:	f042 0202 	orrlt.w	r2, r2, #2
 8019910:	9307      	strge	r3, [sp, #28]
 8019912:	9307      	strlt	r3, [sp, #28]
 8019914:	bfb8      	it	lt
 8019916:	9204      	strlt	r2, [sp, #16]
 8019918:	7823      	ldrb	r3, [r4, #0]
 801991a:	2b2e      	cmp	r3, #46	; 0x2e
 801991c:	d10c      	bne.n	8019938 <_svfiprintf_r+0x130>
 801991e:	7863      	ldrb	r3, [r4, #1]
 8019920:	2b2a      	cmp	r3, #42	; 0x2a
 8019922:	d135      	bne.n	8019990 <_svfiprintf_r+0x188>
 8019924:	9b03      	ldr	r3, [sp, #12]
 8019926:	1d1a      	adds	r2, r3, #4
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	9203      	str	r2, [sp, #12]
 801992c:	2b00      	cmp	r3, #0
 801992e:	bfb8      	it	lt
 8019930:	f04f 33ff 	movlt.w	r3, #4294967295
 8019934:	3402      	adds	r4, #2
 8019936:	9305      	str	r3, [sp, #20]
 8019938:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019a04 <_svfiprintf_r+0x1fc>
 801993c:	7821      	ldrb	r1, [r4, #0]
 801993e:	2203      	movs	r2, #3
 8019940:	4650      	mov	r0, sl
 8019942:	f7e6 fc6d 	bl	8000220 <memchr>
 8019946:	b140      	cbz	r0, 801995a <_svfiprintf_r+0x152>
 8019948:	2340      	movs	r3, #64	; 0x40
 801994a:	eba0 000a 	sub.w	r0, r0, sl
 801994e:	fa03 f000 	lsl.w	r0, r3, r0
 8019952:	9b04      	ldr	r3, [sp, #16]
 8019954:	4303      	orrs	r3, r0
 8019956:	3401      	adds	r4, #1
 8019958:	9304      	str	r3, [sp, #16]
 801995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801995e:	4826      	ldr	r0, [pc, #152]	; (80199f8 <_svfiprintf_r+0x1f0>)
 8019960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019964:	2206      	movs	r2, #6
 8019966:	f7e6 fc5b 	bl	8000220 <memchr>
 801996a:	2800      	cmp	r0, #0
 801996c:	d038      	beq.n	80199e0 <_svfiprintf_r+0x1d8>
 801996e:	4b23      	ldr	r3, [pc, #140]	; (80199fc <_svfiprintf_r+0x1f4>)
 8019970:	bb1b      	cbnz	r3, 80199ba <_svfiprintf_r+0x1b2>
 8019972:	9b03      	ldr	r3, [sp, #12]
 8019974:	3307      	adds	r3, #7
 8019976:	f023 0307 	bic.w	r3, r3, #7
 801997a:	3308      	adds	r3, #8
 801997c:	9303      	str	r3, [sp, #12]
 801997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019980:	4433      	add	r3, r6
 8019982:	9309      	str	r3, [sp, #36]	; 0x24
 8019984:	e767      	b.n	8019856 <_svfiprintf_r+0x4e>
 8019986:	fb0c 3202 	mla	r2, ip, r2, r3
 801998a:	460c      	mov	r4, r1
 801998c:	2001      	movs	r0, #1
 801998e:	e7a5      	b.n	80198dc <_svfiprintf_r+0xd4>
 8019990:	2300      	movs	r3, #0
 8019992:	3401      	adds	r4, #1
 8019994:	9305      	str	r3, [sp, #20]
 8019996:	4619      	mov	r1, r3
 8019998:	f04f 0c0a 	mov.w	ip, #10
 801999c:	4620      	mov	r0, r4
 801999e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199a2:	3a30      	subs	r2, #48	; 0x30
 80199a4:	2a09      	cmp	r2, #9
 80199a6:	d903      	bls.n	80199b0 <_svfiprintf_r+0x1a8>
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d0c5      	beq.n	8019938 <_svfiprintf_r+0x130>
 80199ac:	9105      	str	r1, [sp, #20]
 80199ae:	e7c3      	b.n	8019938 <_svfiprintf_r+0x130>
 80199b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80199b4:	4604      	mov	r4, r0
 80199b6:	2301      	movs	r3, #1
 80199b8:	e7f0      	b.n	801999c <_svfiprintf_r+0x194>
 80199ba:	ab03      	add	r3, sp, #12
 80199bc:	9300      	str	r3, [sp, #0]
 80199be:	462a      	mov	r2, r5
 80199c0:	4b0f      	ldr	r3, [pc, #60]	; (8019a00 <_svfiprintf_r+0x1f8>)
 80199c2:	a904      	add	r1, sp, #16
 80199c4:	4638      	mov	r0, r7
 80199c6:	f3af 8000 	nop.w
 80199ca:	1c42      	adds	r2, r0, #1
 80199cc:	4606      	mov	r6, r0
 80199ce:	d1d6      	bne.n	801997e <_svfiprintf_r+0x176>
 80199d0:	89ab      	ldrh	r3, [r5, #12]
 80199d2:	065b      	lsls	r3, r3, #25
 80199d4:	f53f af2c 	bmi.w	8019830 <_svfiprintf_r+0x28>
 80199d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199da:	b01d      	add	sp, #116	; 0x74
 80199dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e0:	ab03      	add	r3, sp, #12
 80199e2:	9300      	str	r3, [sp, #0]
 80199e4:	462a      	mov	r2, r5
 80199e6:	4b06      	ldr	r3, [pc, #24]	; (8019a00 <_svfiprintf_r+0x1f8>)
 80199e8:	a904      	add	r1, sp, #16
 80199ea:	4638      	mov	r0, r7
 80199ec:	f000 f9d4 	bl	8019d98 <_printf_i>
 80199f0:	e7eb      	b.n	80199ca <_svfiprintf_r+0x1c2>
 80199f2:	bf00      	nop
 80199f4:	080284fe 	.word	0x080284fe
 80199f8:	08028508 	.word	0x08028508
 80199fc:	00000000 	.word	0x00000000
 8019a00:	08019751 	.word	0x08019751
 8019a04:	08028504 	.word	0x08028504

08019a08 <__sfputc_r>:
 8019a08:	6893      	ldr	r3, [r2, #8]
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	b410      	push	{r4}
 8019a10:	6093      	str	r3, [r2, #8]
 8019a12:	da08      	bge.n	8019a26 <__sfputc_r+0x1e>
 8019a14:	6994      	ldr	r4, [r2, #24]
 8019a16:	42a3      	cmp	r3, r4
 8019a18:	db01      	blt.n	8019a1e <__sfputc_r+0x16>
 8019a1a:	290a      	cmp	r1, #10
 8019a1c:	d103      	bne.n	8019a26 <__sfputc_r+0x1e>
 8019a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a22:	f000 baf1 	b.w	801a008 <__swbuf_r>
 8019a26:	6813      	ldr	r3, [r2, #0]
 8019a28:	1c58      	adds	r0, r3, #1
 8019a2a:	6010      	str	r0, [r2, #0]
 8019a2c:	7019      	strb	r1, [r3, #0]
 8019a2e:	4608      	mov	r0, r1
 8019a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a34:	4770      	bx	lr

08019a36 <__sfputs_r>:
 8019a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a38:	4606      	mov	r6, r0
 8019a3a:	460f      	mov	r7, r1
 8019a3c:	4614      	mov	r4, r2
 8019a3e:	18d5      	adds	r5, r2, r3
 8019a40:	42ac      	cmp	r4, r5
 8019a42:	d101      	bne.n	8019a48 <__sfputs_r+0x12>
 8019a44:	2000      	movs	r0, #0
 8019a46:	e007      	b.n	8019a58 <__sfputs_r+0x22>
 8019a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a4c:	463a      	mov	r2, r7
 8019a4e:	4630      	mov	r0, r6
 8019a50:	f7ff ffda 	bl	8019a08 <__sfputc_r>
 8019a54:	1c43      	adds	r3, r0, #1
 8019a56:	d1f3      	bne.n	8019a40 <__sfputs_r+0xa>
 8019a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a5c <_vfiprintf_r>:
 8019a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a60:	460d      	mov	r5, r1
 8019a62:	b09d      	sub	sp, #116	; 0x74
 8019a64:	4614      	mov	r4, r2
 8019a66:	4698      	mov	r8, r3
 8019a68:	4606      	mov	r6, r0
 8019a6a:	b118      	cbz	r0, 8019a74 <_vfiprintf_r+0x18>
 8019a6c:	6983      	ldr	r3, [r0, #24]
 8019a6e:	b90b      	cbnz	r3, 8019a74 <_vfiprintf_r+0x18>
 8019a70:	f7ff f986 	bl	8018d80 <__sinit>
 8019a74:	4b89      	ldr	r3, [pc, #548]	; (8019c9c <_vfiprintf_r+0x240>)
 8019a76:	429d      	cmp	r5, r3
 8019a78:	d11b      	bne.n	8019ab2 <_vfiprintf_r+0x56>
 8019a7a:	6875      	ldr	r5, [r6, #4]
 8019a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a7e:	07d9      	lsls	r1, r3, #31
 8019a80:	d405      	bmi.n	8019a8e <_vfiprintf_r+0x32>
 8019a82:	89ab      	ldrh	r3, [r5, #12]
 8019a84:	059a      	lsls	r2, r3, #22
 8019a86:	d402      	bmi.n	8019a8e <_vfiprintf_r+0x32>
 8019a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a8a:	f7ff fa3c 	bl	8018f06 <__retarget_lock_acquire_recursive>
 8019a8e:	89ab      	ldrh	r3, [r5, #12]
 8019a90:	071b      	lsls	r3, r3, #28
 8019a92:	d501      	bpl.n	8019a98 <_vfiprintf_r+0x3c>
 8019a94:	692b      	ldr	r3, [r5, #16]
 8019a96:	b9eb      	cbnz	r3, 8019ad4 <_vfiprintf_r+0x78>
 8019a98:	4629      	mov	r1, r5
 8019a9a:	4630      	mov	r0, r6
 8019a9c:	f000 fb06 	bl	801a0ac <__swsetup_r>
 8019aa0:	b1c0      	cbz	r0, 8019ad4 <_vfiprintf_r+0x78>
 8019aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019aa4:	07dc      	lsls	r4, r3, #31
 8019aa6:	d50e      	bpl.n	8019ac6 <_vfiprintf_r+0x6a>
 8019aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8019aac:	b01d      	add	sp, #116	; 0x74
 8019aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ab2:	4b7b      	ldr	r3, [pc, #492]	; (8019ca0 <_vfiprintf_r+0x244>)
 8019ab4:	429d      	cmp	r5, r3
 8019ab6:	d101      	bne.n	8019abc <_vfiprintf_r+0x60>
 8019ab8:	68b5      	ldr	r5, [r6, #8]
 8019aba:	e7df      	b.n	8019a7c <_vfiprintf_r+0x20>
 8019abc:	4b79      	ldr	r3, [pc, #484]	; (8019ca4 <_vfiprintf_r+0x248>)
 8019abe:	429d      	cmp	r5, r3
 8019ac0:	bf08      	it	eq
 8019ac2:	68f5      	ldreq	r5, [r6, #12]
 8019ac4:	e7da      	b.n	8019a7c <_vfiprintf_r+0x20>
 8019ac6:	89ab      	ldrh	r3, [r5, #12]
 8019ac8:	0598      	lsls	r0, r3, #22
 8019aca:	d4ed      	bmi.n	8019aa8 <_vfiprintf_r+0x4c>
 8019acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ace:	f7ff fa1b 	bl	8018f08 <__retarget_lock_release_recursive>
 8019ad2:	e7e9      	b.n	8019aa8 <_vfiprintf_r+0x4c>
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ad8:	2320      	movs	r3, #32
 8019ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ae2:	2330      	movs	r3, #48	; 0x30
 8019ae4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019ca8 <_vfiprintf_r+0x24c>
 8019ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019aec:	f04f 0901 	mov.w	r9, #1
 8019af0:	4623      	mov	r3, r4
 8019af2:	469a      	mov	sl, r3
 8019af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019af8:	b10a      	cbz	r2, 8019afe <_vfiprintf_r+0xa2>
 8019afa:	2a25      	cmp	r2, #37	; 0x25
 8019afc:	d1f9      	bne.n	8019af2 <_vfiprintf_r+0x96>
 8019afe:	ebba 0b04 	subs.w	fp, sl, r4
 8019b02:	d00b      	beq.n	8019b1c <_vfiprintf_r+0xc0>
 8019b04:	465b      	mov	r3, fp
 8019b06:	4622      	mov	r2, r4
 8019b08:	4629      	mov	r1, r5
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	f7ff ff93 	bl	8019a36 <__sfputs_r>
 8019b10:	3001      	adds	r0, #1
 8019b12:	f000 80aa 	beq.w	8019c6a <_vfiprintf_r+0x20e>
 8019b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b18:	445a      	add	r2, fp
 8019b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8019b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	f000 80a2 	beq.w	8019c6a <_vfiprintf_r+0x20e>
 8019b26:	2300      	movs	r3, #0
 8019b28:	f04f 32ff 	mov.w	r2, #4294967295
 8019b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b30:	f10a 0a01 	add.w	sl, sl, #1
 8019b34:	9304      	str	r3, [sp, #16]
 8019b36:	9307      	str	r3, [sp, #28]
 8019b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8019b3e:	4654      	mov	r4, sl
 8019b40:	2205      	movs	r2, #5
 8019b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b46:	4858      	ldr	r0, [pc, #352]	; (8019ca8 <_vfiprintf_r+0x24c>)
 8019b48:	f7e6 fb6a 	bl	8000220 <memchr>
 8019b4c:	9a04      	ldr	r2, [sp, #16]
 8019b4e:	b9d8      	cbnz	r0, 8019b88 <_vfiprintf_r+0x12c>
 8019b50:	06d1      	lsls	r1, r2, #27
 8019b52:	bf44      	itt	mi
 8019b54:	2320      	movmi	r3, #32
 8019b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b5a:	0713      	lsls	r3, r2, #28
 8019b5c:	bf44      	itt	mi
 8019b5e:	232b      	movmi	r3, #43	; 0x2b
 8019b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b64:	f89a 3000 	ldrb.w	r3, [sl]
 8019b68:	2b2a      	cmp	r3, #42	; 0x2a
 8019b6a:	d015      	beq.n	8019b98 <_vfiprintf_r+0x13c>
 8019b6c:	9a07      	ldr	r2, [sp, #28]
 8019b6e:	4654      	mov	r4, sl
 8019b70:	2000      	movs	r0, #0
 8019b72:	f04f 0c0a 	mov.w	ip, #10
 8019b76:	4621      	mov	r1, r4
 8019b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b7c:	3b30      	subs	r3, #48	; 0x30
 8019b7e:	2b09      	cmp	r3, #9
 8019b80:	d94e      	bls.n	8019c20 <_vfiprintf_r+0x1c4>
 8019b82:	b1b0      	cbz	r0, 8019bb2 <_vfiprintf_r+0x156>
 8019b84:	9207      	str	r2, [sp, #28]
 8019b86:	e014      	b.n	8019bb2 <_vfiprintf_r+0x156>
 8019b88:	eba0 0308 	sub.w	r3, r0, r8
 8019b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8019b90:	4313      	orrs	r3, r2
 8019b92:	9304      	str	r3, [sp, #16]
 8019b94:	46a2      	mov	sl, r4
 8019b96:	e7d2      	b.n	8019b3e <_vfiprintf_r+0xe2>
 8019b98:	9b03      	ldr	r3, [sp, #12]
 8019b9a:	1d19      	adds	r1, r3, #4
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	9103      	str	r1, [sp, #12]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	bfbb      	ittet	lt
 8019ba4:	425b      	neglt	r3, r3
 8019ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8019baa:	9307      	strge	r3, [sp, #28]
 8019bac:	9307      	strlt	r3, [sp, #28]
 8019bae:	bfb8      	it	lt
 8019bb0:	9204      	strlt	r2, [sp, #16]
 8019bb2:	7823      	ldrb	r3, [r4, #0]
 8019bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8019bb6:	d10c      	bne.n	8019bd2 <_vfiprintf_r+0x176>
 8019bb8:	7863      	ldrb	r3, [r4, #1]
 8019bba:	2b2a      	cmp	r3, #42	; 0x2a
 8019bbc:	d135      	bne.n	8019c2a <_vfiprintf_r+0x1ce>
 8019bbe:	9b03      	ldr	r3, [sp, #12]
 8019bc0:	1d1a      	adds	r2, r3, #4
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	9203      	str	r2, [sp, #12]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	bfb8      	it	lt
 8019bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8019bce:	3402      	adds	r4, #2
 8019bd0:	9305      	str	r3, [sp, #20]
 8019bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019cb8 <_vfiprintf_r+0x25c>
 8019bd6:	7821      	ldrb	r1, [r4, #0]
 8019bd8:	2203      	movs	r2, #3
 8019bda:	4650      	mov	r0, sl
 8019bdc:	f7e6 fb20 	bl	8000220 <memchr>
 8019be0:	b140      	cbz	r0, 8019bf4 <_vfiprintf_r+0x198>
 8019be2:	2340      	movs	r3, #64	; 0x40
 8019be4:	eba0 000a 	sub.w	r0, r0, sl
 8019be8:	fa03 f000 	lsl.w	r0, r3, r0
 8019bec:	9b04      	ldr	r3, [sp, #16]
 8019bee:	4303      	orrs	r3, r0
 8019bf0:	3401      	adds	r4, #1
 8019bf2:	9304      	str	r3, [sp, #16]
 8019bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bf8:	482c      	ldr	r0, [pc, #176]	; (8019cac <_vfiprintf_r+0x250>)
 8019bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019bfe:	2206      	movs	r2, #6
 8019c00:	f7e6 fb0e 	bl	8000220 <memchr>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	d03f      	beq.n	8019c88 <_vfiprintf_r+0x22c>
 8019c08:	4b29      	ldr	r3, [pc, #164]	; (8019cb0 <_vfiprintf_r+0x254>)
 8019c0a:	bb1b      	cbnz	r3, 8019c54 <_vfiprintf_r+0x1f8>
 8019c0c:	9b03      	ldr	r3, [sp, #12]
 8019c0e:	3307      	adds	r3, #7
 8019c10:	f023 0307 	bic.w	r3, r3, #7
 8019c14:	3308      	adds	r3, #8
 8019c16:	9303      	str	r3, [sp, #12]
 8019c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c1a:	443b      	add	r3, r7
 8019c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8019c1e:	e767      	b.n	8019af0 <_vfiprintf_r+0x94>
 8019c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c24:	460c      	mov	r4, r1
 8019c26:	2001      	movs	r0, #1
 8019c28:	e7a5      	b.n	8019b76 <_vfiprintf_r+0x11a>
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	3401      	adds	r4, #1
 8019c2e:	9305      	str	r3, [sp, #20]
 8019c30:	4619      	mov	r1, r3
 8019c32:	f04f 0c0a 	mov.w	ip, #10
 8019c36:	4620      	mov	r0, r4
 8019c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c3c:	3a30      	subs	r2, #48	; 0x30
 8019c3e:	2a09      	cmp	r2, #9
 8019c40:	d903      	bls.n	8019c4a <_vfiprintf_r+0x1ee>
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d0c5      	beq.n	8019bd2 <_vfiprintf_r+0x176>
 8019c46:	9105      	str	r1, [sp, #20]
 8019c48:	e7c3      	b.n	8019bd2 <_vfiprintf_r+0x176>
 8019c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c4e:	4604      	mov	r4, r0
 8019c50:	2301      	movs	r3, #1
 8019c52:	e7f0      	b.n	8019c36 <_vfiprintf_r+0x1da>
 8019c54:	ab03      	add	r3, sp, #12
 8019c56:	9300      	str	r3, [sp, #0]
 8019c58:	462a      	mov	r2, r5
 8019c5a:	4b16      	ldr	r3, [pc, #88]	; (8019cb4 <_vfiprintf_r+0x258>)
 8019c5c:	a904      	add	r1, sp, #16
 8019c5e:	4630      	mov	r0, r6
 8019c60:	f3af 8000 	nop.w
 8019c64:	4607      	mov	r7, r0
 8019c66:	1c78      	adds	r0, r7, #1
 8019c68:	d1d6      	bne.n	8019c18 <_vfiprintf_r+0x1bc>
 8019c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c6c:	07d9      	lsls	r1, r3, #31
 8019c6e:	d405      	bmi.n	8019c7c <_vfiprintf_r+0x220>
 8019c70:	89ab      	ldrh	r3, [r5, #12]
 8019c72:	059a      	lsls	r2, r3, #22
 8019c74:	d402      	bmi.n	8019c7c <_vfiprintf_r+0x220>
 8019c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c78:	f7ff f946 	bl	8018f08 <__retarget_lock_release_recursive>
 8019c7c:	89ab      	ldrh	r3, [r5, #12]
 8019c7e:	065b      	lsls	r3, r3, #25
 8019c80:	f53f af12 	bmi.w	8019aa8 <_vfiprintf_r+0x4c>
 8019c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c86:	e711      	b.n	8019aac <_vfiprintf_r+0x50>
 8019c88:	ab03      	add	r3, sp, #12
 8019c8a:	9300      	str	r3, [sp, #0]
 8019c8c:	462a      	mov	r2, r5
 8019c8e:	4b09      	ldr	r3, [pc, #36]	; (8019cb4 <_vfiprintf_r+0x258>)
 8019c90:	a904      	add	r1, sp, #16
 8019c92:	4630      	mov	r0, r6
 8019c94:	f000 f880 	bl	8019d98 <_printf_i>
 8019c98:	e7e4      	b.n	8019c64 <_vfiprintf_r+0x208>
 8019c9a:	bf00      	nop
 8019c9c:	0802840c 	.word	0x0802840c
 8019ca0:	0802842c 	.word	0x0802842c
 8019ca4:	080283ec 	.word	0x080283ec
 8019ca8:	080284fe 	.word	0x080284fe
 8019cac:	08028508 	.word	0x08028508
 8019cb0:	00000000 	.word	0x00000000
 8019cb4:	08019a37 	.word	0x08019a37
 8019cb8:	08028504 	.word	0x08028504

08019cbc <_printf_common>:
 8019cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cc0:	4616      	mov	r6, r2
 8019cc2:	4699      	mov	r9, r3
 8019cc4:	688a      	ldr	r2, [r1, #8]
 8019cc6:	690b      	ldr	r3, [r1, #16]
 8019cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	bfb8      	it	lt
 8019cd0:	4613      	movlt	r3, r2
 8019cd2:	6033      	str	r3, [r6, #0]
 8019cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019cd8:	4607      	mov	r7, r0
 8019cda:	460c      	mov	r4, r1
 8019cdc:	b10a      	cbz	r2, 8019ce2 <_printf_common+0x26>
 8019cde:	3301      	adds	r3, #1
 8019ce0:	6033      	str	r3, [r6, #0]
 8019ce2:	6823      	ldr	r3, [r4, #0]
 8019ce4:	0699      	lsls	r1, r3, #26
 8019ce6:	bf42      	ittt	mi
 8019ce8:	6833      	ldrmi	r3, [r6, #0]
 8019cea:	3302      	addmi	r3, #2
 8019cec:	6033      	strmi	r3, [r6, #0]
 8019cee:	6825      	ldr	r5, [r4, #0]
 8019cf0:	f015 0506 	ands.w	r5, r5, #6
 8019cf4:	d106      	bne.n	8019d04 <_printf_common+0x48>
 8019cf6:	f104 0a19 	add.w	sl, r4, #25
 8019cfa:	68e3      	ldr	r3, [r4, #12]
 8019cfc:	6832      	ldr	r2, [r6, #0]
 8019cfe:	1a9b      	subs	r3, r3, r2
 8019d00:	42ab      	cmp	r3, r5
 8019d02:	dc26      	bgt.n	8019d52 <_printf_common+0x96>
 8019d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d08:	1e13      	subs	r3, r2, #0
 8019d0a:	6822      	ldr	r2, [r4, #0]
 8019d0c:	bf18      	it	ne
 8019d0e:	2301      	movne	r3, #1
 8019d10:	0692      	lsls	r2, r2, #26
 8019d12:	d42b      	bmi.n	8019d6c <_printf_common+0xb0>
 8019d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d18:	4649      	mov	r1, r9
 8019d1a:	4638      	mov	r0, r7
 8019d1c:	47c0      	blx	r8
 8019d1e:	3001      	adds	r0, #1
 8019d20:	d01e      	beq.n	8019d60 <_printf_common+0xa4>
 8019d22:	6823      	ldr	r3, [r4, #0]
 8019d24:	68e5      	ldr	r5, [r4, #12]
 8019d26:	6832      	ldr	r2, [r6, #0]
 8019d28:	f003 0306 	and.w	r3, r3, #6
 8019d2c:	2b04      	cmp	r3, #4
 8019d2e:	bf08      	it	eq
 8019d30:	1aad      	subeq	r5, r5, r2
 8019d32:	68a3      	ldr	r3, [r4, #8]
 8019d34:	6922      	ldr	r2, [r4, #16]
 8019d36:	bf0c      	ite	eq
 8019d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d3c:	2500      	movne	r5, #0
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	bfc4      	itt	gt
 8019d42:	1a9b      	subgt	r3, r3, r2
 8019d44:	18ed      	addgt	r5, r5, r3
 8019d46:	2600      	movs	r6, #0
 8019d48:	341a      	adds	r4, #26
 8019d4a:	42b5      	cmp	r5, r6
 8019d4c:	d11a      	bne.n	8019d84 <_printf_common+0xc8>
 8019d4e:	2000      	movs	r0, #0
 8019d50:	e008      	b.n	8019d64 <_printf_common+0xa8>
 8019d52:	2301      	movs	r3, #1
 8019d54:	4652      	mov	r2, sl
 8019d56:	4649      	mov	r1, r9
 8019d58:	4638      	mov	r0, r7
 8019d5a:	47c0      	blx	r8
 8019d5c:	3001      	adds	r0, #1
 8019d5e:	d103      	bne.n	8019d68 <_printf_common+0xac>
 8019d60:	f04f 30ff 	mov.w	r0, #4294967295
 8019d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d68:	3501      	adds	r5, #1
 8019d6a:	e7c6      	b.n	8019cfa <_printf_common+0x3e>
 8019d6c:	18e1      	adds	r1, r4, r3
 8019d6e:	1c5a      	adds	r2, r3, #1
 8019d70:	2030      	movs	r0, #48	; 0x30
 8019d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d76:	4422      	add	r2, r4
 8019d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d80:	3302      	adds	r3, #2
 8019d82:	e7c7      	b.n	8019d14 <_printf_common+0x58>
 8019d84:	2301      	movs	r3, #1
 8019d86:	4622      	mov	r2, r4
 8019d88:	4649      	mov	r1, r9
 8019d8a:	4638      	mov	r0, r7
 8019d8c:	47c0      	blx	r8
 8019d8e:	3001      	adds	r0, #1
 8019d90:	d0e6      	beq.n	8019d60 <_printf_common+0xa4>
 8019d92:	3601      	adds	r6, #1
 8019d94:	e7d9      	b.n	8019d4a <_printf_common+0x8e>
	...

08019d98 <_printf_i>:
 8019d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d9c:	7e0f      	ldrb	r7, [r1, #24]
 8019d9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019da0:	2f78      	cmp	r7, #120	; 0x78
 8019da2:	4691      	mov	r9, r2
 8019da4:	4680      	mov	r8, r0
 8019da6:	460c      	mov	r4, r1
 8019da8:	469a      	mov	sl, r3
 8019daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019dae:	d807      	bhi.n	8019dc0 <_printf_i+0x28>
 8019db0:	2f62      	cmp	r7, #98	; 0x62
 8019db2:	d80a      	bhi.n	8019dca <_printf_i+0x32>
 8019db4:	2f00      	cmp	r7, #0
 8019db6:	f000 80d8 	beq.w	8019f6a <_printf_i+0x1d2>
 8019dba:	2f58      	cmp	r7, #88	; 0x58
 8019dbc:	f000 80a3 	beq.w	8019f06 <_printf_i+0x16e>
 8019dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019dc8:	e03a      	b.n	8019e40 <_printf_i+0xa8>
 8019dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019dce:	2b15      	cmp	r3, #21
 8019dd0:	d8f6      	bhi.n	8019dc0 <_printf_i+0x28>
 8019dd2:	a101      	add	r1, pc, #4	; (adr r1, 8019dd8 <_printf_i+0x40>)
 8019dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019dd8:	08019e31 	.word	0x08019e31
 8019ddc:	08019e45 	.word	0x08019e45
 8019de0:	08019dc1 	.word	0x08019dc1
 8019de4:	08019dc1 	.word	0x08019dc1
 8019de8:	08019dc1 	.word	0x08019dc1
 8019dec:	08019dc1 	.word	0x08019dc1
 8019df0:	08019e45 	.word	0x08019e45
 8019df4:	08019dc1 	.word	0x08019dc1
 8019df8:	08019dc1 	.word	0x08019dc1
 8019dfc:	08019dc1 	.word	0x08019dc1
 8019e00:	08019dc1 	.word	0x08019dc1
 8019e04:	08019f51 	.word	0x08019f51
 8019e08:	08019e75 	.word	0x08019e75
 8019e0c:	08019f33 	.word	0x08019f33
 8019e10:	08019dc1 	.word	0x08019dc1
 8019e14:	08019dc1 	.word	0x08019dc1
 8019e18:	08019f73 	.word	0x08019f73
 8019e1c:	08019dc1 	.word	0x08019dc1
 8019e20:	08019e75 	.word	0x08019e75
 8019e24:	08019dc1 	.word	0x08019dc1
 8019e28:	08019dc1 	.word	0x08019dc1
 8019e2c:	08019f3b 	.word	0x08019f3b
 8019e30:	682b      	ldr	r3, [r5, #0]
 8019e32:	1d1a      	adds	r2, r3, #4
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	602a      	str	r2, [r5, #0]
 8019e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e40:	2301      	movs	r3, #1
 8019e42:	e0a3      	b.n	8019f8c <_printf_i+0x1f4>
 8019e44:	6820      	ldr	r0, [r4, #0]
 8019e46:	6829      	ldr	r1, [r5, #0]
 8019e48:	0606      	lsls	r6, r0, #24
 8019e4a:	f101 0304 	add.w	r3, r1, #4
 8019e4e:	d50a      	bpl.n	8019e66 <_printf_i+0xce>
 8019e50:	680e      	ldr	r6, [r1, #0]
 8019e52:	602b      	str	r3, [r5, #0]
 8019e54:	2e00      	cmp	r6, #0
 8019e56:	da03      	bge.n	8019e60 <_printf_i+0xc8>
 8019e58:	232d      	movs	r3, #45	; 0x2d
 8019e5a:	4276      	negs	r6, r6
 8019e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e60:	485e      	ldr	r0, [pc, #376]	; (8019fdc <_printf_i+0x244>)
 8019e62:	230a      	movs	r3, #10
 8019e64:	e019      	b.n	8019e9a <_printf_i+0x102>
 8019e66:	680e      	ldr	r6, [r1, #0]
 8019e68:	602b      	str	r3, [r5, #0]
 8019e6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e6e:	bf18      	it	ne
 8019e70:	b236      	sxthne	r6, r6
 8019e72:	e7ef      	b.n	8019e54 <_printf_i+0xbc>
 8019e74:	682b      	ldr	r3, [r5, #0]
 8019e76:	6820      	ldr	r0, [r4, #0]
 8019e78:	1d19      	adds	r1, r3, #4
 8019e7a:	6029      	str	r1, [r5, #0]
 8019e7c:	0601      	lsls	r1, r0, #24
 8019e7e:	d501      	bpl.n	8019e84 <_printf_i+0xec>
 8019e80:	681e      	ldr	r6, [r3, #0]
 8019e82:	e002      	b.n	8019e8a <_printf_i+0xf2>
 8019e84:	0646      	lsls	r6, r0, #25
 8019e86:	d5fb      	bpl.n	8019e80 <_printf_i+0xe8>
 8019e88:	881e      	ldrh	r6, [r3, #0]
 8019e8a:	4854      	ldr	r0, [pc, #336]	; (8019fdc <_printf_i+0x244>)
 8019e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8019e8e:	bf0c      	ite	eq
 8019e90:	2308      	moveq	r3, #8
 8019e92:	230a      	movne	r3, #10
 8019e94:	2100      	movs	r1, #0
 8019e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e9a:	6865      	ldr	r5, [r4, #4]
 8019e9c:	60a5      	str	r5, [r4, #8]
 8019e9e:	2d00      	cmp	r5, #0
 8019ea0:	bfa2      	ittt	ge
 8019ea2:	6821      	ldrge	r1, [r4, #0]
 8019ea4:	f021 0104 	bicge.w	r1, r1, #4
 8019ea8:	6021      	strge	r1, [r4, #0]
 8019eaa:	b90e      	cbnz	r6, 8019eb0 <_printf_i+0x118>
 8019eac:	2d00      	cmp	r5, #0
 8019eae:	d04d      	beq.n	8019f4c <_printf_i+0x1b4>
 8019eb0:	4615      	mov	r5, r2
 8019eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8019eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8019eba:	5dc7      	ldrb	r7, [r0, r7]
 8019ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ec0:	4637      	mov	r7, r6
 8019ec2:	42bb      	cmp	r3, r7
 8019ec4:	460e      	mov	r6, r1
 8019ec6:	d9f4      	bls.n	8019eb2 <_printf_i+0x11a>
 8019ec8:	2b08      	cmp	r3, #8
 8019eca:	d10b      	bne.n	8019ee4 <_printf_i+0x14c>
 8019ecc:	6823      	ldr	r3, [r4, #0]
 8019ece:	07de      	lsls	r6, r3, #31
 8019ed0:	d508      	bpl.n	8019ee4 <_printf_i+0x14c>
 8019ed2:	6923      	ldr	r3, [r4, #16]
 8019ed4:	6861      	ldr	r1, [r4, #4]
 8019ed6:	4299      	cmp	r1, r3
 8019ed8:	bfde      	ittt	le
 8019eda:	2330      	movle	r3, #48	; 0x30
 8019edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019ee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019ee4:	1b52      	subs	r2, r2, r5
 8019ee6:	6122      	str	r2, [r4, #16]
 8019ee8:	f8cd a000 	str.w	sl, [sp]
 8019eec:	464b      	mov	r3, r9
 8019eee:	aa03      	add	r2, sp, #12
 8019ef0:	4621      	mov	r1, r4
 8019ef2:	4640      	mov	r0, r8
 8019ef4:	f7ff fee2 	bl	8019cbc <_printf_common>
 8019ef8:	3001      	adds	r0, #1
 8019efa:	d14c      	bne.n	8019f96 <_printf_i+0x1fe>
 8019efc:	f04f 30ff 	mov.w	r0, #4294967295
 8019f00:	b004      	add	sp, #16
 8019f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f06:	4835      	ldr	r0, [pc, #212]	; (8019fdc <_printf_i+0x244>)
 8019f08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019f0c:	6829      	ldr	r1, [r5, #0]
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	f851 6b04 	ldr.w	r6, [r1], #4
 8019f14:	6029      	str	r1, [r5, #0]
 8019f16:	061d      	lsls	r5, r3, #24
 8019f18:	d514      	bpl.n	8019f44 <_printf_i+0x1ac>
 8019f1a:	07df      	lsls	r7, r3, #31
 8019f1c:	bf44      	itt	mi
 8019f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8019f22:	6023      	strmi	r3, [r4, #0]
 8019f24:	b91e      	cbnz	r6, 8019f2e <_printf_i+0x196>
 8019f26:	6823      	ldr	r3, [r4, #0]
 8019f28:	f023 0320 	bic.w	r3, r3, #32
 8019f2c:	6023      	str	r3, [r4, #0]
 8019f2e:	2310      	movs	r3, #16
 8019f30:	e7b0      	b.n	8019e94 <_printf_i+0xfc>
 8019f32:	6823      	ldr	r3, [r4, #0]
 8019f34:	f043 0320 	orr.w	r3, r3, #32
 8019f38:	6023      	str	r3, [r4, #0]
 8019f3a:	2378      	movs	r3, #120	; 0x78
 8019f3c:	4828      	ldr	r0, [pc, #160]	; (8019fe0 <_printf_i+0x248>)
 8019f3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019f42:	e7e3      	b.n	8019f0c <_printf_i+0x174>
 8019f44:	0659      	lsls	r1, r3, #25
 8019f46:	bf48      	it	mi
 8019f48:	b2b6      	uxthmi	r6, r6
 8019f4a:	e7e6      	b.n	8019f1a <_printf_i+0x182>
 8019f4c:	4615      	mov	r5, r2
 8019f4e:	e7bb      	b.n	8019ec8 <_printf_i+0x130>
 8019f50:	682b      	ldr	r3, [r5, #0]
 8019f52:	6826      	ldr	r6, [r4, #0]
 8019f54:	6961      	ldr	r1, [r4, #20]
 8019f56:	1d18      	adds	r0, r3, #4
 8019f58:	6028      	str	r0, [r5, #0]
 8019f5a:	0635      	lsls	r5, r6, #24
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	d501      	bpl.n	8019f64 <_printf_i+0x1cc>
 8019f60:	6019      	str	r1, [r3, #0]
 8019f62:	e002      	b.n	8019f6a <_printf_i+0x1d2>
 8019f64:	0670      	lsls	r0, r6, #25
 8019f66:	d5fb      	bpl.n	8019f60 <_printf_i+0x1c8>
 8019f68:	8019      	strh	r1, [r3, #0]
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	6123      	str	r3, [r4, #16]
 8019f6e:	4615      	mov	r5, r2
 8019f70:	e7ba      	b.n	8019ee8 <_printf_i+0x150>
 8019f72:	682b      	ldr	r3, [r5, #0]
 8019f74:	1d1a      	adds	r2, r3, #4
 8019f76:	602a      	str	r2, [r5, #0]
 8019f78:	681d      	ldr	r5, [r3, #0]
 8019f7a:	6862      	ldr	r2, [r4, #4]
 8019f7c:	2100      	movs	r1, #0
 8019f7e:	4628      	mov	r0, r5
 8019f80:	f7e6 f94e 	bl	8000220 <memchr>
 8019f84:	b108      	cbz	r0, 8019f8a <_printf_i+0x1f2>
 8019f86:	1b40      	subs	r0, r0, r5
 8019f88:	6060      	str	r0, [r4, #4]
 8019f8a:	6863      	ldr	r3, [r4, #4]
 8019f8c:	6123      	str	r3, [r4, #16]
 8019f8e:	2300      	movs	r3, #0
 8019f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f94:	e7a8      	b.n	8019ee8 <_printf_i+0x150>
 8019f96:	6923      	ldr	r3, [r4, #16]
 8019f98:	462a      	mov	r2, r5
 8019f9a:	4649      	mov	r1, r9
 8019f9c:	4640      	mov	r0, r8
 8019f9e:	47d0      	blx	sl
 8019fa0:	3001      	adds	r0, #1
 8019fa2:	d0ab      	beq.n	8019efc <_printf_i+0x164>
 8019fa4:	6823      	ldr	r3, [r4, #0]
 8019fa6:	079b      	lsls	r3, r3, #30
 8019fa8:	d413      	bmi.n	8019fd2 <_printf_i+0x23a>
 8019faa:	68e0      	ldr	r0, [r4, #12]
 8019fac:	9b03      	ldr	r3, [sp, #12]
 8019fae:	4298      	cmp	r0, r3
 8019fb0:	bfb8      	it	lt
 8019fb2:	4618      	movlt	r0, r3
 8019fb4:	e7a4      	b.n	8019f00 <_printf_i+0x168>
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	4632      	mov	r2, r6
 8019fba:	4649      	mov	r1, r9
 8019fbc:	4640      	mov	r0, r8
 8019fbe:	47d0      	blx	sl
 8019fc0:	3001      	adds	r0, #1
 8019fc2:	d09b      	beq.n	8019efc <_printf_i+0x164>
 8019fc4:	3501      	adds	r5, #1
 8019fc6:	68e3      	ldr	r3, [r4, #12]
 8019fc8:	9903      	ldr	r1, [sp, #12]
 8019fca:	1a5b      	subs	r3, r3, r1
 8019fcc:	42ab      	cmp	r3, r5
 8019fce:	dcf2      	bgt.n	8019fb6 <_printf_i+0x21e>
 8019fd0:	e7eb      	b.n	8019faa <_printf_i+0x212>
 8019fd2:	2500      	movs	r5, #0
 8019fd4:	f104 0619 	add.w	r6, r4, #25
 8019fd8:	e7f5      	b.n	8019fc6 <_printf_i+0x22e>
 8019fda:	bf00      	nop
 8019fdc:	0802850f 	.word	0x0802850f
 8019fe0:	08028520 	.word	0x08028520

08019fe4 <_read_r>:
 8019fe4:	b538      	push	{r3, r4, r5, lr}
 8019fe6:	4d07      	ldr	r5, [pc, #28]	; (801a004 <_read_r+0x20>)
 8019fe8:	4604      	mov	r4, r0
 8019fea:	4608      	mov	r0, r1
 8019fec:	4611      	mov	r1, r2
 8019fee:	2200      	movs	r2, #0
 8019ff0:	602a      	str	r2, [r5, #0]
 8019ff2:	461a      	mov	r2, r3
 8019ff4:	f7e6 fe30 	bl	8000c58 <_read>
 8019ff8:	1c43      	adds	r3, r0, #1
 8019ffa:	d102      	bne.n	801a002 <_read_r+0x1e>
 8019ffc:	682b      	ldr	r3, [r5, #0]
 8019ffe:	b103      	cbz	r3, 801a002 <_read_r+0x1e>
 801a000:	6023      	str	r3, [r4, #0]
 801a002:	bd38      	pop	{r3, r4, r5, pc}
 801a004:	2001102c 	.word	0x2001102c

0801a008 <__swbuf_r>:
 801a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a00a:	460e      	mov	r6, r1
 801a00c:	4614      	mov	r4, r2
 801a00e:	4605      	mov	r5, r0
 801a010:	b118      	cbz	r0, 801a01a <__swbuf_r+0x12>
 801a012:	6983      	ldr	r3, [r0, #24]
 801a014:	b90b      	cbnz	r3, 801a01a <__swbuf_r+0x12>
 801a016:	f7fe feb3 	bl	8018d80 <__sinit>
 801a01a:	4b21      	ldr	r3, [pc, #132]	; (801a0a0 <__swbuf_r+0x98>)
 801a01c:	429c      	cmp	r4, r3
 801a01e:	d12b      	bne.n	801a078 <__swbuf_r+0x70>
 801a020:	686c      	ldr	r4, [r5, #4]
 801a022:	69a3      	ldr	r3, [r4, #24]
 801a024:	60a3      	str	r3, [r4, #8]
 801a026:	89a3      	ldrh	r3, [r4, #12]
 801a028:	071a      	lsls	r2, r3, #28
 801a02a:	d52f      	bpl.n	801a08c <__swbuf_r+0x84>
 801a02c:	6923      	ldr	r3, [r4, #16]
 801a02e:	b36b      	cbz	r3, 801a08c <__swbuf_r+0x84>
 801a030:	6923      	ldr	r3, [r4, #16]
 801a032:	6820      	ldr	r0, [r4, #0]
 801a034:	1ac0      	subs	r0, r0, r3
 801a036:	6963      	ldr	r3, [r4, #20]
 801a038:	b2f6      	uxtb	r6, r6
 801a03a:	4283      	cmp	r3, r0
 801a03c:	4637      	mov	r7, r6
 801a03e:	dc04      	bgt.n	801a04a <__swbuf_r+0x42>
 801a040:	4621      	mov	r1, r4
 801a042:	4628      	mov	r0, r5
 801a044:	f7ff fac4 	bl	80195d0 <_fflush_r>
 801a048:	bb30      	cbnz	r0, 801a098 <__swbuf_r+0x90>
 801a04a:	68a3      	ldr	r3, [r4, #8]
 801a04c:	3b01      	subs	r3, #1
 801a04e:	60a3      	str	r3, [r4, #8]
 801a050:	6823      	ldr	r3, [r4, #0]
 801a052:	1c5a      	adds	r2, r3, #1
 801a054:	6022      	str	r2, [r4, #0]
 801a056:	701e      	strb	r6, [r3, #0]
 801a058:	6963      	ldr	r3, [r4, #20]
 801a05a:	3001      	adds	r0, #1
 801a05c:	4283      	cmp	r3, r0
 801a05e:	d004      	beq.n	801a06a <__swbuf_r+0x62>
 801a060:	89a3      	ldrh	r3, [r4, #12]
 801a062:	07db      	lsls	r3, r3, #31
 801a064:	d506      	bpl.n	801a074 <__swbuf_r+0x6c>
 801a066:	2e0a      	cmp	r6, #10
 801a068:	d104      	bne.n	801a074 <__swbuf_r+0x6c>
 801a06a:	4621      	mov	r1, r4
 801a06c:	4628      	mov	r0, r5
 801a06e:	f7ff faaf 	bl	80195d0 <_fflush_r>
 801a072:	b988      	cbnz	r0, 801a098 <__swbuf_r+0x90>
 801a074:	4638      	mov	r0, r7
 801a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a078:	4b0a      	ldr	r3, [pc, #40]	; (801a0a4 <__swbuf_r+0x9c>)
 801a07a:	429c      	cmp	r4, r3
 801a07c:	d101      	bne.n	801a082 <__swbuf_r+0x7a>
 801a07e:	68ac      	ldr	r4, [r5, #8]
 801a080:	e7cf      	b.n	801a022 <__swbuf_r+0x1a>
 801a082:	4b09      	ldr	r3, [pc, #36]	; (801a0a8 <__swbuf_r+0xa0>)
 801a084:	429c      	cmp	r4, r3
 801a086:	bf08      	it	eq
 801a088:	68ec      	ldreq	r4, [r5, #12]
 801a08a:	e7ca      	b.n	801a022 <__swbuf_r+0x1a>
 801a08c:	4621      	mov	r1, r4
 801a08e:	4628      	mov	r0, r5
 801a090:	f000 f80c 	bl	801a0ac <__swsetup_r>
 801a094:	2800      	cmp	r0, #0
 801a096:	d0cb      	beq.n	801a030 <__swbuf_r+0x28>
 801a098:	f04f 37ff 	mov.w	r7, #4294967295
 801a09c:	e7ea      	b.n	801a074 <__swbuf_r+0x6c>
 801a09e:	bf00      	nop
 801a0a0:	0802840c 	.word	0x0802840c
 801a0a4:	0802842c 	.word	0x0802842c
 801a0a8:	080283ec 	.word	0x080283ec

0801a0ac <__swsetup_r>:
 801a0ac:	4b32      	ldr	r3, [pc, #200]	; (801a178 <__swsetup_r+0xcc>)
 801a0ae:	b570      	push	{r4, r5, r6, lr}
 801a0b0:	681d      	ldr	r5, [r3, #0]
 801a0b2:	4606      	mov	r6, r0
 801a0b4:	460c      	mov	r4, r1
 801a0b6:	b125      	cbz	r5, 801a0c2 <__swsetup_r+0x16>
 801a0b8:	69ab      	ldr	r3, [r5, #24]
 801a0ba:	b913      	cbnz	r3, 801a0c2 <__swsetup_r+0x16>
 801a0bc:	4628      	mov	r0, r5
 801a0be:	f7fe fe5f 	bl	8018d80 <__sinit>
 801a0c2:	4b2e      	ldr	r3, [pc, #184]	; (801a17c <__swsetup_r+0xd0>)
 801a0c4:	429c      	cmp	r4, r3
 801a0c6:	d10f      	bne.n	801a0e8 <__swsetup_r+0x3c>
 801a0c8:	686c      	ldr	r4, [r5, #4]
 801a0ca:	89a3      	ldrh	r3, [r4, #12]
 801a0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0d0:	0719      	lsls	r1, r3, #28
 801a0d2:	d42c      	bmi.n	801a12e <__swsetup_r+0x82>
 801a0d4:	06dd      	lsls	r5, r3, #27
 801a0d6:	d411      	bmi.n	801a0fc <__swsetup_r+0x50>
 801a0d8:	2309      	movs	r3, #9
 801a0da:	6033      	str	r3, [r6, #0]
 801a0dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a0e0:	81a3      	strh	r3, [r4, #12]
 801a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 801a0e6:	e03e      	b.n	801a166 <__swsetup_r+0xba>
 801a0e8:	4b25      	ldr	r3, [pc, #148]	; (801a180 <__swsetup_r+0xd4>)
 801a0ea:	429c      	cmp	r4, r3
 801a0ec:	d101      	bne.n	801a0f2 <__swsetup_r+0x46>
 801a0ee:	68ac      	ldr	r4, [r5, #8]
 801a0f0:	e7eb      	b.n	801a0ca <__swsetup_r+0x1e>
 801a0f2:	4b24      	ldr	r3, [pc, #144]	; (801a184 <__swsetup_r+0xd8>)
 801a0f4:	429c      	cmp	r4, r3
 801a0f6:	bf08      	it	eq
 801a0f8:	68ec      	ldreq	r4, [r5, #12]
 801a0fa:	e7e6      	b.n	801a0ca <__swsetup_r+0x1e>
 801a0fc:	0758      	lsls	r0, r3, #29
 801a0fe:	d512      	bpl.n	801a126 <__swsetup_r+0x7a>
 801a100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a102:	b141      	cbz	r1, 801a116 <__swsetup_r+0x6a>
 801a104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a108:	4299      	cmp	r1, r3
 801a10a:	d002      	beq.n	801a112 <__swsetup_r+0x66>
 801a10c:	4630      	mov	r0, r6
 801a10e:	f7ff fad3 	bl	80196b8 <_free_r>
 801a112:	2300      	movs	r3, #0
 801a114:	6363      	str	r3, [r4, #52]	; 0x34
 801a116:	89a3      	ldrh	r3, [r4, #12]
 801a118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a11c:	81a3      	strh	r3, [r4, #12]
 801a11e:	2300      	movs	r3, #0
 801a120:	6063      	str	r3, [r4, #4]
 801a122:	6923      	ldr	r3, [r4, #16]
 801a124:	6023      	str	r3, [r4, #0]
 801a126:	89a3      	ldrh	r3, [r4, #12]
 801a128:	f043 0308 	orr.w	r3, r3, #8
 801a12c:	81a3      	strh	r3, [r4, #12]
 801a12e:	6923      	ldr	r3, [r4, #16]
 801a130:	b94b      	cbnz	r3, 801a146 <__swsetup_r+0x9a>
 801a132:	89a3      	ldrh	r3, [r4, #12]
 801a134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a13c:	d003      	beq.n	801a146 <__swsetup_r+0x9a>
 801a13e:	4621      	mov	r1, r4
 801a140:	4630      	mov	r0, r6
 801a142:	f000 f84d 	bl	801a1e0 <__smakebuf_r>
 801a146:	89a0      	ldrh	r0, [r4, #12]
 801a148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a14c:	f010 0301 	ands.w	r3, r0, #1
 801a150:	d00a      	beq.n	801a168 <__swsetup_r+0xbc>
 801a152:	2300      	movs	r3, #0
 801a154:	60a3      	str	r3, [r4, #8]
 801a156:	6963      	ldr	r3, [r4, #20]
 801a158:	425b      	negs	r3, r3
 801a15a:	61a3      	str	r3, [r4, #24]
 801a15c:	6923      	ldr	r3, [r4, #16]
 801a15e:	b943      	cbnz	r3, 801a172 <__swsetup_r+0xc6>
 801a160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a164:	d1ba      	bne.n	801a0dc <__swsetup_r+0x30>
 801a166:	bd70      	pop	{r4, r5, r6, pc}
 801a168:	0781      	lsls	r1, r0, #30
 801a16a:	bf58      	it	pl
 801a16c:	6963      	ldrpl	r3, [r4, #20]
 801a16e:	60a3      	str	r3, [r4, #8]
 801a170:	e7f4      	b.n	801a15c <__swsetup_r+0xb0>
 801a172:	2000      	movs	r0, #0
 801a174:	e7f7      	b.n	801a166 <__swsetup_r+0xba>
 801a176:	bf00      	nop
 801a178:	20000034 	.word	0x20000034
 801a17c:	0802840c 	.word	0x0802840c
 801a180:	0802842c 	.word	0x0802842c
 801a184:	080283ec 	.word	0x080283ec

0801a188 <abort>:
 801a188:	b508      	push	{r3, lr}
 801a18a:	2006      	movs	r0, #6
 801a18c:	f000 f8c0 	bl	801a310 <raise>
 801a190:	2001      	movs	r0, #1
 801a192:	f7e6 fd57 	bl	8000c44 <_exit>

0801a196 <__swhatbuf_r>:
 801a196:	b570      	push	{r4, r5, r6, lr}
 801a198:	460e      	mov	r6, r1
 801a19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a19e:	2900      	cmp	r1, #0
 801a1a0:	b096      	sub	sp, #88	; 0x58
 801a1a2:	4614      	mov	r4, r2
 801a1a4:	461d      	mov	r5, r3
 801a1a6:	da08      	bge.n	801a1ba <__swhatbuf_r+0x24>
 801a1a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	602a      	str	r2, [r5, #0]
 801a1b0:	061a      	lsls	r2, r3, #24
 801a1b2:	d410      	bmi.n	801a1d6 <__swhatbuf_r+0x40>
 801a1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1b8:	e00e      	b.n	801a1d8 <__swhatbuf_r+0x42>
 801a1ba:	466a      	mov	r2, sp
 801a1bc:	f000 f8c4 	bl	801a348 <_fstat_r>
 801a1c0:	2800      	cmp	r0, #0
 801a1c2:	dbf1      	blt.n	801a1a8 <__swhatbuf_r+0x12>
 801a1c4:	9a01      	ldr	r2, [sp, #4]
 801a1c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a1ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a1ce:	425a      	negs	r2, r3
 801a1d0:	415a      	adcs	r2, r3
 801a1d2:	602a      	str	r2, [r5, #0]
 801a1d4:	e7ee      	b.n	801a1b4 <__swhatbuf_r+0x1e>
 801a1d6:	2340      	movs	r3, #64	; 0x40
 801a1d8:	2000      	movs	r0, #0
 801a1da:	6023      	str	r3, [r4, #0]
 801a1dc:	b016      	add	sp, #88	; 0x58
 801a1de:	bd70      	pop	{r4, r5, r6, pc}

0801a1e0 <__smakebuf_r>:
 801a1e0:	898b      	ldrh	r3, [r1, #12]
 801a1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1e4:	079d      	lsls	r5, r3, #30
 801a1e6:	4606      	mov	r6, r0
 801a1e8:	460c      	mov	r4, r1
 801a1ea:	d507      	bpl.n	801a1fc <__smakebuf_r+0x1c>
 801a1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a1f0:	6023      	str	r3, [r4, #0]
 801a1f2:	6123      	str	r3, [r4, #16]
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	6163      	str	r3, [r4, #20]
 801a1f8:	b002      	add	sp, #8
 801a1fa:	bd70      	pop	{r4, r5, r6, pc}
 801a1fc:	ab01      	add	r3, sp, #4
 801a1fe:	466a      	mov	r2, sp
 801a200:	f7ff ffc9 	bl	801a196 <__swhatbuf_r>
 801a204:	9900      	ldr	r1, [sp, #0]
 801a206:	4605      	mov	r5, r0
 801a208:	4630      	mov	r0, r6
 801a20a:	f7fe fedf 	bl	8018fcc <_malloc_r>
 801a20e:	b948      	cbnz	r0, 801a224 <__smakebuf_r+0x44>
 801a210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a214:	059a      	lsls	r2, r3, #22
 801a216:	d4ef      	bmi.n	801a1f8 <__smakebuf_r+0x18>
 801a218:	f023 0303 	bic.w	r3, r3, #3
 801a21c:	f043 0302 	orr.w	r3, r3, #2
 801a220:	81a3      	strh	r3, [r4, #12]
 801a222:	e7e3      	b.n	801a1ec <__smakebuf_r+0xc>
 801a224:	4b0d      	ldr	r3, [pc, #52]	; (801a25c <__smakebuf_r+0x7c>)
 801a226:	62b3      	str	r3, [r6, #40]	; 0x28
 801a228:	89a3      	ldrh	r3, [r4, #12]
 801a22a:	6020      	str	r0, [r4, #0]
 801a22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a230:	81a3      	strh	r3, [r4, #12]
 801a232:	9b00      	ldr	r3, [sp, #0]
 801a234:	6163      	str	r3, [r4, #20]
 801a236:	9b01      	ldr	r3, [sp, #4]
 801a238:	6120      	str	r0, [r4, #16]
 801a23a:	b15b      	cbz	r3, 801a254 <__smakebuf_r+0x74>
 801a23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a240:	4630      	mov	r0, r6
 801a242:	f000 f893 	bl	801a36c <_isatty_r>
 801a246:	b128      	cbz	r0, 801a254 <__smakebuf_r+0x74>
 801a248:	89a3      	ldrh	r3, [r4, #12]
 801a24a:	f023 0303 	bic.w	r3, r3, #3
 801a24e:	f043 0301 	orr.w	r3, r3, #1
 801a252:	81a3      	strh	r3, [r4, #12]
 801a254:	89a0      	ldrh	r0, [r4, #12]
 801a256:	4305      	orrs	r5, r0
 801a258:	81a5      	strh	r5, [r4, #12]
 801a25a:	e7cd      	b.n	801a1f8 <__smakebuf_r+0x18>
 801a25c:	08018d19 	.word	0x08018d19

0801a260 <_realloc_r>:
 801a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a264:	4680      	mov	r8, r0
 801a266:	4614      	mov	r4, r2
 801a268:	460e      	mov	r6, r1
 801a26a:	b921      	cbnz	r1, 801a276 <_realloc_r+0x16>
 801a26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a270:	4611      	mov	r1, r2
 801a272:	f7fe beab 	b.w	8018fcc <_malloc_r>
 801a276:	b92a      	cbnz	r2, 801a284 <_realloc_r+0x24>
 801a278:	f7ff fa1e 	bl	80196b8 <_free_r>
 801a27c:	4625      	mov	r5, r4
 801a27e:	4628      	mov	r0, r5
 801a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a284:	f000 f882 	bl	801a38c <_malloc_usable_size_r>
 801a288:	4284      	cmp	r4, r0
 801a28a:	4607      	mov	r7, r0
 801a28c:	d802      	bhi.n	801a294 <_realloc_r+0x34>
 801a28e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a292:	d812      	bhi.n	801a2ba <_realloc_r+0x5a>
 801a294:	4621      	mov	r1, r4
 801a296:	4640      	mov	r0, r8
 801a298:	f7fe fe98 	bl	8018fcc <_malloc_r>
 801a29c:	4605      	mov	r5, r0
 801a29e:	2800      	cmp	r0, #0
 801a2a0:	d0ed      	beq.n	801a27e <_realloc_r+0x1e>
 801a2a2:	42bc      	cmp	r4, r7
 801a2a4:	4622      	mov	r2, r4
 801a2a6:	4631      	mov	r1, r6
 801a2a8:	bf28      	it	cs
 801a2aa:	463a      	movcs	r2, r7
 801a2ac:	f7fe fe3d 	bl	8018f2a <memcpy>
 801a2b0:	4631      	mov	r1, r6
 801a2b2:	4640      	mov	r0, r8
 801a2b4:	f7ff fa00 	bl	80196b8 <_free_r>
 801a2b8:	e7e1      	b.n	801a27e <_realloc_r+0x1e>
 801a2ba:	4635      	mov	r5, r6
 801a2bc:	e7df      	b.n	801a27e <_realloc_r+0x1e>

0801a2be <_raise_r>:
 801a2be:	291f      	cmp	r1, #31
 801a2c0:	b538      	push	{r3, r4, r5, lr}
 801a2c2:	4604      	mov	r4, r0
 801a2c4:	460d      	mov	r5, r1
 801a2c6:	d904      	bls.n	801a2d2 <_raise_r+0x14>
 801a2c8:	2316      	movs	r3, #22
 801a2ca:	6003      	str	r3, [r0, #0]
 801a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a2d0:	bd38      	pop	{r3, r4, r5, pc}
 801a2d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a2d4:	b112      	cbz	r2, 801a2dc <_raise_r+0x1e>
 801a2d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a2da:	b94b      	cbnz	r3, 801a2f0 <_raise_r+0x32>
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f000 f831 	bl	801a344 <_getpid_r>
 801a2e2:	462a      	mov	r2, r5
 801a2e4:	4601      	mov	r1, r0
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a2ec:	f000 b818 	b.w	801a320 <_kill_r>
 801a2f0:	2b01      	cmp	r3, #1
 801a2f2:	d00a      	beq.n	801a30a <_raise_r+0x4c>
 801a2f4:	1c59      	adds	r1, r3, #1
 801a2f6:	d103      	bne.n	801a300 <_raise_r+0x42>
 801a2f8:	2316      	movs	r3, #22
 801a2fa:	6003      	str	r3, [r0, #0]
 801a2fc:	2001      	movs	r0, #1
 801a2fe:	e7e7      	b.n	801a2d0 <_raise_r+0x12>
 801a300:	2400      	movs	r4, #0
 801a302:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a306:	4628      	mov	r0, r5
 801a308:	4798      	blx	r3
 801a30a:	2000      	movs	r0, #0
 801a30c:	e7e0      	b.n	801a2d0 <_raise_r+0x12>
	...

0801a310 <raise>:
 801a310:	4b02      	ldr	r3, [pc, #8]	; (801a31c <raise+0xc>)
 801a312:	4601      	mov	r1, r0
 801a314:	6818      	ldr	r0, [r3, #0]
 801a316:	f7ff bfd2 	b.w	801a2be <_raise_r>
 801a31a:	bf00      	nop
 801a31c:	20000034 	.word	0x20000034

0801a320 <_kill_r>:
 801a320:	b538      	push	{r3, r4, r5, lr}
 801a322:	4d07      	ldr	r5, [pc, #28]	; (801a340 <_kill_r+0x20>)
 801a324:	2300      	movs	r3, #0
 801a326:	4604      	mov	r4, r0
 801a328:	4608      	mov	r0, r1
 801a32a:	4611      	mov	r1, r2
 801a32c:	602b      	str	r3, [r5, #0]
 801a32e:	f7e6 fc77 	bl	8000c20 <_kill>
 801a332:	1c43      	adds	r3, r0, #1
 801a334:	d102      	bne.n	801a33c <_kill_r+0x1c>
 801a336:	682b      	ldr	r3, [r5, #0]
 801a338:	b103      	cbz	r3, 801a33c <_kill_r+0x1c>
 801a33a:	6023      	str	r3, [r4, #0]
 801a33c:	bd38      	pop	{r3, r4, r5, pc}
 801a33e:	bf00      	nop
 801a340:	2001102c 	.word	0x2001102c

0801a344 <_getpid_r>:
 801a344:	f7e6 bc64 	b.w	8000c10 <_getpid>

0801a348 <_fstat_r>:
 801a348:	b538      	push	{r3, r4, r5, lr}
 801a34a:	4d07      	ldr	r5, [pc, #28]	; (801a368 <_fstat_r+0x20>)
 801a34c:	2300      	movs	r3, #0
 801a34e:	4604      	mov	r4, r0
 801a350:	4608      	mov	r0, r1
 801a352:	4611      	mov	r1, r2
 801a354:	602b      	str	r3, [r5, #0]
 801a356:	f7e6 fcc4 	bl	8000ce2 <_fstat>
 801a35a:	1c43      	adds	r3, r0, #1
 801a35c:	d102      	bne.n	801a364 <_fstat_r+0x1c>
 801a35e:	682b      	ldr	r3, [r5, #0]
 801a360:	b103      	cbz	r3, 801a364 <_fstat_r+0x1c>
 801a362:	6023      	str	r3, [r4, #0]
 801a364:	bd38      	pop	{r3, r4, r5, pc}
 801a366:	bf00      	nop
 801a368:	2001102c 	.word	0x2001102c

0801a36c <_isatty_r>:
 801a36c:	b538      	push	{r3, r4, r5, lr}
 801a36e:	4d06      	ldr	r5, [pc, #24]	; (801a388 <_isatty_r+0x1c>)
 801a370:	2300      	movs	r3, #0
 801a372:	4604      	mov	r4, r0
 801a374:	4608      	mov	r0, r1
 801a376:	602b      	str	r3, [r5, #0]
 801a378:	f7e6 fcc3 	bl	8000d02 <_isatty>
 801a37c:	1c43      	adds	r3, r0, #1
 801a37e:	d102      	bne.n	801a386 <_isatty_r+0x1a>
 801a380:	682b      	ldr	r3, [r5, #0]
 801a382:	b103      	cbz	r3, 801a386 <_isatty_r+0x1a>
 801a384:	6023      	str	r3, [r4, #0]
 801a386:	bd38      	pop	{r3, r4, r5, pc}
 801a388:	2001102c 	.word	0x2001102c

0801a38c <_malloc_usable_size_r>:
 801a38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a390:	1f18      	subs	r0, r3, #4
 801a392:	2b00      	cmp	r3, #0
 801a394:	bfbc      	itt	lt
 801a396:	580b      	ldrlt	r3, [r1, r0]
 801a398:	18c0      	addlt	r0, r0, r3
 801a39a:	4770      	bx	lr

0801a39c <_init>:
 801a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a39e:	bf00      	nop
 801a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3a2:	bc08      	pop	{r3}
 801a3a4:	469e      	mov	lr, r3
 801a3a6:	4770      	bx	lr

0801a3a8 <_fini>:
 801a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3aa:	bf00      	nop
 801a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3ae:	bc08      	pop	{r3}
 801a3b0:	469e      	mov	lr, r3
 801a3b2:	4770      	bx	lr
