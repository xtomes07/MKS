
CV_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ac  080041ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b4  080041b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000cc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d716  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b62  00000000  00000000  0002d7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  0002ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024220  00000000  00000000  00030b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9ae  00000000  00000000  00054d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db779  00000000  00000000  000626e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013de5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bdc  00000000  00000000  0013deb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004044 	.word	0x08004044

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004044 	.word	0x08004044

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffd1 	bl	8000594 <ITM_SendChar>
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
			{ 1, 2, 3, 21 },
			{ 4, 5, 6, 22 },
			{ 7, 8, 9, 23 },
			{ 11, 0, 12, 24 },
	};
	if (key == -1) {
 8000604:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060e:	d142      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x9a>
		if (HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000610:	2108      	movs	r1, #8
 8000612:	4849      	ldr	r0, [pc, #292]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000614:	f001 f8b8 	bl	8001788 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d108      	bne.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x34>
 800061e:	4b47      	ldr	r3, [pc, #284]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a47      	ldr	r2, [pc, #284]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800062e:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4841      	ldr	r0, [pc, #260]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000634:	f001 f8a8 	bl	8001788 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d109      	bne.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x56>
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a3f      	ldr	r2, [pc, #252]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	4413      	add	r3, r2
 8000648:	3304      	adds	r3, #4
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b25a      	sxtb	r2, r3
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000650:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000652:	2120      	movs	r1, #32
 8000654:	4838      	ldr	r0, [pc, #224]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000656:	f001 f897 	bl	8001788 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000660:	4b36      	ldr	r3, [pc, #216]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a36      	ldr	r2, [pc, #216]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	4413      	add	r3, r2
 800066a:	3308      	adds	r3, #8
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b25a      	sxtb	r2, r3
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000672:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000674:	2110      	movs	r1, #16
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000678:	f001 f886 	bl	8001788 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d109      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4413      	add	r3, r2
 800068c:	330c      	adds	r3, #12
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b25a      	sxtb	r2, r3
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000694:	701a      	strb	r2, [r3, #0]

	}
	HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	482a      	ldr	r0, [pc, #168]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800069c:	f001 f88c 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4828      	ldr	r0, [pc, #160]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006a8:	f001 f886 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4825      	ldr	r0, [pc, #148]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006b2:	f001 f881 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4822      	ldr	r0, [pc, #136]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006be:	f001 f87b 	bl	80017b8 <HAL_GPIO_WritePin>

	switch (row) {
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d830      	bhi.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	080006f5 	.word	0x080006f5
 80006d8:	08000707 	.word	0x08000707
 80006dc:	0800071b 	.word	0x0800071b
	case 0:
		row = 1;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	4816      	ldr	r0, [pc, #88]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80006ee:	f001 f863 	bl	80017b8 <HAL_GPIO_WritePin>
		break;
 80006f2:	e01b      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 1:
		row = 2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000700:	f001 f85a 	bl	80017b8 <HAL_GPIO_WritePin>
		break;
 8000704:	e012      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 2:
		row = 3;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000708:	2203      	movs	r2, #3
 800070a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000714:	f001 f850 	bl	80017b8 <HAL_GPIO_WritePin>
		break;
 8000718:	e008      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x130>
	case 3:
		row = 0;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000726:	f001 f847 	bl	80017b8 <HAL_GPIO_WritePin>
		break;
 800072a:	bf00      	nop
	}
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	40021000 	.word	0x40021000
 800073c:	2000011c 	.word	0x2000011c
 8000740:	080040bc 	.word	0x080040bc
 8000744:	40021800 	.word	0x40021800
 8000748:	40021400 	.word	0x40021400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fcc5 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f8d1 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f9b1 	bl	8000ac0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800075e:	f000 f985 	bl	8000a6c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000762:	f000 f935 	bl	80009d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000766:	4859      	ldr	r0, [pc, #356]	; (80008cc <main+0x180>)
 8000768:	f001 fd42 	bl	80021f0 <HAL_TIM_Base_Start_IT>
	  static int16_t index = 0;
	  static int32_t timer = 0;
	  static int8_t correct = 0;


	  if (HAL_GetTick() > timer + 3000 && index > 0) {
 800076c:	f000 fd1e 	bl	80011ac <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	4b57      	ldr	r3, [pc, #348]	; (80008d0 <main+0x184>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800077a:	429a      	cmp	r2, r3
 800077c:	d913      	bls.n	80007a6 <main+0x5a>
 800077e:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <main+0x188>)
 8000780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dd0e      	ble.n	80007a6 <main+0x5a>
		  index = 0;
 8000788:	4b52      	ldr	r3, [pc, #328]	; (80008d4 <main+0x188>)
 800078a:	2200      	movs	r2, #0
 800078c:	801a      	strh	r2, [r3, #0]
		  correct = 0;
 800078e:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <main+0x18c>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		  timer = HAL_GetTick();
 8000794:	f000 fd0a 	bl	80011ac <HAL_GetTick>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <main+0x184>)
 800079e:	601a      	str	r2, [r3, #0]
		  printf("cas vyprsel\n");
 80007a0:	484e      	ldr	r0, [pc, #312]	; (80008dc <main+0x190>)
 80007a2:	f002 fcd1 	bl	8003148 <puts>
	  }

	  if (key != -1){
 80007a6:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <main+0x194>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b0:	d0dc      	beq.n	800076c <main+0x20>
		  timer = HAL_GetTick();
 80007b2:	f000 fcfb 	bl	80011ac <HAL_GetTick>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <main+0x184>)
 80007bc:	601a      	str	r2, [r3, #0]

		  if (key == password[index]) {
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <main+0x194>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <main+0x188>)
 80007c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4b45      	ldr	r3, [pc, #276]	; (80008e4 <main+0x198>)
 80007d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d108      	bne.n	80007ea <main+0x9e>
			  correct++;
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <main+0x18c>)
 80007da:	f993 3000 	ldrsb.w	r3, [r3]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <main+0x18c>)
 80007e8:	701a      	strb	r2, [r3, #0]
		  }

		  if (index < 5){
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <main+0x188>)
 80007ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	dc09      	bgt.n	8000808 <main+0xbc>
			  index++;
 80007f4:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <main+0x188>)
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	3301      	adds	r3, #1
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b21a      	sxth	r2, r3
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <main+0x188>)
 8000804:	801a      	strh	r2, [r3, #0]
 8000806:	e005      	b.n	8000814 <main+0xc8>
		  } else {
			  index = 0;
 8000808:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <main+0x188>)
 800080a:	2200      	movs	r2, #0
 800080c:	801a      	strh	r2, [r3, #0]
			  printf("vynulovano\n");
 800080e:	4836      	ldr	r0, [pc, #216]	; (80008e8 <main+0x19c>)
 8000810:	f002 fc9a 	bl	8003148 <puts>
		  }


		  printf("stisktnuto: %d -> na indexu: %d \n", key, index);
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <main+0x194>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <main+0x188>)
 800081e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000822:	461a      	mov	r2, r3
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <main+0x1a0>)
 8000826:	f002 fc09 	bl	800303c <iprintf>
		  HAL_Delay(200);
 800082a:	20c8      	movs	r0, #200	; 0xc8
 800082c:	f000 fcca 	bl	80011c4 <HAL_Delay>
		  key = -1;
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <main+0x194>)
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	701a      	strb	r2, [r3, #0]

		  if (correct == 5 && index == 5){
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <main+0x18c>)
 8000838:	f993 3000 	ldrsb.w	r3, [r3]
 800083c:	2b05      	cmp	r3, #5
 800083e:	d11c      	bne.n	800087a <main+0x12e>
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <main+0x188>)
 8000842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000846:	2b05      	cmp	r3, #5
 8000848:	d117      	bne.n	800087a <main+0x12e>
			  printf("Correct\n");
 800084a:	4829      	ldr	r0, [pc, #164]	; (80008f0 <main+0x1a4>)
 800084c:	f002 fc7c 	bl	8003148 <puts>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4827      	ldr	r0, [pc, #156]	; (80008f4 <main+0x1a8>)
 8000856:	f000 ffaf 	bl	80017b8 <HAL_GPIO_WritePin>
			  HAL_Delay(3000);
 800085a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800085e:	f000 fcb1 	bl	80011c4 <HAL_Delay>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2101      	movs	r1, #1
 8000866:	4823      	ldr	r0, [pc, #140]	; (80008f4 <main+0x1a8>)
 8000868:	f000 ffa6 	bl	80017b8 <HAL_GPIO_WritePin>
			  index = 0;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <main+0x188>)
 800086e:	2200      	movs	r2, #0
 8000870:	801a      	strh	r2, [r3, #0]
			  correct = 0;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <main+0x18c>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e026      	b.n	80008c8 <main+0x17c>


		  } else if (correct != 5 && index == 5){
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x18c>)
 800087c:	f993 3000 	ldrsb.w	r3, [r3]
 8000880:	2b05      	cmp	r3, #5
 8000882:	f43f af73 	beq.w	800076c <main+0x20>
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <main+0x188>)
 8000888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088c:	2b05      	cmp	r3, #5
 800088e:	f47f af6d 	bne.w	800076c <main+0x20>
			  printf("Wrong\n");
 8000892:	4819      	ldr	r0, [pc, #100]	; (80008f8 <main+0x1ac>)
 8000894:	f002 fc58 	bl	8003148 <puts>
			  for (int16_t i; i < 6; i++){
 8000898:	e00c      	b.n	80008b4 <main+0x168>
				  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800089a:	2101      	movs	r1, #1
 800089c:	4815      	ldr	r0, [pc, #84]	; (80008f4 <main+0x1a8>)
 800089e:	f000 ffa4 	bl	80017ea <HAL_GPIO_TogglePin>
				  HAL_Delay(200);
 80008a2:	20c8      	movs	r0, #200	; 0xc8
 80008a4:	f000 fc8e 	bl	80011c4 <HAL_Delay>
			  for (int16_t i; i < 6; i++){
 80008a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	80fb      	strh	r3, [r7, #6]
 80008b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	ddee      	ble.n	800089a <main+0x14e>
			  }
			  index = 0;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <main+0x188>)
 80008be:	2200      	movs	r2, #0
 80008c0:	801a      	strh	r2, [r3, #0]
			  correct = 0;
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <main+0x18c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  {
 80008c8:	e750      	b.n	800076c <main+0x20>
 80008ca:	bf00      	nop
 80008cc:	20000090 	.word	0x20000090
 80008d0:	20000120 	.word	0x20000120
 80008d4:	20000124 	.word	0x20000124
 80008d8:	20000126 	.word	0x20000126
 80008dc:	0800405c 	.word	0x0800405c
 80008e0:	20000000 	.word	0x20000000
 80008e4:	080040a8 	.word	0x080040a8
 80008e8:	08004068 	.word	0x08004068
 80008ec:	08004074 	.word	0x08004074
 80008f0:	08004098 	.word	0x08004098
 80008f4:	40020400 	.word	0x40020400
 80008f8:	080040a0 	.word	0x080040a0

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fb8e 	bl	800302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <SystemClock_Config+0xcc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <SystemClock_Config+0xcc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <SystemClock_Config+0xd0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a21      	ldr	r2, [pc, #132]	; (80009cc <SystemClock_Config+0xd0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000970:	23a8      	movs	r3, #168	; 0xa8
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000978:	2307      	movs	r3, #7
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4618      	mov	r0, r3
 8000982:	f000 ff4d 	bl	8001820 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800098c:	f000 f9f6 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800099c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2105      	movs	r1, #5
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f9ae 	bl	8001d10 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ba:	f000 f9df 	bl	8000d7c <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_TIM3_Init+0x94>)
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <MX_TIM3_Init+0x98>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_TIM3_Init+0x94>)
 80009f4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM3_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a02:	2263      	movs	r2, #99	; 0x63
 8000a04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a14:	f001 fb9c 	bl	8002150 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f000 f9ad 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a30:	f001 fd56 	bl	80024e0 <HAL_TIM_ConfigClockSource>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 f99f 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_TIM3_Init+0x94>)
 8000a4c:	f001 ff72 	bl	8002934 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a56:	f000 f991 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000090 	.word	0x20000090
 8000a68:	40000400 	.word	0x40000400

08000a6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART3_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART3_UART_Init+0x4c>)
 8000aa4:	f001 ffd6 	bl	8002a54 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f000 f965 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000d8 	.word	0x200000d8
 8000abc:	40004800 	.word	0x40004800

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	4ba1      	ldr	r3, [pc, #644]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4aa0      	ldr	r2, [pc, #640]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	623b      	str	r3, [r7, #32]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	4b9a      	ldr	r3, [pc, #616]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a99      	ldr	r2, [pc, #612]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b97      	ldr	r3, [pc, #604]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a92      	ldr	r2, [pc, #584]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b90      	ldr	r3, [pc, #576]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	4b8c      	ldr	r3, [pc, #560]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a8b      	ldr	r2, [pc, #556]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b85      	ldr	r3, [pc, #532]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a84      	ldr	r2, [pc, #528]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b7e      	ldr	r3, [pc, #504]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a7d      	ldr	r2, [pc, #500]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b7b      	ldr	r3, [pc, #492]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b77      	ldr	r3, [pc, #476]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b70      	ldr	r3, [pc, #448]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a6f      	ldr	r2, [pc, #444]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b6d      	ldr	r3, [pc, #436]	; (8000d60 <MX_GPIO_Init+0x2a0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ROW_3_Pin|ROW_4_Pin|ROW_2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000bbc:	4869      	ldr	r0, [pc, #420]	; (8000d64 <MX_GPIO_Init+0x2a4>)
 8000bbe:	f000 fdfb 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bc8:	4867      	ldr	r0, [pc, #412]	; (8000d68 <MX_GPIO_Init+0x2a8>)
 8000bca:	f000 fdf5 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ROW_1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2142      	movs	r1, #66	; 0x42
 8000bd2:	4866      	ldr	r0, [pc, #408]	; (8000d6c <MX_GPIO_Init+0x2ac>)
 8000bd4:	f000 fdf0 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL_1_Pin COL_4_Pin COL_3_Pin COL_2_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_4_Pin|COL_3_Pin|COL_2_Pin;
 8000bd8:	2378      	movs	r3, #120	; 0x78
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4861      	ldr	r0, [pc, #388]	; (8000d70 <MX_GPIO_Init+0x2b0>)
 8000bec:	f000 fc20 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	485b      	ldr	r0, [pc, #364]	; (8000d74 <MX_GPIO_Init+0x2b4>)
 8000c08:	f000 fc12 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_3_Pin ROW_4_Pin ROW_2_Pin */
  GPIO_InitStruct.Pin = ROW_3_Pin|ROW_4_Pin|ROW_2_Pin;
 8000c0c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c12:	2311      	movs	r3, #17
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	484f      	ldr	r0, [pc, #316]	; (8000d64 <MX_GPIO_Init+0x2a4>)
 8000c26:	f000 fc03 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c2a:	2332      	movs	r3, #50	; 0x32
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	484b      	ldr	r0, [pc, #300]	; (8000d74 <MX_GPIO_Init+0x2b4>)
 8000c46:	f000 fbf3 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c4a:	2386      	movs	r3, #134	; 0x86
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4844      	ldr	r0, [pc, #272]	; (8000d78 <MX_GPIO_Init+0x2b8>)
 8000c66:	f000 fbe3 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c6a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4839      	ldr	r0, [pc, #228]	; (8000d68 <MX_GPIO_Init+0x2a8>)
 8000c84:	f000 fbd4 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROW_1_Pin */
  GPIO_InitStruct.Pin = ROW_1_Pin;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c8c:	2311      	movs	r3, #17
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ROW_1_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4833      	ldr	r0, [pc, #204]	; (8000d6c <MX_GPIO_Init+0x2ac>)
 8000ca0:	f000 fbc6 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4829      	ldr	r0, [pc, #164]	; (8000d68 <MX_GPIO_Init+0x2a8>)
 8000cc2:	f000 fbb5 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x2ac>)
 8000cde:	f000 fba7 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481d      	ldr	r0, [pc, #116]	; (8000d6c <MX_GPIO_Init+0x2ac>)
 8000cf6:	f000 fb9b 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cfa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_GPIO_Init+0x2b8>)
 8000d18:	f000 fb8a 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_GPIO_Init+0x2b8>)
 8000d32:	f000 fb7d 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_GPIO_Init+0x2ac>)
 8000d54:	f000 fb6c 	bl	8001430 <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40021400 	.word	0x40021400
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40021800 	.word	0x40021800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020000 	.word	0x40020000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_TIM_Base_MspInit+0x48>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d115      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_TIM_Base_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <HAL_TIM_Base_MspInit+0x4c>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_TIM_Base_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	201d      	movs	r0, #29
 8000e0c:	f000 fad9 	bl	80013c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e10:	201d      	movs	r0, #29
 8000e12:	f000 faf2 	bl	80013fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40000400 	.word	0x40000400
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <HAL_UART_MspInit+0x84>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12c      	bne.n	8000ea4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e94:	2307      	movs	r3, #7
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_MspInit+0x8c>)
 8000ea0:	f000 fac6 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f93e 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM3_IRQHandler+0x10>)
 8000f12:	f001 f9dd 	bl	80022d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000090 	.word	0x20000090

08000f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
	}

return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fb34 	bl	80005e2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x12>
	}
	return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	605a      	str	r2, [r3, #4]
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_isatty>:

int _isatty(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f001 ffd4 	bl	8002fd8 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20030000 	.word	0x20030000
 800105c:	00000400 	.word	0x00000400
 8001060:	20000128 	.word	0x20000128
 8001064:	20000140 	.word	0x20000140

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001092:	490e      	ldr	r1, [pc, #56]	; (80010cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a8:	4c0b      	ldr	r4, [pc, #44]	; (80010d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b6:	f7ff ffd7 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f001 ff93 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fb45 	bl	800074c <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010d0:	080041bc 	.word	0x080041bc
  ldr r2, =_sbss
 80010d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010d8:	20000140 	.word	0x20000140

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_Init+0x40>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_Init+0x40>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x40>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f94f 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fe38 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f967 	bl	8001416 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f92f 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000004 	.word	0x20000004
 800117c:	2000000c 	.word	0x2000000c
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	2000012c 	.word	0x2000012c

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000012c 	.word	0x2000012c

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c

0800120c <__NVIC_SetPriorityGrouping>:
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <__NVIC_EnableIRQ+0x38>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100

080012ac <__NVIC_SetPriority>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db0a      	blt.n	80012d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <__NVIC_SetPriority+0x4c>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	0112      	lsls	r2, r2, #4
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012d4:	e00a      	b.n	80012ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4908      	ldr	r1, [pc, #32]	; (80012fc <__NVIC_SetPriority+0x50>)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	3b04      	subs	r3, #4
 80012e4:	0112      	lsls	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	761a      	strb	r2, [r3, #24]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <NVIC_EncodePriority>:
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f1c3 0307 	rsb	r3, r3, #7
 800131a:	2b04      	cmp	r3, #4
 800131c:	bf28      	it	cs
 800131e:	2304      	movcs	r3, #4
 8001320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3304      	adds	r3, #4
 8001326:	2b06      	cmp	r3, #6
 8001328:	d902      	bls.n	8001330 <NVIC_EncodePriority+0x30>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b03      	subs	r3, #3
 800132e:	e000      	b.n	8001332 <NVIC_EncodePriority+0x32>
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	4313      	orrs	r3, r2
}
 800135a:	4618      	mov	r0, r3
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <SysTick_Config>:
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff8e 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff29 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff3e 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff8e 	bl	8001300 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff31 	bl	8001270 <__NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffa2 	bl	8001368 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e177      	b.n	800173c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8166 	bne.w	8001736 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d005      	beq.n	8001482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	2b02      	cmp	r3, #2
 8001480:	d130      	bne.n	80014e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80c0 	beq.w	8001736 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b66      	ldr	r3, [pc, #408]	; (8001754 <HAL_GPIO_Init+0x324>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a65      	ldr	r2, [pc, #404]	; (8001754 <HAL_GPIO_Init+0x324>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <HAL_GPIO_Init+0x324>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a61      	ldr	r2, [pc, #388]	; (8001758 <HAL_GPIO_Init+0x328>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_GPIO_Init+0x32c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d037      	beq.n	800166e <HAL_GPIO_Init+0x23e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <HAL_GPIO_Init+0x330>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d031      	beq.n	800166a <HAL_GPIO_Init+0x23a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a56      	ldr	r2, [pc, #344]	; (8001764 <HAL_GPIO_Init+0x334>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d02b      	beq.n	8001666 <HAL_GPIO_Init+0x236>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a55      	ldr	r2, [pc, #340]	; (8001768 <HAL_GPIO_Init+0x338>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d025      	beq.n	8001662 <HAL_GPIO_Init+0x232>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a54      	ldr	r2, [pc, #336]	; (800176c <HAL_GPIO_Init+0x33c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01f      	beq.n	800165e <HAL_GPIO_Init+0x22e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a53      	ldr	r2, [pc, #332]	; (8001770 <HAL_GPIO_Init+0x340>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x22a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_GPIO_Init+0x344>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x226>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a51      	ldr	r2, [pc, #324]	; (8001778 <HAL_GPIO_Init+0x348>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x222>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a50      	ldr	r2, [pc, #320]	; (800177c <HAL_GPIO_Init+0x34c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x21e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_GPIO_Init+0x350>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x21a>
 8001646:	2309      	movs	r3, #9
 8001648:	e012      	b.n	8001670 <HAL_GPIO_Init+0x240>
 800164a:	230a      	movs	r3, #10
 800164c:	e010      	b.n	8001670 <HAL_GPIO_Init+0x240>
 800164e:	2308      	movs	r3, #8
 8001650:	e00e      	b.n	8001670 <HAL_GPIO_Init+0x240>
 8001652:	2307      	movs	r3, #7
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x240>
 8001656:	2306      	movs	r3, #6
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x240>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x240>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x240>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x240>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x240>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x240>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x328>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_GPIO_Init+0x354>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a34      	ldr	r2, [pc, #208]	; (8001784 <HAL_GPIO_Init+0x354>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_GPIO_Init+0x354>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a29      	ldr	r2, [pc, #164]	; (8001784 <HAL_GPIO_Init+0x354>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <HAL_GPIO_Init+0x354>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_GPIO_Init+0x354>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_GPIO_Init+0x354>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_GPIO_Init+0x354>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae84 	bls.w	800144c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40021c00 	.word	0x40021c00
 800177c:	40022000 	.word	0x40022000
 8001780:	40022400 	.word	0x40022400
 8001784:	40013c00 	.word	0x40013c00

08001788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017fc:	887a      	ldrh	r2, [r7, #2]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	041a      	lsls	r2, r3, #16
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43d9      	mvns	r1, r3
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	400b      	ands	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e267      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d075      	beq.n	800192a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b04      	cmp	r3, #4
 8001848:	d00c      	beq.n	8001864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001852:	2b08      	cmp	r3, #8
 8001854:	d112      	bne.n	800187c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001856:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001862:	d10b      	bne.n	800187c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	4b7e      	ldr	r3, [pc, #504]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d05b      	beq.n	8001928 <HAL_RCC_OscConfig+0x108>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d157      	bne.n	8001928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e242      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x74>
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a75      	ldr	r2, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xb0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x98>
 800189e:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6f      	ldr	r2, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b6d      	ldr	r3, [pc, #436]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6c      	ldr	r2, [pc, #432]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xb0>
 80018b8:	4b69      	ldr	r3, [pc, #420]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a68      	ldr	r2, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a65      	ldr	r2, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc68 	bl	80011ac <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc64 	bl	80011ac <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e207      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xc0>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fc54 	bl	80011ac <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc50 	bl	80011ac <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1f3      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0xe8>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x152>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1c7      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4937      	ldr	r1, [pc, #220]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_OscConfig+0x244>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fc09 	bl	80011ac <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fc05 	bl	80011ac <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1a8      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4925      	ldr	r1, [pc, #148]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_OscConfig+0x244>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fbe8 	bl	80011ac <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fbe4 	bl	80011ac <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e187      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d036      	beq.n	8001a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d016      	beq.n	8001a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x248>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff fbc8 	bl	80011ac <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fbc4 	bl	80011ac <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e167      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x240>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x200>
 8001a3e:	e01b      	b.n	8001a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x248>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff fbb1 	bl	80011ac <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	e00e      	b.n	8001a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fbad 	bl	80011ac <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d907      	bls.n	8001a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e150      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470000 	.word	0x42470000
 8001a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ea      	bne.n	8001a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8097 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a7c      	ldr	r2, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x474>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b74      	ldr	r3, [pc, #464]	; (8001c94 <HAL_RCC_OscConfig+0x474>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a73      	ldr	r2, [pc, #460]	; (8001c94 <HAL_RCC_OscConfig+0x474>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff fb6d 	bl	80011ac <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fb69 	bl	80011ac <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e10c      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x474>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x2ea>
 8001afc:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a63      	ldr	r2, [pc, #396]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	e01c      	b.n	8001b44 <HAL_RCC_OscConfig+0x324>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x30c>
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a5b      	ldr	r2, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0x324>
 8001b2c:	4b58      	ldr	r3, [pc, #352]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a54      	ldr	r2, [pc, #336]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	f023 0304 	bic.w	r3, r3, #4
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d015      	beq.n	8001b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fb2e 	bl	80011ac <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff fb2a 	bl	80011ac <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0cb      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0ee      	beq.n	8001b54 <HAL_RCC_OscConfig+0x334>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fb18 	bl	80011ac <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7ff fb14 	bl	80011ac <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0b5      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a1 	beq.w	8001d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d05c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d141      	bne.n	8001c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_RCC_OscConfig+0x478>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fae8 	bl	80011ac <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff fae4 	bl	80011ac <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e087      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	491b      	ldr	r1, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x478>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fabd 	bl	80011ac <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff fab9 	bl	80011ac <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e05c      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x416>
 8001c54:	e054      	b.n	8001d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x478>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff faa6 	bl	80011ac <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff faa2 	bl	80011ac <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e045      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x470>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x444>
 8001c82:	e03d      	b.n	8001d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e038      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000
 8001c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x4ec>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d028      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d121      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d11a      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d111      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cc      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d90c      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d044      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d119      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e067      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4934      	ldr	r1, [pc, #208]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7ff f9d4 	bl	80011ac <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f9d0 	bl	80011ac <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e04f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d20c      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f934 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023c00 	.word	0x40023c00
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	080040fc 	.word	0x080040fc
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	20000008 	.word	0x20000008

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b094      	sub	sp, #80	; 0x50
 8001ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eec:	2300      	movs	r3, #0
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef4:	4b79      	ldr	r3, [pc, #484]	; (80020dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d00d      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x40>
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	f200 80e1 	bhi.w	80020c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x34>
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f0e:	e0db      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f14:	e0db      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f16:	4b73      	ldr	r3, [pc, #460]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f1a:	e0d8      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f32:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	2200      	movs	r2, #0
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f4e:	4622      	mov	r2, r4
 8001f50:	462b      	mov	r3, r5
 8001f52:	f04f 0000 	mov.w	r0, #0
 8001f56:	f04f 0100 	mov.w	r1, #0
 8001f5a:	0159      	lsls	r1, r3, #5
 8001f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f60:	0150      	lsls	r0, r2, #5
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4621      	mov	r1, r4
 8001f68:	1a51      	subs	r1, r2, r1
 8001f6a:	6139      	str	r1, [r7, #16]
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f80:	4659      	mov	r1, fp
 8001f82:	018b      	lsls	r3, r1, #6
 8001f84:	4651      	mov	r1, sl
 8001f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f8a:	4651      	mov	r1, sl
 8001f8c:	018a      	lsls	r2, r1, #6
 8001f8e:	4651      	mov	r1, sl
 8001f90:	ebb2 0801 	subs.w	r8, r2, r1
 8001f94:	4659      	mov	r1, fp
 8001f96:	eb63 0901 	sbc.w	r9, r3, r1
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fae:	4690      	mov	r8, r2
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	eb18 0303 	adds.w	r3, r8, r3
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	462b      	mov	r3, r5
 8001fbc:	eb49 0303 	adc.w	r3, r9, r3
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fce:	4629      	mov	r1, r5
 8001fd0:	024b      	lsls	r3, r1, #9
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fd8:	4621      	mov	r1, r4
 8001fda:	024a      	lsls	r2, r1, #9
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fec:	f7fe f950 	bl	8000290 <__aeabi_uldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff8:	e058      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	099b      	lsrs	r3, r3, #6
 8002000:	2200      	movs	r2, #0
 8002002:	4618      	mov	r0, r3
 8002004:	4611      	mov	r1, r2
 8002006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002014:	4642      	mov	r2, r8
 8002016:	464b      	mov	r3, r9
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0159      	lsls	r1, r3, #5
 8002022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002026:	0150      	lsls	r0, r2, #5
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4641      	mov	r1, r8
 800202e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002032:	4649      	mov	r1, r9
 8002034:	eb63 0b01 	sbc.w	fp, r3, r1
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800204c:	ebb2 040a 	subs.w	r4, r2, sl
 8002050:	eb63 050b 	sbc.w	r5, r3, fp
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	00eb      	lsls	r3, r5, #3
 800205e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002062:	00e2      	lsls	r2, r4, #3
 8002064:	4614      	mov	r4, r2
 8002066:	461d      	mov	r5, r3
 8002068:	4643      	mov	r3, r8
 800206a:	18e3      	adds	r3, r4, r3
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	464b      	mov	r3, r9
 8002070:	eb45 0303 	adc.w	r3, r5, r3
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002082:	4629      	mov	r1, r5
 8002084:	028b      	lsls	r3, r1, #10
 8002086:	4621      	mov	r1, r4
 8002088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800208c:	4621      	mov	r1, r4
 800208e:	028a      	lsls	r2, r1, #10
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002096:	2200      	movs	r2, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	61fa      	str	r2, [r7, #28]
 800209c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a0:	f7fe f8f6 	bl	8000290 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4613      	mov	r3, r2
 80020aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_GetSysClockFreq+0x200>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3750      	adds	r7, #80	; 0x50
 80020d4:	46bd      	mov	sp, r7
 80020d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	007a1200 	.word	0x007a1200

080020e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002104:	f7ff fff0 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0a9b      	lsrs	r3, r3, #10
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4903      	ldr	r1, [pc, #12]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	0800410c 	.word	0x0800410c

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800212c:	f7ff ffdc 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0b5b      	lsrs	r3, r3, #13
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK2Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	0800410c 	.word	0x0800410c

08002150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e041      	b.n	80021e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fe2e 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f000 fa96 	bl	80026c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d001      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e04e      	b.n	80022a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d022      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002232:	d01d      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d018      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_TIM_Base_Start_IT+0xcc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00e      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x80>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_TIM_Base_Start_IT+0xdc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b06      	cmp	r3, #6
 8002280:	d010      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002292:	e007      	b.n	80022a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40000c00 	.word	0x40000c00
 80022c4:	40010400 	.word	0x40010400
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40001800 	.word	0x40001800

080022d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0202 	mvn.w	r2, #2
 80022fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9b5 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9a7 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9b8 	bl	8002696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0204 	mvn.w	r2, #4
 8002350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f98b 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f97d 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f98e 	bl	8002696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b08      	cmp	r3, #8
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0208 	mvn.w	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f961 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f953 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f964 	bl	8002696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0210 	mvn.w	r2, #16
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2208      	movs	r2, #8
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f937 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f929 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f93a 	bl	8002696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0201 	mvn.w	r2, #1
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe f8d4 	bl	80005fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b80      	cmp	r3, #128	; 0x80
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fae0 	bl	8002a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8ff 	bl	80026aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0220 	mvn.w	r2, #32
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 faaa 	bl	8002a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_TIM_ConfigClockSource+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0b4      	b.n	8002666 <HAL_TIM_ConfigClockSource+0x186>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800251a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d03e      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	f200 8087 	bhi.w	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	f000 8086 	beq.w	8002652 <HAL_TIM_ConfigClockSource+0x172>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	d87f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b70      	cmp	r3, #112	; 0x70
 800254e:	d01a      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0xa6>
 8002550:	2b70      	cmp	r3, #112	; 0x70
 8002552:	d87b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b60      	cmp	r3, #96	; 0x60
 8002556:	d050      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x11a>
 8002558:	2b60      	cmp	r3, #96	; 0x60
 800255a:	d877      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b50      	cmp	r3, #80	; 0x50
 800255e:	d03c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xfa>
 8002560:	2b50      	cmp	r3, #80	; 0x50
 8002562:	d873      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d058      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x13a>
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d86f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	d064      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b30      	cmp	r3, #48	; 0x30
 8002572:	d86b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d060      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d867      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05c      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	2b10      	cmp	r3, #16
 8002582:	d05a      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002584:	e062      	b.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f000 f9ad 	bl	80028f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
      break;
 80025b2:	e04f      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f000 f996 	bl	80028f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d6:	609a      	str	r2, [r3, #8]
      break;
 80025d8:	e03c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f90a 	bl	8002800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2150      	movs	r1, #80	; 0x50
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f963 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 80025f8:	e02c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f929 	bl	800285e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2160      	movs	r1, #96	; 0x60
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f953 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 8002618:	e01c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f8ea 	bl	8002800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	; 0x40
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f943 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 8002638:	e00c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 f93a 	bl	80028be <TIM_ITRx_SetConfig>
      break;
 800264a:	e003      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e000      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a40      	ldr	r2, [pc, #256]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d00f      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <TIM_Base_SetConfig+0x118>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00b      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <TIM_Base_SetConfig+0x11c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <TIM_Base_SetConfig+0x120>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d003      	beq.n	8002700 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3a      	ldr	r2, [pc, #232]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d027      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <TIM_Base_SetConfig+0x118>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d023      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <TIM_Base_SetConfig+0x11c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <TIM_Base_SetConfig+0x120>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d017      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <TIM_Base_SetConfig+0x128>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <TIM_Base_SetConfig+0x12c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a26      	ldr	r2, [pc, #152]	; (80027f0 <TIM_Base_SetConfig+0x130>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00b      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <TIM_Base_SetConfig+0x134>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <TIM_Base_SetConfig+0x138>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <TIM_Base_SetConfig+0x13c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <TIM_Base_SetConfig+0x114>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xf8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <TIM_Base_SetConfig+0x124>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40010400 	.word	0x40010400
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	40001800 	.word	0x40001800
 80027f8:	40001c00 	.word	0x40001c00
 80027fc:	40002000 	.word	0x40002000

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0307 	orr.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	431a      	orrs	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002948:	2302      	movs	r3, #2
 800294a:	e05a      	b.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d01d      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d018      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00e      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d004      	beq.n	80029d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40010400 	.word	0x40010400
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40001800 	.word	0x40001800

08002a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e03f      	b.n	8002ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe f9d4 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f829 	bl	8002af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b0c0      	sub	sp, #256	; 0x100
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	ea40 0301 	orr.w	r3, r0, r1
 8002b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b48:	f021 010c 	bic.w	r1, r1, #12
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b56:	430b      	orrs	r3, r1
 8002b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	6999      	ldr	r1, [r3, #24]
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	ea40 0301 	orr.w	r3, r0, r1
 8002b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <UART_SetConfig+0x2cc>)
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d005      	beq.n	8002b90 <UART_SetConfig+0xa0>
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b8d      	ldr	r3, [pc, #564]	; (8002dc0 <UART_SetConfig+0x2d0>)
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d104      	bne.n	8002b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7ff faca 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8002b94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b98:	e003      	b.n	8002ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9a:	f7ff fab1 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8002b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	f040 810c 	bne.w	8002dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	1891      	adds	r1, r2, r2
 8002bc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bca:	415b      	adcs	r3, r3
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	eb12 0801 	adds.w	r8, r2, r1
 8002bd8:	4629      	mov	r1, r5
 8002bda:	eb43 0901 	adc.w	r9, r3, r1
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	eb18 0303 	adds.w	r3, r8, r3
 8002bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c00:	462b      	mov	r3, r5
 8002c02:	eb49 0303 	adc.w	r3, r9, r3
 8002c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c1e:	460b      	mov	r3, r1
 8002c20:	18db      	adds	r3, r3, r3
 8002c22:	653b      	str	r3, [r7, #80]	; 0x50
 8002c24:	4613      	mov	r3, r2
 8002c26:	eb42 0303 	adc.w	r3, r2, r3
 8002c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c34:	f7fd fb2c 	bl	8000290 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011c      	lsls	r4, r3, #4
 8002c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	1891      	adds	r1, r2, r2
 8002c5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c60:	415b      	adcs	r3, r3
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c68:	4641      	mov	r1, r8
 8002c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c6e:	4649      	mov	r1, r9
 8002c70:	eb43 0b01 	adc.w	fp, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c88:	4692      	mov	sl, r2
 8002c8a:	469b      	mov	fp, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c96:	464b      	mov	r3, r9
 8002c98:	eb4b 0303 	adc.w	r3, fp, r3
 8002c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cba:	4613      	mov	r3, r2
 8002cbc:	eb42 0303 	adc.w	r3, r2, r3
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cca:	f7fd fae1 	bl	8000290 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	1acb      	subs	r3, r1, r3
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002cec:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cf8:	441c      	add	r4, r3
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d14:	415b      	adcs	r3, r3
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	1851      	adds	r1, r2, r1
 8002d20:	6339      	str	r1, [r7, #48]	; 0x30
 8002d22:	4649      	mov	r1, r9
 8002d24:	414b      	adcs	r3, r1
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d34:	4659      	mov	r1, fp
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4651      	mov	r1, sl
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4642      	mov	r2, r8
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d50:	464b      	mov	r3, r9
 8002d52:	460a      	mov	r2, r1
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d70:	460b      	mov	r3, r1
 8002d72:	18db      	adds	r3, r3, r3
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	4613      	mov	r3, r2
 8002d78:	eb42 0303 	adc.w	r3, r2, r3
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d86:	f7fd fa83 	bl	8000290 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2164      	movs	r1, #100	; 0x64
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	3332      	adds	r3, #50	; 0x32
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <UART_SetConfig+0x2d4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	f003 0207 	and.w	r2, r3, #7
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4422      	add	r2, r4
 8002db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002db8:	e105      	b.n	8002fc6 <UART_SetConfig+0x4d6>
 8002dba:	bf00      	nop
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40011400 	.word	0x40011400
 8002dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dda:	4642      	mov	r2, r8
 8002ddc:	464b      	mov	r3, r9
 8002dde:	1891      	adds	r1, r2, r2
 8002de0:	6239      	str	r1, [r7, #32]
 8002de2:	415b      	adcs	r3, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dea:	4641      	mov	r1, r8
 8002dec:	1854      	adds	r4, r2, r1
 8002dee:	4649      	mov	r1, r9
 8002df0:	eb43 0501 	adc.w	r5, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	00eb      	lsls	r3, r5, #3
 8002dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e02:	00e2      	lsls	r2, r4, #3
 8002e04:	4614      	mov	r4, r2
 8002e06:	461d      	mov	r5, r3
 8002e08:	4643      	mov	r3, r8
 8002e0a:	18e3      	adds	r3, r4, r3
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e10:	464b      	mov	r3, r9
 8002e12:	eb45 0303 	adc.w	r3, r5, r3
 8002e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e36:	4629      	mov	r1, r5
 8002e38:	008b      	lsls	r3, r1, #2
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e40:	4621      	mov	r1, r4
 8002e42:	008a      	lsls	r2, r1, #2
 8002e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e48:	f7fd fa22 	bl	8000290 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002e52:	fba3 2302 	umull	r2, r3, r3, r2
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	011c      	lsls	r4, r3, #4
 8002e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	1891      	adds	r1, r2, r2
 8002e72:	61b9      	str	r1, [r7, #24]
 8002e74:	415b      	adcs	r3, r3
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	1851      	adds	r1, r2, r1
 8002e80:	6139      	str	r1, [r7, #16]
 8002e82:	4649      	mov	r1, r9
 8002e84:	414b      	adcs	r3, r1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e94:	4659      	mov	r1, fp
 8002e96:	00cb      	lsls	r3, r1, #3
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	00ca      	lsls	r2, r1, #3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ee6:	f7fd f9d3 	bl	8000290 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	; 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	3332      	adds	r3, #50	; 0x32
 8002f02:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0e:	441c      	add	r4, r3
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	673b      	str	r3, [r7, #112]	; 0x70
 8002f18:	677a      	str	r2, [r7, #116]	; 0x74
 8002f1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1851      	adds	r1, r2, r1
 8002f32:	6039      	str	r1, [r7, #0]
 8002f34:	4649      	mov	r1, r9
 8002f36:	414b      	adcs	r3, r1
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f46:	4659      	mov	r1, fp
 8002f48:	00cb      	lsls	r3, r1, #3
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f50:	4651      	mov	r1, sl
 8002f52:	00ca      	lsls	r2, r1, #3
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4642      	mov	r2, r8
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f60:	464b      	mov	r3, r9
 8002f62:	460a      	mov	r2, r1
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	663b      	str	r3, [r7, #96]	; 0x60
 8002f74:	667a      	str	r2, [r7, #100]	; 0x64
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f82:	4649      	mov	r1, r9
 8002f84:	008b      	lsls	r3, r1, #2
 8002f86:	4641      	mov	r1, r8
 8002f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	008a      	lsls	r2, r1, #2
 8002f90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f94:	f7fd f97c 	bl	8000290 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2164      	movs	r1, #100	; 0x64
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	3332      	adds	r3, #50	; 0x32
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <UART_SetConfig+0x4e4>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4422      	add	r2, r4
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	51eb851f 	.word	0x51eb851f

08002fd8 <__errno>:
 8002fd8:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <__errno+0x8>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000010 	.word	0x20000010

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	4d0d      	ldr	r5, [pc, #52]	; (800301c <__libc_init_array+0x38>)
 8002fe8:	4c0d      	ldr	r4, [pc, #52]	; (8003020 <__libc_init_array+0x3c>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	2600      	movs	r6, #0
 8002ff0:	42a6      	cmp	r6, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	4d0b      	ldr	r5, [pc, #44]	; (8003024 <__libc_init_array+0x40>)
 8002ff6:	4c0c      	ldr	r4, [pc, #48]	; (8003028 <__libc_init_array+0x44>)
 8002ff8:	f001 f824 	bl	8004044 <_init>
 8002ffc:	1b64      	subs	r4, r4, r5
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	2600      	movs	r6, #0
 8003002:	42a6      	cmp	r6, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f855 3b04 	ldr.w	r3, [r5], #4
 800300c:	4798      	blx	r3
 800300e:	3601      	adds	r6, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f855 3b04 	ldr.w	r3, [r5], #4
 8003016:	4798      	blx	r3
 8003018:	3601      	adds	r6, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	080041b4 	.word	0x080041b4
 8003020:	080041b4 	.word	0x080041b4
 8003024:	080041b4 	.word	0x080041b4
 8003028:	080041b8 	.word	0x080041b8

0800302c <memset>:
 800302c:	4402      	add	r2, r0
 800302e:	4603      	mov	r3, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <iprintf>:
 800303c:	b40f      	push	{r0, r1, r2, r3}
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <iprintf+0x2c>)
 8003040:	b513      	push	{r0, r1, r4, lr}
 8003042:	681c      	ldr	r4, [r3, #0]
 8003044:	b124      	cbz	r4, 8003050 <iprintf+0x14>
 8003046:	69a3      	ldr	r3, [r4, #24]
 8003048:	b913      	cbnz	r3, 8003050 <iprintf+0x14>
 800304a:	4620      	mov	r0, r4
 800304c:	f000 fa5e 	bl	800350c <__sinit>
 8003050:	ab05      	add	r3, sp, #20
 8003052:	9a04      	ldr	r2, [sp, #16]
 8003054:	68a1      	ldr	r1, [r4, #8]
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	4620      	mov	r0, r4
 800305a:	f000 fc67 	bl	800392c <_vfiprintf_r>
 800305e:	b002      	add	sp, #8
 8003060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003064:	b004      	add	sp, #16
 8003066:	4770      	bx	lr
 8003068:	20000010 	.word	0x20000010

0800306c <_puts_r>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	460e      	mov	r6, r1
 8003070:	4605      	mov	r5, r0
 8003072:	b118      	cbz	r0, 800307c <_puts_r+0x10>
 8003074:	6983      	ldr	r3, [r0, #24]
 8003076:	b90b      	cbnz	r3, 800307c <_puts_r+0x10>
 8003078:	f000 fa48 	bl	800350c <__sinit>
 800307c:	69ab      	ldr	r3, [r5, #24]
 800307e:	68ac      	ldr	r4, [r5, #8]
 8003080:	b913      	cbnz	r3, 8003088 <_puts_r+0x1c>
 8003082:	4628      	mov	r0, r5
 8003084:	f000 fa42 	bl	800350c <__sinit>
 8003088:	4b2c      	ldr	r3, [pc, #176]	; (800313c <_puts_r+0xd0>)
 800308a:	429c      	cmp	r4, r3
 800308c:	d120      	bne.n	80030d0 <_puts_r+0x64>
 800308e:	686c      	ldr	r4, [r5, #4]
 8003090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003092:	07db      	lsls	r3, r3, #31
 8003094:	d405      	bmi.n	80030a2 <_puts_r+0x36>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	0598      	lsls	r0, r3, #22
 800309a:	d402      	bmi.n	80030a2 <_puts_r+0x36>
 800309c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800309e:	f000 fad3 	bl	8003648 <__retarget_lock_acquire_recursive>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	0719      	lsls	r1, r3, #28
 80030a6:	d51d      	bpl.n	80030e4 <_puts_r+0x78>
 80030a8:	6923      	ldr	r3, [r4, #16]
 80030aa:	b1db      	cbz	r3, 80030e4 <_puts_r+0x78>
 80030ac:	3e01      	subs	r6, #1
 80030ae:	68a3      	ldr	r3, [r4, #8]
 80030b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60a3      	str	r3, [r4, #8]
 80030b8:	bb39      	cbnz	r1, 800310a <_puts_r+0x9e>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da38      	bge.n	8003130 <_puts_r+0xc4>
 80030be:	4622      	mov	r2, r4
 80030c0:	210a      	movs	r1, #10
 80030c2:	4628      	mov	r0, r5
 80030c4:	f000 f848 	bl	8003158 <__swbuf_r>
 80030c8:	3001      	adds	r0, #1
 80030ca:	d011      	beq.n	80030f0 <_puts_r+0x84>
 80030cc:	250a      	movs	r5, #10
 80030ce:	e011      	b.n	80030f4 <_puts_r+0x88>
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <_puts_r+0xd4>)
 80030d2:	429c      	cmp	r4, r3
 80030d4:	d101      	bne.n	80030da <_puts_r+0x6e>
 80030d6:	68ac      	ldr	r4, [r5, #8]
 80030d8:	e7da      	b.n	8003090 <_puts_r+0x24>
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <_puts_r+0xd8>)
 80030dc:	429c      	cmp	r4, r3
 80030de:	bf08      	it	eq
 80030e0:	68ec      	ldreq	r4, [r5, #12]
 80030e2:	e7d5      	b.n	8003090 <_puts_r+0x24>
 80030e4:	4621      	mov	r1, r4
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 f888 	bl	80031fc <__swsetup_r>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d0dd      	beq.n	80030ac <_puts_r+0x40>
 80030f0:	f04f 35ff 	mov.w	r5, #4294967295
 80030f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f6:	07da      	lsls	r2, r3, #31
 80030f8:	d405      	bmi.n	8003106 <_puts_r+0x9a>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	059b      	lsls	r3, r3, #22
 80030fe:	d402      	bmi.n	8003106 <_puts_r+0x9a>
 8003100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003102:	f000 faa2 	bl	800364a <__retarget_lock_release_recursive>
 8003106:	4628      	mov	r0, r5
 8003108:	bd70      	pop	{r4, r5, r6, pc}
 800310a:	2b00      	cmp	r3, #0
 800310c:	da04      	bge.n	8003118 <_puts_r+0xac>
 800310e:	69a2      	ldr	r2, [r4, #24]
 8003110:	429a      	cmp	r2, r3
 8003112:	dc06      	bgt.n	8003122 <_puts_r+0xb6>
 8003114:	290a      	cmp	r1, #10
 8003116:	d004      	beq.n	8003122 <_puts_r+0xb6>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	6022      	str	r2, [r4, #0]
 800311e:	7019      	strb	r1, [r3, #0]
 8003120:	e7c5      	b.n	80030ae <_puts_r+0x42>
 8003122:	4622      	mov	r2, r4
 8003124:	4628      	mov	r0, r5
 8003126:	f000 f817 	bl	8003158 <__swbuf_r>
 800312a:	3001      	adds	r0, #1
 800312c:	d1bf      	bne.n	80030ae <_puts_r+0x42>
 800312e:	e7df      	b.n	80030f0 <_puts_r+0x84>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	250a      	movs	r5, #10
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	6022      	str	r2, [r4, #0]
 8003138:	701d      	strb	r5, [r3, #0]
 800313a:	e7db      	b.n	80030f4 <_puts_r+0x88>
 800313c:	08004138 	.word	0x08004138
 8003140:	08004158 	.word	0x08004158
 8003144:	08004118 	.word	0x08004118

08003148 <puts>:
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <puts+0xc>)
 800314a:	4601      	mov	r1, r0
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	f7ff bf8d 	b.w	800306c <_puts_r>
 8003152:	bf00      	nop
 8003154:	20000010 	.word	0x20000010

08003158 <__swbuf_r>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	460e      	mov	r6, r1
 800315c:	4614      	mov	r4, r2
 800315e:	4605      	mov	r5, r0
 8003160:	b118      	cbz	r0, 800316a <__swbuf_r+0x12>
 8003162:	6983      	ldr	r3, [r0, #24]
 8003164:	b90b      	cbnz	r3, 800316a <__swbuf_r+0x12>
 8003166:	f000 f9d1 	bl	800350c <__sinit>
 800316a:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <__swbuf_r+0x98>)
 800316c:	429c      	cmp	r4, r3
 800316e:	d12b      	bne.n	80031c8 <__swbuf_r+0x70>
 8003170:	686c      	ldr	r4, [r5, #4]
 8003172:	69a3      	ldr	r3, [r4, #24]
 8003174:	60a3      	str	r3, [r4, #8]
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	071a      	lsls	r2, r3, #28
 800317a:	d52f      	bpl.n	80031dc <__swbuf_r+0x84>
 800317c:	6923      	ldr	r3, [r4, #16]
 800317e:	b36b      	cbz	r3, 80031dc <__swbuf_r+0x84>
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	1ac0      	subs	r0, r0, r3
 8003186:	6963      	ldr	r3, [r4, #20]
 8003188:	b2f6      	uxtb	r6, r6
 800318a:	4283      	cmp	r3, r0
 800318c:	4637      	mov	r7, r6
 800318e:	dc04      	bgt.n	800319a <__swbuf_r+0x42>
 8003190:	4621      	mov	r1, r4
 8003192:	4628      	mov	r0, r5
 8003194:	f000 f926 	bl	80033e4 <_fflush_r>
 8003198:	bb30      	cbnz	r0, 80031e8 <__swbuf_r+0x90>
 800319a:	68a3      	ldr	r3, [r4, #8]
 800319c:	3b01      	subs	r3, #1
 800319e:	60a3      	str	r3, [r4, #8]
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	6022      	str	r2, [r4, #0]
 80031a6:	701e      	strb	r6, [r3, #0]
 80031a8:	6963      	ldr	r3, [r4, #20]
 80031aa:	3001      	adds	r0, #1
 80031ac:	4283      	cmp	r3, r0
 80031ae:	d004      	beq.n	80031ba <__swbuf_r+0x62>
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	07db      	lsls	r3, r3, #31
 80031b4:	d506      	bpl.n	80031c4 <__swbuf_r+0x6c>
 80031b6:	2e0a      	cmp	r6, #10
 80031b8:	d104      	bne.n	80031c4 <__swbuf_r+0x6c>
 80031ba:	4621      	mov	r1, r4
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 f911 	bl	80033e4 <_fflush_r>
 80031c2:	b988      	cbnz	r0, 80031e8 <__swbuf_r+0x90>
 80031c4:	4638      	mov	r0, r7
 80031c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <__swbuf_r+0x9c>)
 80031ca:	429c      	cmp	r4, r3
 80031cc:	d101      	bne.n	80031d2 <__swbuf_r+0x7a>
 80031ce:	68ac      	ldr	r4, [r5, #8]
 80031d0:	e7cf      	b.n	8003172 <__swbuf_r+0x1a>
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <__swbuf_r+0xa0>)
 80031d4:	429c      	cmp	r4, r3
 80031d6:	bf08      	it	eq
 80031d8:	68ec      	ldreq	r4, [r5, #12]
 80031da:	e7ca      	b.n	8003172 <__swbuf_r+0x1a>
 80031dc:	4621      	mov	r1, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 f80c 	bl	80031fc <__swsetup_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0cb      	beq.n	8003180 <__swbuf_r+0x28>
 80031e8:	f04f 37ff 	mov.w	r7, #4294967295
 80031ec:	e7ea      	b.n	80031c4 <__swbuf_r+0x6c>
 80031ee:	bf00      	nop
 80031f0:	08004138 	.word	0x08004138
 80031f4:	08004158 	.word	0x08004158
 80031f8:	08004118 	.word	0x08004118

080031fc <__swsetup_r>:
 80031fc:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <__swsetup_r+0xcc>)
 80031fe:	b570      	push	{r4, r5, r6, lr}
 8003200:	681d      	ldr	r5, [r3, #0]
 8003202:	4606      	mov	r6, r0
 8003204:	460c      	mov	r4, r1
 8003206:	b125      	cbz	r5, 8003212 <__swsetup_r+0x16>
 8003208:	69ab      	ldr	r3, [r5, #24]
 800320a:	b913      	cbnz	r3, 8003212 <__swsetup_r+0x16>
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f97d 	bl	800350c <__sinit>
 8003212:	4b2e      	ldr	r3, [pc, #184]	; (80032cc <__swsetup_r+0xd0>)
 8003214:	429c      	cmp	r4, r3
 8003216:	d10f      	bne.n	8003238 <__swsetup_r+0x3c>
 8003218:	686c      	ldr	r4, [r5, #4]
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003220:	0719      	lsls	r1, r3, #28
 8003222:	d42c      	bmi.n	800327e <__swsetup_r+0x82>
 8003224:	06dd      	lsls	r5, r3, #27
 8003226:	d411      	bmi.n	800324c <__swsetup_r+0x50>
 8003228:	2309      	movs	r3, #9
 800322a:	6033      	str	r3, [r6, #0]
 800322c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003230:	81a3      	strh	r3, [r4, #12]
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	e03e      	b.n	80032b6 <__swsetup_r+0xba>
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <__swsetup_r+0xd4>)
 800323a:	429c      	cmp	r4, r3
 800323c:	d101      	bne.n	8003242 <__swsetup_r+0x46>
 800323e:	68ac      	ldr	r4, [r5, #8]
 8003240:	e7eb      	b.n	800321a <__swsetup_r+0x1e>
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <__swsetup_r+0xd8>)
 8003244:	429c      	cmp	r4, r3
 8003246:	bf08      	it	eq
 8003248:	68ec      	ldreq	r4, [r5, #12]
 800324a:	e7e6      	b.n	800321a <__swsetup_r+0x1e>
 800324c:	0758      	lsls	r0, r3, #29
 800324e:	d512      	bpl.n	8003276 <__swsetup_r+0x7a>
 8003250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003252:	b141      	cbz	r1, 8003266 <__swsetup_r+0x6a>
 8003254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003258:	4299      	cmp	r1, r3
 800325a:	d002      	beq.n	8003262 <__swsetup_r+0x66>
 800325c:	4630      	mov	r0, r6
 800325e:	f000 fa5b 	bl	8003718 <_free_r>
 8003262:	2300      	movs	r3, #0
 8003264:	6363      	str	r3, [r4, #52]	; 0x34
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	2300      	movs	r3, #0
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	6923      	ldr	r3, [r4, #16]
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	81a3      	strh	r3, [r4, #12]
 800327e:	6923      	ldr	r3, [r4, #16]
 8003280:	b94b      	cbnz	r3, 8003296 <__swsetup_r+0x9a>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d003      	beq.n	8003296 <__swsetup_r+0x9a>
 800328e:	4621      	mov	r1, r4
 8003290:	4630      	mov	r0, r6
 8003292:	f000 fa01 	bl	8003698 <__smakebuf_r>
 8003296:	89a0      	ldrh	r0, [r4, #12]
 8003298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800329c:	f010 0301 	ands.w	r3, r0, #1
 80032a0:	d00a      	beq.n	80032b8 <__swsetup_r+0xbc>
 80032a2:	2300      	movs	r3, #0
 80032a4:	60a3      	str	r3, [r4, #8]
 80032a6:	6963      	ldr	r3, [r4, #20]
 80032a8:	425b      	negs	r3, r3
 80032aa:	61a3      	str	r3, [r4, #24]
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	b943      	cbnz	r3, 80032c2 <__swsetup_r+0xc6>
 80032b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032b4:	d1ba      	bne.n	800322c <__swsetup_r+0x30>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	0781      	lsls	r1, r0, #30
 80032ba:	bf58      	it	pl
 80032bc:	6963      	ldrpl	r3, [r4, #20]
 80032be:	60a3      	str	r3, [r4, #8]
 80032c0:	e7f4      	b.n	80032ac <__swsetup_r+0xb0>
 80032c2:	2000      	movs	r0, #0
 80032c4:	e7f7      	b.n	80032b6 <__swsetup_r+0xba>
 80032c6:	bf00      	nop
 80032c8:	20000010 	.word	0x20000010
 80032cc:	08004138 	.word	0x08004138
 80032d0:	08004158 	.word	0x08004158
 80032d4:	08004118 	.word	0x08004118

080032d8 <__sflush_r>:
 80032d8:	898a      	ldrh	r2, [r1, #12]
 80032da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032de:	4605      	mov	r5, r0
 80032e0:	0710      	lsls	r0, r2, #28
 80032e2:	460c      	mov	r4, r1
 80032e4:	d458      	bmi.n	8003398 <__sflush_r+0xc0>
 80032e6:	684b      	ldr	r3, [r1, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	dc05      	bgt.n	80032f8 <__sflush_r+0x20>
 80032ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	dc02      	bgt.n	80032f8 <__sflush_r+0x20>
 80032f2:	2000      	movs	r0, #0
 80032f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032fa:	2e00      	cmp	r6, #0
 80032fc:	d0f9      	beq.n	80032f2 <__sflush_r+0x1a>
 80032fe:	2300      	movs	r3, #0
 8003300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003304:	682f      	ldr	r7, [r5, #0]
 8003306:	602b      	str	r3, [r5, #0]
 8003308:	d032      	beq.n	8003370 <__sflush_r+0x98>
 800330a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800330c:	89a3      	ldrh	r3, [r4, #12]
 800330e:	075a      	lsls	r2, r3, #29
 8003310:	d505      	bpl.n	800331e <__sflush_r+0x46>
 8003312:	6863      	ldr	r3, [r4, #4]
 8003314:	1ac0      	subs	r0, r0, r3
 8003316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003318:	b10b      	cbz	r3, 800331e <__sflush_r+0x46>
 800331a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800331c:	1ac0      	subs	r0, r0, r3
 800331e:	2300      	movs	r3, #0
 8003320:	4602      	mov	r2, r0
 8003322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003324:	6a21      	ldr	r1, [r4, #32]
 8003326:	4628      	mov	r0, r5
 8003328:	47b0      	blx	r6
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	d106      	bne.n	800333e <__sflush_r+0x66>
 8003330:	6829      	ldr	r1, [r5, #0]
 8003332:	291d      	cmp	r1, #29
 8003334:	d82c      	bhi.n	8003390 <__sflush_r+0xb8>
 8003336:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <__sflush_r+0x108>)
 8003338:	40ca      	lsrs	r2, r1
 800333a:	07d6      	lsls	r6, r2, #31
 800333c:	d528      	bpl.n	8003390 <__sflush_r+0xb8>
 800333e:	2200      	movs	r2, #0
 8003340:	6062      	str	r2, [r4, #4]
 8003342:	04d9      	lsls	r1, r3, #19
 8003344:	6922      	ldr	r2, [r4, #16]
 8003346:	6022      	str	r2, [r4, #0]
 8003348:	d504      	bpl.n	8003354 <__sflush_r+0x7c>
 800334a:	1c42      	adds	r2, r0, #1
 800334c:	d101      	bne.n	8003352 <__sflush_r+0x7a>
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	b903      	cbnz	r3, 8003354 <__sflush_r+0x7c>
 8003352:	6560      	str	r0, [r4, #84]	; 0x54
 8003354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003356:	602f      	str	r7, [r5, #0]
 8003358:	2900      	cmp	r1, #0
 800335a:	d0ca      	beq.n	80032f2 <__sflush_r+0x1a>
 800335c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003360:	4299      	cmp	r1, r3
 8003362:	d002      	beq.n	800336a <__sflush_r+0x92>
 8003364:	4628      	mov	r0, r5
 8003366:	f000 f9d7 	bl	8003718 <_free_r>
 800336a:	2000      	movs	r0, #0
 800336c:	6360      	str	r0, [r4, #52]	; 0x34
 800336e:	e7c1      	b.n	80032f4 <__sflush_r+0x1c>
 8003370:	6a21      	ldr	r1, [r4, #32]
 8003372:	2301      	movs	r3, #1
 8003374:	4628      	mov	r0, r5
 8003376:	47b0      	blx	r6
 8003378:	1c41      	adds	r1, r0, #1
 800337a:	d1c7      	bne.n	800330c <__sflush_r+0x34>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0c4      	beq.n	800330c <__sflush_r+0x34>
 8003382:	2b1d      	cmp	r3, #29
 8003384:	d001      	beq.n	800338a <__sflush_r+0xb2>
 8003386:	2b16      	cmp	r3, #22
 8003388:	d101      	bne.n	800338e <__sflush_r+0xb6>
 800338a:	602f      	str	r7, [r5, #0]
 800338c:	e7b1      	b.n	80032f2 <__sflush_r+0x1a>
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003394:	81a3      	strh	r3, [r4, #12]
 8003396:	e7ad      	b.n	80032f4 <__sflush_r+0x1c>
 8003398:	690f      	ldr	r7, [r1, #16]
 800339a:	2f00      	cmp	r7, #0
 800339c:	d0a9      	beq.n	80032f2 <__sflush_r+0x1a>
 800339e:	0793      	lsls	r3, r2, #30
 80033a0:	680e      	ldr	r6, [r1, #0]
 80033a2:	bf08      	it	eq
 80033a4:	694b      	ldreq	r3, [r1, #20]
 80033a6:	600f      	str	r7, [r1, #0]
 80033a8:	bf18      	it	ne
 80033aa:	2300      	movne	r3, #0
 80033ac:	eba6 0807 	sub.w	r8, r6, r7
 80033b0:	608b      	str	r3, [r1, #8]
 80033b2:	f1b8 0f00 	cmp.w	r8, #0
 80033b6:	dd9c      	ble.n	80032f2 <__sflush_r+0x1a>
 80033b8:	6a21      	ldr	r1, [r4, #32]
 80033ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033bc:	4643      	mov	r3, r8
 80033be:	463a      	mov	r2, r7
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b0      	blx	r6
 80033c4:	2800      	cmp	r0, #0
 80033c6:	dc06      	bgt.n	80033d6 <__sflush_r+0xfe>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	e78e      	b.n	80032f4 <__sflush_r+0x1c>
 80033d6:	4407      	add	r7, r0
 80033d8:	eba8 0800 	sub.w	r8, r8, r0
 80033dc:	e7e9      	b.n	80033b2 <__sflush_r+0xda>
 80033de:	bf00      	nop
 80033e0:	20400001 	.word	0x20400001

080033e4 <_fflush_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	690b      	ldr	r3, [r1, #16]
 80033e8:	4605      	mov	r5, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	b913      	cbnz	r3, 80033f4 <_fflush_r+0x10>
 80033ee:	2500      	movs	r5, #0
 80033f0:	4628      	mov	r0, r5
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	b118      	cbz	r0, 80033fe <_fflush_r+0x1a>
 80033f6:	6983      	ldr	r3, [r0, #24]
 80033f8:	b90b      	cbnz	r3, 80033fe <_fflush_r+0x1a>
 80033fa:	f000 f887 	bl	800350c <__sinit>
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <_fflush_r+0x6c>)
 8003400:	429c      	cmp	r4, r3
 8003402:	d11b      	bne.n	800343c <_fflush_r+0x58>
 8003404:	686c      	ldr	r4, [r5, #4]
 8003406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ef      	beq.n	80033ee <_fflush_r+0xa>
 800340e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003410:	07d0      	lsls	r0, r2, #31
 8003412:	d404      	bmi.n	800341e <_fflush_r+0x3a>
 8003414:	0599      	lsls	r1, r3, #22
 8003416:	d402      	bmi.n	800341e <_fflush_r+0x3a>
 8003418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800341a:	f000 f915 	bl	8003648 <__retarget_lock_acquire_recursive>
 800341e:	4628      	mov	r0, r5
 8003420:	4621      	mov	r1, r4
 8003422:	f7ff ff59 	bl	80032d8 <__sflush_r>
 8003426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003428:	07da      	lsls	r2, r3, #31
 800342a:	4605      	mov	r5, r0
 800342c:	d4e0      	bmi.n	80033f0 <_fflush_r+0xc>
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	059b      	lsls	r3, r3, #22
 8003432:	d4dd      	bmi.n	80033f0 <_fflush_r+0xc>
 8003434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003436:	f000 f908 	bl	800364a <__retarget_lock_release_recursive>
 800343a:	e7d9      	b.n	80033f0 <_fflush_r+0xc>
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <_fflush_r+0x70>)
 800343e:	429c      	cmp	r4, r3
 8003440:	d101      	bne.n	8003446 <_fflush_r+0x62>
 8003442:	68ac      	ldr	r4, [r5, #8]
 8003444:	e7df      	b.n	8003406 <_fflush_r+0x22>
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <_fflush_r+0x74>)
 8003448:	429c      	cmp	r4, r3
 800344a:	bf08      	it	eq
 800344c:	68ec      	ldreq	r4, [r5, #12]
 800344e:	e7da      	b.n	8003406 <_fflush_r+0x22>
 8003450:	08004138 	.word	0x08004138
 8003454:	08004158 	.word	0x08004158
 8003458:	08004118 	.word	0x08004118

0800345c <std>:
 800345c:	2300      	movs	r3, #0
 800345e:	b510      	push	{r4, lr}
 8003460:	4604      	mov	r4, r0
 8003462:	e9c0 3300 	strd	r3, r3, [r0]
 8003466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800346a:	6083      	str	r3, [r0, #8]
 800346c:	8181      	strh	r1, [r0, #12]
 800346e:	6643      	str	r3, [r0, #100]	; 0x64
 8003470:	81c2      	strh	r2, [r0, #14]
 8003472:	6183      	str	r3, [r0, #24]
 8003474:	4619      	mov	r1, r3
 8003476:	2208      	movs	r2, #8
 8003478:	305c      	adds	r0, #92	; 0x5c
 800347a:	f7ff fdd7 	bl	800302c <memset>
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <std+0x38>)
 8003480:	6263      	str	r3, [r4, #36]	; 0x24
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <std+0x3c>)
 8003484:	62a3      	str	r3, [r4, #40]	; 0x28
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <std+0x40>)
 8003488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <std+0x44>)
 800348c:	6224      	str	r4, [r4, #32]
 800348e:	6323      	str	r3, [r4, #48]	; 0x30
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	08003ed5 	.word	0x08003ed5
 8003498:	08003ef7 	.word	0x08003ef7
 800349c:	08003f2f 	.word	0x08003f2f
 80034a0:	08003f53 	.word	0x08003f53

080034a4 <_cleanup_r>:
 80034a4:	4901      	ldr	r1, [pc, #4]	; (80034ac <_cleanup_r+0x8>)
 80034a6:	f000 b8af 	b.w	8003608 <_fwalk_reent>
 80034aa:	bf00      	nop
 80034ac:	080033e5 	.word	0x080033e5

080034b0 <__sfmoreglue>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	2268      	movs	r2, #104	; 0x68
 80034b4:	1e4d      	subs	r5, r1, #1
 80034b6:	4355      	muls	r5, r2
 80034b8:	460e      	mov	r6, r1
 80034ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034be:	f000 f997 	bl	80037f0 <_malloc_r>
 80034c2:	4604      	mov	r4, r0
 80034c4:	b140      	cbz	r0, 80034d8 <__sfmoreglue+0x28>
 80034c6:	2100      	movs	r1, #0
 80034c8:	e9c0 1600 	strd	r1, r6, [r0]
 80034cc:	300c      	adds	r0, #12
 80034ce:	60a0      	str	r0, [r4, #8]
 80034d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034d4:	f7ff fdaa 	bl	800302c <memset>
 80034d8:	4620      	mov	r0, r4
 80034da:	bd70      	pop	{r4, r5, r6, pc}

080034dc <__sfp_lock_acquire>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__sfp_lock_acquire+0x8>)
 80034de:	f000 b8b3 	b.w	8003648 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000131 	.word	0x20000131

080034e8 <__sfp_lock_release>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__sfp_lock_release+0x8>)
 80034ea:	f000 b8ae 	b.w	800364a <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	20000131 	.word	0x20000131

080034f4 <__sinit_lock_acquire>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__sinit_lock_acquire+0x8>)
 80034f6:	f000 b8a7 	b.w	8003648 <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	20000132 	.word	0x20000132

08003500 <__sinit_lock_release>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__sinit_lock_release+0x8>)
 8003502:	f000 b8a2 	b.w	800364a <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	20000132 	.word	0x20000132

0800350c <__sinit>:
 800350c:	b510      	push	{r4, lr}
 800350e:	4604      	mov	r4, r0
 8003510:	f7ff fff0 	bl	80034f4 <__sinit_lock_acquire>
 8003514:	69a3      	ldr	r3, [r4, #24]
 8003516:	b11b      	cbz	r3, 8003520 <__sinit+0x14>
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800351c:	f7ff bff0 	b.w	8003500 <__sinit_lock_release>
 8003520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003524:	6523      	str	r3, [r4, #80]	; 0x50
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <__sinit+0x68>)
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <__sinit+0x6c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	62a2      	str	r2, [r4, #40]	; 0x28
 800352e:	42a3      	cmp	r3, r4
 8003530:	bf04      	itt	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	61a3      	streq	r3, [r4, #24]
 8003536:	4620      	mov	r0, r4
 8003538:	f000 f820 	bl	800357c <__sfp>
 800353c:	6060      	str	r0, [r4, #4]
 800353e:	4620      	mov	r0, r4
 8003540:	f000 f81c 	bl	800357c <__sfp>
 8003544:	60a0      	str	r0, [r4, #8]
 8003546:	4620      	mov	r0, r4
 8003548:	f000 f818 	bl	800357c <__sfp>
 800354c:	2200      	movs	r2, #0
 800354e:	60e0      	str	r0, [r4, #12]
 8003550:	2104      	movs	r1, #4
 8003552:	6860      	ldr	r0, [r4, #4]
 8003554:	f7ff ff82 	bl	800345c <std>
 8003558:	68a0      	ldr	r0, [r4, #8]
 800355a:	2201      	movs	r2, #1
 800355c:	2109      	movs	r1, #9
 800355e:	f7ff ff7d 	bl	800345c <std>
 8003562:	68e0      	ldr	r0, [r4, #12]
 8003564:	2202      	movs	r2, #2
 8003566:	2112      	movs	r1, #18
 8003568:	f7ff ff78 	bl	800345c <std>
 800356c:	2301      	movs	r3, #1
 800356e:	61a3      	str	r3, [r4, #24]
 8003570:	e7d2      	b.n	8003518 <__sinit+0xc>
 8003572:	bf00      	nop
 8003574:	08004114 	.word	0x08004114
 8003578:	080034a5 	.word	0x080034a5

0800357c <__sfp>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	4607      	mov	r7, r0
 8003580:	f7ff ffac 	bl	80034dc <__sfp_lock_acquire>
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <__sfp+0x84>)
 8003586:	681e      	ldr	r6, [r3, #0]
 8003588:	69b3      	ldr	r3, [r6, #24]
 800358a:	b913      	cbnz	r3, 8003592 <__sfp+0x16>
 800358c:	4630      	mov	r0, r6
 800358e:	f7ff ffbd 	bl	800350c <__sinit>
 8003592:	3648      	adds	r6, #72	; 0x48
 8003594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003598:	3b01      	subs	r3, #1
 800359a:	d503      	bpl.n	80035a4 <__sfp+0x28>
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	b30b      	cbz	r3, 80035e4 <__sfp+0x68>
 80035a0:	6836      	ldr	r6, [r6, #0]
 80035a2:	e7f7      	b.n	8003594 <__sfp+0x18>
 80035a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035a8:	b9d5      	cbnz	r5, 80035e0 <__sfp+0x64>
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <__sfp+0x88>)
 80035ac:	60e3      	str	r3, [r4, #12]
 80035ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035b2:	6665      	str	r5, [r4, #100]	; 0x64
 80035b4:	f000 f847 	bl	8003646 <__retarget_lock_init_recursive>
 80035b8:	f7ff ff96 	bl	80034e8 <__sfp_lock_release>
 80035bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035c4:	6025      	str	r5, [r4, #0]
 80035c6:	61a5      	str	r5, [r4, #24]
 80035c8:	2208      	movs	r2, #8
 80035ca:	4629      	mov	r1, r5
 80035cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035d0:	f7ff fd2c 	bl	800302c <memset>
 80035d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035dc:	4620      	mov	r0, r4
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	3468      	adds	r4, #104	; 0x68
 80035e2:	e7d9      	b.n	8003598 <__sfp+0x1c>
 80035e4:	2104      	movs	r1, #4
 80035e6:	4638      	mov	r0, r7
 80035e8:	f7ff ff62 	bl	80034b0 <__sfmoreglue>
 80035ec:	4604      	mov	r4, r0
 80035ee:	6030      	str	r0, [r6, #0]
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d1d5      	bne.n	80035a0 <__sfp+0x24>
 80035f4:	f7ff ff78 	bl	80034e8 <__sfp_lock_release>
 80035f8:	230c      	movs	r3, #12
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	e7ee      	b.n	80035dc <__sfp+0x60>
 80035fe:	bf00      	nop
 8003600:	08004114 	.word	0x08004114
 8003604:	ffff0001 	.word	0xffff0001

08003608 <_fwalk_reent>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	4606      	mov	r6, r0
 800360e:	4688      	mov	r8, r1
 8003610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003614:	2700      	movs	r7, #0
 8003616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800361a:	f1b9 0901 	subs.w	r9, r9, #1
 800361e:	d505      	bpl.n	800362c <_fwalk_reent+0x24>
 8003620:	6824      	ldr	r4, [r4, #0]
 8003622:	2c00      	cmp	r4, #0
 8003624:	d1f7      	bne.n	8003616 <_fwalk_reent+0xe>
 8003626:	4638      	mov	r0, r7
 8003628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362c:	89ab      	ldrh	r3, [r5, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d907      	bls.n	8003642 <_fwalk_reent+0x3a>
 8003632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003636:	3301      	adds	r3, #1
 8003638:	d003      	beq.n	8003642 <_fwalk_reent+0x3a>
 800363a:	4629      	mov	r1, r5
 800363c:	4630      	mov	r0, r6
 800363e:	47c0      	blx	r8
 8003640:	4307      	orrs	r7, r0
 8003642:	3568      	adds	r5, #104	; 0x68
 8003644:	e7e9      	b.n	800361a <_fwalk_reent+0x12>

08003646 <__retarget_lock_init_recursive>:
 8003646:	4770      	bx	lr

08003648 <__retarget_lock_acquire_recursive>:
 8003648:	4770      	bx	lr

0800364a <__retarget_lock_release_recursive>:
 800364a:	4770      	bx	lr

0800364c <__swhatbuf_r>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	460e      	mov	r6, r1
 8003650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003654:	2900      	cmp	r1, #0
 8003656:	b096      	sub	sp, #88	; 0x58
 8003658:	4614      	mov	r4, r2
 800365a:	461d      	mov	r5, r3
 800365c:	da08      	bge.n	8003670 <__swhatbuf_r+0x24>
 800365e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	061a      	lsls	r2, r3, #24
 8003668:	d410      	bmi.n	800368c <__swhatbuf_r+0x40>
 800366a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366e:	e00e      	b.n	800368e <__swhatbuf_r+0x42>
 8003670:	466a      	mov	r2, sp
 8003672:	f000 fc95 	bl	8003fa0 <_fstat_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	dbf1      	blt.n	800365e <__swhatbuf_r+0x12>
 800367a:	9a01      	ldr	r2, [sp, #4]
 800367c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003684:	425a      	negs	r2, r3
 8003686:	415a      	adcs	r2, r3
 8003688:	602a      	str	r2, [r5, #0]
 800368a:	e7ee      	b.n	800366a <__swhatbuf_r+0x1e>
 800368c:	2340      	movs	r3, #64	; 0x40
 800368e:	2000      	movs	r0, #0
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	b016      	add	sp, #88	; 0x58
 8003694:	bd70      	pop	{r4, r5, r6, pc}
	...

08003698 <__smakebuf_r>:
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800369c:	079d      	lsls	r5, r3, #30
 800369e:	4606      	mov	r6, r0
 80036a0:	460c      	mov	r4, r1
 80036a2:	d507      	bpl.n	80036b4 <__smakebuf_r+0x1c>
 80036a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	2301      	movs	r3, #1
 80036ae:	6163      	str	r3, [r4, #20]
 80036b0:	b002      	add	sp, #8
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	ab01      	add	r3, sp, #4
 80036b6:	466a      	mov	r2, sp
 80036b8:	f7ff ffc8 	bl	800364c <__swhatbuf_r>
 80036bc:	9900      	ldr	r1, [sp, #0]
 80036be:	4605      	mov	r5, r0
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f895 	bl	80037f0 <_malloc_r>
 80036c6:	b948      	cbnz	r0, 80036dc <__smakebuf_r+0x44>
 80036c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036cc:	059a      	lsls	r2, r3, #22
 80036ce:	d4ef      	bmi.n	80036b0 <__smakebuf_r+0x18>
 80036d0:	f023 0303 	bic.w	r3, r3, #3
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	e7e3      	b.n	80036a4 <__smakebuf_r+0xc>
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <__smakebuf_r+0x7c>)
 80036de:	62b3      	str	r3, [r6, #40]	; 0x28
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	6020      	str	r0, [r4, #0]
 80036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	9b00      	ldr	r3, [sp, #0]
 80036ec:	6163      	str	r3, [r4, #20]
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	6120      	str	r0, [r4, #16]
 80036f2:	b15b      	cbz	r3, 800370c <__smakebuf_r+0x74>
 80036f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 fc63 	bl	8003fc4 <_isatty_r>
 80036fe:	b128      	cbz	r0, 800370c <__smakebuf_r+0x74>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	89a0      	ldrh	r0, [r4, #12]
 800370e:	4305      	orrs	r5, r0
 8003710:	81a5      	strh	r5, [r4, #12]
 8003712:	e7cd      	b.n	80036b0 <__smakebuf_r+0x18>
 8003714:	080034a5 	.word	0x080034a5

08003718 <_free_r>:
 8003718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800371a:	2900      	cmp	r1, #0
 800371c:	d044      	beq.n	80037a8 <_free_r+0x90>
 800371e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003722:	9001      	str	r0, [sp, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f1a1 0404 	sub.w	r4, r1, #4
 800372a:	bfb8      	it	lt
 800372c:	18e4      	addlt	r4, r4, r3
 800372e:	f000 fc6b 	bl	8004008 <__malloc_lock>
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <_free_r+0x94>)
 8003734:	9801      	ldr	r0, [sp, #4]
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	b933      	cbnz	r3, 8003748 <_free_r+0x30>
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	6014      	str	r4, [r2, #0]
 800373e:	b003      	add	sp, #12
 8003740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003744:	f000 bc66 	b.w	8004014 <__malloc_unlock>
 8003748:	42a3      	cmp	r3, r4
 800374a:	d908      	bls.n	800375e <_free_r+0x46>
 800374c:	6825      	ldr	r5, [r4, #0]
 800374e:	1961      	adds	r1, r4, r5
 8003750:	428b      	cmp	r3, r1
 8003752:	bf01      	itttt	eq
 8003754:	6819      	ldreq	r1, [r3, #0]
 8003756:	685b      	ldreq	r3, [r3, #4]
 8003758:	1949      	addeq	r1, r1, r5
 800375a:	6021      	streq	r1, [r4, #0]
 800375c:	e7ed      	b.n	800373a <_free_r+0x22>
 800375e:	461a      	mov	r2, r3
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	b10b      	cbz	r3, 8003768 <_free_r+0x50>
 8003764:	42a3      	cmp	r3, r4
 8003766:	d9fa      	bls.n	800375e <_free_r+0x46>
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	1855      	adds	r5, r2, r1
 800376c:	42a5      	cmp	r5, r4
 800376e:	d10b      	bne.n	8003788 <_free_r+0x70>
 8003770:	6824      	ldr	r4, [r4, #0]
 8003772:	4421      	add	r1, r4
 8003774:	1854      	adds	r4, r2, r1
 8003776:	42a3      	cmp	r3, r4
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	d1e0      	bne.n	800373e <_free_r+0x26>
 800377c:	681c      	ldr	r4, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	6053      	str	r3, [r2, #4]
 8003782:	4421      	add	r1, r4
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	e7da      	b.n	800373e <_free_r+0x26>
 8003788:	d902      	bls.n	8003790 <_free_r+0x78>
 800378a:	230c      	movs	r3, #12
 800378c:	6003      	str	r3, [r0, #0]
 800378e:	e7d6      	b.n	800373e <_free_r+0x26>
 8003790:	6825      	ldr	r5, [r4, #0]
 8003792:	1961      	adds	r1, r4, r5
 8003794:	428b      	cmp	r3, r1
 8003796:	bf04      	itt	eq
 8003798:	6819      	ldreq	r1, [r3, #0]
 800379a:	685b      	ldreq	r3, [r3, #4]
 800379c:	6063      	str	r3, [r4, #4]
 800379e:	bf04      	itt	eq
 80037a0:	1949      	addeq	r1, r1, r5
 80037a2:	6021      	streq	r1, [r4, #0]
 80037a4:	6054      	str	r4, [r2, #4]
 80037a6:	e7ca      	b.n	800373e <_free_r+0x26>
 80037a8:	b003      	add	sp, #12
 80037aa:	bd30      	pop	{r4, r5, pc}
 80037ac:	20000134 	.word	0x20000134

080037b0 <sbrk_aligned>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4e0e      	ldr	r6, [pc, #56]	; (80037ec <sbrk_aligned+0x3c>)
 80037b4:	460c      	mov	r4, r1
 80037b6:	6831      	ldr	r1, [r6, #0]
 80037b8:	4605      	mov	r5, r0
 80037ba:	b911      	cbnz	r1, 80037c2 <sbrk_aligned+0x12>
 80037bc:	f000 fb7a 	bl	8003eb4 <_sbrk_r>
 80037c0:	6030      	str	r0, [r6, #0]
 80037c2:	4621      	mov	r1, r4
 80037c4:	4628      	mov	r0, r5
 80037c6:	f000 fb75 	bl	8003eb4 <_sbrk_r>
 80037ca:	1c43      	adds	r3, r0, #1
 80037cc:	d00a      	beq.n	80037e4 <sbrk_aligned+0x34>
 80037ce:	1cc4      	adds	r4, r0, #3
 80037d0:	f024 0403 	bic.w	r4, r4, #3
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d007      	beq.n	80037e8 <sbrk_aligned+0x38>
 80037d8:	1a21      	subs	r1, r4, r0
 80037da:	4628      	mov	r0, r5
 80037dc:	f000 fb6a 	bl	8003eb4 <_sbrk_r>
 80037e0:	3001      	adds	r0, #1
 80037e2:	d101      	bne.n	80037e8 <sbrk_aligned+0x38>
 80037e4:	f04f 34ff 	mov.w	r4, #4294967295
 80037e8:	4620      	mov	r0, r4
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	20000138 	.word	0x20000138

080037f0 <_malloc_r>:
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	1ccd      	adds	r5, r1, #3
 80037f6:	f025 0503 	bic.w	r5, r5, #3
 80037fa:	3508      	adds	r5, #8
 80037fc:	2d0c      	cmp	r5, #12
 80037fe:	bf38      	it	cc
 8003800:	250c      	movcc	r5, #12
 8003802:	2d00      	cmp	r5, #0
 8003804:	4607      	mov	r7, r0
 8003806:	db01      	blt.n	800380c <_malloc_r+0x1c>
 8003808:	42a9      	cmp	r1, r5
 800380a:	d905      	bls.n	8003818 <_malloc_r+0x28>
 800380c:	230c      	movs	r3, #12
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	2600      	movs	r6, #0
 8003812:	4630      	mov	r0, r6
 8003814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003818:	4e2e      	ldr	r6, [pc, #184]	; (80038d4 <_malloc_r+0xe4>)
 800381a:	f000 fbf5 	bl	8004008 <__malloc_lock>
 800381e:	6833      	ldr	r3, [r6, #0]
 8003820:	461c      	mov	r4, r3
 8003822:	bb34      	cbnz	r4, 8003872 <_malloc_r+0x82>
 8003824:	4629      	mov	r1, r5
 8003826:	4638      	mov	r0, r7
 8003828:	f7ff ffc2 	bl	80037b0 <sbrk_aligned>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	4604      	mov	r4, r0
 8003830:	d14d      	bne.n	80038ce <_malloc_r+0xde>
 8003832:	6834      	ldr	r4, [r6, #0]
 8003834:	4626      	mov	r6, r4
 8003836:	2e00      	cmp	r6, #0
 8003838:	d140      	bne.n	80038bc <_malloc_r+0xcc>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	4631      	mov	r1, r6
 800383e:	4638      	mov	r0, r7
 8003840:	eb04 0803 	add.w	r8, r4, r3
 8003844:	f000 fb36 	bl	8003eb4 <_sbrk_r>
 8003848:	4580      	cmp	r8, r0
 800384a:	d13a      	bne.n	80038c2 <_malloc_r+0xd2>
 800384c:	6821      	ldr	r1, [r4, #0]
 800384e:	3503      	adds	r5, #3
 8003850:	1a6d      	subs	r5, r5, r1
 8003852:	f025 0503 	bic.w	r5, r5, #3
 8003856:	3508      	adds	r5, #8
 8003858:	2d0c      	cmp	r5, #12
 800385a:	bf38      	it	cc
 800385c:	250c      	movcc	r5, #12
 800385e:	4629      	mov	r1, r5
 8003860:	4638      	mov	r0, r7
 8003862:	f7ff ffa5 	bl	80037b0 <sbrk_aligned>
 8003866:	3001      	adds	r0, #1
 8003868:	d02b      	beq.n	80038c2 <_malloc_r+0xd2>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	442b      	add	r3, r5
 800386e:	6023      	str	r3, [r4, #0]
 8003870:	e00e      	b.n	8003890 <_malloc_r+0xa0>
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	1b52      	subs	r2, r2, r5
 8003876:	d41e      	bmi.n	80038b6 <_malloc_r+0xc6>
 8003878:	2a0b      	cmp	r2, #11
 800387a:	d916      	bls.n	80038aa <_malloc_r+0xba>
 800387c:	1961      	adds	r1, r4, r5
 800387e:	42a3      	cmp	r3, r4
 8003880:	6025      	str	r5, [r4, #0]
 8003882:	bf18      	it	ne
 8003884:	6059      	strne	r1, [r3, #4]
 8003886:	6863      	ldr	r3, [r4, #4]
 8003888:	bf08      	it	eq
 800388a:	6031      	streq	r1, [r6, #0]
 800388c:	5162      	str	r2, [r4, r5]
 800388e:	604b      	str	r3, [r1, #4]
 8003890:	4638      	mov	r0, r7
 8003892:	f104 060b 	add.w	r6, r4, #11
 8003896:	f000 fbbd 	bl	8004014 <__malloc_unlock>
 800389a:	f026 0607 	bic.w	r6, r6, #7
 800389e:	1d23      	adds	r3, r4, #4
 80038a0:	1af2      	subs	r2, r6, r3
 80038a2:	d0b6      	beq.n	8003812 <_malloc_r+0x22>
 80038a4:	1b9b      	subs	r3, r3, r6
 80038a6:	50a3      	str	r3, [r4, r2]
 80038a8:	e7b3      	b.n	8003812 <_malloc_r+0x22>
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	bf0c      	ite	eq
 80038b0:	6032      	streq	r2, [r6, #0]
 80038b2:	605a      	strne	r2, [r3, #4]
 80038b4:	e7ec      	b.n	8003890 <_malloc_r+0xa0>
 80038b6:	4623      	mov	r3, r4
 80038b8:	6864      	ldr	r4, [r4, #4]
 80038ba:	e7b2      	b.n	8003822 <_malloc_r+0x32>
 80038bc:	4634      	mov	r4, r6
 80038be:	6876      	ldr	r6, [r6, #4]
 80038c0:	e7b9      	b.n	8003836 <_malloc_r+0x46>
 80038c2:	230c      	movs	r3, #12
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4638      	mov	r0, r7
 80038c8:	f000 fba4 	bl	8004014 <__malloc_unlock>
 80038cc:	e7a1      	b.n	8003812 <_malloc_r+0x22>
 80038ce:	6025      	str	r5, [r4, #0]
 80038d0:	e7de      	b.n	8003890 <_malloc_r+0xa0>
 80038d2:	bf00      	nop
 80038d4:	20000134 	.word	0x20000134

080038d8 <__sfputc_r>:
 80038d8:	6893      	ldr	r3, [r2, #8]
 80038da:	3b01      	subs	r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	b410      	push	{r4}
 80038e0:	6093      	str	r3, [r2, #8]
 80038e2:	da08      	bge.n	80038f6 <__sfputc_r+0x1e>
 80038e4:	6994      	ldr	r4, [r2, #24]
 80038e6:	42a3      	cmp	r3, r4
 80038e8:	db01      	blt.n	80038ee <__sfputc_r+0x16>
 80038ea:	290a      	cmp	r1, #10
 80038ec:	d103      	bne.n	80038f6 <__sfputc_r+0x1e>
 80038ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f2:	f7ff bc31 	b.w	8003158 <__swbuf_r>
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	1c58      	adds	r0, r3, #1
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	7019      	strb	r1, [r3, #0]
 80038fe:	4608      	mov	r0, r1
 8003900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003904:	4770      	bx	lr

08003906 <__sfputs_r>:
 8003906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003908:	4606      	mov	r6, r0
 800390a:	460f      	mov	r7, r1
 800390c:	4614      	mov	r4, r2
 800390e:	18d5      	adds	r5, r2, r3
 8003910:	42ac      	cmp	r4, r5
 8003912:	d101      	bne.n	8003918 <__sfputs_r+0x12>
 8003914:	2000      	movs	r0, #0
 8003916:	e007      	b.n	8003928 <__sfputs_r+0x22>
 8003918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391c:	463a      	mov	r2, r7
 800391e:	4630      	mov	r0, r6
 8003920:	f7ff ffda 	bl	80038d8 <__sfputc_r>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d1f3      	bne.n	8003910 <__sfputs_r+0xa>
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800392c <_vfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	460d      	mov	r5, r1
 8003932:	b09d      	sub	sp, #116	; 0x74
 8003934:	4614      	mov	r4, r2
 8003936:	4698      	mov	r8, r3
 8003938:	4606      	mov	r6, r0
 800393a:	b118      	cbz	r0, 8003944 <_vfiprintf_r+0x18>
 800393c:	6983      	ldr	r3, [r0, #24]
 800393e:	b90b      	cbnz	r3, 8003944 <_vfiprintf_r+0x18>
 8003940:	f7ff fde4 	bl	800350c <__sinit>
 8003944:	4b89      	ldr	r3, [pc, #548]	; (8003b6c <_vfiprintf_r+0x240>)
 8003946:	429d      	cmp	r5, r3
 8003948:	d11b      	bne.n	8003982 <_vfiprintf_r+0x56>
 800394a:	6875      	ldr	r5, [r6, #4]
 800394c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394e:	07d9      	lsls	r1, r3, #31
 8003950:	d405      	bmi.n	800395e <_vfiprintf_r+0x32>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	059a      	lsls	r2, r3, #22
 8003956:	d402      	bmi.n	800395e <_vfiprintf_r+0x32>
 8003958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395a:	f7ff fe75 	bl	8003648 <__retarget_lock_acquire_recursive>
 800395e:	89ab      	ldrh	r3, [r5, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	d501      	bpl.n	8003968 <_vfiprintf_r+0x3c>
 8003964:	692b      	ldr	r3, [r5, #16]
 8003966:	b9eb      	cbnz	r3, 80039a4 <_vfiprintf_r+0x78>
 8003968:	4629      	mov	r1, r5
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff fc46 	bl	80031fc <__swsetup_r>
 8003970:	b1c0      	cbz	r0, 80039a4 <_vfiprintf_r+0x78>
 8003972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003974:	07dc      	lsls	r4, r3, #31
 8003976:	d50e      	bpl.n	8003996 <_vfiprintf_r+0x6a>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	b01d      	add	sp, #116	; 0x74
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <_vfiprintf_r+0x244>)
 8003984:	429d      	cmp	r5, r3
 8003986:	d101      	bne.n	800398c <_vfiprintf_r+0x60>
 8003988:	68b5      	ldr	r5, [r6, #8]
 800398a:	e7df      	b.n	800394c <_vfiprintf_r+0x20>
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <_vfiprintf_r+0x248>)
 800398e:	429d      	cmp	r5, r3
 8003990:	bf08      	it	eq
 8003992:	68f5      	ldreq	r5, [r6, #12]
 8003994:	e7da      	b.n	800394c <_vfiprintf_r+0x20>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	0598      	lsls	r0, r3, #22
 800399a:	d4ed      	bmi.n	8003978 <_vfiprintf_r+0x4c>
 800399c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399e:	f7ff fe54 	bl	800364a <__retarget_lock_release_recursive>
 80039a2:	e7e9      	b.n	8003978 <_vfiprintf_r+0x4c>
 80039a4:	2300      	movs	r3, #0
 80039a6:	9309      	str	r3, [sp, #36]	; 0x24
 80039a8:	2320      	movs	r3, #32
 80039aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b2:	2330      	movs	r3, #48	; 0x30
 80039b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b78 <_vfiprintf_r+0x24c>
 80039b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039bc:	f04f 0901 	mov.w	r9, #1
 80039c0:	4623      	mov	r3, r4
 80039c2:	469a      	mov	sl, r3
 80039c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c8:	b10a      	cbz	r2, 80039ce <_vfiprintf_r+0xa2>
 80039ca:	2a25      	cmp	r2, #37	; 0x25
 80039cc:	d1f9      	bne.n	80039c2 <_vfiprintf_r+0x96>
 80039ce:	ebba 0b04 	subs.w	fp, sl, r4
 80039d2:	d00b      	beq.n	80039ec <_vfiprintf_r+0xc0>
 80039d4:	465b      	mov	r3, fp
 80039d6:	4622      	mov	r2, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff ff93 	bl	8003906 <__sfputs_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	f000 80aa 	beq.w	8003b3a <_vfiprintf_r+0x20e>
 80039e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e8:	445a      	add	r2, fp
 80039ea:	9209      	str	r2, [sp, #36]	; 0x24
 80039ec:	f89a 3000 	ldrb.w	r3, [sl]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a2 	beq.w	8003b3a <_vfiprintf_r+0x20e>
 80039f6:	2300      	movs	r3, #0
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a00:	f10a 0a01 	add.w	sl, sl, #1
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	9307      	str	r3, [sp, #28]
 8003a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0e:	4654      	mov	r4, sl
 8003a10:	2205      	movs	r2, #5
 8003a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a16:	4858      	ldr	r0, [pc, #352]	; (8003b78 <_vfiprintf_r+0x24c>)
 8003a18:	f7fc fbea 	bl	80001f0 <memchr>
 8003a1c:	9a04      	ldr	r2, [sp, #16]
 8003a1e:	b9d8      	cbnz	r0, 8003a58 <_vfiprintf_r+0x12c>
 8003a20:	06d1      	lsls	r1, r2, #27
 8003a22:	bf44      	itt	mi
 8003a24:	2320      	movmi	r3, #32
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	0713      	lsls	r3, r2, #28
 8003a2c:	bf44      	itt	mi
 8003a2e:	232b      	movmi	r3, #43	; 0x2b
 8003a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a34:	f89a 3000 	ldrb.w	r3, [sl]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d015      	beq.n	8003a68 <_vfiprintf_r+0x13c>
 8003a3c:	9a07      	ldr	r2, [sp, #28]
 8003a3e:	4654      	mov	r4, sl
 8003a40:	2000      	movs	r0, #0
 8003a42:	f04f 0c0a 	mov.w	ip, #10
 8003a46:	4621      	mov	r1, r4
 8003a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4c:	3b30      	subs	r3, #48	; 0x30
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d94e      	bls.n	8003af0 <_vfiprintf_r+0x1c4>
 8003a52:	b1b0      	cbz	r0, 8003a82 <_vfiprintf_r+0x156>
 8003a54:	9207      	str	r2, [sp, #28]
 8003a56:	e014      	b.n	8003a82 <_vfiprintf_r+0x156>
 8003a58:	eba0 0308 	sub.w	r3, r0, r8
 8003a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	46a2      	mov	sl, r4
 8003a66:	e7d2      	b.n	8003a0e <_vfiprintf_r+0xe2>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	1d19      	adds	r1, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfbb      	ittet	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7a:	9307      	strge	r3, [sp, #28]
 8003a7c:	9307      	strlt	r3, [sp, #28]
 8003a7e:	bfb8      	it	lt
 8003a80:	9204      	strlt	r2, [sp, #16]
 8003a82:	7823      	ldrb	r3, [r4, #0]
 8003a84:	2b2e      	cmp	r3, #46	; 0x2e
 8003a86:	d10c      	bne.n	8003aa2 <_vfiprintf_r+0x176>
 8003a88:	7863      	ldrb	r3, [r4, #1]
 8003a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8c:	d135      	bne.n	8003afa <_vfiprintf_r+0x1ce>
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfb8      	it	lt
 8003a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a9e:	3402      	adds	r4, #2
 8003aa0:	9305      	str	r3, [sp, #20]
 8003aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b88 <_vfiprintf_r+0x25c>
 8003aa6:	7821      	ldrb	r1, [r4, #0]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f7fc fba0 	bl	80001f0 <memchr>
 8003ab0:	b140      	cbz	r0, 8003ac4 <_vfiprintf_r+0x198>
 8003ab2:	2340      	movs	r3, #64	; 0x40
 8003ab4:	eba0 000a 	sub.w	r0, r0, sl
 8003ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8003abc:	9b04      	ldr	r3, [sp, #16]
 8003abe:	4303      	orrs	r3, r0
 8003ac0:	3401      	adds	r4, #1
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac8:	482c      	ldr	r0, [pc, #176]	; (8003b7c <_vfiprintf_r+0x250>)
 8003aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ace:	2206      	movs	r2, #6
 8003ad0:	f7fc fb8e 	bl	80001f0 <memchr>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d03f      	beq.n	8003b58 <_vfiprintf_r+0x22c>
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <_vfiprintf_r+0x254>)
 8003ada:	bb1b      	cbnz	r3, 8003b24 <_vfiprintf_r+0x1f8>
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	3307      	adds	r3, #7
 8003ae0:	f023 0307 	bic.w	r3, r3, #7
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	443b      	add	r3, r7
 8003aec:	9309      	str	r3, [sp, #36]	; 0x24
 8003aee:	e767      	b.n	80039c0 <_vfiprintf_r+0x94>
 8003af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af4:	460c      	mov	r4, r1
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7a5      	b.n	8003a46 <_vfiprintf_r+0x11a>
 8003afa:	2300      	movs	r3, #0
 8003afc:	3401      	adds	r4, #1
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	4620      	mov	r0, r4
 8003b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b0c:	3a30      	subs	r2, #48	; 0x30
 8003b0e:	2a09      	cmp	r2, #9
 8003b10:	d903      	bls.n	8003b1a <_vfiprintf_r+0x1ee>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0c5      	beq.n	8003aa2 <_vfiprintf_r+0x176>
 8003b16:	9105      	str	r1, [sp, #20]
 8003b18:	e7c3      	b.n	8003aa2 <_vfiprintf_r+0x176>
 8003b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2301      	movs	r3, #1
 8003b22:	e7f0      	b.n	8003b06 <_vfiprintf_r+0x1da>
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	462a      	mov	r2, r5
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <_vfiprintf_r+0x258>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f3af 8000 	nop.w
 8003b34:	4607      	mov	r7, r0
 8003b36:	1c78      	adds	r0, r7, #1
 8003b38:	d1d6      	bne.n	8003ae8 <_vfiprintf_r+0x1bc>
 8003b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b3c:	07d9      	lsls	r1, r3, #31
 8003b3e:	d405      	bmi.n	8003b4c <_vfiprintf_r+0x220>
 8003b40:	89ab      	ldrh	r3, [r5, #12]
 8003b42:	059a      	lsls	r2, r3, #22
 8003b44:	d402      	bmi.n	8003b4c <_vfiprintf_r+0x220>
 8003b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b48:	f7ff fd7f 	bl	800364a <__retarget_lock_release_recursive>
 8003b4c:	89ab      	ldrh	r3, [r5, #12]
 8003b4e:	065b      	lsls	r3, r3, #25
 8003b50:	f53f af12 	bmi.w	8003978 <_vfiprintf_r+0x4c>
 8003b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b56:	e711      	b.n	800397c <_vfiprintf_r+0x50>
 8003b58:	ab03      	add	r3, sp, #12
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <_vfiprintf_r+0x258>)
 8003b60:	a904      	add	r1, sp, #16
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 f880 	bl	8003c68 <_printf_i>
 8003b68:	e7e4      	b.n	8003b34 <_vfiprintf_r+0x208>
 8003b6a:	bf00      	nop
 8003b6c:	08004138 	.word	0x08004138
 8003b70:	08004158 	.word	0x08004158
 8003b74:	08004118 	.word	0x08004118
 8003b78:	08004178 	.word	0x08004178
 8003b7c:	08004182 	.word	0x08004182
 8003b80:	00000000 	.word	0x00000000
 8003b84:	08003907 	.word	0x08003907
 8003b88:	0800417e 	.word	0x0800417e

08003b8c <_printf_common>:
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	4616      	mov	r6, r2
 8003b92:	4699      	mov	r9, r3
 8003b94:	688a      	ldr	r2, [r1, #8]
 8003b96:	690b      	ldr	r3, [r1, #16]
 8003b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bfb8      	it	lt
 8003ba0:	4613      	movlt	r3, r2
 8003ba2:	6033      	str	r3, [r6, #0]
 8003ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ba8:	4607      	mov	r7, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	b10a      	cbz	r2, 8003bb2 <_printf_common+0x26>
 8003bae:	3301      	adds	r3, #1
 8003bb0:	6033      	str	r3, [r6, #0]
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	0699      	lsls	r1, r3, #26
 8003bb6:	bf42      	ittt	mi
 8003bb8:	6833      	ldrmi	r3, [r6, #0]
 8003bba:	3302      	addmi	r3, #2
 8003bbc:	6033      	strmi	r3, [r6, #0]
 8003bbe:	6825      	ldr	r5, [r4, #0]
 8003bc0:	f015 0506 	ands.w	r5, r5, #6
 8003bc4:	d106      	bne.n	8003bd4 <_printf_common+0x48>
 8003bc6:	f104 0a19 	add.w	sl, r4, #25
 8003bca:	68e3      	ldr	r3, [r4, #12]
 8003bcc:	6832      	ldr	r2, [r6, #0]
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	dc26      	bgt.n	8003c22 <_printf_common+0x96>
 8003bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd8:	1e13      	subs	r3, r2, #0
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	bf18      	it	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	0692      	lsls	r2, r2, #26
 8003be2:	d42b      	bmi.n	8003c3c <_printf_common+0xb0>
 8003be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be8:	4649      	mov	r1, r9
 8003bea:	4638      	mov	r0, r7
 8003bec:	47c0      	blx	r8
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d01e      	beq.n	8003c30 <_printf_common+0xa4>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	68e5      	ldr	r5, [r4, #12]
 8003bf6:	6832      	ldr	r2, [r6, #0]
 8003bf8:	f003 0306 	and.w	r3, r3, #6
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	bf08      	it	eq
 8003c00:	1aad      	subeq	r5, r5, r2
 8003c02:	68a3      	ldr	r3, [r4, #8]
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	bf0c      	ite	eq
 8003c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c0c:	2500      	movne	r5, #0
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	bfc4      	itt	gt
 8003c12:	1a9b      	subgt	r3, r3, r2
 8003c14:	18ed      	addgt	r5, r5, r3
 8003c16:	2600      	movs	r6, #0
 8003c18:	341a      	adds	r4, #26
 8003c1a:	42b5      	cmp	r5, r6
 8003c1c:	d11a      	bne.n	8003c54 <_printf_common+0xc8>
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e008      	b.n	8003c34 <_printf_common+0xa8>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4652      	mov	r2, sl
 8003c26:	4649      	mov	r1, r9
 8003c28:	4638      	mov	r0, r7
 8003c2a:	47c0      	blx	r8
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d103      	bne.n	8003c38 <_printf_common+0xac>
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	3501      	adds	r5, #1
 8003c3a:	e7c6      	b.n	8003bca <_printf_common+0x3e>
 8003c3c:	18e1      	adds	r1, r4, r3
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	2030      	movs	r0, #48	; 0x30
 8003c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c46:	4422      	add	r2, r4
 8003c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c50:	3302      	adds	r3, #2
 8003c52:	e7c7      	b.n	8003be4 <_printf_common+0x58>
 8003c54:	2301      	movs	r3, #1
 8003c56:	4622      	mov	r2, r4
 8003c58:	4649      	mov	r1, r9
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	47c0      	blx	r8
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d0e6      	beq.n	8003c30 <_printf_common+0xa4>
 8003c62:	3601      	adds	r6, #1
 8003c64:	e7d9      	b.n	8003c1a <_printf_common+0x8e>
	...

08003c68 <_printf_i>:
 8003c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	7e0f      	ldrb	r7, [r1, #24]
 8003c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c70:	2f78      	cmp	r7, #120	; 0x78
 8003c72:	4691      	mov	r9, r2
 8003c74:	4680      	mov	r8, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	469a      	mov	sl, r3
 8003c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c7e:	d807      	bhi.n	8003c90 <_printf_i+0x28>
 8003c80:	2f62      	cmp	r7, #98	; 0x62
 8003c82:	d80a      	bhi.n	8003c9a <_printf_i+0x32>
 8003c84:	2f00      	cmp	r7, #0
 8003c86:	f000 80d8 	beq.w	8003e3a <_printf_i+0x1d2>
 8003c8a:	2f58      	cmp	r7, #88	; 0x58
 8003c8c:	f000 80a3 	beq.w	8003dd6 <_printf_i+0x16e>
 8003c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c98:	e03a      	b.n	8003d10 <_printf_i+0xa8>
 8003c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c9e:	2b15      	cmp	r3, #21
 8003ca0:	d8f6      	bhi.n	8003c90 <_printf_i+0x28>
 8003ca2:	a101      	add	r1, pc, #4	; (adr r1, 8003ca8 <_printf_i+0x40>)
 8003ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ca8:	08003d01 	.word	0x08003d01
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003c91 	.word	0x08003c91
 8003cb4:	08003c91 	.word	0x08003c91
 8003cb8:	08003c91 	.word	0x08003c91
 8003cbc:	08003c91 	.word	0x08003c91
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003c91 	.word	0x08003c91
 8003cc8:	08003c91 	.word	0x08003c91
 8003ccc:	08003c91 	.word	0x08003c91
 8003cd0:	08003c91 	.word	0x08003c91
 8003cd4:	08003e21 	.word	0x08003e21
 8003cd8:	08003d45 	.word	0x08003d45
 8003cdc:	08003e03 	.word	0x08003e03
 8003ce0:	08003c91 	.word	0x08003c91
 8003ce4:	08003c91 	.word	0x08003c91
 8003ce8:	08003e43 	.word	0x08003e43
 8003cec:	08003c91 	.word	0x08003c91
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003c91 	.word	0x08003c91
 8003cf8:	08003c91 	.word	0x08003c91
 8003cfc:	08003e0b 	.word	0x08003e0b
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	602a      	str	r2, [r5, #0]
 8003d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0a3      	b.n	8003e5c <_printf_i+0x1f4>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	6829      	ldr	r1, [r5, #0]
 8003d18:	0606      	lsls	r6, r0, #24
 8003d1a:	f101 0304 	add.w	r3, r1, #4
 8003d1e:	d50a      	bpl.n	8003d36 <_printf_i+0xce>
 8003d20:	680e      	ldr	r6, [r1, #0]
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	2e00      	cmp	r6, #0
 8003d26:	da03      	bge.n	8003d30 <_printf_i+0xc8>
 8003d28:	232d      	movs	r3, #45	; 0x2d
 8003d2a:	4276      	negs	r6, r6
 8003d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d30:	485e      	ldr	r0, [pc, #376]	; (8003eac <_printf_i+0x244>)
 8003d32:	230a      	movs	r3, #10
 8003d34:	e019      	b.n	8003d6a <_printf_i+0x102>
 8003d36:	680e      	ldr	r6, [r1, #0]
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d3e:	bf18      	it	ne
 8003d40:	b236      	sxthne	r6, r6
 8003d42:	e7ef      	b.n	8003d24 <_printf_i+0xbc>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	1d19      	adds	r1, r3, #4
 8003d4a:	6029      	str	r1, [r5, #0]
 8003d4c:	0601      	lsls	r1, r0, #24
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0xec>
 8003d50:	681e      	ldr	r6, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <_printf_i+0xf2>
 8003d54:	0646      	lsls	r6, r0, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0xe8>
 8003d58:	881e      	ldrh	r6, [r3, #0]
 8003d5a:	4854      	ldr	r0, [pc, #336]	; (8003eac <_printf_i+0x244>)
 8003d5c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d5e:	bf0c      	ite	eq
 8003d60:	2308      	moveq	r3, #8
 8003d62:	230a      	movne	r3, #10
 8003d64:	2100      	movs	r1, #0
 8003d66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d6a:	6865      	ldr	r5, [r4, #4]
 8003d6c:	60a5      	str	r5, [r4, #8]
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	bfa2      	ittt	ge
 8003d72:	6821      	ldrge	r1, [r4, #0]
 8003d74:	f021 0104 	bicge.w	r1, r1, #4
 8003d78:	6021      	strge	r1, [r4, #0]
 8003d7a:	b90e      	cbnz	r6, 8003d80 <_printf_i+0x118>
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	d04d      	beq.n	8003e1c <_printf_i+0x1b4>
 8003d80:	4615      	mov	r5, r2
 8003d82:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d86:	fb03 6711 	mls	r7, r3, r1, r6
 8003d8a:	5dc7      	ldrb	r7, [r0, r7]
 8003d8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d90:	4637      	mov	r7, r6
 8003d92:	42bb      	cmp	r3, r7
 8003d94:	460e      	mov	r6, r1
 8003d96:	d9f4      	bls.n	8003d82 <_printf_i+0x11a>
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10b      	bne.n	8003db4 <_printf_i+0x14c>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	07de      	lsls	r6, r3, #31
 8003da0:	d508      	bpl.n	8003db4 <_printf_i+0x14c>
 8003da2:	6923      	ldr	r3, [r4, #16]
 8003da4:	6861      	ldr	r1, [r4, #4]
 8003da6:	4299      	cmp	r1, r3
 8003da8:	bfde      	ittt	le
 8003daa:	2330      	movle	r3, #48	; 0x30
 8003dac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003db0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db4:	1b52      	subs	r2, r2, r5
 8003db6:	6122      	str	r2, [r4, #16]
 8003db8:	f8cd a000 	str.w	sl, [sp]
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	aa03      	add	r2, sp, #12
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f7ff fee2 	bl	8003b8c <_printf_common>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d14c      	bne.n	8003e66 <_printf_i+0x1fe>
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	b004      	add	sp, #16
 8003dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd6:	4835      	ldr	r0, [pc, #212]	; (8003eac <_printf_i+0x244>)
 8003dd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ddc:	6829      	ldr	r1, [r5, #0]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003de4:	6029      	str	r1, [r5, #0]
 8003de6:	061d      	lsls	r5, r3, #24
 8003de8:	d514      	bpl.n	8003e14 <_printf_i+0x1ac>
 8003dea:	07df      	lsls	r7, r3, #31
 8003dec:	bf44      	itt	mi
 8003dee:	f043 0320 	orrmi.w	r3, r3, #32
 8003df2:	6023      	strmi	r3, [r4, #0]
 8003df4:	b91e      	cbnz	r6, 8003dfe <_printf_i+0x196>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	f023 0320 	bic.w	r3, r3, #32
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	2310      	movs	r3, #16
 8003e00:	e7b0      	b.n	8003d64 <_printf_i+0xfc>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	2378      	movs	r3, #120	; 0x78
 8003e0c:	4828      	ldr	r0, [pc, #160]	; (8003eb0 <_printf_i+0x248>)
 8003e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e12:	e7e3      	b.n	8003ddc <_printf_i+0x174>
 8003e14:	0659      	lsls	r1, r3, #25
 8003e16:	bf48      	it	mi
 8003e18:	b2b6      	uxthmi	r6, r6
 8003e1a:	e7e6      	b.n	8003dea <_printf_i+0x182>
 8003e1c:	4615      	mov	r5, r2
 8003e1e:	e7bb      	b.n	8003d98 <_printf_i+0x130>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	6826      	ldr	r6, [r4, #0]
 8003e24:	6961      	ldr	r1, [r4, #20]
 8003e26:	1d18      	adds	r0, r3, #4
 8003e28:	6028      	str	r0, [r5, #0]
 8003e2a:	0635      	lsls	r5, r6, #24
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	d501      	bpl.n	8003e34 <_printf_i+0x1cc>
 8003e30:	6019      	str	r1, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <_printf_i+0x1d2>
 8003e34:	0670      	lsls	r0, r6, #25
 8003e36:	d5fb      	bpl.n	8003e30 <_printf_i+0x1c8>
 8003e38:	8019      	strh	r1, [r3, #0]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	4615      	mov	r5, r2
 8003e40:	e7ba      	b.n	8003db8 <_printf_i+0x150>
 8003e42:	682b      	ldr	r3, [r5, #0]
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	602a      	str	r2, [r5, #0]
 8003e48:	681d      	ldr	r5, [r3, #0]
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f7fc f9ce 	bl	80001f0 <memchr>
 8003e54:	b108      	cbz	r0, 8003e5a <_printf_i+0x1f2>
 8003e56:	1b40      	subs	r0, r0, r5
 8003e58:	6060      	str	r0, [r4, #4]
 8003e5a:	6863      	ldr	r3, [r4, #4]
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e64:	e7a8      	b.n	8003db8 <_printf_i+0x150>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	47d0      	blx	sl
 8003e70:	3001      	adds	r0, #1
 8003e72:	d0ab      	beq.n	8003dcc <_printf_i+0x164>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	d413      	bmi.n	8003ea2 <_printf_i+0x23a>
 8003e7a:	68e0      	ldr	r0, [r4, #12]
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	bfb8      	it	lt
 8003e82:	4618      	movlt	r0, r3
 8003e84:	e7a4      	b.n	8003dd0 <_printf_i+0x168>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d09b      	beq.n	8003dcc <_printf_i+0x164>
 8003e94:	3501      	adds	r5, #1
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	9903      	ldr	r1, [sp, #12]
 8003e9a:	1a5b      	subs	r3, r3, r1
 8003e9c:	42ab      	cmp	r3, r5
 8003e9e:	dcf2      	bgt.n	8003e86 <_printf_i+0x21e>
 8003ea0:	e7eb      	b.n	8003e7a <_printf_i+0x212>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	f104 0619 	add.w	r6, r4, #25
 8003ea8:	e7f5      	b.n	8003e96 <_printf_i+0x22e>
 8003eaa:	bf00      	nop
 8003eac:	08004189 	.word	0x08004189
 8003eb0:	0800419a 	.word	0x0800419a

08003eb4 <_sbrk_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d06      	ldr	r5, [pc, #24]	; (8003ed0 <_sbrk_r+0x1c>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	602b      	str	r3, [r5, #0]
 8003ec0:	f7fd f89c 	bl	8000ffc <_sbrk>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_sbrk_r+0x1a>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_sbrk_r+0x1a>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	2000013c 	.word	0x2000013c

08003ed4 <__sread>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	f000 f8a0 	bl	8004020 <_read_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	bfab      	itete	ge
 8003ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee8:	181b      	addge	r3, r3, r0
 8003eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eee:	bfac      	ite	ge
 8003ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ef2:	81a3      	strhlt	r3, [r4, #12]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__swrite>:
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	461f      	mov	r7, r3
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	05db      	lsls	r3, r3, #23
 8003f00:	4605      	mov	r5, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d505      	bpl.n	8003f14 <__swrite+0x1e>
 8003f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f000 f868 	bl	8003fe4 <_lseek_r>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	4632      	mov	r2, r6
 8003f22:	463b      	mov	r3, r7
 8003f24:	4628      	mov	r0, r5
 8003f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	f000 b817 	b.w	8003f5c <_write_r>

08003f2e <__sseek>:
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f36:	f000 f855 	bl	8003fe4 <_lseek_r>
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	bf15      	itete	ne
 8003f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f4a:	81a3      	strheq	r3, [r4, #12]
 8003f4c:	bf18      	it	ne
 8003f4e:	81a3      	strhne	r3, [r4, #12]
 8003f50:	bd10      	pop	{r4, pc}

08003f52 <__sclose>:
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 b813 	b.w	8003f80 <_close_r>
	...

08003f5c <_write_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d07      	ldr	r5, [pc, #28]	; (8003f7c <_write_r+0x20>)
 8003f60:	4604      	mov	r4, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fc fff5 	bl	8000f5a <_write>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_write_r+0x1e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_write_r+0x1e>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	2000013c 	.word	0x2000013c

08003f80 <_close_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d06      	ldr	r5, [pc, #24]	; (8003f9c <_close_r+0x1c>)
 8003f84:	2300      	movs	r3, #0
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fd f801 	bl	8000f92 <_close>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_close_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_close_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	2000013c 	.word	0x2000013c

08003fa0 <_fstat_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4d07      	ldr	r5, [pc, #28]	; (8003fc0 <_fstat_r+0x20>)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	602b      	str	r3, [r5, #0]
 8003fae:	f7fc fffc 	bl	8000faa <_fstat>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	d102      	bne.n	8003fbc <_fstat_r+0x1c>
 8003fb6:	682b      	ldr	r3, [r5, #0]
 8003fb8:	b103      	cbz	r3, 8003fbc <_fstat_r+0x1c>
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000013c 	.word	0x2000013c

08003fc4 <_isatty_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d06      	ldr	r5, [pc, #24]	; (8003fe0 <_isatty_r+0x1c>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	f7fc fffb 	bl	8000fca <_isatty>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_isatty_r+0x1a>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_isatty_r+0x1a>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	2000013c 	.word	0x2000013c

08003fe4 <_lseek_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_lseek_r+0x20>)
 8003fe8:	4604      	mov	r4, r0
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fc fff4 	bl	8000fe0 <_lseek>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_lseek_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_lseek_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	2000013c 	.word	0x2000013c

08004008 <__malloc_lock>:
 8004008:	4801      	ldr	r0, [pc, #4]	; (8004010 <__malloc_lock+0x8>)
 800400a:	f7ff bb1d 	b.w	8003648 <__retarget_lock_acquire_recursive>
 800400e:	bf00      	nop
 8004010:	20000130 	.word	0x20000130

08004014 <__malloc_unlock>:
 8004014:	4801      	ldr	r0, [pc, #4]	; (800401c <__malloc_unlock+0x8>)
 8004016:	f7ff bb18 	b.w	800364a <__retarget_lock_release_recursive>
 800401a:	bf00      	nop
 800401c:	20000130 	.word	0x20000130

08004020 <_read_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4d07      	ldr	r5, [pc, #28]	; (8004040 <_read_r+0x20>)
 8004024:	4604      	mov	r4, r0
 8004026:	4608      	mov	r0, r1
 8004028:	4611      	mov	r1, r2
 800402a:	2200      	movs	r2, #0
 800402c:	602a      	str	r2, [r5, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f7fc ff76 	bl	8000f20 <_read>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_read_r+0x1e>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_read_r+0x1e>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	2000013c 	.word	0x2000013c

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
